
First_Step_Diplom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007088  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e0  08007198  08007198  00017198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007978  08007978  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007978  08007978  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007978  08007978  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007978  08007978  00017978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800797c  0800797c  0001797c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f90  20000078  080079f8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003008  080079f8  00023008  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d65a  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c39  00000000  00000000  0003d6fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  00041338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001570  00000000  00000000  00042a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ddc  00000000  00000000  00043f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018efc  00000000  00000000  00048d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098197  00000000  00000000  00061c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9ddf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006610  00000000  00000000  000f9e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08007180 	.word	0x08007180

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08007180 	.word	0x08007180

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_frsub>:
 80002c8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__addsf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_fsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002d4 <__addsf3>:
 80002d4:	0042      	lsls	r2, r0, #1
 80002d6:	bf1f      	itttt	ne
 80002d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002dc:	ea92 0f03 	teqne	r2, r3
 80002e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e8:	d06a      	beq.n	80003c0 <__addsf3+0xec>
 80002ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002f2:	bfc1      	itttt	gt
 80002f4:	18d2      	addgt	r2, r2, r3
 80002f6:	4041      	eorgt	r1, r0
 80002f8:	4048      	eorgt	r0, r1
 80002fa:	4041      	eorgt	r1, r0
 80002fc:	bfb8      	it	lt
 80002fe:	425b      	neglt	r3, r3
 8000300:	2b19      	cmp	r3, #25
 8000302:	bf88      	it	hi
 8000304:	4770      	bxhi	lr
 8000306:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800030a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800030e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000312:	bf18      	it	ne
 8000314:	4240      	negne	r0, r0
 8000316:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800031e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000322:	bf18      	it	ne
 8000324:	4249      	negne	r1, r1
 8000326:	ea92 0f03 	teq	r2, r3
 800032a:	d03f      	beq.n	80003ac <__addsf3+0xd8>
 800032c:	f1a2 0201 	sub.w	r2, r2, #1
 8000330:	fa41 fc03 	asr.w	ip, r1, r3
 8000334:	eb10 000c 	adds.w	r0, r0, ip
 8000338:	f1c3 0320 	rsb	r3, r3, #32
 800033c:	fa01 f103 	lsl.w	r1, r1, r3
 8000340:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000344:	d502      	bpl.n	800034c <__addsf3+0x78>
 8000346:	4249      	negs	r1, r1
 8000348:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800034c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000350:	d313      	bcc.n	800037a <__addsf3+0xa6>
 8000352:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000356:	d306      	bcc.n	8000366 <__addsf3+0x92>
 8000358:	0840      	lsrs	r0, r0, #1
 800035a:	ea4f 0131 	mov.w	r1, r1, rrx
 800035e:	f102 0201 	add.w	r2, r2, #1
 8000362:	2afe      	cmp	r2, #254	; 0xfe
 8000364:	d251      	bcs.n	800040a <__addsf3+0x136>
 8000366:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800036a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800036e:	bf08      	it	eq
 8000370:	f020 0001 	biceq.w	r0, r0, #1
 8000374:	ea40 0003 	orr.w	r0, r0, r3
 8000378:	4770      	bx	lr
 800037a:	0049      	lsls	r1, r1, #1
 800037c:	eb40 0000 	adc.w	r0, r0, r0
 8000380:	3a01      	subs	r2, #1
 8000382:	bf28      	it	cs
 8000384:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000388:	d2ed      	bcs.n	8000366 <__addsf3+0x92>
 800038a:	fab0 fc80 	clz	ip, r0
 800038e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000392:	ebb2 020c 	subs.w	r2, r2, ip
 8000396:	fa00 f00c 	lsl.w	r0, r0, ip
 800039a:	bfaa      	itet	ge
 800039c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003a0:	4252      	neglt	r2, r2
 80003a2:	4318      	orrge	r0, r3
 80003a4:	bfbc      	itt	lt
 80003a6:	40d0      	lsrlt	r0, r2
 80003a8:	4318      	orrlt	r0, r3
 80003aa:	4770      	bx	lr
 80003ac:	f092 0f00 	teq	r2, #0
 80003b0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003b4:	bf06      	itte	eq
 80003b6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003ba:	3201      	addeq	r2, #1
 80003bc:	3b01      	subne	r3, #1
 80003be:	e7b5      	b.n	800032c <__addsf3+0x58>
 80003c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c8:	bf18      	it	ne
 80003ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ce:	d021      	beq.n	8000414 <__addsf3+0x140>
 80003d0:	ea92 0f03 	teq	r2, r3
 80003d4:	d004      	beq.n	80003e0 <__addsf3+0x10c>
 80003d6:	f092 0f00 	teq	r2, #0
 80003da:	bf08      	it	eq
 80003dc:	4608      	moveq	r0, r1
 80003de:	4770      	bx	lr
 80003e0:	ea90 0f01 	teq	r0, r1
 80003e4:	bf1c      	itt	ne
 80003e6:	2000      	movne	r0, #0
 80003e8:	4770      	bxne	lr
 80003ea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003ee:	d104      	bne.n	80003fa <__addsf3+0x126>
 80003f0:	0040      	lsls	r0, r0, #1
 80003f2:	bf28      	it	cs
 80003f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003f8:	4770      	bx	lr
 80003fa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003fe:	bf3c      	itt	cc
 8000400:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000404:	4770      	bxcc	lr
 8000406:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800040a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800040e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000412:	4770      	bx	lr
 8000414:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000418:	bf16      	itet	ne
 800041a:	4608      	movne	r0, r1
 800041c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000420:	4601      	movne	r1, r0
 8000422:	0242      	lsls	r2, r0, #9
 8000424:	bf06      	itte	eq
 8000426:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800042a:	ea90 0f01 	teqeq	r0, r1
 800042e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000432:	4770      	bx	lr

08000434 <__aeabi_ui2f>:
 8000434:	f04f 0300 	mov.w	r3, #0
 8000438:	e004      	b.n	8000444 <__aeabi_i2f+0x8>
 800043a:	bf00      	nop

0800043c <__aeabi_i2f>:
 800043c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000440:	bf48      	it	mi
 8000442:	4240      	negmi	r0, r0
 8000444:	ea5f 0c00 	movs.w	ip, r0
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000450:	4601      	mov	r1, r0
 8000452:	f04f 0000 	mov.w	r0, #0
 8000456:	e01c      	b.n	8000492 <__aeabi_l2f+0x2a>

08000458 <__aeabi_ul2f>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	f04f 0300 	mov.w	r3, #0
 8000464:	e00a      	b.n	800047c <__aeabi_l2f+0x14>
 8000466:	bf00      	nop

08000468 <__aeabi_l2f>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000474:	d502      	bpl.n	800047c <__aeabi_l2f+0x14>
 8000476:	4240      	negs	r0, r0
 8000478:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047c:	ea5f 0c01 	movs.w	ip, r1
 8000480:	bf02      	ittt	eq
 8000482:	4684      	moveq	ip, r0
 8000484:	4601      	moveq	r1, r0
 8000486:	2000      	moveq	r0, #0
 8000488:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800048c:	bf08      	it	eq
 800048e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000492:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000496:	fabc f28c 	clz	r2, ip
 800049a:	3a08      	subs	r2, #8
 800049c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004a0:	db10      	blt.n	80004c4 <__aeabi_l2f+0x5c>
 80004a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80004a6:	4463      	add	r3, ip
 80004a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80004ac:	f1c2 0220 	rsb	r2, r2, #32
 80004b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004b4:	fa20 f202 	lsr.w	r2, r0, r2
 80004b8:	eb43 0002 	adc.w	r0, r3, r2
 80004bc:	bf08      	it	eq
 80004be:	f020 0001 	biceq.w	r0, r0, #1
 80004c2:	4770      	bx	lr
 80004c4:	f102 0220 	add.w	r2, r2, #32
 80004c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80004cc:	f1c2 0220 	rsb	r2, r2, #32
 80004d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004d4:	fa21 f202 	lsr.w	r2, r1, r2
 80004d8:	eb43 0002 	adc.w	r0, r3, r2
 80004dc:	bf08      	it	eq
 80004de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004e2:	4770      	bx	lr

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fc16 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f832 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f8d6 	bl	80006a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f4:	f000 f8aa 	bl	800064c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80004f8:	f000 f872 	bl	80005e0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fc:	f003 fa60 	bl	80039c0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Output_Queue */
  Output_QueueHandle = osMessageQueueNew (1, sizeof(float), &Output_Queue_attributes);
 8000500:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <main+0x54>)
 8000502:	2104      	movs	r1, #4
 8000504:	2001      	movs	r0, #1
 8000506:	f003 fb6b 	bl	8003be0 <osMessageQueueNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <main+0x58>)
 800050e:	6013      	str	r3, [r2, #0]

  /* creation of Input_Queue */
  Input_QueueHandle = osMessageQueueNew (1, sizeof(float), &Input_Queue_attributes);
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <main+0x5c>)
 8000512:	2104      	movs	r1, #4
 8000514:	2001      	movs	r0, #1
 8000516:	f003 fb63 	bl	8003be0 <osMessageQueueNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a09      	ldr	r2, [pc, #36]	; (8000544 <main+0x60>)
 800051e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(ADXL345_Data_Collector_Task, NULL, &defaultTask_attributes);
 8000520:	4a09      	ldr	r2, [pc, #36]	; (8000548 <main+0x64>)
 8000522:	2100      	movs	r1, #0
 8000524:	4809      	ldr	r0, [pc, #36]	; (800054c <main+0x68>)
 8000526:	f003 fab1 	bl	8003a8c <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a08      	ldr	r2, [pc, #32]	; (8000550 <main+0x6c>)
 800052e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000530:	f003 fa78 	bl	8003a24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0x50>
 8000536:	bf00      	nop
 8000538:	08007230 	.word	0x08007230
 800053c:	20002f20 	.word	0x20002f20
 8000540:	08007248 	.word	0x08007248
 8000544:	20002f24 	.word	0x20002f24
 8000548:	0800720c 	.word	0x0800720c
 800054c:	08000831 	.word	0x08000831
 8000550:	20002ec4 	.word	0x20002ec4

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b090      	sub	sp, #64	; 0x40
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0318 	add.w	r3, r7, #24
 800055e:	2228      	movs	r2, #40	; 0x28
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f006 f8c3 	bl	80066ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000576:	2301      	movs	r3, #1
 8000578:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800057a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800057e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000592:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0318 	add.w	r3, r7, #24
 800059c:	4618      	mov	r0, r3
 800059e:	f000 ff3b 	bl	8001418 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005a8:	f000 f998 	bl	80008dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2102      	movs	r1, #2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 f9a6 	bl	8001918 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005d2:	f000 f983 	bl	80008dc <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3740      	adds	r7, #64	; 0x40
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005e4:	4b17      	ldr	r3, [pc, #92]	; (8000644 <MX_SPI2_Init+0x64>)
 80005e6:	4a18      	ldr	r2, [pc, #96]	; (8000648 <MX_SPI2_Init+0x68>)
 80005e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <MX_SPI2_Init+0x64>)
 80005ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_SPI2_Init+0x64>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_SPI2_Init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_SPI2_Init+0x64>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_SPI2_Init+0x64>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_SPI2_Init+0x64>)
 800060c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000610:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_SPI2_Init+0x64>)
 8000614:	2218      	movs	r2, #24
 8000616:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_SPI2_Init+0x64>)
 800061a:	2200      	movs	r2, #0
 800061c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_SPI2_Init+0x64>)
 8000620:	2200      	movs	r2, #0
 8000622:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <MX_SPI2_Init+0x64>)
 8000626:	2200      	movs	r2, #0
 8000628:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_SPI2_Init+0x64>)
 800062c:	220a      	movs	r2, #10
 800062e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_SPI2_Init+0x64>)
 8000632:	f001 fb3b 	bl	8001cac <HAL_SPI_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800063c:	f000 f94e 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20002ec8 	.word	0x20002ec8
 8000648:	40003800 	.word	0x40003800

0800064c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_USART2_UART_Init+0x50>)
 8000654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000684:	f002 fc04 	bl	8002e90 <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800068e:	f000 f925 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20002f28 	.word	0x20002f28
 800069c:	40004400 	.word	0x40004400

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <MX_GPIO_Init+0xf4>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a36      	ldr	r2, [pc, #216]	; (8000794 <MX_GPIO_Init+0xf4>)
 80006ba:	f043 0310 	orr.w	r3, r3, #16
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <MX_GPIO_Init+0xf4>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0310 	and.w	r3, r3, #16
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006cc:	4b31      	ldr	r3, [pc, #196]	; (8000794 <MX_GPIO_Init+0xf4>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a30      	ldr	r2, [pc, #192]	; (8000794 <MX_GPIO_Init+0xf4>)
 80006d2:	f043 0320 	orr.w	r3, r3, #32
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <MX_GPIO_Init+0xf4>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0320 	and.w	r3, r3, #32
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <MX_GPIO_Init+0xf4>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a2a      	ldr	r2, [pc, #168]	; (8000794 <MX_GPIO_Init+0xf4>)
 80006ea:	f043 0304 	orr.w	r3, r3, #4
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <MX_GPIO_Init+0xf4>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <MX_GPIO_Init+0xf4>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a24      	ldr	r2, [pc, #144]	; (8000794 <MX_GPIO_Init+0xf4>)
 8000702:	f043 0308 	orr.w	r3, r3, #8
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <MX_GPIO_Init+0xf4>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0308 	and.w	r3, r3, #8
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2120      	movs	r1, #32
 8000718:	481f      	ldr	r0, [pc, #124]	; (8000798 <MX_GPIO_Init+0xf8>)
 800071a:	f000 fe43 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2140      	movs	r1, #64	; 0x40
 8000722:	481e      	ldr	r0, [pc, #120]	; (800079c <MX_GPIO_Init+0xfc>)
 8000724:	f000 fe3e 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_GPIO_Init+0x100>)
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4619      	mov	r1, r3
 800073c:	4819      	ldr	r0, [pc, #100]	; (80007a4 <MX_GPIO_Init+0x104>)
 800073e:	f000 fcad 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_Pin */
  GPIO_InitStruct.Pin = Green_Pin;
 8000742:	2320      	movs	r3, #32
 8000744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2302      	movs	r3, #2
 8000750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Green_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	4619      	mov	r1, r3
 8000758:	480f      	ldr	r0, [pc, #60]	; (8000798 <MX_GPIO_Init+0xf8>)
 800075a:	f000 fc9f 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800075e:	2340      	movs	r3, #64	; 0x40
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076a:	2303      	movs	r3, #3
 800076c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4619      	mov	r1, r3
 8000774:	4809      	ldr	r0, [pc, #36]	; (800079c <MX_GPIO_Init+0xfc>)
 8000776:	f000 fc91 	bl	800109c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2105      	movs	r1, #5
 800077e:	2028      	movs	r0, #40	; 0x28
 8000780:	f000 fbb1 	bl	8000ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000784:	2028      	movs	r0, #40	; 0x28
 8000786:	f000 fbca 	bl	8000f1e <HAL_NVIC_EnableIRQ>

}
 800078a:	bf00      	nop
 800078c:	3720      	adds	r7, #32
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000
 8000798:	40010800 	.word	0x40010800
 800079c:	40010c00 	.word	0x40010c00
 80007a0:	10110000 	.word	0x10110000
 80007a4:	40011000 	.word	0x40011000

080007a8 <ADXL345_Config>:

/* USER CODE BEGIN 4 */
void ADXL345_Config()
{
 80007a8:	b5b0      	push	{r4, r5, r7, lr}
 80007aa:	b098      	sub	sp, #96	; 0x60
 80007ac:	af14      	add	r7, sp, #80	; 0x50
	ADXL_ConfigTypeDef_t ADXL 					=	{0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	811a      	strh	r2, [r3, #8]

	ADXL.PowerMode 								= 	NormalPower;
 80007b8:	2300      	movs	r3, #0
 80007ba:	713b      	strb	r3, [r7, #4]
	ADXL.BWRate	 								=	BWRATE_1600;
 80007bc:	230e      	movs	r3, #14
 80007be:	717b      	strb	r3, [r7, #5]
	ADXL.WakeUpRate 							=	WakeUpRate_8;
 80007c0:	2300      	movs	r3, #0
 80007c2:	71bb      	strb	r3, [r7, #6]
	ADXL.AutoSleepConfig.AutoSleep 				=	AutoSleepOFF;
 80007c4:	2300      	movs	r3, #0
 80007c6:	71fb      	strb	r3, [r7, #7]
	ADXL.AutoSleepConfig.ThreshInact 			=	10;
 80007c8:	230a      	movs	r3, #10
 80007ca:	723b      	strb	r3, [r7, #8]
	ADXL.AutoSleepConfig.TimeInact				=	10;
 80007cc:	230a      	movs	r3, #10
 80007ce:	727b      	strb	r3, [r7, #9]
	ADXL.Format.Resolution 						=	RESFULL;
 80007d0:	2308      	movs	r3, #8
 80007d2:	72bb      	strb	r3, [r7, #10]
	ADXL.Format.Range	 						=	RANGE_16G;
 80007d4:	2303      	movs	r3, #3
 80007d6:	72fb      	strb	r3, [r7, #11]
	ADXL.Format.IntInvert 						=	ACTIVE_HIGH;
 80007d8:	2300      	movs	r3, #0
 80007da:	733b      	strb	r3, [r7, #12]
	ADXL.Format.SPI_Mode 						=	FORE_WIRE_MODE;
 80007dc:	2300      	movs	r3, #0
 80007de:	737b      	strb	r3, [r7, #13]
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2140      	movs	r1, #64	; 0x40
 80007e4:	480f      	ldr	r0, [pc, #60]	; (8000824 <ADXL345_Config+0x7c>)
 80007e6:	f000 fddd 	bl	80013a4 <HAL_GPIO_WritePin>
#ifdef 	Debug_Active
	ADXL_Status ADXLStatus 						= 	ADXL345_Init(&ADXL, hspi2);
 80007ea:	4c0f      	ldr	r4, [pc, #60]	; (8000828 <ADXL345_Config+0x80>)
 80007ec:	1d3d      	adds	r5, r7, #4
 80007ee:	4668      	mov	r0, sp
 80007f0:	f104 030c 	add.w	r3, r4, #12
 80007f4:	224c      	movs	r2, #76	; 0x4c
 80007f6:	4619      	mov	r1, r3
 80007f8:	f005 ff6b 	bl	80066d2 <memcpy>
 80007fc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000800:	4628      	mov	r0, r5
 8000802:	f002 ffc1 	bl	8003788 <ADXL345_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	73fb      	strb	r3, [r7, #15]
	if (ADXLStatus == ADXL_ERR)
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d103      	bne.n	8000818 <ADXL345_Config+0x70>
	{
		perror("Error: Accelerometer is not found");
 8000810:	4806      	ldr	r0, [pc, #24]	; (800082c <ADXL345_Config+0x84>)
 8000812:	f006 f869 	bl	80068e8 <perror>
		while(1)
 8000816:	e7fe      	b.n	8000816 <ADXL345_Config+0x6e>
	{
		ADXLStatus 					= 	ADXL345_Init(ADXL, hspi2);
	}
#endif

	ADXL345_MeasureON();
 8000818:	f003 f8b4 	bl	8003984 <ADXL345_MeasureON>

}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bdb0      	pop	{r4, r5, r7, pc}
 8000824:	40010c00 	.word	0x40010c00
 8000828:	20002ec8 	.word	0x20002ec8
 800082c:	080071c0 	.word	0x080071c0

08000830 <ADXL345_Data_Collector_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ADXL345_Data_Collector_Task */
void ADXL345_Data_Collector_Task(void *argument)
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	3b0c      	subs	r3, #12
 8000840:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

	ADXL345_Config();
 8000842:	f7ff ffb1 	bl	80007a8 <ADXL345_Config>

	float	Signal[Length_Realization] 			=	{0};
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	3b04      	subs	r3, #4
 800084c:	4618      	mov	r0, r3
 800084e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000852:	461a      	mov	r2, r3
 8000854:	2100      	movs	r1, #0
 8000856:	f005 ff4a 	bl	80066ee <memset>

	//UART_Cobs_Config( (QueueHandle_t) Input_QueueHandle, (QueueHandle_t) Output_QueueHandle);

	/* Infinite loop */
	for(uint16_t Index_Count = 0;; Index_Count++)
 800085a:	2300      	movs	r3, #0
 800085c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000860:	f102 020e 	add.w	r2, r2, #14
 8000864:	8013      	strh	r3, [r2, #0]
	{
		//	Записать данные в очередь, когдв буфер переполниться
		if (Index_Count > Length_Realization)
 8000866:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800086a:	f103 030e 	add.w	r3, r3, #14
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000874:	d905      	bls.n	8000882 <ADXL345_Data_Collector_Task+0x52>
		{
			Index_Count = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800087c:	f102 020e 	add.w	r2, r2, #14
 8000880:	8013      	strh	r3, [r2, #0]

		}

		Signal[Index_Count] 					=	ADXL345_GetGValue(Zaxis);
 8000882:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000886:	f103 030e 	add.w	r3, r3, #14
 800088a:	881c      	ldrh	r4, [r3, #0]
 800088c:	2036      	movs	r0, #54	; 0x36
 800088e:	f003 f857 	bl	8003940 <ADXL345_GetGValue>
 8000892:	4602      	mov	r2, r0
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	3b04      	subs	r3, #4
 800089a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for(uint16_t Index_Count = 0;; Index_Count++)
 800089e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80008a2:	f103 030e 	add.w	r3, r3, #14
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80008ae:	f102 020e 	add.w	r2, r2, #14
 80008b2:	8013      	strh	r3, [r2, #0]
		if (Index_Count > Length_Realization)
 80008b4:	e7d7      	b.n	8000866 <ADXL345_Data_Collector_Task+0x36>
	...

080008b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d101      	bne.n	80008ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ca:	f000 fa3b 	bl	8000d44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40000800 	.word	0x40000800

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <Error_Handler+0x8>
	...

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <HAL_MspInit+0x68>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	4a17      	ldr	r2, [pc, #92]	; (8000950 <HAL_MspInit+0x68>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6193      	str	r3, [r2, #24]
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <HAL_MspInit+0x68>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_MspInit+0x68>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	4a11      	ldr	r2, [pc, #68]	; (8000950 <HAL_MspInit+0x68>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	61d3      	str	r3, [r2, #28]
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <HAL_MspInit+0x68>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	210f      	movs	r1, #15
 8000922:	f06f 0001 	mvn.w	r0, #1
 8000926:	f000 fade 	bl	8000ee6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_MspInit+0x6c>)
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_MspInit+0x6c>)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000
 8000954:	40010000 	.word	0x40010000

08000958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a20      	ldr	r2, [pc, #128]	; (80009f4 <HAL_SPI_MspInit+0x9c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d139      	bne.n	80009ec <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <HAL_SPI_MspInit+0xa0>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	4a1e      	ldr	r2, [pc, #120]	; (80009f8 <HAL_SPI_MspInit+0xa0>)
 800097e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000982:	61d3      	str	r3, [r2, #28]
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <HAL_SPI_MspInit+0xa0>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <HAL_SPI_MspInit+0xa0>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a18      	ldr	r2, [pc, #96]	; (80009f8 <HAL_SPI_MspInit+0xa0>)
 8000996:	f043 0308 	orr.w	r3, r3, #8
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <HAL_SPI_MspInit+0xa0>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0308 	and.w	r3, r3, #8
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80009a8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80009ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	4619      	mov	r1, r3
 80009bc:	480f      	ldr	r0, [pc, #60]	; (80009fc <HAL_SPI_MspInit+0xa4>)
 80009be:	f000 fb6d 	bl	800109c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80009c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	4809      	ldr	r0, [pc, #36]	; (80009fc <HAL_SPI_MspInit+0xa4>)
 80009d8:	f000 fb60 	bl	800109c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2105      	movs	r1, #5
 80009e0:	2024      	movs	r0, #36	; 0x24
 80009e2:	f000 fa80 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80009e6:	2024      	movs	r0, #36	; 0x24
 80009e8:	f000 fa99 	bl	8000f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	3720      	adds	r7, #32
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40003800 	.word	0x40003800
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40010c00 	.word	0x40010c00

08000a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <HAL_UART_MspInit+0x80>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d12b      	bne.n	8000a78 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_UART_MspInit+0x84>)
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <HAL_UART_MspInit+0x84>)
 8000a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2a:	61d3      	str	r3, [r2, #28]
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_UART_MspInit+0x84>)
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_UART_MspInit+0x84>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a11      	ldr	r2, [pc, #68]	; (8000a84 <HAL_UART_MspInit+0x84>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <HAL_UART_MspInit+0x84>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a50:	230c      	movs	r3, #12
 8000a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4619      	mov	r1, r3
 8000a62:	4809      	ldr	r0, [pc, #36]	; (8000a88 <HAL_UART_MspInit+0x88>)
 8000a64:	f000 fb1a 	bl	800109c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2105      	movs	r1, #5
 8000a6c:	2026      	movs	r0, #38	; 0x26
 8000a6e:	f000 fa3a 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a72:	2026      	movs	r0, #38	; 0x26
 8000a74:	f000 fa53 	bl	8000f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a78:	bf00      	nop
 8000a7a:	3720      	adds	r7, #32
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40004400 	.word	0x40004400
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40010800 	.word	0x40010800

08000a8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	; 0x30
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	201e      	movs	r0, #30
 8000aa2:	f000 fa20 	bl	8000ee6 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000aa6:	201e      	movs	r0, #30
 8000aa8:	f000 fa39 	bl	8000f1e <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <HAL_InitTick+0xa0>)
 8000aae:	69db      	ldr	r3, [r3, #28]
 8000ab0:	4a1e      	ldr	r2, [pc, #120]	; (8000b2c <HAL_InitTick+0xa0>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	61d3      	str	r3, [r2, #28]
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <HAL_InitTick+0xa0>)
 8000aba:	69db      	ldr	r3, [r3, #28]
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ac4:	f107 0210 	add.w	r2, r7, #16
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 f89e 	bl	8001c10 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ad4:	f001 f874 	bl	8001bc0 <HAL_RCC_GetPCLK1Freq>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae0:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <HAL_InitTick+0xa4>)
 8000ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae6:	0c9b      	lsrs	r3, r3, #18
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_InitTick+0xa8>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <HAL_InitTick+0xac>)
 8000af0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_InitTick+0xa8>)
 8000af4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000af8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000afa:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <HAL_InitTick+0xa8>)
 8000afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afe:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <HAL_InitTick+0xa8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <HAL_InitTick+0xa8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000b0c:	4809      	ldr	r0, [pc, #36]	; (8000b34 <HAL_InitTick+0xa8>)
 8000b0e:	f001 ff75 	bl	80029fc <HAL_TIM_Base_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d104      	bne.n	8000b22 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000b18:	4806      	ldr	r0, [pc, #24]	; (8000b34 <HAL_InitTick+0xa8>)
 8000b1a:	f001 ffc7 	bl	8002aac <HAL_TIM_Base_Start_IT>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3730      	adds	r7, #48	; 0x30
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	431bde83 	.word	0x431bde83
 8000b34:	20002f6c 	.word	0x20002f6c
 8000b38:	40000800 	.word	0x40000800

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <NMI_Handler+0x4>

08000b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <MemManage_Handler+0x4>

08000b4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <BusFault_Handler+0x4>

08000b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <UsageFault_Handler+0x4>

08000b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
	...

08000b68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <TIM4_IRQHandler+0x10>)
 8000b6e:	f001 ffef 	bl	8002b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20002f6c 	.word	0x20002f6c

08000b7c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <SPI2_IRQHandler+0x10>)
 8000b82:	f001 fad3 	bl	800212c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20002ec8 	.word	0x20002ec8

08000b90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <USART2_IRQHandler+0x10>)
 8000b96:	f002 f9c9 	bl	8002f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20002f28 	.word	0x20002f28

08000ba4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ba8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bac:	f000 fc12 	bl	80013d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	e00a      	b.n	8000bdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bc6:	f3af 8000 	nop.w
 8000bca:	4601      	mov	r1, r0
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60ba      	str	r2, [r7, #8]
 8000bd2:	b2ca      	uxtb	r2, r1
 8000bd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	dbf0      	blt.n	8000bc6 <_read+0x12>
	}

return len;
 8000be4:	687b      	ldr	r3, [r7, #4]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	e009      	b.n	8000c14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	60ba      	str	r2, [r7, #8]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dbf1      	blt.n	8000c00 <_write+0x12>
	}
	return len;
 8000c1c:	687b      	ldr	r3, [r7, #4]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_close>:

int _close(int file)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
	return 0;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f005 fc02 	bl	800648c <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20005000 	.word	0x20005000
 8000cb4:	00000300 	.word	0x00000300
 8000cb8:	20000094 	.word	0x20000094
 8000cbc:	20003008 	.word	0x20003008

08000cc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	; (8000d04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	; (8000d10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cf2:	f7ff ffe5 	bl	8000cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f005 fcc5 	bl	8006684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cfa:	f7ff fbf3 	bl	80004e4 <main>
  bx lr
 8000cfe:	4770      	bx	lr
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d08:	08007980 	.word	0x08007980
  ldr r2, =_sbss
 8000d0c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d10:	20003008 	.word	0x20003008

08000d14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC1_2_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_Init+0x28>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_Init+0x28>)
 8000d22:	f043 0310 	orr.w	r3, r3, #16
 8000d26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f000 f8d1 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2e:	200f      	movs	r0, #15
 8000d30:	f7ff feac 	bl	8000a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d34:	f7ff fdd8 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40022000 	.word	0x40022000

08000d44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_IncTick+0x1c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <HAL_IncTick+0x20>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a03      	ldr	r2, [pc, #12]	; (8000d64 <HAL_IncTick+0x20>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20002fb4 	.word	0x20002fb4

08000d68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <HAL_GetTick+0x10>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	20002fb4 	.word	0x20002fb4

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db0b      	blt.n	8000e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 021f 	and.w	r2, r3, #31
 8000df8:	4906      	ldr	r1, [pc, #24]	; (8000e14 <__NVIC_EnableIRQ+0x34>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	2001      	movs	r0, #1
 8000e02:	fa00 f202 	lsl.w	r2, r0, r2
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	; (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff4f 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff64 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ffb2 	bl	8000e6c <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff81 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff57 	bl	8000de0 <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b085      	sub	sp, #20
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d008      	beq.n	8000f62 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2204      	movs	r2, #4
 8000f54:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e020      	b.n	8000fa4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 020e 	bic.w	r2, r2, #14
 8000f70:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0201 	bic.w	r2, r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f90:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
	...

08000fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d005      	beq.n	8000fd2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2204      	movs	r2, #4
 8000fca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	e051      	b.n	8001076 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 020e 	bic.w	r2, r2, #14
 8000fe0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0201 	bic.w	r2, r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a22      	ldr	r2, [pc, #136]	; (8001080 <HAL_DMA_Abort_IT+0xd0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d029      	beq.n	8001050 <HAL_DMA_Abort_IT+0xa0>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a20      	ldr	r2, [pc, #128]	; (8001084 <HAL_DMA_Abort_IT+0xd4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d022      	beq.n	800104c <HAL_DMA_Abort_IT+0x9c>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a1f      	ldr	r2, [pc, #124]	; (8001088 <HAL_DMA_Abort_IT+0xd8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d01a      	beq.n	8001046 <HAL_DMA_Abort_IT+0x96>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1d      	ldr	r2, [pc, #116]	; (800108c <HAL_DMA_Abort_IT+0xdc>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d012      	beq.n	8001040 <HAL_DMA_Abort_IT+0x90>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <HAL_DMA_Abort_IT+0xe0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d00a      	beq.n	800103a <HAL_DMA_Abort_IT+0x8a>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a1a      	ldr	r2, [pc, #104]	; (8001094 <HAL_DMA_Abort_IT+0xe4>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d102      	bne.n	8001034 <HAL_DMA_Abort_IT+0x84>
 800102e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001032:	e00e      	b.n	8001052 <HAL_DMA_Abort_IT+0xa2>
 8001034:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001038:	e00b      	b.n	8001052 <HAL_DMA_Abort_IT+0xa2>
 800103a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800103e:	e008      	b.n	8001052 <HAL_DMA_Abort_IT+0xa2>
 8001040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001044:	e005      	b.n	8001052 <HAL_DMA_Abort_IT+0xa2>
 8001046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800104a:	e002      	b.n	8001052 <HAL_DMA_Abort_IT+0xa2>
 800104c:	2310      	movs	r3, #16
 800104e:	e000      	b.n	8001052 <HAL_DMA_Abort_IT+0xa2>
 8001050:	2301      	movs	r3, #1
 8001052:	4a11      	ldr	r2, [pc, #68]	; (8001098 <HAL_DMA_Abort_IT+0xe8>)
 8001054:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	4798      	blx	r3
    } 
  }
  return status;
 8001076:	7bfb      	ldrb	r3, [r7, #15]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40020008 	.word	0x40020008
 8001084:	4002001c 	.word	0x4002001c
 8001088:	40020030 	.word	0x40020030
 800108c:	40020044 	.word	0x40020044
 8001090:	40020058 	.word	0x40020058
 8001094:	4002006c 	.word	0x4002006c
 8001098:	40020000 	.word	0x40020000

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800109c:	b480      	push	{r7}
 800109e:	b08b      	sub	sp, #44	; 0x2c
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ae:	e169      	b.n	8001384 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010b0:	2201      	movs	r2, #1
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	69fa      	ldr	r2, [r7, #28]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f040 8158 	bne.w	800137e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4a9a      	ldr	r2, [pc, #616]	; (800133c <HAL_GPIO_Init+0x2a0>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d05e      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 80010d8:	4a98      	ldr	r2, [pc, #608]	; (800133c <HAL_GPIO_Init+0x2a0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d875      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 80010de:	4a98      	ldr	r2, [pc, #608]	; (8001340 <HAL_GPIO_Init+0x2a4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d058      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 80010e4:	4a96      	ldr	r2, [pc, #600]	; (8001340 <HAL_GPIO_Init+0x2a4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d86f      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 80010ea:	4a96      	ldr	r2, [pc, #600]	; (8001344 <HAL_GPIO_Init+0x2a8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d052      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 80010f0:	4a94      	ldr	r2, [pc, #592]	; (8001344 <HAL_GPIO_Init+0x2a8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d869      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 80010f6:	4a94      	ldr	r2, [pc, #592]	; (8001348 <HAL_GPIO_Init+0x2ac>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d04c      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 80010fc:	4a92      	ldr	r2, [pc, #584]	; (8001348 <HAL_GPIO_Init+0x2ac>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d863      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 8001102:	4a92      	ldr	r2, [pc, #584]	; (800134c <HAL_GPIO_Init+0x2b0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d046      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 8001108:	4a90      	ldr	r2, [pc, #576]	; (800134c <HAL_GPIO_Init+0x2b0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d85d      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 800110e:	2b12      	cmp	r3, #18
 8001110:	d82a      	bhi.n	8001168 <HAL_GPIO_Init+0xcc>
 8001112:	2b12      	cmp	r3, #18
 8001114:	d859      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 8001116:	a201      	add	r2, pc, #4	; (adr r2, 800111c <HAL_GPIO_Init+0x80>)
 8001118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111c:	08001197 	.word	0x08001197
 8001120:	08001171 	.word	0x08001171
 8001124:	08001183 	.word	0x08001183
 8001128:	080011c5 	.word	0x080011c5
 800112c:	080011cb 	.word	0x080011cb
 8001130:	080011cb 	.word	0x080011cb
 8001134:	080011cb 	.word	0x080011cb
 8001138:	080011cb 	.word	0x080011cb
 800113c:	080011cb 	.word	0x080011cb
 8001140:	080011cb 	.word	0x080011cb
 8001144:	080011cb 	.word	0x080011cb
 8001148:	080011cb 	.word	0x080011cb
 800114c:	080011cb 	.word	0x080011cb
 8001150:	080011cb 	.word	0x080011cb
 8001154:	080011cb 	.word	0x080011cb
 8001158:	080011cb 	.word	0x080011cb
 800115c:	080011cb 	.word	0x080011cb
 8001160:	08001179 	.word	0x08001179
 8001164:	0800118d 	.word	0x0800118d
 8001168:	4a79      	ldr	r2, [pc, #484]	; (8001350 <HAL_GPIO_Init+0x2b4>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d013      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800116e:	e02c      	b.n	80011ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	623b      	str	r3, [r7, #32]
          break;
 8001176:	e029      	b.n	80011cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	3304      	adds	r3, #4
 800117e:	623b      	str	r3, [r7, #32]
          break;
 8001180:	e024      	b.n	80011cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	3308      	adds	r3, #8
 8001188:	623b      	str	r3, [r7, #32]
          break;
 800118a:	e01f      	b.n	80011cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	330c      	adds	r3, #12
 8001192:	623b      	str	r3, [r7, #32]
          break;
 8001194:	e01a      	b.n	80011cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d102      	bne.n	80011a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800119e:	2304      	movs	r3, #4
 80011a0:	623b      	str	r3, [r7, #32]
          break;
 80011a2:	e013      	b.n	80011cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d105      	bne.n	80011b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011ac:	2308      	movs	r3, #8
 80011ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	611a      	str	r2, [r3, #16]
          break;
 80011b6:	e009      	b.n	80011cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b8:	2308      	movs	r3, #8
 80011ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	615a      	str	r2, [r3, #20]
          break;
 80011c2:	e003      	b.n	80011cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
          break;
 80011c8:	e000      	b.n	80011cc <HAL_GPIO_Init+0x130>
          break;
 80011ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	2bff      	cmp	r3, #255	; 0xff
 80011d0:	d801      	bhi.n	80011d6 <HAL_GPIO_Init+0x13a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	e001      	b.n	80011da <HAL_GPIO_Init+0x13e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3304      	adds	r3, #4
 80011da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2bff      	cmp	r3, #255	; 0xff
 80011e0:	d802      	bhi.n	80011e8 <HAL_GPIO_Init+0x14c>
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	e002      	b.n	80011ee <HAL_GPIO_Init+0x152>
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	3b08      	subs	r3, #8
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	210f      	movs	r1, #15
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	401a      	ands	r2, r3
 8001200:	6a39      	ldr	r1, [r7, #32]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	fa01 f303 	lsl.w	r3, r1, r3
 8001208:	431a      	orrs	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 80b1 	beq.w	800137e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800121c:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <HAL_GPIO_Init+0x2b8>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a4c      	ldr	r2, [pc, #304]	; (8001354 <HAL_GPIO_Init+0x2b8>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <HAL_GPIO_Init+0x2b8>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001234:	4a48      	ldr	r2, [pc, #288]	; (8001358 <HAL_GPIO_Init+0x2bc>)
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001240:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a40      	ldr	r2, [pc, #256]	; (800135c <HAL_GPIO_Init+0x2c0>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d013      	beq.n	8001288 <HAL_GPIO_Init+0x1ec>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a3f      	ldr	r2, [pc, #252]	; (8001360 <HAL_GPIO_Init+0x2c4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d00d      	beq.n	8001284 <HAL_GPIO_Init+0x1e8>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a3e      	ldr	r2, [pc, #248]	; (8001364 <HAL_GPIO_Init+0x2c8>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d007      	beq.n	8001280 <HAL_GPIO_Init+0x1e4>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a3d      	ldr	r2, [pc, #244]	; (8001368 <HAL_GPIO_Init+0x2cc>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d101      	bne.n	800127c <HAL_GPIO_Init+0x1e0>
 8001278:	2303      	movs	r3, #3
 800127a:	e006      	b.n	800128a <HAL_GPIO_Init+0x1ee>
 800127c:	2304      	movs	r3, #4
 800127e:	e004      	b.n	800128a <HAL_GPIO_Init+0x1ee>
 8001280:	2302      	movs	r3, #2
 8001282:	e002      	b.n	800128a <HAL_GPIO_Init+0x1ee>
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <HAL_GPIO_Init+0x1ee>
 8001288:	2300      	movs	r3, #0
 800128a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128c:	f002 0203 	and.w	r2, r2, #3
 8001290:	0092      	lsls	r2, r2, #2
 8001292:	4093      	lsls	r3, r2
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800129a:	492f      	ldr	r1, [pc, #188]	; (8001358 <HAL_GPIO_Init+0x2bc>)
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d006      	beq.n	80012c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012b4:	4b2d      	ldr	r3, [pc, #180]	; (800136c <HAL_GPIO_Init+0x2d0>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	492c      	ldr	r1, [pc, #176]	; (800136c <HAL_GPIO_Init+0x2d0>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	600b      	str	r3, [r1, #0]
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <HAL_GPIO_Init+0x2d0>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	4928      	ldr	r1, [pc, #160]	; (800136c <HAL_GPIO_Init+0x2d0>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d006      	beq.n	80012ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <HAL_GPIO_Init+0x2d0>)
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	4922      	ldr	r1, [pc, #136]	; (800136c <HAL_GPIO_Init+0x2d0>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ea:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_GPIO_Init+0x2d0>)
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	491e      	ldr	r1, [pc, #120]	; (800136c <HAL_GPIO_Init+0x2d0>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d006      	beq.n	8001312 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <HAL_GPIO_Init+0x2d0>)
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	4918      	ldr	r1, [pc, #96]	; (800136c <HAL_GPIO_Init+0x2d0>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	608b      	str	r3, [r1, #8]
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <HAL_GPIO_Init+0x2d0>)
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	43db      	mvns	r3, r3
 800131a:	4914      	ldr	r1, [pc, #80]	; (800136c <HAL_GPIO_Init+0x2d0>)
 800131c:	4013      	ands	r3, r2
 800131e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d021      	beq.n	8001370 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_GPIO_Init+0x2d0>)
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	490e      	ldr	r1, [pc, #56]	; (800136c <HAL_GPIO_Init+0x2d0>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	60cb      	str	r3, [r1, #12]
 8001338:	e021      	b.n	800137e <HAL_GPIO_Init+0x2e2>
 800133a:	bf00      	nop
 800133c:	10320000 	.word	0x10320000
 8001340:	10310000 	.word	0x10310000
 8001344:	10220000 	.word	0x10220000
 8001348:	10210000 	.word	0x10210000
 800134c:	10120000 	.word	0x10120000
 8001350:	10110000 	.word	0x10110000
 8001354:	40021000 	.word	0x40021000
 8001358:	40010000 	.word	0x40010000
 800135c:	40010800 	.word	0x40010800
 8001360:	40010c00 	.word	0x40010c00
 8001364:	40011000 	.word	0x40011000
 8001368:	40011400 	.word	0x40011400
 800136c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_GPIO_Init+0x304>)
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	43db      	mvns	r3, r3
 8001378:	4909      	ldr	r1, [pc, #36]	; (80013a0 <HAL_GPIO_Init+0x304>)
 800137a:	4013      	ands	r3, r2
 800137c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	3301      	adds	r3, #1
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	fa22 f303 	lsr.w	r3, r2, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	f47f ae8e 	bne.w	80010b0 <HAL_GPIO_Init+0x14>
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	372c      	adds	r7, #44	; 0x2c
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	40010400 	.word	0x40010400

080013a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
 80013b0:	4613      	mov	r3, r2
 80013b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013b4:	787b      	ldrb	r3, [r7, #1]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013c0:	e003      	b.n	80013ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	611a      	str	r2, [r3, #16]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f806 	bl	8001404 <HAL_GPIO_EXTI_Callback>
  }
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40010400 	.word	0x40010400

08001404 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e26c      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 8087 	beq.w	8001546 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001438:	4b92      	ldr	r3, [pc, #584]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 030c 	and.w	r3, r3, #12
 8001440:	2b04      	cmp	r3, #4
 8001442:	d00c      	beq.n	800145e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001444:	4b8f      	ldr	r3, [pc, #572]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	2b08      	cmp	r3, #8
 800144e:	d112      	bne.n	8001476 <HAL_RCC_OscConfig+0x5e>
 8001450:	4b8c      	ldr	r3, [pc, #560]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800145c:	d10b      	bne.n	8001476 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145e:	4b89      	ldr	r3, [pc, #548]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d06c      	beq.n	8001544 <HAL_RCC_OscConfig+0x12c>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d168      	bne.n	8001544 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e246      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147e:	d106      	bne.n	800148e <HAL_RCC_OscConfig+0x76>
 8001480:	4b80      	ldr	r3, [pc, #512]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a7f      	ldr	r2, [pc, #508]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	e02e      	b.n	80014ec <HAL_RCC_OscConfig+0xd4>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x98>
 8001496:	4b7b      	ldr	r3, [pc, #492]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a7a      	ldr	r2, [pc, #488]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 800149c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b78      	ldr	r3, [pc, #480]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a77      	ldr	r2, [pc, #476]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e01d      	b.n	80014ec <HAL_RCC_OscConfig+0xd4>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0xbc>
 80014ba:	4b72      	ldr	r3, [pc, #456]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a71      	ldr	r2, [pc, #452]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b6f      	ldr	r3, [pc, #444]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a6e      	ldr	r2, [pc, #440]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e00b      	b.n	80014ec <HAL_RCC_OscConfig+0xd4>
 80014d4:	4b6b      	ldr	r3, [pc, #428]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a6a      	ldr	r2, [pc, #424]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b68      	ldr	r3, [pc, #416]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a67      	ldr	r2, [pc, #412]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d013      	beq.n	800151c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fc38 	bl	8000d68 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fc34 	bl	8000d68 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e1fa      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0xe4>
 800151a:	e014      	b.n	8001546 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fc24 	bl	8000d68 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fc20 	bl	8000d68 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	; 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e1e6      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001536:	4b53      	ldr	r3, [pc, #332]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x10c>
 8001542:	e000      	b.n	8001546 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d063      	beq.n	800161a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001552:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00b      	beq.n	8001576 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800155e:	4b49      	ldr	r3, [pc, #292]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	2b08      	cmp	r3, #8
 8001568:	d11c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x18c>
 800156a:	4b46      	ldr	r3, [pc, #280]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d116      	bne.n	80015a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001576:	4b43      	ldr	r3, [pc, #268]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d005      	beq.n	800158e <HAL_RCC_OscConfig+0x176>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d001      	beq.n	800158e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e1ba      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158e:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4939      	ldr	r1, [pc, #228]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a2:	e03a      	b.n	800161a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d020      	beq.n	80015ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ac:	4b36      	ldr	r3, [pc, #216]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff fbd9 	bl	8000d68 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ba:	f7ff fbd5 	bl	8000d68 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e19b      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015cc:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d8:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4927      	ldr	r1, [pc, #156]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
 80015ec:	e015      	b.n	800161a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ee:	4b26      	ldr	r3, [pc, #152]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fbb8 	bl	8000d68 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fc:	f7ff fbb4 	bl	8000d68 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e17a      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d03a      	beq.n	800169c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d019      	beq.n	8001662 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <HAL_RCC_OscConfig+0x274>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001634:	f7ff fb98 	bl	8000d68 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff fb94 	bl	8000d68 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e15a      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800165a:	2001      	movs	r0, #1
 800165c:	f000 fb08 	bl	8001c70 <RCC_Delay>
 8001660:	e01c      	b.n	800169c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_RCC_OscConfig+0x274>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001668:	f7ff fb7e 	bl	8000d68 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166e:	e00f      	b.n	8001690 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001670:	f7ff fb7a 	bl	8000d68 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d908      	bls.n	8001690 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e140      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	42420000 	.word	0x42420000
 800168c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001690:	4b9e      	ldr	r3, [pc, #632]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1e9      	bne.n	8001670 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 80a6 	beq.w	80017f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ae:	4b97      	ldr	r3, [pc, #604]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10d      	bne.n	80016d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4b94      	ldr	r3, [pc, #592]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a93      	ldr	r2, [pc, #588]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	61d3      	str	r3, [r2, #28]
 80016c6:	4b91      	ldr	r3, [pc, #580]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d2:	2301      	movs	r3, #1
 80016d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d6:	4b8e      	ldr	r3, [pc, #568]	; (8001910 <HAL_RCC_OscConfig+0x4f8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d118      	bne.n	8001714 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016e2:	4b8b      	ldr	r3, [pc, #556]	; (8001910 <HAL_RCC_OscConfig+0x4f8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a8a      	ldr	r2, [pc, #552]	; (8001910 <HAL_RCC_OscConfig+0x4f8>)
 80016e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ee:	f7ff fb3b 	bl	8000d68 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f6:	f7ff fb37 	bl	8000d68 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b64      	cmp	r3, #100	; 0x64
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e0fd      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	4b81      	ldr	r3, [pc, #516]	; (8001910 <HAL_RCC_OscConfig+0x4f8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d106      	bne.n	800172a <HAL_RCC_OscConfig+0x312>
 800171c:	4b7b      	ldr	r3, [pc, #492]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4a7a      	ldr	r2, [pc, #488]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6213      	str	r3, [r2, #32]
 8001728:	e02d      	b.n	8001786 <HAL_RCC_OscConfig+0x36e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x334>
 8001732:	4b76      	ldr	r3, [pc, #472]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	4a75      	ldr	r2, [pc, #468]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001738:	f023 0301 	bic.w	r3, r3, #1
 800173c:	6213      	str	r3, [r2, #32]
 800173e:	4b73      	ldr	r3, [pc, #460]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	4a72      	ldr	r2, [pc, #456]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001744:	f023 0304 	bic.w	r3, r3, #4
 8001748:	6213      	str	r3, [r2, #32]
 800174a:	e01c      	b.n	8001786 <HAL_RCC_OscConfig+0x36e>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	2b05      	cmp	r3, #5
 8001752:	d10c      	bne.n	800176e <HAL_RCC_OscConfig+0x356>
 8001754:	4b6d      	ldr	r3, [pc, #436]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	4a6c      	ldr	r2, [pc, #432]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	6213      	str	r3, [r2, #32]
 8001760:	4b6a      	ldr	r3, [pc, #424]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4a69      	ldr	r2, [pc, #420]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6213      	str	r3, [r2, #32]
 800176c:	e00b      	b.n	8001786 <HAL_RCC_OscConfig+0x36e>
 800176e:	4b67      	ldr	r3, [pc, #412]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	4a66      	ldr	r2, [pc, #408]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	6213      	str	r3, [r2, #32]
 800177a:	4b64      	ldr	r3, [pc, #400]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4a63      	ldr	r2, [pc, #396]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001780:	f023 0304 	bic.w	r3, r3, #4
 8001784:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d015      	beq.n	80017ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178e:	f7ff faeb 	bl	8000d68 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001794:	e00a      	b.n	80017ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001796:	f7ff fae7 	bl	8000d68 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e0ab      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ac:	4b57      	ldr	r3, [pc, #348]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0ee      	beq.n	8001796 <HAL_RCC_OscConfig+0x37e>
 80017b8:	e014      	b.n	80017e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ba:	f7ff fad5 	bl	8000d68 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7ff fad1 	bl	8000d68 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e095      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d8:	4b4c      	ldr	r3, [pc, #304]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1ee      	bne.n	80017c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d105      	bne.n	80017f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ea:	4b48      	ldr	r3, [pc, #288]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	4a47      	ldr	r2, [pc, #284]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80017f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 8081 	beq.w	8001902 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001800:	4b42      	ldr	r3, [pc, #264]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 030c 	and.w	r3, r3, #12
 8001808:	2b08      	cmp	r3, #8
 800180a:	d061      	beq.n	80018d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d146      	bne.n	80018a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001814:	4b3f      	ldr	r3, [pc, #252]	; (8001914 <HAL_RCC_OscConfig+0x4fc>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7ff faa5 	bl	8000d68 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001822:	f7ff faa1 	bl	8000d68 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e067      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f0      	bne.n	8001822 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001848:	d108      	bne.n	800185c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800184a:	4b30      	ldr	r3, [pc, #192]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	492d      	ldr	r1, [pc, #180]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a19      	ldr	r1, [r3, #32]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	430b      	orrs	r3, r1
 800186e:	4927      	ldr	r1, [pc, #156]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001874:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_RCC_OscConfig+0x4fc>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff fa75 	bl	8000d68 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001882:	f7ff fa71 	bl	8000d68 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e037      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001894:	4b1d      	ldr	r3, [pc, #116]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x46a>
 80018a0:	e02f      	b.n	8001902 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_RCC_OscConfig+0x4fc>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fa5e 	bl	8000d68 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b0:	f7ff fa5a 	bl	8000d68 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e020      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x498>
 80018ce:	e018      	b.n	8001902 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e013      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_OscConfig+0x4f4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d001      	beq.n	8001902 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	40007000 	.word	0x40007000
 8001914:	42420060 	.word	0x42420060

08001918 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0d0      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b6a      	ldr	r3, [pc, #424]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d910      	bls.n	800195c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b67      	ldr	r3, [pc, #412]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 0207 	bic.w	r2, r3, #7
 8001942:	4965      	ldr	r1, [pc, #404]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0b8      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d020      	beq.n	80019aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001974:	4b59      	ldr	r3, [pc, #356]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4a58      	ldr	r2, [pc, #352]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800197e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800198c:	4b53      	ldr	r3, [pc, #332]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4a52      	ldr	r2, [pc, #328]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001996:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001998:	4b50      	ldr	r3, [pc, #320]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	494d      	ldr	r1, [pc, #308]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d040      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	4b47      	ldr	r3, [pc, #284]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d115      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e07f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	4b41      	ldr	r3, [pc, #260]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e073      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e6:	4b3d      	ldr	r3, [pc, #244]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e06b      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f6:	4b39      	ldr	r3, [pc, #228]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f023 0203 	bic.w	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4936      	ldr	r1, [pc, #216]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a08:	f7ff f9ae 	bl	8000d68 <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f7ff f9aa 	bl	8000d68 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e053      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 020c 	and.w	r2, r3, #12
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1eb      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d210      	bcs.n	8001a68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 0207 	bic.w	r2, r3, #7
 8001a4e:	4922      	ldr	r1, [pc, #136]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e032      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4916      	ldr	r1, [pc, #88]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d009      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	490e      	ldr	r1, [pc, #56]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aa6:	f000 f821 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	490a      	ldr	r1, [pc, #40]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab8:	5ccb      	ldrb	r3, [r1, r3]
 8001aba:	fa22 f303 	lsr.w	r3, r2, r3
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe ffe0 	bl	8000a8c <HAL_InitTick>

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40022000 	.word	0x40022000
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	08007260 	.word	0x08007260
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000004 	.word	0x20000004

08001aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aec:	b490      	push	{r4, r7}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001af2:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001af4:	1d3c      	adds	r4, r7, #4
 8001af6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001af8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001afc:	f240 2301 	movw	r3, #513	; 0x201
 8001b00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d002      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0x40>
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d003      	beq.n	8001b32 <HAL_RCC_GetSysClockFreq+0x46>
 8001b2a:	e02d      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b2e:	623b      	str	r3, [r7, #32]
      break;
 8001b30:	e02d      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	0c9b      	lsrs	r3, r3, #18
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b3e:	4413      	add	r3, r2
 8001b40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d013      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	0c5b      	lsrs	r3, r3, #17
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b5e:	4413      	add	r3, r2
 8001b60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	4a0e      	ldr	r2, [pc, #56]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b6a:	fb02 f203 	mul.w	r2, r2, r3
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
 8001b76:	e004      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b7c:	fb02 f303 	mul.w	r3, r2, r3
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	623b      	str	r3, [r7, #32]
      break;
 8001b86:	e002      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b8a:	623b      	str	r3, [r7, #32]
      break;
 8001b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3728      	adds	r7, #40	; 0x28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc90      	pop	{r4, r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	080071e4 	.word	0x080071e4
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	007a1200 	.word	0x007a1200
 8001ba8:	003d0900 	.word	0x003d0900

08001bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb0:	4b02      	ldr	r3, [pc, #8]	; (8001bbc <HAL_RCC_GetHCLKFreq+0x10>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	20000000 	.word	0x20000000

08001bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bc4:	f7ff fff2 	bl	8001bac <HAL_RCC_GetHCLKFreq>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	0a1b      	lsrs	r3, r3, #8
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	4903      	ldr	r1, [pc, #12]	; (8001be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000
 8001be4:	08007270 	.word	0x08007270

08001be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bec:	f7ff ffde 	bl	8001bac <HAL_RCC_GetHCLKFreq>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	0adb      	lsrs	r3, r3, #11
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	4903      	ldr	r1, [pc, #12]	; (8001c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bfe:	5ccb      	ldrb	r3, [r1, r3]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	08007270 	.word	0x08007270

08001c10 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_RCC_GetClockConfig+0x58>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0203 	and.w	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_RCC_GetClockConfig+0x58>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_GetClockConfig+0x58>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_RCC_GetClockConfig+0x58>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	08db      	lsrs	r3, r3, #3
 8001c4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_RCC_GetClockConfig+0x5c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0207 	and.w	r2, r3, #7
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40022000 	.word	0x40022000

08001c70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <RCC_Delay+0x34>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <RCC_Delay+0x38>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	0a5b      	lsrs	r3, r3, #9
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	fb02 f303 	mul.w	r3, r2, r3
 8001c8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c8c:	bf00      	nop
  }
  while (Delay --);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1e5a      	subs	r2, r3, #1
 8001c92:	60fa      	str	r2, [r7, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f9      	bne.n	8001c8c <RCC_Delay+0x1c>
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	10624dd3 	.word	0x10624dd3

08001cac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e076      	b.n	8001dac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d108      	bne.n	8001cd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cce:	d009      	beq.n	8001ce4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61da      	str	r2, [r3, #28]
 8001cd6:	e005      	b.n	8001ce4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d106      	bne.n	8001d04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7fe fe2a 	bl	8000958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d68:	ea42 0103 	orr.w	r1, r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	0c1a      	lsrs	r2, r3, #16
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f002 0204 	and.w	r2, r2, #4
 8001d8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	69da      	ldr	r2, [r3, #28]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_SPI_Transmit_IT+0x20>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e06f      	b.n	8001eb4 <HAL_SPI_Transmit_IT+0x100>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <HAL_SPI_Transmit_IT+0x34>
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d102      	bne.n	8001dee <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001dec:	e05d      	b.n	8001eaa <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d002      	beq.n	8001e00 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001dfe:	e054      	b.n	8001eaa <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2203      	movs	r2, #3
 8001e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	88fa      	ldrh	r2, [r7, #6]
 8001e18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	88fa      	ldrh	r2, [r7, #6]
 8001e1e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4a1f      	ldr	r2, [pc, #124]	; (8001ec0 <HAL_SPI_Transmit_IT+0x10c>)
 8001e44:	645a      	str	r2, [r3, #68]	; 0x44
 8001e46:	e002      	b.n	8001e4e <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <HAL_SPI_Transmit_IT+0x110>)
 8001e4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e56:	d10f      	bne.n	8001e78 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8001e86:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e92:	2b40      	cmp	r3, #64	; 0x40
 8001e94:	d008      	beq.n	8001ea8 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	e000      	b.n	8001eaa <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8001ea8:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	0800259d 	.word	0x0800259d
 8001ec4:	08002557 	.word	0x08002557

08001ec8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d110      	bne.n	8001f04 <HAL_SPI_Receive_IT+0x3c>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eea:	d10b      	bne.n	8001f04 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2204      	movs	r2, #4
 8001ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 f882 	bl	8002004 <HAL_SPI_TransmitReceive_IT>
 8001f00:	4603      	mov	r3, r0
 8001f02:	e076      	b.n	8001ff2 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_SPI_Receive_IT+0x4a>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e06f      	b.n	8001ff2 <HAL_SPI_Receive_IT+0x12a>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d002      	beq.n	8001f2c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8001f26:	2302      	movs	r3, #2
 8001f28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f2a:	e05d      	b.n	8001fe8 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <HAL_SPI_Receive_IT+0x70>
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f3c:	e054      	b.n	8001fe8 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2204      	movs	r2, #4
 8001f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	88fa      	ldrh	r2, [r7, #6]
 8001f56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	88fa      	ldrh	r2, [r7, #6]
 8001f5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4a1e      	ldr	r2, [pc, #120]	; (8001ffc <HAL_SPI_Receive_IT+0x134>)
 8001f82:	641a      	str	r2, [r3, #64]	; 0x40
 8001f84:	e002      	b.n	8001f8c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <HAL_SPI_Receive_IT+0x138>)
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f94:	d10f      	bne.n	8001fb6 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fa4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001fc4:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd0:	2b40      	cmp	r3, #64	; 0x40
 8001fd2:	d008      	beq.n	8001fe6 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	e000      	b.n	8001fe8 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8001fe6:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	08002511 	.word	0x08002511
 8002000:	080024c7 	.word	0x080024c7

08002004 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_SPI_TransmitReceive_IT+0x20>
 8002020:	2302      	movs	r3, #2
 8002022:	e075      	b.n	8002110 <HAL_SPI_TransmitReceive_IT+0x10c>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002032:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800203a:	7dbb      	ldrb	r3, [r7, #22]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d00d      	beq.n	800205c <HAL_SPI_TransmitReceive_IT+0x58>
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002046:	d106      	bne.n	8002056 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <HAL_SPI_TransmitReceive_IT+0x52>
 8002050:	7dbb      	ldrb	r3, [r7, #22]
 8002052:	2b04      	cmp	r3, #4
 8002054:	d002      	beq.n	800205c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002056:	2302      	movs	r3, #2
 8002058:	75fb      	strb	r3, [r7, #23]
    goto error;
 800205a:	e054      	b.n	8002106 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <HAL_SPI_TransmitReceive_IT+0x6a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_SPI_TransmitReceive_IT+0x6a>
 8002068:	887b      	ldrh	r3, [r7, #2]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002072:	e048      	b.n	8002106 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b04      	cmp	r3, #4
 800207e:	d003      	beq.n	8002088 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2205      	movs	r2, #5
 8002084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	887a      	ldrh	r2, [r7, #2]
 800209e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	887a      	ldrh	r2, [r7, #2]
 80020aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	887a      	ldrh	r2, [r7, #2]
 80020b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d006      	beq.n	80020c8 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4a17      	ldr	r2, [pc, #92]	; (800211c <HAL_SPI_TransmitReceive_IT+0x118>)
 80020be:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4a17      	ldr	r2, [pc, #92]	; (8002120 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44
 80020c6:	e005      	b.n	80020d4 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4a16      	ldr	r2, [pc, #88]	; (8002124 <HAL_SPI_TransmitReceive_IT+0x120>)
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4a15      	ldr	r2, [pc, #84]	; (8002128 <HAL_SPI_TransmitReceive_IT+0x124>)
 80020d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80020e2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ee:	2b40      	cmp	r3, #64	; 0x40
 80020f0:	d008      	beq.n	8002104 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	e000      	b.n	8002106 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8002104:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800210e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002110:	4618      	mov	r0, r3
 8002112:	371c      	adds	r7, #28
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	08002409 	.word	0x08002409
 8002120:	08002469 	.word	0x08002469
 8002124:	08002345 	.word	0x08002345
 8002128:	080023a9 	.word	0x080023a9

0800212c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	099b      	lsrs	r3, r3, #6
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10f      	bne.n	8002170 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	099b      	lsrs	r3, r3, #6
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d004      	beq.n	8002170 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4798      	blx	r3
    return;
 800216e:	e0be      	b.n	80022ee <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	085b      	lsrs	r3, r3, #1
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_SPI_IRQHandler+0x66>
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	09db      	lsrs	r3, r3, #7
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d004      	beq.n	8002192 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4798      	blx	r3
    return;
 8002190:	e0ad      	b.n	80022ee <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_SPI_IRQHandler+0x80>
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 80a1 	beq.w	80022ee <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 809a 	beq.w	80022ee <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	099b      	lsrs	r3, r3, #6
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d023      	beq.n	800220e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d011      	beq.n	80021f6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	f043 0204 	orr.w	r2, r3, #4
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	e00b      	b.n	800220e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	693b      	ldr	r3, [r7, #16]
        return;
 800220c:	e06f      	b.n	80022ee <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d014      	beq.n	8002244 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221e:	f043 0201 	orr.w	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002248:	2b00      	cmp	r3, #0
 800224a:	d04f      	beq.n	80022ec <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800225a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d104      	bne.n	8002278 <HAL_SPI_IRQHandler+0x14c>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d034      	beq.n	80022e2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0203 	bic.w	r2, r2, #3
 8002286:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228c:	2b00      	cmp	r3, #0
 800228e:	d011      	beq.n	80022b4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002294:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <HAL_SPI_IRQHandler+0x1c8>)
 8002296:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe fe87 	bl	8000fb0 <HAL_DMA_Abort_IT>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d016      	beq.n	80022ea <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c0:	4a0c      	ldr	r2, [pc, #48]	; (80022f4 <HAL_SPI_IRQHandler+0x1c8>)
 80022c2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe fe71 	bl	8000fb0 <HAL_DMA_Abort_IT>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80022e0:	e003      	b.n	80022ea <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f811 	bl	800230a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80022e8:	e000      	b.n	80022ec <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80022ea:	bf00      	nop
    return;
 80022ec:	bf00      	nop
  }
}
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	0800231d 	.word	0x0800231d

080022f8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f7ff ffe7 	bl	800230a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800233c:	bf00      	nop
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f103 020c 	add.w	r2, r3, #12
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002358:	7812      	ldrb	r2, [r2, #0]
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800237a:	b29b      	uxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10f      	bne.n	80023a0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800238e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fa18 	bl	80027d0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	330c      	adds	r3, #12
 80023ba:	7812      	ldrb	r2, [r2, #0]
 80023bc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10f      	bne.n	8002400 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ee:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f9e8 	bl	80027d0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241a:	b292      	uxth	r2, r2
 800241c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002422:	1c9a      	adds	r2, r3, #2
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800242c:	b29b      	uxth	r3, r3
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800243a:	b29b      	uxth	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10f      	bne.n	8002460 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800244e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f9b8 	bl	80027d0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	881a      	ldrh	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	1c9a      	adds	r2, r3, #2
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002498:	b29b      	uxth	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10f      	bne.n	80024be <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024ac:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d102      	bne.n	80024be <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f989 	bl	80027d0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f103 020c 	add.w	r2, r3, #12
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024da:	7812      	ldrb	r2, [r2, #0]
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d102      	bne.n	8002508 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f9d8 	bl	80028b8 <SPI_CloseRx_ISR>
  }
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	b292      	uxth	r2, r2
 8002524:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252a:	1c9a      	adds	r2, r3, #2
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d102      	bne.n	800254e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f9b5 	bl	80028b8 <SPI_CloseRx_ISR>
  }
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	330c      	adds	r3, #12
 8002568:	7812      	ldrb	r2, [r2, #0]
 800256a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d102      	bne.n	8002594 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f9d2 	bl	8002938 <SPI_CloseTx_ISR>
  }
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	881a      	ldrh	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	1c9a      	adds	r2, r3, #2
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d102      	bne.n	80025d8 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f9b0 	bl	8002938 <SPI_CloseTx_ISR>
  }
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	4613      	mov	r3, r2
 80025ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025f0:	f7fe fbba 	bl	8000d68 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	4413      	add	r3, r2
 80025fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002600:	f7fe fbb2 	bl	8000d68 <HAL_GetTick>
 8002604:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002606:	4b39      	ldr	r3, [pc, #228]	; (80026ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	015b      	lsls	r3, r3, #5
 800260c:	0d1b      	lsrs	r3, r3, #20
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	fb02 f303 	mul.w	r3, r2, r3
 8002614:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002616:	e054      	b.n	80026c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261e:	d050      	beq.n	80026c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002620:	f7fe fba2 	bl	8000d68 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	429a      	cmp	r2, r3
 800262e:	d902      	bls.n	8002636 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d13d      	bne.n	80026b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800264e:	d111      	bne.n	8002674 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002658:	d004      	beq.n	8002664 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002662:	d107      	bne.n	8002674 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002672:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800267c:	d10f      	bne.n	800269e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800269c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e017      	b.n	80026e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	3b01      	subs	r3, #1
 80026c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4013      	ands	r3, r2
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d19b      	bne.n	8002618 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3720      	adds	r7, #32
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000000 	.word	0x20000000

080026f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002704:	d111      	bne.n	800272a <SPI_EndRxTransaction+0x3a>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800270e:	d004      	beq.n	800271a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002718:	d107      	bne.n	800272a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002728:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002732:	d117      	bne.n	8002764 <SPI_EndRxTransaction+0x74>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273c:	d112      	bne.n	8002764 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2200      	movs	r2, #0
 8002746:	2101      	movs	r1, #1
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7ff ff49 	bl	80025e0 <SPI_WaitFlagStateUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01a      	beq.n	800278a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e013      	b.n	800278c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f7ff ff36 	bl	80025e0 <SPI_WaitFlagStateUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277e:	f043 0220 	orr.w	r2, r3, #32
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e000      	b.n	800278c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2200      	movs	r2, #0
 80027a8:	2180      	movs	r1, #128	; 0x80
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f7ff ff18 	bl	80025e0 <SPI_WaitFlagStateUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ba:	f043 0220 	orr.w	r2, r3, #32
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e000      	b.n	80027c8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80027d8:	4b35      	ldr	r3, [pc, #212]	; (80028b0 <SPI_CloseRxTx_ISR+0xe0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a35      	ldr	r2, [pc, #212]	; (80028b4 <SPI_CloseRxTx_ISR+0xe4>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	0a5b      	lsrs	r3, r3, #9
 80027e4:	2264      	movs	r2, #100	; 0x64
 80027e6:	fb02 f303 	mul.w	r3, r2, r3
 80027ea:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027ec:	f7fe fabc 	bl	8000d68 <HAL_GetTick>
 80027f0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0220 	bic.w	r2, r2, #32
 8002800:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d106      	bne.n	8002816 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002814:	e009      	b.n	800282a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	3b01      	subs	r3, #1
 800281a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0eb      	beq.n	8002802 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	2164      	movs	r1, #100	; 0x64
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff ffb0 	bl	8002794 <SPI_EndRxTxTransaction>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283e:	f043 0220 	orr.w	r2, r3, #32
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10a      	bne.n	8002864 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002868:	2b00      	cmp	r3, #0
 800286a:	d115      	bne.n	8002898 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b04      	cmp	r3, #4
 8002876:	d107      	bne.n	8002888 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 ff6b 	bl	800375c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002886:	e00e      	b.n	80028a6 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff fd31 	bl	80022f8 <HAL_SPI_TxRxCpltCallback>
}
 8002896:	e006      	b.n	80028a6 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff fd32 	bl	800230a <HAL_SPI_ErrorCallback>
}
 80028a6:	bf00      	nop
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000000 	.word	0x20000000
 80028b4:	057619f1 	.word	0x057619f1

080028b8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028ce:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80028d0:	f7fe fa4a 	bl	8000d68 <HAL_GetTick>
 80028d4:	4603      	mov	r3, r0
 80028d6:	461a      	mov	r2, r3
 80028d8:	2164      	movs	r1, #100	; 0x64
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ff08 	bl	80026f0 <SPI_EndRxTransaction>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ea:	f043 0220 	orr.w	r2, r3, #32
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10a      	bne.n	8002910 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291c:	2b00      	cmp	r3, #0
 800291e:	d103      	bne.n	8002928 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 ff1b 	bl	800375c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002926:	e002      	b.n	800292e <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff fcee 	bl	800230a <HAL_SPI_ErrorCallback>
}
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002940:	4b2c      	ldr	r3, [pc, #176]	; (80029f4 <SPI_CloseTx_ISR+0xbc>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a2c      	ldr	r2, [pc, #176]	; (80029f8 <SPI_CloseTx_ISR+0xc0>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	0a5b      	lsrs	r3, r3, #9
 800294c:	2264      	movs	r2, #100	; 0x64
 800294e:	fb02 f303 	mul.w	r3, r2, r3
 8002952:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002954:	f7fe fa08 	bl	8000d68 <HAL_GetTick>
 8002958:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d106      	bne.n	800296e <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002964:	f043 0220 	orr.w	r2, r3, #32
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800296c:	e009      	b.n	8002982 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	3b01      	subs	r3, #1
 8002972:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0eb      	beq.n	800295a <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002990:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	2164      	movs	r1, #100	; 0x64
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff fefc 	bl	8002794 <SPI_EndRxTxTransaction>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	f043 0220 	orr.w	r2, r3, #32
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10a      	bne.n	80029cc <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff fc94 	bl	800230a <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80029e2:	e002      	b.n	80029ea <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fe75 	bl	80036d4 <HAL_SPI_TxCpltCallback>
}
 80029ea:	bf00      	nop
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000000 	.word	0x20000000
 80029f8:	057619f1 	.word	0x057619f1

080029fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e041      	b.n	8002a92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f839 	bl	8002a9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3304      	adds	r3, #4
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	f000 f9b4 	bl	8002da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d001      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e03a      	b.n	8002b3a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a18      	ldr	r2, [pc, #96]	; (8002b44 <HAL_TIM_Base_Start_IT+0x98>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00e      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0x58>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aee:	d009      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0x58>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <HAL_TIM_Base_Start_IT+0x9c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d004      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0x58>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <HAL_TIM_Base_Start_IT+0xa0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d111      	bne.n	8002b28 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d010      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0201 	orr.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b26:	e007      	b.n	8002b38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	40012c00 	.word	0x40012c00
 8002b48:	40000400 	.word	0x40000400
 8002b4c:	40000800 	.word	0x40000800

08002b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d122      	bne.n	8002bac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d11b      	bne.n	8002bac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0202 	mvn.w	r2, #2
 8002b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f8ed 	bl	8002d72 <HAL_TIM_IC_CaptureCallback>
 8002b98:	e005      	b.n	8002ba6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f8e0 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f8ef 	bl	8002d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d122      	bne.n	8002c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d11b      	bne.n	8002c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0204 	mvn.w	r2, #4
 8002bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f8c3 	bl	8002d72 <HAL_TIM_IC_CaptureCallback>
 8002bec:	e005      	b.n	8002bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f8b6 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f8c5 	bl	8002d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d122      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d11b      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0208 	mvn.w	r2, #8
 8002c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2204      	movs	r2, #4
 8002c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f899 	bl	8002d72 <HAL_TIM_IC_CaptureCallback>
 8002c40:	e005      	b.n	8002c4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f88c 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f89b 	bl	8002d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b10      	cmp	r3, #16
 8002c60:	d122      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b10      	cmp	r3, #16
 8002c6e:	d11b      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0210 	mvn.w	r2, #16
 8002c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f86f 	bl	8002d72 <HAL_TIM_IC_CaptureCallback>
 8002c94:	e005      	b.n	8002ca2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f862 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f871 	bl	8002d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d10e      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d107      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0201 	mvn.w	r2, #1
 8002ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7fd fdf2 	bl	80008b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b80      	cmp	r3, #128	; 0x80
 8002ce0:	d10e      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cec:	2b80      	cmp	r3, #128	; 0x80
 8002cee:	d107      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f8bf 	bl	8002e7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d18:	2b40      	cmp	r3, #64	; 0x40
 8002d1a:	d107      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f835 	bl	8002d96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d10e      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d107      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0220 	mvn.w	r2, #32
 8002d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f88a 	bl	8002e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr

08002d96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a29      	ldr	r2, [pc, #164]	; (8002e60 <TIM_Base_SetConfig+0xb8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00b      	beq.n	8002dd8 <TIM_Base_SetConfig+0x30>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc6:	d007      	beq.n	8002dd8 <TIM_Base_SetConfig+0x30>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a26      	ldr	r2, [pc, #152]	; (8002e64 <TIM_Base_SetConfig+0xbc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d003      	beq.n	8002dd8 <TIM_Base_SetConfig+0x30>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a25      	ldr	r2, [pc, #148]	; (8002e68 <TIM_Base_SetConfig+0xc0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d108      	bne.n	8002dea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a1c      	ldr	r2, [pc, #112]	; (8002e60 <TIM_Base_SetConfig+0xb8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d00b      	beq.n	8002e0a <TIM_Base_SetConfig+0x62>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d007      	beq.n	8002e0a <TIM_Base_SetConfig+0x62>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a19      	ldr	r2, [pc, #100]	; (8002e64 <TIM_Base_SetConfig+0xbc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d003      	beq.n	8002e0a <TIM_Base_SetConfig+0x62>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <TIM_Base_SetConfig+0xc0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d108      	bne.n	8002e1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a07      	ldr	r2, [pc, #28]	; (8002e60 <TIM_Base_SetConfig+0xb8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d103      	bne.n	8002e50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	615a      	str	r2, [r3, #20]
}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr
 8002e60:	40012c00 	.word	0x40012c00
 8002e64:	40000400 	.word	0x40000400
 8002e68:	40000800 	.word	0x40000800

08002e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr

08002e7e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e03f      	b.n	8002f22 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fd fda2 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2224      	movs	r2, #36	; 0x24
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ed2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fb49 	bl	800356c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695a      	ldr	r2, [r3, #20]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ef8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	; 0x28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10d      	bne.n	8002f7e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <HAL_UART_IRQHandler+0x52>
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fa4f 	bl	800341a <UART_Receive_IT>
      return;
 8002f7c:	e17b      	b.n	8003276 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80b1 	beq.w	80030e8 <HAL_UART_IRQHandler+0x1bc>
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d105      	bne.n	8002f9c <HAL_UART_IRQHandler+0x70>
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80a6 	beq.w	80030e8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_UART_IRQHandler+0x90>
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f043 0201 	orr.w	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <HAL_UART_IRQHandler+0xb0>
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f043 0202 	orr.w	r2, r3, #2
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_UART_IRQHandler+0xd0>
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	f043 0204 	orr.w	r2, r3, #4
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00f      	beq.n	8003026 <HAL_UART_IRQHandler+0xfa>
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b00      	cmp	r3, #0
 800300e:	d104      	bne.n	800301a <HAL_UART_IRQHandler+0xee>
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f043 0208 	orr.w	r2, r3, #8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 811e 	beq.w	800326c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d007      	beq.n	800304a <HAL_UART_IRQHandler+0x11e>
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f9e8 	bl	800341a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf14      	ite	ne
 8003058:	2301      	movne	r3, #1
 800305a:	2300      	moveq	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d102      	bne.n	8003072 <HAL_UART_IRQHandler+0x146>
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d031      	beq.n	80030d6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f92a 	bl	80032cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d023      	beq.n	80030ce <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003094:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	2b00      	cmp	r3, #0
 800309c:	d013      	beq.n	80030c6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	4a76      	ldr	r2, [pc, #472]	; (800327c <HAL_UART_IRQHandler+0x350>)
 80030a4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fd ff80 	bl	8000fb0 <HAL_DMA_Abort_IT>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d016      	beq.n	80030e4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030c0:	4610      	mov	r0, r2
 80030c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c4:	e00e      	b.n	80030e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f8ec 	bl	80032a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030cc:	e00a      	b.n	80030e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f8e8 	bl	80032a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d4:	e006      	b.n	80030e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f8e4 	bl	80032a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80030e2:	e0c3      	b.n	800326c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e4:	bf00      	nop
    return;
 80030e6:	e0c1      	b.n	800326c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	f040 80a1 	bne.w	8003234 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 809b 	beq.w	8003234 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 8095 	beq.w	8003234 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d04e      	beq.n	80031cc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003138:	8a3b      	ldrh	r3, [r7, #16]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 8098 	beq.w	8003270 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003144:	8a3a      	ldrh	r2, [r7, #16]
 8003146:	429a      	cmp	r2, r3
 8003148:	f080 8092 	bcs.w	8003270 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	8a3a      	ldrh	r2, [r7, #16]
 8003150:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b20      	cmp	r3, #32
 800315a:	d02b      	beq.n	80031b4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800316a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800318a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0210 	bic.w	r2, r2, #16
 80031a8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd fec3 	bl	8000f3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031bc:	b29b      	uxth	r3, r3
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	4619      	mov	r1, r3
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f876 	bl	80032b6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80031ca:	e051      	b.n	8003270 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d047      	beq.n	8003274 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80031e4:	8a7b      	ldrh	r3, [r7, #18]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d044      	beq.n	8003274 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031f8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0201 	bic.w	r2, r2, #1
 8003208:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0210 	bic.w	r2, r2, #16
 8003226:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003228:	8a7b      	ldrh	r3, [r7, #18]
 800322a:	4619      	mov	r1, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f842 	bl	80032b6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003232:	e01f      	b.n	8003274 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <HAL_UART_IRQHandler+0x324>
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f87f 	bl	800334c <UART_Transmit_IT>
    return;
 800324e:	e012      	b.n	8003276 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00d      	beq.n	8003276 <HAL_UART_IRQHandler+0x34a>
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f8c0 	bl	80033ea <UART_EndTransmit_IT>
    return;
 800326a:	e004      	b.n	8003276 <HAL_UART_IRQHandler+0x34a>
    return;
 800326c:	bf00      	nop
 800326e:	e002      	b.n	8003276 <HAL_UART_IRQHandler+0x34a>
      return;
 8003270:	bf00      	nop
 8003272:	e000      	b.n	8003276 <HAL_UART_IRQHandler+0x34a>
      return;
 8003274:	bf00      	nop
  }
}
 8003276:	3728      	adds	r7, #40	; 0x28
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	08003325 	.word	0x08003325

08003280 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr

080032b6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	460b      	mov	r3, r1
 80032c0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0201 	bic.w	r2, r2, #1
 80032f2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d107      	bne.n	800330c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0210 	bic.w	r2, r2, #16
 800330a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f7ff ffb0 	bl	80032a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003344:	bf00      	nop
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b21      	cmp	r3, #33	; 0x21
 800335e:	d13e      	bne.n	80033de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003368:	d114      	bne.n	8003394 <UART_Transmit_IT+0x48>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d110      	bne.n	8003394 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003386:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	1c9a      	adds	r2, r3, #2
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	621a      	str	r2, [r3, #32]
 8003392:	e008      	b.n	80033a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	1c59      	adds	r1, r3, #1
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6211      	str	r1, [r2, #32]
 800339e:	781a      	ldrb	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	4619      	mov	r1, r3
 80033b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
  }
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr

080033ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003400:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff ff38 	bl	8003280 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b086      	sub	sp, #24
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b22      	cmp	r3, #34	; 0x22
 800342c:	f040 8099 	bne.w	8003562 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003438:	d117      	bne.n	800346a <UART_Receive_IT+0x50>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d113      	bne.n	800346a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003442:	2300      	movs	r3, #0
 8003444:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	b29b      	uxth	r3, r3
 8003454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003458:	b29a      	uxth	r2, r3
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	1c9a      	adds	r2, r3, #2
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28
 8003468:	e026      	b.n	80034b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003470:	2300      	movs	r3, #0
 8003472:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347c:	d007      	beq.n	800348e <UART_Receive_IT+0x74>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <UART_Receive_IT+0x82>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	b2da      	uxtb	r2, r3
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	701a      	strb	r2, [r3, #0]
 800349a:	e008      	b.n	80034ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4619      	mov	r1, r3
 80034c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d148      	bne.n	800355e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0220 	bic.w	r2, r2, #32
 80034da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	2b01      	cmp	r3, #1
 800350a:	d123      	bne.n	8003554 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0210 	bic.w	r2, r2, #16
 8003520:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b10      	cmp	r3, #16
 800352e:	d10a      	bne.n	8003546 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff feb2 	bl	80032b6 <HAL_UARTEx_RxEventCallback>
 8003552:	e002      	b.n	800355a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff fe9c 	bl	8003292 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e002      	b.n	8003564 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	e000      	b.n	8003564 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003562:	2302      	movs	r3, #2
  }
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035a6:	f023 030c 	bic.w	r3, r3, #12
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6812      	ldr	r2, [r2, #0]
 80035ae:	68b9      	ldr	r1, [r7, #8]
 80035b0:	430b      	orrs	r3, r1
 80035b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a2c      	ldr	r2, [pc, #176]	; (8003680 <UART_SetConfig+0x114>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d103      	bne.n	80035dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035d4:	f7fe fb08 	bl	8001be8 <HAL_RCC_GetPCLK2Freq>
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	e002      	b.n	80035e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035dc:	f7fe faf0 	bl	8001bc0 <HAL_RCC_GetPCLK1Freq>
 80035e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	009a      	lsls	r2, r3, #2
 80035ec:	441a      	add	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	4a22      	ldr	r2, [pc, #136]	; (8003684 <UART_SetConfig+0x118>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	0119      	lsls	r1, r3, #4
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	009a      	lsls	r2, r3, #2
 800360c:	441a      	add	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	fbb2 f2f3 	udiv	r2, r2, r3
 8003618:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <UART_SetConfig+0x118>)
 800361a:	fba3 0302 	umull	r0, r3, r3, r2
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	2064      	movs	r0, #100	; 0x64
 8003622:	fb00 f303 	mul.w	r3, r0, r3
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	3332      	adds	r3, #50	; 0x32
 800362c:	4a15      	ldr	r2, [pc, #84]	; (8003684 <UART_SetConfig+0x118>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003638:	4419      	add	r1, r3
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	009a      	lsls	r2, r3, #2
 8003644:	441a      	add	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <UART_SetConfig+0x118>)
 8003652:	fba3 0302 	umull	r0, r3, r3, r2
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2064      	movs	r0, #100	; 0x64
 800365a:	fb00 f303 	mul.w	r3, r0, r3
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	3332      	adds	r3, #50	; 0x32
 8003664:	4a07      	ldr	r2, [pc, #28]	; (8003684 <UART_SetConfig+0x118>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	f003 020f 	and.w	r2, r3, #15
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	440a      	add	r2, r1
 8003676:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40013800 	.word	0x40013800
 8003684:	51eb851f 	.word	0x51eb851f

08003688 <regWrite>:
 * @param Value = This value is written to the ADXL345 Register
 *
 * @retval Void
 */
void regWrite(uint8_t Reg, uint8_t Value)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	460a      	mov	r2, r1
 8003692:	71fb      	strb	r3, [r7, #7]
 8003694:	4613      	mov	r3, r2
 8003696:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteData[2] = {0};
 8003698:	2300      	movs	r3, #0
 800369a:	81bb      	strh	r3, [r7, #12]
	WriteData[0] = Reg;
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	733b      	strb	r3, [r7, #12]
	WriteData[1] = Value;
 80036a0:	79bb      	ldrb	r3, [r7, #6]
 80036a2:	737b      	strb	r3, [r7, #13]

	HAL_SPI_Transmit_IT(&ADXL345_SPI, (uint8_t *) &WriteData, 2);
 80036a4:	f107 030c 	add.w	r3, r7, #12
 80036a8:	2202      	movs	r2, #2
 80036aa:	4619      	mov	r1, r3
 80036ac:	4807      	ldr	r0, [pc, #28]	; (80036cc <regWrite+0x44>)
 80036ae:	f7fe fb81 	bl	8001db4 <HAL_SPI_Transmit_IT>
	while(1)
	{
		if(ADXL345_To_Slave_OK == 1)
 80036b2:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <regWrite+0x48>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d1fb      	bne.n	80036b2 <regWrite+0x2a>
		{
			ADXL345_To_Slave_OK 	=	0;
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <regWrite+0x48>)
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
			break;
 80036c0:	bf00      	nop
		}
	}
	//HAL_I2C_Mem_Write(&hi2c1, ADXL345_I2C_SLAVE_ADDRESS, Reg, 1, Value, 1, 10);  or using this.
}
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000098 	.word	0x20000098
 80036d0:	200000f0 	.word	0x200000f0

080036d4 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	if (hspi -> Instance == SPI2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a05      	ldr	r2, [pc, #20]	; (80036f8 <HAL_SPI_TxCpltCallback+0x24>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d102      	bne.n	80036ec <HAL_SPI_TxCpltCallback+0x18>
	{
		ADXL345_To_Slave_OK 		=	1;
 80036e6:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_SPI_TxCpltCallback+0x28>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	701a      	strb	r2, [r3, #0]
	}
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40003800 	.word	0x40003800
 80036fc:	200000f0 	.word	0x200000f0

08003700 <regRead>:
 * @param ByteSize = Byte length to be read
 *
 * @retval Void
 */
void regRead(uint8_t Reg, uint8_t *Value, uint16_t ByteSize)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	6039      	str	r1, [r7, #0]
 800370a:	71fb      	strb	r3, [r7, #7]
 800370c:	4613      	mov	r3, r2
 800370e:	80bb      	strh	r3, [r7, #4]

	HAL_SPI_Transmit_IT(&ADXL345_SPI, (uint8_t *) &Reg, 1);
 8003710:	1dfb      	adds	r3, r7, #7
 8003712:	2201      	movs	r2, #1
 8003714:	4619      	mov	r1, r3
 8003716:	480e      	ldr	r0, [pc, #56]	; (8003750 <regRead+0x50>)
 8003718:	f7fe fb4c 	bl	8001db4 <HAL_SPI_Transmit_IT>
	while(1)
	{
		if(ADXL345_To_Slave_OK == 1)
 800371c:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <regRead+0x54>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d1fb      	bne.n	800371c <regRead+0x1c>
		{
			ADXL345_To_Slave_OK 	=	0;
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <regRead+0x54>)
 8003726:	2200      	movs	r2, #0
 8003728:	701a      	strb	r2, [r3, #0]
			break;
 800372a:	bf00      	nop
		}
	}
	HAL_SPI_Receive_IT(&ADXL345_SPI, Value, ByteSize);
 800372c:	88bb      	ldrh	r3, [r7, #4]
 800372e:	461a      	mov	r2, r3
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	4807      	ldr	r0, [pc, #28]	; (8003750 <regRead+0x50>)
 8003734:	f7fe fbc8 	bl	8001ec8 <HAL_SPI_Receive_IT>
	while(1)
	{
		if(ADXL345_To_Master_OK == 1)
 8003738:	4b07      	ldr	r3, [pc, #28]	; (8003758 <regRead+0x58>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d1fb      	bne.n	8003738 <regRead+0x38>
		{
			ADXL345_To_Master_OK 	=	0;
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <regRead+0x58>)
 8003742:	2200      	movs	r2, #0
 8003744:	701a      	strb	r2, [r3, #0]
			break;
 8003746:	bf00      	nop
	}

	//HAL_I2C_Master_Transmit(&hi2c1, ADXL345_I2C_SLAVE_ADDRESS, &Reg, 1, 100);
	//HAL_I2C_Master_Receive(&hi2c1, ADXL345_I2C_SLAVE_ADDRESS, Value, 1, 100);	or using these.

}
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20000098 	.word	0x20000098
 8003754:	200000f0 	.word	0x200000f0
 8003758:	200000f1 	.word	0x200000f1

0800375c <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
	if (hspi -> Instance == SPI2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a05      	ldr	r2, [pc, #20]	; (8003780 <HAL_SPI_RxCpltCallback+0x24>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d102      	bne.n	8003774 <HAL_SPI_RxCpltCallback+0x18>
	{
		ADXL345_To_Master_OK 		=	1;
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_SPI_RxCpltCallback+0x28>)
 8003770:	2201      	movs	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
	}
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40003800 	.word	0x40003800
 8003784:	200000f1 	.word	0x200000f1

08003788 <ADXL345_Init>:
 * @param I2CHandle = STM32 I2C Handle
 *
 * @retval ADXL_Status
 */
ADXL_Status ADXL345_Init(ADXL_ConfigTypeDef_t *ADXL, SPI_HandleTypeDef SPIHandle)
{
 8003788:	b084      	sub	sp, #16
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	f107 001c 	add.w	r0, r7, #28
 8003796:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memcpy(&ADXL345_SPI, &SPIHandle, sizeof(SPIHandle));
 800379a:	4b59      	ldr	r3, [pc, #356]	; (8003900 <ADXL345_Init+0x178>)
 800379c:	4618      	mov	r0, r3
 800379e:	f107 031c 	add.w	r3, r7, #28
 80037a2:	2258      	movs	r2, #88	; 0x58
 80037a4:	4619      	mov	r1, r3
 80037a6:	f002 ff94 	bl	80066d2 <memcpy>

	uint8_t testDEVID;
	regRead(DEVID_ID, &testDEVID,1);
 80037aa:	f107 030d 	add.w	r3, r7, #13
 80037ae:	2201      	movs	r2, #1
 80037b0:	4619      	mov	r1, r3
 80037b2:	2000      	movs	r0, #0
 80037b4:	f7ff ffa4 	bl	8003700 <regRead>

	if(testDEVID != 0xE5)
 80037b8:	7b7b      	ldrb	r3, [r7, #13]
 80037ba:	2be5      	cmp	r3, #229	; 0xe5
 80037bc:	d001      	beq.n	80037c2 <ADXL345_Init+0x3a>
	{
		return ADXL_ERR;
 80037be:	2300      	movs	r3, #0
 80037c0:	e097      	b.n	80038f2 <ADXL345_Init+0x16a>
	}

	/*********** BW_Rate Config ***********/

	uint8_t regBWRate = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	73fb      	strb	r3, [r7, #15]

	regWrite(BW_RATE, 0);
 80037c6:	2100      	movs	r1, #0
 80037c8:	202c      	movs	r0, #44	; 0x2c
 80037ca:	f7ff ff5d 	bl	8003688 <regWrite>

	if(ADXL->PowerMode == LowPower)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d10d      	bne.n	80037f2 <ADXL345_Init+0x6a>
	{
		if(ADXL->BWRate < BWRATE_12_5)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	785b      	ldrb	r3, [r3, #1]
 80037da:	2b06      	cmp	r3, #6
 80037dc:	d802      	bhi.n	80037e4 <ADXL345_Init+0x5c>
		{
			ADXL->BWRate = BWRATE_12_5;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2207      	movs	r2, #7
 80037e2:	705a      	strb	r2, [r3, #1]
		}
		if(ADXL->BWRate > BWRATE_400)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	785b      	ldrb	r3, [r3, #1]
 80037e8:	2b0c      	cmp	r3, #12
 80037ea:	d902      	bls.n	80037f2 <ADXL345_Init+0x6a>
		{
			ADXL->BWRate = BWRATE_400;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	220c      	movs	r2, #12
 80037f0:	705a      	strb	r2, [r3, #1]
		}
	}

	regBWRate = ( (ADXL->PowerMode << 4u) | ADXL->BWRate);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	b25a      	sxtb	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	785b      	ldrb	r3, [r3, #1]
 80037fe:	b25b      	sxtb	r3, r3
 8003800:	4313      	orrs	r3, r2
 8003802:	b25b      	sxtb	r3, r3
 8003804:	73fb      	strb	r3, [r7, #15]

	regWrite(BW_RATE, regBWRate);
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	4619      	mov	r1, r3
 800380a:	202c      	movs	r0, #44	; 0x2c
 800380c:	f7ff ff3c 	bl	8003688 <regWrite>

	/********* AutoSleepMode Config and WakeUpRate Config ********/

	uint8_t regValue = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	73bb      	strb	r3, [r7, #14]

	regWrite(POWER_CTL, regValue);
 8003814:	7bbb      	ldrb	r3, [r7, #14]
 8003816:	4619      	mov	r1, r3
 8003818:	202d      	movs	r0, #45	; 0x2d
 800381a:	f7ff ff35 	bl	8003688 <regWrite>

	regValue |= (ADXL->AutoSleepConfig.AutoSleep << 4u) | ADXL->WakeUpRate;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	78db      	ldrb	r3, [r3, #3]
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	b25a      	sxtb	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	789b      	ldrb	r3, [r3, #2]
 800382a:	b25b      	sxtb	r3, r3
 800382c:	4313      	orrs	r3, r2
 800382e:	b25a      	sxtb	r2, r3
 8003830:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003834:	4313      	orrs	r3, r2
 8003836:	b25b      	sxtb	r3, r3
 8003838:	73bb      	strb	r3, [r7, #14]

	regWrite(POWER_CTL, regValue);
 800383a:	7bbb      	ldrb	r3, [r7, #14]
 800383c:	4619      	mov	r1, r3
 800383e:	202d      	movs	r0, #45	; 0x2d
 8003840:	f7ff ff22 	bl	8003688 <regWrite>

	regWrite(THRESH_INACT,0x00);
 8003844:	2100      	movs	r1, #0
 8003846:	2025      	movs	r0, #37	; 0x25
 8003848:	f7ff ff1e 	bl	8003688 <regWrite>
	regWrite(TIME_INACT,0x00);
 800384c:	2100      	movs	r1, #0
 800384e:	2026      	movs	r0, #38	; 0x26
 8003850:	f7ff ff1a 	bl	8003688 <regWrite>

	regWrite(THRESH_INACT,ADXL->AutoSleepConfig.ThreshInact);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	791b      	ldrb	r3, [r3, #4]
 8003858:	4619      	mov	r1, r3
 800385a:	2025      	movs	r0, #37	; 0x25
 800385c:	f7ff ff14 	bl	8003688 <regWrite>
	regWrite(TIME_INACT,ADXL->AutoSleepConfig.TimeInact);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	795b      	ldrb	r3, [r3, #5]
 8003864:	4619      	mov	r1, r3
 8003866:	2026      	movs	r0, #38	; 0x26
 8003868:	f7ff ff0e 	bl	8003688 <regWrite>

	/********* Data Format Config ********/

	regValue = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	73bb      	strb	r3, [r7, #14]

	regWrite(DATA_FORMAT, regValue);
 8003870:	7bbb      	ldrb	r3, [r7, #14]
 8003872:	4619      	mov	r1, r3
 8003874:	2031      	movs	r0, #49	; 0x31
 8003876:	f7ff ff07 	bl	8003688 <regWrite>

	regValue = (ADXL->Format.Resolution | ADXL->Format.Range | (ADXL->Format.IntInvert << 4u) | (ADXL->Format.SPI_Mode << 4u));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	799a      	ldrb	r2, [r3, #6]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	79db      	ldrb	r3, [r3, #7]
 8003882:	4313      	orrs	r3, r2
 8003884:	b2db      	uxtb	r3, r3
 8003886:	b25a      	sxtb	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	7a1b      	ldrb	r3, [r3, #8]
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	b25b      	sxtb	r3, r3
 8003890:	4313      	orrs	r3, r2
 8003892:	b25a      	sxtb	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	7a5b      	ldrb	r3, [r3, #9]
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	b25b      	sxtb	r3, r3
 800389c:	4313      	orrs	r3, r2
 800389e:	b25b      	sxtb	r3, r3
 80038a0:	73bb      	strb	r3, [r7, #14]

	if(ADXL->Format.Resolution == RESFULL || ADXL->Format.Range == RANGE_2G)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	799b      	ldrb	r3, [r3, #6]
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d003      	beq.n	80038b2 <ADXL345_Init+0x12a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	79db      	ldrb	r3, [r3, #7]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d104      	bne.n	80038bc <ADXL345_Init+0x134>
	{
		ScaleFactor = (float)1/256.0;
 80038b2:	4b14      	ldr	r3, [pc, #80]	; (8003904 <ADXL345_Init+0x17c>)
 80038b4:	f04f 526e 	mov.w	r2, #998244352	; 0x3b800000
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e019      	b.n	80038f0 <ADXL345_Init+0x168>
	}
	else
	{
		switch(ADXL->Format.Range)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	79db      	ldrb	r3, [r3, #7]
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d010      	beq.n	80038e6 <ADXL345_Init+0x15e>
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	dc13      	bgt.n	80038f0 <ADXL345_Init+0x168>
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d002      	beq.n	80038d2 <ADXL345_Init+0x14a>
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d005      	beq.n	80038dc <ADXL345_Init+0x154>
 80038d0:	e00e      	b.n	80038f0 <ADXL345_Init+0x168>
		{
			case (RANGE_4G):
			{
				ScaleFactor = (float)1/128.0;
 80038d2:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <ADXL345_Init+0x17c>)
 80038d4:	f04f 5270 	mov.w	r2, #1006632960	; 0x3c000000
 80038d8:	601a      	str	r2, [r3, #0]
				break;
 80038da:	e009      	b.n	80038f0 <ADXL345_Init+0x168>
			}
			case (RANGE_8G):
			{
				ScaleFactor = (float)1/64.0;
 80038dc:	4b09      	ldr	r3, [pc, #36]	; (8003904 <ADXL345_Init+0x17c>)
 80038de:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 80038e2:	601a      	str	r2, [r3, #0]
				break;
 80038e4:	e004      	b.n	80038f0 <ADXL345_Init+0x168>
			}
			case (RANGE_16G):
			{
				ScaleFactor = (float)1/32.0;
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <ADXL345_Init+0x17c>)
 80038e8:	f04f 5274 	mov.w	r2, #1023410176	; 0x3d000000
 80038ec:	601a      	str	r2, [r3, #0]
				break;
 80038ee:	bf00      	nop
			}
		}
	}
	
	
	return ADXL_OK;
 80038f0:	2301      	movs	r3, #1
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038fc:	b004      	add	sp, #16
 80038fe:	4770      	bx	lr
 8003900:	20000098 	.word	0x20000098
 8003904:	2000000c 	.word	0x2000000c

08003908 <ADXL345_GetValue>:
 * @param Axis = X, Y and Z axis select
 *
 * @retval int16_t
 */
int16_t ADXL345_GetValue(uint8_t Axis)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
	uint8_t Data[2] = { 0 };
 8003912:	2300      	movs	r3, #0
 8003914:	81bb      	strh	r3, [r7, #12]
	int16_t OutputData;

	regRead(Axis, Data, 2);
 8003916:	f107 010c 	add.w	r1, r7, #12
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	2202      	movs	r2, #2
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff feee 	bl	8003700 <regRead>

	OutputData = ((Data[1] << 8) | Data[0]);
 8003924:	7b7b      	ldrb	r3, [r7, #13]
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	b21a      	sxth	r2, r3
 800392a:	7b3b      	ldrb	r3, [r7, #12]
 800392c:	b21b      	sxth	r3, r3
 800392e:	4313      	orrs	r3, r2
 8003930:	81fb      	strh	r3, [r7, #14]

	return OutputData;
 8003932:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <ADXL345_GetGValue>:
 * @param Axis = X, Y and Z axis select @def_group Axis_Select
 *
 * @retval float
 */
float ADXL345_GetGValue(uint8_t Axis)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	71fb      	strb	r3, [r7, #7]
	float OutputData = 0;
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]

	OutputData = ADXL345_GetValue(Axis);
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff ffd8 	bl	8003908 <ADXL345_GetValue>
 8003958:	4603      	mov	r3, r0
 800395a:	4618      	mov	r0, r3
 800395c:	f7fc fd6e 	bl	800043c <__aeabi_i2f>
 8003960:	4603      	mov	r3, r0
 8003962:	60fb      	str	r3, [r7, #12]

	OutputData = (float)(OutputData * ScaleFactor);
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <ADXL345_GetGValue+0x40>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4619      	mov	r1, r3
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f7fc fbf8 	bl	8000160 <__aeabi_fmul>
 8003970:	4603      	mov	r3, r0
 8003972:	60fb      	str	r3, [r7, #12]

	return OutputData;
 8003974:	68fb      	ldr	r3, [r7, #12]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	2000000c 	.word	0x2000000c

08003984 <ADXL345_MeasureON>:
 * @brief ADXL345_MeasureON, Measure Mode On, Sleep Mode and Standby Mode Off
 *
 * @retval void
 */
void ADXL345_MeasureON()
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
	uint8_t regValue = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	71fb      	strb	r3, [r7, #7]

	regRead(POWER_CTL, &regValue, 1);
 800398e:	1dfb      	adds	r3, r7, #7
 8003990:	2201      	movs	r2, #1
 8003992:	4619      	mov	r1, r3
 8003994:	202d      	movs	r0, #45	; 0x2d
 8003996:	f7ff feb3 	bl	8003700 <regRead>

	regValue |= ( 1 << 3 );
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	f043 0308 	orr.w	r3, r3, #8
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	71fb      	strb	r3, [r7, #7]
	regValue &= ~( 1 << 2 );
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	f023 0304 	bic.w	r3, r3, #4
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	71fb      	strb	r3, [r7, #7]

	regWrite(POWER_CTL, regValue);
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	4619      	mov	r1, r3
 80039b2:	202d      	movs	r0, #45	; 0x2d
 80039b4:	f7ff fe68 	bl	8003688 <regWrite>
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039c6:	f3ef 8305 	mrs	r3, IPSR
 80039ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80039cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10f      	bne.n	80039f2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d2:	f3ef 8310 	mrs	r3, PRIMASK
 80039d6:	607b      	str	r3, [r7, #4]
  return(result);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <osKernelInitialize+0x32>
 80039de:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <osKernelInitialize+0x60>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d109      	bne.n	80039fa <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039e6:	f3ef 8311 	mrs	r3, BASEPRI
 80039ea:	603b      	str	r3, [r7, #0]
  return(result);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80039f2:	f06f 0305 	mvn.w	r3, #5
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	e00c      	b.n	8003a14 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80039fa:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <osKernelInitialize+0x60>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d105      	bne.n	8003a0e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003a02:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <osKernelInitialize+0x60>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	e002      	b.n	8003a14 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a12:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003a14:	68fb      	ldr	r3, [r7, #12]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	200000f4 	.word	0x200000f4

08003a24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a2a:	f3ef 8305 	mrs	r3, IPSR
 8003a2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10f      	bne.n	8003a56 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a36:	f3ef 8310 	mrs	r3, PRIMASK
 8003a3a:	607b      	str	r3, [r7, #4]
  return(result);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <osKernelStart+0x32>
 8003a42:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <osKernelStart+0x64>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d109      	bne.n	8003a5e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a4a:	f3ef 8311 	mrs	r3, BASEPRI
 8003a4e:	603b      	str	r3, [r7, #0]
  return(result);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003a56:	f06f 0305 	mvn.w	r3, #5
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	e00e      	b.n	8003a7c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <osKernelStart+0x64>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d107      	bne.n	8003a76 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003a66:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <osKernelStart+0x64>)
 8003a68:	2202      	movs	r2, #2
 8003a6a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003a6c:	f001 f8f2 	bl	8004c54 <vTaskStartScheduler>
      stat = osOK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	e002      	b.n	8003a7c <osKernelStart+0x58>
    } else {
      stat = osError;
 8003a76:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	200000f4 	.word	0x200000f4

08003a8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b092      	sub	sp, #72	; 0x48
 8003a90:	af04      	add	r7, sp, #16
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a9c:	f3ef 8305 	mrs	r3, IPSR
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f040 8094 	bne.w	8003bd2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8003aae:	623b      	str	r3, [r7, #32]
  return(result);
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f040 808d 	bne.w	8003bd2 <osThreadNew+0x146>
 8003ab8:	4b48      	ldr	r3, [pc, #288]	; (8003bdc <osThreadNew+0x150>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d106      	bne.n	8003ace <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ac0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ac4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f040 8082 	bne.w	8003bd2 <osThreadNew+0x146>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d07e      	beq.n	8003bd2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003ad8:	2318      	movs	r3, #24
 8003ada:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003adc:	2300      	movs	r3, #0
 8003ade:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003ae0:	f107 031b 	add.w	r3, r7, #27
 8003ae4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d045      	beq.n	8003b7e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <osThreadNew+0x74>
        name = attr->name;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <osThreadNew+0x9a>
 8003b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b16:	2b38      	cmp	r3, #56	; 0x38
 8003b18:	d805      	bhi.n	8003b26 <osThreadNew+0x9a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <osThreadNew+0x9e>
        return (NULL);
 8003b26:	2300      	movs	r3, #0
 8003b28:	e054      	b.n	8003bd4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	089b      	lsrs	r3, r3, #2
 8003b38:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00e      	beq.n	8003b60 <osThreadNew+0xd4>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	2bbb      	cmp	r3, #187	; 0xbb
 8003b48:	d90a      	bls.n	8003b60 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d006      	beq.n	8003b60 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <osThreadNew+0xd4>
        mem = 1;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b5e:	e010      	b.n	8003b82 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10c      	bne.n	8003b82 <osThreadNew+0xf6>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d108      	bne.n	8003b82 <osThreadNew+0xf6>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d104      	bne.n	8003b82 <osThreadNew+0xf6>
          mem = 0;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b7c:	e001      	b.n	8003b82 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d110      	bne.n	8003baa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b90:	9202      	str	r2, [sp, #8]
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fea8 	bl	80048f4 <xTaskCreateStatic>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	e013      	b.n	8003bd2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d110      	bne.n	8003bd2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	f107 0314 	add.w	r3, r7, #20
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 fef2 	bl	80049ac <xTaskCreate>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d001      	beq.n	8003bd2 <osThreadNew+0x146>
          hTask = NULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003bd2:	697b      	ldr	r3, [r7, #20]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3738      	adds	r7, #56	; 0x38
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	200000f4 	.word	0x200000f4

08003be0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08c      	sub	sp, #48	; 0x30
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bf0:	f3ef 8305 	mrs	r3, IPSR
 8003bf4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bf6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d16f      	bne.n	8003cdc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8003c00:	617b      	str	r3, [r7, #20]
  return(result);
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d169      	bne.n	8003cdc <osMessageQueueNew+0xfc>
 8003c08:	4b37      	ldr	r3, [pc, #220]	; (8003ce8 <osMessageQueueNew+0x108>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d105      	bne.n	8003c1c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c10:	f3ef 8311 	mrs	r3, BASEPRI
 8003c14:	613b      	str	r3, [r7, #16]
  return(result);
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d15f      	bne.n	8003cdc <osMessageQueueNew+0xfc>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d05c      	beq.n	8003cdc <osMessageQueueNew+0xfc>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d059      	beq.n	8003cdc <osMessageQueueNew+0xfc>
    mem = -1;
 8003c28:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d029      	beq.n	8003c88 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d012      	beq.n	8003c62 <osMessageQueueNew+0x82>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	2b4f      	cmp	r3, #79	; 0x4f
 8003c42:	d90e      	bls.n	8003c62 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	fb01 f303 	mul.w	r3, r1, r3
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d302      	bcc.n	8003c62 <osMessageQueueNew+0x82>
        mem = 1;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	623b      	str	r3, [r7, #32]
 8003c60:	e014      	b.n	8003c8c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d110      	bne.n	8003c8c <osMessageQueueNew+0xac>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10c      	bne.n	8003c8c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d108      	bne.n	8003c8c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d104      	bne.n	8003c8c <osMessageQueueNew+0xac>
          mem = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	623b      	str	r3, [r7, #32]
 8003c86:	e001      	b.n	8003c8c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d10b      	bne.n	8003caa <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	9100      	str	r1, [sp, #0]
 8003c9e:	68b9      	ldr	r1, [r7, #8]
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f96d 	bl	8003f80 <xQueueGenericCreateStatic>
 8003ca6:	6278      	str	r0, [r7, #36]	; 0x24
 8003ca8:	e008      	b.n	8003cbc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d105      	bne.n	8003cbc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f9da 	bl	800406e <xQueueGenericCreate>
 8003cba:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00c      	beq.n	8003cdc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <osMessageQueueNew+0xf0>
        name = attr->name;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	e001      	b.n	8003cd4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003cd4:	69f9      	ldr	r1, [r7, #28]
 8003cd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cd8:	f000 fdb0 	bl	800483c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3728      	adds	r7, #40	; 0x28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	200000f4 	.word	0x200000f4

08003cec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a06      	ldr	r2, [pc, #24]	; (8003d14 <vApplicationGetIdleTaskMemory+0x28>)
 8003cfc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4a05      	ldr	r2, [pc, #20]	; (8003d18 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2280      	movs	r2, #128	; 0x80
 8003d08:	601a      	str	r2, [r3, #0]
}
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr
 8003d14:	200000f8 	.word	0x200000f8
 8003d18:	200001b4 	.word	0x200001b4

08003d1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4a07      	ldr	r2, [pc, #28]	; (8003d48 <vApplicationGetTimerTaskMemory+0x2c>)
 8003d2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4a06      	ldr	r2, [pc, #24]	; (8003d4c <vApplicationGetTimerTaskMemory+0x30>)
 8003d32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d3a:	601a      	str	r2, [r3, #0]
}
 8003d3c:	bf00      	nop
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	200003b4 	.word	0x200003b4
 8003d4c:	20000470 	.word	0x20000470

08003d50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f103 0208 	add.w	r2, r3, #8
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f04f 32ff 	mov.w	r2, #4294967295
 8003d68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f103 0208 	add.w	r2, r3, #8
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f103 0208 	add.w	r2, r3, #8
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr

08003d8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	601a      	str	r2, [r3, #0]
}
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr

08003dec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e02:	d103      	bne.n	8003e0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	e00c      	b.n	8003e26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3308      	adds	r3, #8
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	e002      	b.n	8003e1a <vListInsert+0x2e>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d2f6      	bcs.n	8003e14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	601a      	str	r2, [r3, #0]
}
 8003e52:	bf00      	nop
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr

08003e5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6892      	ldr	r2, [r2, #8]
 8003e72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6852      	ldr	r2, [r2, #4]
 8003e7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d103      	bne.n	8003e90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	1e5a      	subs	r2, r3, #1
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr
	...

08003eb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10a      	bne.n	8003eda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ed6:	bf00      	nop
 8003ed8:	e7fe      	b.n	8003ed8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003eda:	f001 ffff 	bl	8005edc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee6:	68f9      	ldr	r1, [r7, #12]
 8003ee8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003eea:	fb01 f303 	mul.w	r3, r1, r3
 8003eee:	441a      	add	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	68f9      	ldr	r1, [r7, #12]
 8003f0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	441a      	add	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	22ff      	movs	r2, #255	; 0xff
 8003f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	22ff      	movs	r2, #255	; 0xff
 8003f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d114      	bne.n	8003f5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01a      	beq.n	8003f6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3310      	adds	r3, #16
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 f925 	bl	800518c <xTaskRemoveFromEventList>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d012      	beq.n	8003f6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <xQueueGenericReset+0xcc>)
 8003f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	e009      	b.n	8003f6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	3310      	adds	r3, #16
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fef6 	bl	8003d50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	3324      	adds	r3, #36	; 0x24
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff fef1 	bl	8003d50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f6e:	f001 ffe5 	bl	8005f3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f72:	2301      	movs	r3, #1
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	e000ed04 	.word	0xe000ed04

08003f80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08e      	sub	sp, #56	; 0x38
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10a      	bne.n	8003faa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fa6:	bf00      	nop
 8003fa8:	e7fe      	b.n	8003fa8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fc2:	bf00      	nop
 8003fc4:	e7fe      	b.n	8003fc4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <xQueueGenericCreateStatic+0x52>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <xQueueGenericCreateStatic+0x56>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <xQueueGenericCreateStatic+0x58>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10a      	bne.n	8003ff2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe0:	f383 8811 	msr	BASEPRI, r3
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	623b      	str	r3, [r7, #32]
}
 8003fee:	bf00      	nop
 8003ff0:	e7fe      	b.n	8003ff0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d102      	bne.n	8003ffe <xQueueGenericCreateStatic+0x7e>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <xQueueGenericCreateStatic+0x82>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <xQueueGenericCreateStatic+0x84>
 8004002:	2300      	movs	r3, #0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	61fb      	str	r3, [r7, #28]
}
 800401a:	bf00      	nop
 800401c:	e7fe      	b.n	800401c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800401e:	2350      	movs	r3, #80	; 0x50
 8004020:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b50      	cmp	r3, #80	; 0x50
 8004026:	d00a      	beq.n	800403e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	61bb      	str	r3, [r7, #24]
}
 800403a:	bf00      	nop
 800403c:	e7fe      	b.n	800403c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00d      	beq.n	8004064 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004050:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f843 	bl	80040ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004066:	4618      	mov	r0, r3
 8004068:	3730      	adds	r7, #48	; 0x30
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800406e:	b580      	push	{r7, lr}
 8004070:	b08a      	sub	sp, #40	; 0x28
 8004072:	af02      	add	r7, sp, #8
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	4613      	mov	r3, r2
 800407a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10a      	bne.n	8004098 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	613b      	str	r3, [r7, #16]
}
 8004094:	bf00      	nop
 8004096:	e7fe      	b.n	8004096 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d102      	bne.n	80040a4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	e004      	b.n	80040ae <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	fb02 f303 	mul.w	r3, r2, r3
 80040ac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3350      	adds	r3, #80	; 0x50
 80040b2:	4618      	mov	r0, r3
 80040b4:	f002 f812 	bl	80060dc <pvPortMalloc>
 80040b8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00f      	beq.n	80040e0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	3350      	adds	r3, #80	; 0x50
 80040c4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040ce:	79fa      	ldrb	r2, [r7, #7]
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f805 	bl	80040ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80040e0:	69bb      	ldr	r3, [r7, #24]
	}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3720      	adds	r7, #32
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
 80040f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d103      	bne.n	8004106 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	e002      	b.n	800410c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004118:	2101      	movs	r1, #1
 800411a:	69b8      	ldr	r0, [r7, #24]
 800411c:	f7ff fec8 	bl	8003eb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08e      	sub	sp, #56	; 0x38
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800413e:	2300      	movs	r3, #0
 8004140:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <xQueueGenericSend+0x32>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800415e:	bf00      	nop
 8004160:	e7fe      	b.n	8004160 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d103      	bne.n	8004170 <xQueueGenericSend+0x40>
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <xQueueGenericSend+0x44>
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <xQueueGenericSend+0x46>
 8004174:	2300      	movs	r3, #0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <xQueueGenericSend+0x60>
	__asm volatile
 800417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800418c:	bf00      	nop
 800418e:	e7fe      	b.n	800418e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d103      	bne.n	800419e <xQueueGenericSend+0x6e>
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <xQueueGenericSend+0x72>
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <xQueueGenericSend+0x74>
 80041a2:	2300      	movs	r3, #0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <xQueueGenericSend+0x8e>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	623b      	str	r3, [r7, #32]
}
 80041ba:	bf00      	nop
 80041bc:	e7fe      	b.n	80041bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041be:	f001 f9ab 	bl	8005518 <xTaskGetSchedulerState>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d102      	bne.n	80041ce <xQueueGenericSend+0x9e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <xQueueGenericSend+0xa2>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <xQueueGenericSend+0xa4>
 80041d2:	2300      	movs	r3, #0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <xQueueGenericSend+0xbe>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	61fb      	str	r3, [r7, #28]
}
 80041ea:	bf00      	nop
 80041ec:	e7fe      	b.n	80041ec <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041ee:	f001 fe75 	bl	8005edc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d302      	bcc.n	8004204 <xQueueGenericSend+0xd4>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d129      	bne.n	8004258 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800420a:	f000 fa07 	bl	800461c <prvCopyDataToQueue>
 800420e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	2b00      	cmp	r3, #0
 8004216:	d010      	beq.n	800423a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421a:	3324      	adds	r3, #36	; 0x24
 800421c:	4618      	mov	r0, r3
 800421e:	f000 ffb5 	bl	800518c <xTaskRemoveFromEventList>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d013      	beq.n	8004250 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004228:	4b3f      	ldr	r3, [pc, #252]	; (8004328 <xQueueGenericSend+0x1f8>)
 800422a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	e00a      	b.n	8004250 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d007      	beq.n	8004250 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004240:	4b39      	ldr	r3, [pc, #228]	; (8004328 <xQueueGenericSend+0x1f8>)
 8004242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004250:	f001 fe74 	bl	8005f3c <vPortExitCritical>
				return pdPASS;
 8004254:	2301      	movs	r3, #1
 8004256:	e063      	b.n	8004320 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d103      	bne.n	8004266 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800425e:	f001 fe6d 	bl	8005f3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004262:	2300      	movs	r3, #0
 8004264:	e05c      	b.n	8004320 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004268:	2b00      	cmp	r3, #0
 800426a:	d106      	bne.n	800427a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800426c:	f107 0314 	add.w	r3, r7, #20
 8004270:	4618      	mov	r0, r3
 8004272:	f000 ffef 	bl	8005254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004276:	2301      	movs	r3, #1
 8004278:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800427a:	f001 fe5f 	bl	8005f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800427e:	f000 fd59 	bl	8004d34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004282:	f001 fe2b 	bl	8005edc <vPortEnterCritical>
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800428c:	b25b      	sxtb	r3, r3
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	d103      	bne.n	800429c <xQueueGenericSend+0x16c>
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042a2:	b25b      	sxtb	r3, r3
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d103      	bne.n	80042b2 <xQueueGenericSend+0x182>
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042b2:	f001 fe43 	bl	8005f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042b6:	1d3a      	adds	r2, r7, #4
 80042b8:	f107 0314 	add.w	r3, r7, #20
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 ffde 	bl	8005280 <xTaskCheckForTimeOut>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d124      	bne.n	8004314 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042cc:	f000 fa9e 	bl	800480c <prvIsQueueFull>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d018      	beq.n	8004308 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	3310      	adds	r3, #16
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	4611      	mov	r1, r2
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 ff04 	bl	80050ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042e6:	f000 fa29 	bl	800473c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042ea:	f000 fd31 	bl	8004d50 <xTaskResumeAll>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f47f af7c 	bne.w	80041ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80042f6:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <xQueueGenericSend+0x1f8>)
 80042f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	e772      	b.n	80041ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800430a:	f000 fa17 	bl	800473c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800430e:	f000 fd1f 	bl	8004d50 <xTaskResumeAll>
 8004312:	e76c      	b.n	80041ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004316:	f000 fa11 	bl	800473c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800431a:	f000 fd19 	bl	8004d50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800431e:	2300      	movs	r3, #0
		}
	}
}
 8004320:	4618      	mov	r0, r3
 8004322:	3738      	adds	r7, #56	; 0x38
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08e      	sub	sp, #56	; 0x38
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10a      	bne.n	800435a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004356:	bf00      	nop
 8004358:	e7fe      	b.n	8004358 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d103      	bne.n	8004368 <xQueueGenericSendFromISR+0x3c>
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <xQueueGenericSendFromISR+0x40>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <xQueueGenericSendFromISR+0x42>
 800436c:	2300      	movs	r3, #0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	623b      	str	r3, [r7, #32]
}
 8004384:	bf00      	nop
 8004386:	e7fe      	b.n	8004386 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d103      	bne.n	8004396 <xQueueGenericSendFromISR+0x6a>
 800438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <xQueueGenericSendFromISR+0x6e>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <xQueueGenericSendFromISR+0x70>
 800439a:	2300      	movs	r3, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10a      	bne.n	80043b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	61fb      	str	r3, [r7, #28]
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043b6:	f001 fe53 	bl	8006060 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043ba:	f3ef 8211 	mrs	r2, BASEPRI
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	61ba      	str	r2, [r7, #24]
 80043d0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043d2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	429a      	cmp	r2, r3
 80043e0:	d302      	bcc.n	80043e8 <xQueueGenericSendFromISR+0xbc>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d12c      	bne.n	8004442 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	68b9      	ldr	r1, [r7, #8]
 80043f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043f8:	f000 f910 	bl	800461c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80043fc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d112      	bne.n	800442c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	2b00      	cmp	r3, #0
 800440c:	d016      	beq.n	800443c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	3324      	adds	r3, #36	; 0x24
 8004412:	4618      	mov	r0, r3
 8004414:	f000 feba 	bl	800518c <xTaskRemoveFromEventList>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00e      	beq.n	800443c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00b      	beq.n	800443c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	e007      	b.n	800443c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800442c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004430:	3301      	adds	r3, #1
 8004432:	b2db      	uxtb	r3, r3
 8004434:	b25a      	sxtb	r2, r3
 8004436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800443c:	2301      	movs	r3, #1
 800443e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004440:	e001      	b.n	8004446 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004442:	2300      	movs	r3, #0
 8004444:	637b      	str	r3, [r7, #52]	; 0x34
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004450:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004454:	4618      	mov	r0, r3
 8004456:	3738      	adds	r7, #56	; 0x38
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08c      	sub	sp, #48	; 0x30
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004468:	2300      	movs	r3, #0
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <xQueueReceive+0x30>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	623b      	str	r3, [r7, #32]
}
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d103      	bne.n	800449a <xQueueReceive+0x3e>
 8004492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <xQueueReceive+0x42>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <xQueueReceive+0x44>
 800449e:	2300      	movs	r3, #0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <xQueueReceive+0x5e>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	61fb      	str	r3, [r7, #28]
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044ba:	f001 f82d 	bl	8005518 <xTaskGetSchedulerState>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d102      	bne.n	80044ca <xQueueReceive+0x6e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <xQueueReceive+0x72>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <xQueueReceive+0x74>
 80044ce:	2300      	movs	r3, #0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <xQueueReceive+0x8e>
	__asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	61bb      	str	r3, [r7, #24]
}
 80044e6:	bf00      	nop
 80044e8:	e7fe      	b.n	80044e8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80044ea:	f001 fcf7 	bl	8005edc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d01f      	beq.n	800453a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044fe:	f000 f8f7 	bl	80046f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	1e5a      	subs	r2, r3, #1
 8004506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004508:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00f      	beq.n	8004532 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	3310      	adds	r3, #16
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fe38 	bl	800518c <xTaskRemoveFromEventList>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d007      	beq.n	8004532 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004522:	4b3d      	ldr	r3, [pc, #244]	; (8004618 <xQueueReceive+0x1bc>)
 8004524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004532:	f001 fd03 	bl	8005f3c <vPortExitCritical>
				return pdPASS;
 8004536:	2301      	movs	r3, #1
 8004538:	e069      	b.n	800460e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d103      	bne.n	8004548 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004540:	f001 fcfc 	bl	8005f3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004544:	2300      	movs	r3, #0
 8004546:	e062      	b.n	800460e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800454e:	f107 0310 	add.w	r3, r7, #16
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fe7e 	bl	8005254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004558:	2301      	movs	r3, #1
 800455a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800455c:	f001 fcee 	bl	8005f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004560:	f000 fbe8 	bl	8004d34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004564:	f001 fcba 	bl	8005edc <vPortEnterCritical>
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800456e:	b25b      	sxtb	r3, r3
 8004570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004574:	d103      	bne.n	800457e <xQueueReceive+0x122>
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004584:	b25b      	sxtb	r3, r3
 8004586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458a:	d103      	bne.n	8004594 <xQueueReceive+0x138>
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004594:	f001 fcd2 	bl	8005f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004598:	1d3a      	adds	r2, r7, #4
 800459a:	f107 0310 	add.w	r3, r7, #16
 800459e:	4611      	mov	r1, r2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fe6d 	bl	8005280 <xTaskCheckForTimeOut>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d123      	bne.n	80045f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ae:	f000 f917 	bl	80047e0 <prvIsQueueEmpty>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d017      	beq.n	80045e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	3324      	adds	r3, #36	; 0x24
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	4611      	mov	r1, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fd93 	bl	80050ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045c8:	f000 f8b8 	bl	800473c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045cc:	f000 fbc0 	bl	8004d50 <xTaskResumeAll>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d189      	bne.n	80044ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80045d6:	4b10      	ldr	r3, [pc, #64]	; (8004618 <xQueueReceive+0x1bc>)
 80045d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	e780      	b.n	80044ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ea:	f000 f8a7 	bl	800473c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045ee:	f000 fbaf 	bl	8004d50 <xTaskResumeAll>
 80045f2:	e77a      	b.n	80044ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80045f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045f6:	f000 f8a1 	bl	800473c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045fa:	f000 fba9 	bl	8004d50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004600:	f000 f8ee 	bl	80047e0 <prvIsQueueEmpty>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	f43f af6f 	beq.w	80044ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800460c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800460e:	4618      	mov	r0, r3
 8004610:	3730      	adds	r7, #48	; 0x30
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	e000ed04 	.word	0xe000ed04

0800461c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004628:	2300      	movs	r3, #0
 800462a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10d      	bne.n	8004656 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d14d      	bne.n	80046de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	4618      	mov	r0, r3
 8004648:	f000 ff84 	bl	8005554 <xTaskPriorityDisinherit>
 800464c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	605a      	str	r2, [r3, #4]
 8004654:	e043      	b.n	80046de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d119      	bne.n	8004690 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6898      	ldr	r0, [r3, #8]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	461a      	mov	r2, r3
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	f002 f833 	bl	80066d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	441a      	add	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	429a      	cmp	r2, r3
 8004684:	d32b      	bcc.n	80046de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	609a      	str	r2, [r3, #8]
 800468e:	e026      	b.n	80046de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	68d8      	ldr	r0, [r3, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	461a      	mov	r2, r3
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	f002 f819 	bl	80066d2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	425b      	negs	r3, r3
 80046aa:	441a      	add	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d207      	bcs.n	80046cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	425b      	negs	r3, r3
 80046c6:	441a      	add	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d105      	bne.n	80046de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	3b01      	subs	r3, #1
 80046dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80046e6:	697b      	ldr	r3, [r7, #20]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d018      	beq.n	8004734 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	441a      	add	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	429a      	cmp	r2, r3
 800471a:	d303      	bcc.n	8004724 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68d9      	ldr	r1, [r3, #12]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	461a      	mov	r2, r3
 800472e:	6838      	ldr	r0, [r7, #0]
 8004730:	f001 ffcf 	bl	80066d2 <memcpy>
	}
}
 8004734:	bf00      	nop
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004744:	f001 fbca 	bl	8005edc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800474e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004750:	e011      	b.n	8004776 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	2b00      	cmp	r3, #0
 8004758:	d012      	beq.n	8004780 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3324      	adds	r3, #36	; 0x24
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fd14 	bl	800518c <xTaskRemoveFromEventList>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800476a:	f000 fdeb 	bl	8005344 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	3b01      	subs	r3, #1
 8004772:	b2db      	uxtb	r3, r3
 8004774:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	dce9      	bgt.n	8004752 <prvUnlockQueue+0x16>
 800477e:	e000      	b.n	8004782 <prvUnlockQueue+0x46>
					break;
 8004780:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	22ff      	movs	r2, #255	; 0xff
 8004786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800478a:	f001 fbd7 	bl	8005f3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800478e:	f001 fba5 	bl	8005edc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004798:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800479a:	e011      	b.n	80047c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d012      	beq.n	80047ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3310      	adds	r3, #16
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fcef 	bl	800518c <xTaskRemoveFromEventList>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047b4:	f000 fdc6 	bl	8005344 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047b8:	7bbb      	ldrb	r3, [r7, #14]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	dce9      	bgt.n	800479c <prvUnlockQueue+0x60>
 80047c8:	e000      	b.n	80047cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	22ff      	movs	r2, #255	; 0xff
 80047d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80047d4:	f001 fbb2 	bl	8005f3c <vPortExitCritical>
}
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047e8:	f001 fb78 	bl	8005edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d102      	bne.n	80047fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80047f4:	2301      	movs	r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	e001      	b.n	80047fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047fe:	f001 fb9d 	bl	8005f3c <vPortExitCritical>

	return xReturn;
 8004802:	68fb      	ldr	r3, [r7, #12]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004814:	f001 fb62 	bl	8005edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004820:	429a      	cmp	r2, r3
 8004822:	d102      	bne.n	800482a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004824:	2301      	movs	r3, #1
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	e001      	b.n	800482e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800482e:	f001 fb85 	bl	8005f3c <vPortExitCritical>

	return xReturn;
 8004832:	68fb      	ldr	r3, [r7, #12]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	e014      	b.n	8004876 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800484c:	4a0e      	ldr	r2, [pc, #56]	; (8004888 <vQueueAddToRegistry+0x4c>)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10b      	bne.n	8004870 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004858:	490b      	ldr	r1, [pc, #44]	; (8004888 <vQueueAddToRegistry+0x4c>)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004862:	4a09      	ldr	r2, [pc, #36]	; (8004888 <vQueueAddToRegistry+0x4c>)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	4413      	add	r3, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800486e:	e006      	b.n	800487e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3301      	adds	r3, #1
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b07      	cmp	r3, #7
 800487a:	d9e7      	bls.n	800484c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800487c:	bf00      	nop
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr
 8004888:	20002fb8 	.word	0x20002fb8

0800488c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800489c:	f001 fb1e 	bl	8005edc <vPortEnterCritical>
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048a6:	b25b      	sxtb	r3, r3
 80048a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ac:	d103      	bne.n	80048b6 <vQueueWaitForMessageRestricted+0x2a>
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048bc:	b25b      	sxtb	r3, r3
 80048be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c2:	d103      	bne.n	80048cc <vQueueWaitForMessageRestricted+0x40>
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048cc:	f001 fb36 	bl	8005f3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d106      	bne.n	80048e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	3324      	adds	r3, #36	; 0x24
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fc27 	bl	8005134 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048e6:	6978      	ldr	r0, [r7, #20]
 80048e8:	f7ff ff28 	bl	800473c <prvUnlockQueue>
	}
 80048ec:	bf00      	nop
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08e      	sub	sp, #56	; 0x38
 80048f8:	af04      	add	r7, sp, #16
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10a      	bne.n	800491e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	623b      	str	r3, [r7, #32]
}
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800491e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10a      	bne.n	800493a <xTaskCreateStatic+0x46>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	61fb      	str	r3, [r7, #28]
}
 8004936:	bf00      	nop
 8004938:	e7fe      	b.n	8004938 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800493a:	23bc      	movs	r3, #188	; 0xbc
 800493c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2bbc      	cmp	r3, #188	; 0xbc
 8004942:	d00a      	beq.n	800495a <xTaskCreateStatic+0x66>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	61bb      	str	r3, [r7, #24]
}
 8004956:	bf00      	nop
 8004958:	e7fe      	b.n	8004958 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	2b00      	cmp	r3, #0
 800495e:	d01e      	beq.n	800499e <xTaskCreateStatic+0xaa>
 8004960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01b      	beq.n	800499e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800496e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	2202      	movs	r2, #2
 8004974:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004978:	2300      	movs	r3, #0
 800497a:	9303      	str	r3, [sp, #12]
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	9302      	str	r3, [sp, #8]
 8004980:	f107 0314 	add.w	r3, r7, #20
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f851 	bl	8004a38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004996:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004998:	f000 f8ec 	bl	8004b74 <prvAddNewTaskToReadyList>
 800499c:	e001      	b.n	80049a2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049a2:	697b      	ldr	r3, [r7, #20]
	}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3728      	adds	r7, #40	; 0x28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08c      	sub	sp, #48	; 0x30
 80049b0:	af04      	add	r7, sp, #16
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	4613      	mov	r3, r2
 80049ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f001 fb8b 	bl	80060dc <pvPortMalloc>
 80049c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00e      	beq.n	80049ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80049ce:	20bc      	movs	r0, #188	; 0xbc
 80049d0:	f001 fb84 	bl	80060dc <pvPortMalloc>
 80049d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	631a      	str	r2, [r3, #48]	; 0x30
 80049e2:	e005      	b.n	80049f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049e4:	6978      	ldr	r0, [r7, #20]
 80049e6:	f001 fc3d 	bl	8006264 <vPortFree>
 80049ea:	e001      	b.n	80049f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d017      	beq.n	8004a26 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049fe:	88fa      	ldrh	r2, [r7, #6]
 8004a00:	2300      	movs	r3, #0
 8004a02:	9303      	str	r3, [sp, #12]
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	9302      	str	r3, [sp, #8]
 8004a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0a:	9301      	str	r3, [sp, #4]
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f80f 	bl	8004a38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a1a:	69f8      	ldr	r0, [r7, #28]
 8004a1c:	f000 f8aa 	bl	8004b74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a20:	2301      	movs	r3, #1
 8004a22:	61bb      	str	r3, [r7, #24]
 8004a24:	e002      	b.n	8004a2c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a26:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a2c:	69bb      	ldr	r3, [r7, #24]
	}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3720      	adds	r7, #32
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	461a      	mov	r2, r3
 8004a50:	21a5      	movs	r1, #165	; 0xa5
 8004a52:	f001 fe4c 	bl	80066ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a60:	3b01      	subs	r3, #1
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	f023 0307 	bic.w	r3, r3, #7
 8004a6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	617b      	str	r3, [r7, #20]
}
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a90:	2300      	movs	r3, #0
 8004a92:	61fb      	str	r3, [r7, #28]
 8004a94:	e012      	b.n	8004abc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	7819      	ldrb	r1, [r3, #0]
 8004a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3334      	adds	r3, #52	; 0x34
 8004aa6:	460a      	mov	r2, r1
 8004aa8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	4413      	add	r3, r2
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d006      	beq.n	8004ac4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	2b0f      	cmp	r3, #15
 8004ac0:	d9e9      	bls.n	8004a96 <prvInitialiseNewTask+0x5e>
 8004ac2:	e000      	b.n	8004ac6 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004ac4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	2b37      	cmp	r3, #55	; 0x37
 8004ad2:	d901      	bls.n	8004ad8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ad4:	2337      	movs	r3, #55	; 0x37
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004adc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ae2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	3304      	adds	r3, #4
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff f94d 	bl	8003d8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	3318      	adds	r3, #24
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff f948 	bl	8003d8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	3354      	adds	r3, #84	; 0x54
 8004b28:	2260      	movs	r2, #96	; 0x60
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f001 fdde 	bl	80066ee <memset>
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	4a0c      	ldr	r2, [pc, #48]	; (8004b68 <prvInitialiseNewTask+0x130>)
 8004b36:	659a      	str	r2, [r3, #88]	; 0x58
 8004b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3a:	4a0c      	ldr	r2, [pc, #48]	; (8004b6c <prvInitialiseNewTask+0x134>)
 8004b3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	4a0b      	ldr	r2, [pc, #44]	; (8004b70 <prvInitialiseNewTask+0x138>)
 8004b42:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	68f9      	ldr	r1, [r7, #12]
 8004b48:	69b8      	ldr	r0, [r7, #24]
 8004b4a:	f001 f8d7 	bl	8005cfc <pxPortInitialiseStack>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b60:	bf00      	nop
 8004b62:	3720      	adds	r7, #32
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	08007298 	.word	0x08007298
 8004b6c:	080072b8 	.word	0x080072b8
 8004b70:	08007278 	.word	0x08007278

08004b74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b7c:	f001 f9ae 	bl	8005edc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b80:	4b2d      	ldr	r3, [pc, #180]	; (8004c38 <prvAddNewTaskToReadyList+0xc4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3301      	adds	r3, #1
 8004b86:	4a2c      	ldr	r2, [pc, #176]	; (8004c38 <prvAddNewTaskToReadyList+0xc4>)
 8004b88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b8a:	4b2c      	ldr	r3, [pc, #176]	; (8004c3c <prvAddNewTaskToReadyList+0xc8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b92:	4a2a      	ldr	r2, [pc, #168]	; (8004c3c <prvAddNewTaskToReadyList+0xc8>)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b98:	4b27      	ldr	r3, [pc, #156]	; (8004c38 <prvAddNewTaskToReadyList+0xc4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d110      	bne.n	8004bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ba0:	f000 fbf4 	bl	800538c <prvInitialiseTaskLists>
 8004ba4:	e00d      	b.n	8004bc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ba6:	4b26      	ldr	r3, [pc, #152]	; (8004c40 <prvAddNewTaskToReadyList+0xcc>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bae:	4b23      	ldr	r3, [pc, #140]	; (8004c3c <prvAddNewTaskToReadyList+0xc8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d802      	bhi.n	8004bc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bbc:	4a1f      	ldr	r2, [pc, #124]	; (8004c3c <prvAddNewTaskToReadyList+0xc8>)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004bc2:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <prvAddNewTaskToReadyList+0xd0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	4a1e      	ldr	r2, [pc, #120]	; (8004c44 <prvAddNewTaskToReadyList+0xd0>)
 8004bca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004bcc:	4b1d      	ldr	r3, [pc, #116]	; (8004c44 <prvAddNewTaskToReadyList+0xd0>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd8:	4b1b      	ldr	r3, [pc, #108]	; (8004c48 <prvAddNewTaskToReadyList+0xd4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d903      	bls.n	8004be8 <prvAddNewTaskToReadyList+0x74>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be4:	4a18      	ldr	r2, [pc, #96]	; (8004c48 <prvAddNewTaskToReadyList+0xd4>)
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4a15      	ldr	r2, [pc, #84]	; (8004c4c <prvAddNewTaskToReadyList+0xd8>)
 8004bf6:	441a      	add	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4610      	mov	r0, r2
 8004c00:	f7ff f8d1 	bl	8003da6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c04:	f001 f99a 	bl	8005f3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c08:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <prvAddNewTaskToReadyList+0xcc>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00e      	beq.n	8004c2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c10:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <prvAddNewTaskToReadyList+0xc8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d207      	bcs.n	8004c2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c1e:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <prvAddNewTaskToReadyList+0xdc>)
 8004c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c2e:	bf00      	nop
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20000d44 	.word	0x20000d44
 8004c3c:	20000870 	.word	0x20000870
 8004c40:	20000d50 	.word	0x20000d50
 8004c44:	20000d60 	.word	0x20000d60
 8004c48:	20000d4c 	.word	0x20000d4c
 8004c4c:	20000874 	.word	0x20000874
 8004c50:	e000ed04 	.word	0xe000ed04

08004c54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08a      	sub	sp, #40	; 0x28
 8004c58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c62:	463a      	mov	r2, r7
 8004c64:	1d39      	adds	r1, r7, #4
 8004c66:	f107 0308 	add.w	r3, r7, #8
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff f83e 	bl	8003cec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c70:	6839      	ldr	r1, [r7, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	9202      	str	r2, [sp, #8]
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	460a      	mov	r2, r1
 8004c82:	4924      	ldr	r1, [pc, #144]	; (8004d14 <vTaskStartScheduler+0xc0>)
 8004c84:	4824      	ldr	r0, [pc, #144]	; (8004d18 <vTaskStartScheduler+0xc4>)
 8004c86:	f7ff fe35 	bl	80048f4 <xTaskCreateStatic>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	4a23      	ldr	r2, [pc, #140]	; (8004d1c <vTaskStartScheduler+0xc8>)
 8004c8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c90:	4b22      	ldr	r3, [pc, #136]	; (8004d1c <vTaskStartScheduler+0xc8>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	e001      	b.n	8004ca2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d102      	bne.n	8004cae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ca8:	f000 fd16 	bl	80056d8 <xTimerCreateTimerTask>
 8004cac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d11b      	bne.n	8004cec <vTaskStartScheduler+0x98>
	__asm volatile
 8004cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	613b      	str	r3, [r7, #16]
}
 8004cc6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004cc8:	4b15      	ldr	r3, [pc, #84]	; (8004d20 <vTaskStartScheduler+0xcc>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3354      	adds	r3, #84	; 0x54
 8004cce:	4a15      	ldr	r2, [pc, #84]	; (8004d24 <vTaskStartScheduler+0xd0>)
 8004cd0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <vTaskStartScheduler+0xd4>)
 8004cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cda:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <vTaskStartScheduler+0xd8>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004ce0:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <vTaskStartScheduler+0xdc>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ce6:	f001 f887 	bl	8005df8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004cea:	e00e      	b.n	8004d0a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	d10a      	bne.n	8004d0a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	60fb      	str	r3, [r7, #12]
}
 8004d06:	bf00      	nop
 8004d08:	e7fe      	b.n	8004d08 <vTaskStartScheduler+0xb4>
}
 8004d0a:	bf00      	nop
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	080071f4 	.word	0x080071f4
 8004d18:	0800535d 	.word	0x0800535d
 8004d1c:	20000d68 	.word	0x20000d68
 8004d20:	20000870 	.word	0x20000870
 8004d24:	20000014 	.word	0x20000014
 8004d28:	20000d64 	.word	0x20000d64
 8004d2c:	20000d50 	.word	0x20000d50
 8004d30:	20000d48 	.word	0x20000d48

08004d34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004d38:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <vTaskSuspendAll+0x18>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	4a03      	ldr	r2, [pc, #12]	; (8004d4c <vTaskSuspendAll+0x18>)
 8004d40:	6013      	str	r3, [r2, #0]
}
 8004d42:	bf00      	nop
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bc80      	pop	{r7}
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	20000d6c 	.word	0x20000d6c

08004d50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d5e:	4b42      	ldr	r3, [pc, #264]	; (8004e68 <xTaskResumeAll+0x118>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <xTaskResumeAll+0x2c>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	603b      	str	r3, [r7, #0]
}
 8004d78:	bf00      	nop
 8004d7a:	e7fe      	b.n	8004d7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d7c:	f001 f8ae 	bl	8005edc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d80:	4b39      	ldr	r3, [pc, #228]	; (8004e68 <xTaskResumeAll+0x118>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	4a38      	ldr	r2, [pc, #224]	; (8004e68 <xTaskResumeAll+0x118>)
 8004d88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d8a:	4b37      	ldr	r3, [pc, #220]	; (8004e68 <xTaskResumeAll+0x118>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d162      	bne.n	8004e58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d92:	4b36      	ldr	r3, [pc, #216]	; (8004e6c <xTaskResumeAll+0x11c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d05e      	beq.n	8004e58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d9a:	e02f      	b.n	8004dfc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004d9c:	4b34      	ldr	r3, [pc, #208]	; (8004e70 <xTaskResumeAll+0x120>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3318      	adds	r3, #24
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff f857 	bl	8003e5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	3304      	adds	r3, #4
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff f852 	bl	8003e5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbc:	4b2d      	ldr	r3, [pc, #180]	; (8004e74 <xTaskResumeAll+0x124>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d903      	bls.n	8004dcc <xTaskResumeAll+0x7c>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	4a2a      	ldr	r2, [pc, #168]	; (8004e74 <xTaskResumeAll+0x124>)
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4a27      	ldr	r2, [pc, #156]	; (8004e78 <xTaskResumeAll+0x128>)
 8004dda:	441a      	add	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4619      	mov	r1, r3
 8004de2:	4610      	mov	r0, r2
 8004de4:	f7fe ffdf 	bl	8003da6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dec:	4b23      	ldr	r3, [pc, #140]	; (8004e7c <xTaskResumeAll+0x12c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d302      	bcc.n	8004dfc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004df6:	4b22      	ldr	r3, [pc, #136]	; (8004e80 <xTaskResumeAll+0x130>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dfc:	4b1c      	ldr	r3, [pc, #112]	; (8004e70 <xTaskResumeAll+0x120>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1cb      	bne.n	8004d9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e0a:	f000 fb61 	bl	80054d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004e0e:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <xTaskResumeAll+0x134>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d010      	beq.n	8004e3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e1a:	f000 f845 	bl	8004ea8 <xTaskIncrementTick>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004e24:	4b16      	ldr	r3, [pc, #88]	; (8004e80 <xTaskResumeAll+0x130>)
 8004e26:	2201      	movs	r2, #1
 8004e28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f1      	bne.n	8004e1a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004e36:	4b13      	ldr	r3, [pc, #76]	; (8004e84 <xTaskResumeAll+0x134>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e3c:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <xTaskResumeAll+0x130>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d009      	beq.n	8004e58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e44:	2301      	movs	r3, #1
 8004e46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e48:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <xTaskResumeAll+0x138>)
 8004e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e58:	f001 f870 	bl	8005f3c <vPortExitCritical>

	return xAlreadyYielded;
 8004e5c:	68bb      	ldr	r3, [r7, #8]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20000d6c 	.word	0x20000d6c
 8004e6c:	20000d44 	.word	0x20000d44
 8004e70:	20000d04 	.word	0x20000d04
 8004e74:	20000d4c 	.word	0x20000d4c
 8004e78:	20000874 	.word	0x20000874
 8004e7c:	20000870 	.word	0x20000870
 8004e80:	20000d58 	.word	0x20000d58
 8004e84:	20000d54 	.word	0x20000d54
 8004e88:	e000ed04 	.word	0xe000ed04

08004e8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e92:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <xTaskGetTickCount+0x18>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e98:	687b      	ldr	r3, [r7, #4]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr
 8004ea4:	20000d48 	.word	0x20000d48

08004ea8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eb2:	4b51      	ldr	r3, [pc, #324]	; (8004ff8 <xTaskIncrementTick+0x150>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f040 808e 	bne.w	8004fd8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ebc:	4b4f      	ldr	r3, [pc, #316]	; (8004ffc <xTaskIncrementTick+0x154>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ec4:	4a4d      	ldr	r2, [pc, #308]	; (8004ffc <xTaskIncrementTick+0x154>)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d120      	bne.n	8004f12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ed0:	4b4b      	ldr	r3, [pc, #300]	; (8005000 <xTaskIncrementTick+0x158>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <xTaskIncrementTick+0x48>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	603b      	str	r3, [r7, #0]
}
 8004eec:	bf00      	nop
 8004eee:	e7fe      	b.n	8004eee <xTaskIncrementTick+0x46>
 8004ef0:	4b43      	ldr	r3, [pc, #268]	; (8005000 <xTaskIncrementTick+0x158>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	4b43      	ldr	r3, [pc, #268]	; (8005004 <xTaskIncrementTick+0x15c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a41      	ldr	r2, [pc, #260]	; (8005000 <xTaskIncrementTick+0x158>)
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	4a41      	ldr	r2, [pc, #260]	; (8005004 <xTaskIncrementTick+0x15c>)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	4b40      	ldr	r3, [pc, #256]	; (8005008 <xTaskIncrementTick+0x160>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	4a3f      	ldr	r2, [pc, #252]	; (8005008 <xTaskIncrementTick+0x160>)
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	f000 fadf 	bl	80054d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f12:	4b3e      	ldr	r3, [pc, #248]	; (800500c <xTaskIncrementTick+0x164>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d34e      	bcc.n	8004fba <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f1c:	4b38      	ldr	r3, [pc, #224]	; (8005000 <xTaskIncrementTick+0x158>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <xTaskIncrementTick+0x82>
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <xTaskIncrementTick+0x84>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d004      	beq.n	8004f3a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f30:	4b36      	ldr	r3, [pc, #216]	; (800500c <xTaskIncrementTick+0x164>)
 8004f32:	f04f 32ff 	mov.w	r2, #4294967295
 8004f36:	601a      	str	r2, [r3, #0]
					break;
 8004f38:	e03f      	b.n	8004fba <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f3a:	4b31      	ldr	r3, [pc, #196]	; (8005000 <xTaskIncrementTick+0x158>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d203      	bcs.n	8004f5a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f52:	4a2e      	ldr	r2, [pc, #184]	; (800500c <xTaskIncrementTick+0x164>)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6013      	str	r3, [r2, #0]
						break;
 8004f58:	e02f      	b.n	8004fba <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fe ff7c 	bl	8003e5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d004      	beq.n	8004f76 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	3318      	adds	r3, #24
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fe ff73 	bl	8003e5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7a:	4b25      	ldr	r3, [pc, #148]	; (8005010 <xTaskIncrementTick+0x168>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d903      	bls.n	8004f8a <xTaskIncrementTick+0xe2>
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f86:	4a22      	ldr	r2, [pc, #136]	; (8005010 <xTaskIncrementTick+0x168>)
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8e:	4613      	mov	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4a1f      	ldr	r2, [pc, #124]	; (8005014 <xTaskIncrementTick+0x16c>)
 8004f98:	441a      	add	r2, r3
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	f7fe ff00 	bl	8003da6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004faa:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <xTaskIncrementTick+0x170>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d3b3      	bcc.n	8004f1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fb8:	e7b0      	b.n	8004f1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fba:	4b17      	ldr	r3, [pc, #92]	; (8005018 <xTaskIncrementTick+0x170>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc0:	4914      	ldr	r1, [pc, #80]	; (8005014 <xTaskIncrementTick+0x16c>)
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d907      	bls.n	8004fe2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	e004      	b.n	8004fe2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004fd8:	4b10      	ldr	r3, [pc, #64]	; (800501c <xTaskIncrementTick+0x174>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	4a0f      	ldr	r2, [pc, #60]	; (800501c <xTaskIncrementTick+0x174>)
 8004fe0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004fe2:	4b0f      	ldr	r3, [pc, #60]	; (8005020 <xTaskIncrementTick+0x178>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004fea:	2301      	movs	r3, #1
 8004fec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004fee:	697b      	ldr	r3, [r7, #20]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20000d6c 	.word	0x20000d6c
 8004ffc:	20000d48 	.word	0x20000d48
 8005000:	20000cfc 	.word	0x20000cfc
 8005004:	20000d00 	.word	0x20000d00
 8005008:	20000d5c 	.word	0x20000d5c
 800500c:	20000d64 	.word	0x20000d64
 8005010:	20000d4c 	.word	0x20000d4c
 8005014:	20000874 	.word	0x20000874
 8005018:	20000870 	.word	0x20000870
 800501c:	20000d54 	.word	0x20000d54
 8005020:	20000d58 	.word	0x20000d58

08005024 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800502a:	4b2a      	ldr	r3, [pc, #168]	; (80050d4 <vTaskSwitchContext+0xb0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005032:	4b29      	ldr	r3, [pc, #164]	; (80050d8 <vTaskSwitchContext+0xb4>)
 8005034:	2201      	movs	r2, #1
 8005036:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005038:	e046      	b.n	80050c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800503a:	4b27      	ldr	r3, [pc, #156]	; (80050d8 <vTaskSwitchContext+0xb4>)
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005040:	4b26      	ldr	r3, [pc, #152]	; (80050dc <vTaskSwitchContext+0xb8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	e010      	b.n	800506a <vTaskSwitchContext+0x46>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <vTaskSwitchContext+0x40>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	607b      	str	r3, [r7, #4]
}
 8005060:	bf00      	nop
 8005062:	e7fe      	b.n	8005062 <vTaskSwitchContext+0x3e>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3b01      	subs	r3, #1
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	491d      	ldr	r1, [pc, #116]	; (80050e0 <vTaskSwitchContext+0xbc>)
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0e4      	beq.n	8005048 <vTaskSwitchContext+0x24>
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4613      	mov	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4a15      	ldr	r2, [pc, #84]	; (80050e0 <vTaskSwitchContext+0xbc>)
 800508a:	4413      	add	r3, r2
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	605a      	str	r2, [r3, #4]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	3308      	adds	r3, #8
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d104      	bne.n	80050ae <vTaskSwitchContext+0x8a>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	605a      	str	r2, [r3, #4]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	4a0b      	ldr	r2, [pc, #44]	; (80050e4 <vTaskSwitchContext+0xc0>)
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	4a08      	ldr	r2, [pc, #32]	; (80050dc <vTaskSwitchContext+0xb8>)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050be:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <vTaskSwitchContext+0xc0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3354      	adds	r3, #84	; 0x54
 80050c4:	4a08      	ldr	r2, [pc, #32]	; (80050e8 <vTaskSwitchContext+0xc4>)
 80050c6:	6013      	str	r3, [r2, #0]
}
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	20000d6c 	.word	0x20000d6c
 80050d8:	20000d58 	.word	0x20000d58
 80050dc:	20000d4c 	.word	0x20000d4c
 80050e0:	20000874 	.word	0x20000874
 80050e4:	20000870 	.word	0x20000870
 80050e8:	20000014 	.word	0x20000014

080050ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	60fb      	str	r3, [r7, #12]
}
 800510e:	bf00      	nop
 8005110:	e7fe      	b.n	8005110 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005112:	4b07      	ldr	r3, [pc, #28]	; (8005130 <vTaskPlaceOnEventList+0x44>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3318      	adds	r3, #24
 8005118:	4619      	mov	r1, r3
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7fe fe66 	bl	8003dec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005120:	2101      	movs	r1, #1
 8005122:	6838      	ldr	r0, [r7, #0]
 8005124:	f000 fa84 	bl	8005630 <prvAddCurrentTaskToDelayedList>
}
 8005128:	bf00      	nop
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20000870 	.word	0x20000870

08005134 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10a      	bne.n	800515c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	617b      	str	r3, [r7, #20]
}
 8005158:	bf00      	nop
 800515a:	e7fe      	b.n	800515a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800515c:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <vTaskPlaceOnEventListRestricted+0x54>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3318      	adds	r3, #24
 8005162:	4619      	mov	r1, r3
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f7fe fe1e 	bl	8003da6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005170:	f04f 33ff 	mov.w	r3, #4294967295
 8005174:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	68b8      	ldr	r0, [r7, #8]
 800517a:	f000 fa59 	bl	8005630 <prvAddCurrentTaskToDelayedList>
	}
 800517e:	bf00      	nop
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000870 	.word	0x20000870

0800518c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	60fb      	str	r3, [r7, #12]
}
 80051b4:	bf00      	nop
 80051b6:	e7fe      	b.n	80051b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	3318      	adds	r3, #24
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fe fe4d 	bl	8003e5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051c2:	4b1e      	ldr	r3, [pc, #120]	; (800523c <xTaskRemoveFromEventList+0xb0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d11d      	bne.n	8005206 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	3304      	adds	r3, #4
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe fe44 	bl	8003e5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d8:	4b19      	ldr	r3, [pc, #100]	; (8005240 <xTaskRemoveFromEventList+0xb4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d903      	bls.n	80051e8 <xTaskRemoveFromEventList+0x5c>
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	4a16      	ldr	r2, [pc, #88]	; (8005240 <xTaskRemoveFromEventList+0xb4>)
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4a13      	ldr	r2, [pc, #76]	; (8005244 <xTaskRemoveFromEventList+0xb8>)
 80051f6:	441a      	add	r2, r3
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	3304      	adds	r3, #4
 80051fc:	4619      	mov	r1, r3
 80051fe:	4610      	mov	r0, r2
 8005200:	f7fe fdd1 	bl	8003da6 <vListInsertEnd>
 8005204:	e005      	b.n	8005212 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	3318      	adds	r3, #24
 800520a:	4619      	mov	r1, r3
 800520c:	480e      	ldr	r0, [pc, #56]	; (8005248 <xTaskRemoveFromEventList+0xbc>)
 800520e:	f7fe fdca 	bl	8003da6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005216:	4b0d      	ldr	r3, [pc, #52]	; (800524c <xTaskRemoveFromEventList+0xc0>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	429a      	cmp	r2, r3
 800521e:	d905      	bls.n	800522c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005220:	2301      	movs	r3, #1
 8005222:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005224:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <xTaskRemoveFromEventList+0xc4>)
 8005226:	2201      	movs	r2, #1
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	e001      	b.n	8005230 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005230:	697b      	ldr	r3, [r7, #20]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000d6c 	.word	0x20000d6c
 8005240:	20000d4c 	.word	0x20000d4c
 8005244:	20000874 	.word	0x20000874
 8005248:	20000d04 	.word	0x20000d04
 800524c:	20000870 	.word	0x20000870
 8005250:	20000d58 	.word	0x20000d58

08005254 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800525c:	4b06      	ldr	r3, [pc, #24]	; (8005278 <vTaskInternalSetTimeOutState+0x24>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005264:	4b05      	ldr	r3, [pc, #20]	; (800527c <vTaskInternalSetTimeOutState+0x28>)
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	605a      	str	r2, [r3, #4]
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	bc80      	pop	{r7}
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	20000d5c 	.word	0x20000d5c
 800527c:	20000d48 	.word	0x20000d48

08005280 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10a      	bne.n	80052a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	613b      	str	r3, [r7, #16]
}
 80052a2:	bf00      	nop
 80052a4:	e7fe      	b.n	80052a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	60fb      	str	r3, [r7, #12]
}
 80052be:	bf00      	nop
 80052c0:	e7fe      	b.n	80052c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80052c2:	f000 fe0b 	bl	8005edc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80052c6:	4b1d      	ldr	r3, [pc, #116]	; (800533c <xTaskCheckForTimeOut+0xbc>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052de:	d102      	bne.n	80052e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80052e0:	2300      	movs	r3, #0
 80052e2:	61fb      	str	r3, [r7, #28]
 80052e4:	e023      	b.n	800532e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4b15      	ldr	r3, [pc, #84]	; (8005340 <xTaskCheckForTimeOut+0xc0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d007      	beq.n	8005302 <xTaskCheckForTimeOut+0x82>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d302      	bcc.n	8005302 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80052fc:	2301      	movs	r3, #1
 80052fe:	61fb      	str	r3, [r7, #28]
 8005300:	e015      	b.n	800532e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	429a      	cmp	r2, r3
 800530a:	d20b      	bcs.n	8005324 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	1ad2      	subs	r2, r2, r3
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7ff ff9b 	bl	8005254 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	e004      	b.n	800532e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800532a:	2301      	movs	r3, #1
 800532c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800532e:	f000 fe05 	bl	8005f3c <vPortExitCritical>

	return xReturn;
 8005332:	69fb      	ldr	r3, [r7, #28]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3720      	adds	r7, #32
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	20000d48 	.word	0x20000d48
 8005340:	20000d5c 	.word	0x20000d5c

08005344 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005348:	4b03      	ldr	r3, [pc, #12]	; (8005358 <vTaskMissedYield+0x14>)
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]
}
 800534e:	bf00      	nop
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	20000d58 	.word	0x20000d58

0800535c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005364:	f000 f852 	bl	800540c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005368:	4b06      	ldr	r3, [pc, #24]	; (8005384 <prvIdleTask+0x28>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d9f9      	bls.n	8005364 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005370:	4b05      	ldr	r3, [pc, #20]	; (8005388 <prvIdleTask+0x2c>)
 8005372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005380:	e7f0      	b.n	8005364 <prvIdleTask+0x8>
 8005382:	bf00      	nop
 8005384:	20000874 	.word	0x20000874
 8005388:	e000ed04 	.word	0xe000ed04

0800538c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005392:	2300      	movs	r3, #0
 8005394:	607b      	str	r3, [r7, #4]
 8005396:	e00c      	b.n	80053b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4a12      	ldr	r2, [pc, #72]	; (80053ec <prvInitialiseTaskLists+0x60>)
 80053a4:	4413      	add	r3, r2
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fe fcd2 	bl	8003d50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3301      	adds	r3, #1
 80053b0:	607b      	str	r3, [r7, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b37      	cmp	r3, #55	; 0x37
 80053b6:	d9ef      	bls.n	8005398 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80053b8:	480d      	ldr	r0, [pc, #52]	; (80053f0 <prvInitialiseTaskLists+0x64>)
 80053ba:	f7fe fcc9 	bl	8003d50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80053be:	480d      	ldr	r0, [pc, #52]	; (80053f4 <prvInitialiseTaskLists+0x68>)
 80053c0:	f7fe fcc6 	bl	8003d50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053c4:	480c      	ldr	r0, [pc, #48]	; (80053f8 <prvInitialiseTaskLists+0x6c>)
 80053c6:	f7fe fcc3 	bl	8003d50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80053ca:	480c      	ldr	r0, [pc, #48]	; (80053fc <prvInitialiseTaskLists+0x70>)
 80053cc:	f7fe fcc0 	bl	8003d50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80053d0:	480b      	ldr	r0, [pc, #44]	; (8005400 <prvInitialiseTaskLists+0x74>)
 80053d2:	f7fe fcbd 	bl	8003d50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80053d6:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <prvInitialiseTaskLists+0x78>)
 80053d8:	4a05      	ldr	r2, [pc, #20]	; (80053f0 <prvInitialiseTaskLists+0x64>)
 80053da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80053dc:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <prvInitialiseTaskLists+0x7c>)
 80053de:	4a05      	ldr	r2, [pc, #20]	; (80053f4 <prvInitialiseTaskLists+0x68>)
 80053e0:	601a      	str	r2, [r3, #0]
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20000874 	.word	0x20000874
 80053f0:	20000cd4 	.word	0x20000cd4
 80053f4:	20000ce8 	.word	0x20000ce8
 80053f8:	20000d04 	.word	0x20000d04
 80053fc:	20000d18 	.word	0x20000d18
 8005400:	20000d30 	.word	0x20000d30
 8005404:	20000cfc 	.word	0x20000cfc
 8005408:	20000d00 	.word	0x20000d00

0800540c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005412:	e019      	b.n	8005448 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005414:	f000 fd62 	bl	8005edc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005418:	4b10      	ldr	r3, [pc, #64]	; (800545c <prvCheckTasksWaitingTermination+0x50>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3304      	adds	r3, #4
 8005424:	4618      	mov	r0, r3
 8005426:	f7fe fd19 	bl	8003e5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800542a:	4b0d      	ldr	r3, [pc, #52]	; (8005460 <prvCheckTasksWaitingTermination+0x54>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3b01      	subs	r3, #1
 8005430:	4a0b      	ldr	r2, [pc, #44]	; (8005460 <prvCheckTasksWaitingTermination+0x54>)
 8005432:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005434:	4b0b      	ldr	r3, [pc, #44]	; (8005464 <prvCheckTasksWaitingTermination+0x58>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3b01      	subs	r3, #1
 800543a:	4a0a      	ldr	r2, [pc, #40]	; (8005464 <prvCheckTasksWaitingTermination+0x58>)
 800543c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800543e:	f000 fd7d 	bl	8005f3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f810 	bl	8005468 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005448:	4b06      	ldr	r3, [pc, #24]	; (8005464 <prvCheckTasksWaitingTermination+0x58>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e1      	bne.n	8005414 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005450:	bf00      	nop
 8005452:	bf00      	nop
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000d18 	.word	0x20000d18
 8005460:	20000d44 	.word	0x20000d44
 8005464:	20000d2c 	.word	0x20000d2c

08005468 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3354      	adds	r3, #84	; 0x54
 8005474:	4618      	mov	r0, r3
 8005476:	f001 fa4d 	bl	8006914 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005480:	2b00      	cmp	r3, #0
 8005482:	d108      	bne.n	8005496 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	4618      	mov	r0, r3
 800548a:	f000 feeb 	bl	8006264 <vPortFree>
				vPortFree( pxTCB );
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fee8 	bl	8006264 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005494:	e018      	b.n	80054c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800549c:	2b01      	cmp	r3, #1
 800549e:	d103      	bne.n	80054a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fedf 	bl	8006264 <vPortFree>
	}
 80054a6:	e00f      	b.n	80054c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d00a      	beq.n	80054c8 <prvDeleteTCB+0x60>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	60fb      	str	r3, [r7, #12]
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <prvDeleteTCB+0x5e>
	}
 80054c8:	bf00      	nop
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054d6:	4b0e      	ldr	r3, [pc, #56]	; (8005510 <prvResetNextTaskUnblockTime+0x40>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <prvResetNextTaskUnblockTime+0x14>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e000      	b.n	80054e6 <prvResetNextTaskUnblockTime+0x16>
 80054e4:	2300      	movs	r3, #0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d004      	beq.n	80054f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054ea:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <prvResetNextTaskUnblockTime+0x44>)
 80054ec:	f04f 32ff 	mov.w	r2, #4294967295
 80054f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80054f2:	e008      	b.n	8005506 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80054f4:	4b06      	ldr	r3, [pc, #24]	; (8005510 <prvResetNextTaskUnblockTime+0x40>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	4a04      	ldr	r2, [pc, #16]	; (8005514 <prvResetNextTaskUnblockTime+0x44>)
 8005504:	6013      	str	r3, [r2, #0]
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	bc80      	pop	{r7}
 800550e:	4770      	bx	lr
 8005510:	20000cfc 	.word	0x20000cfc
 8005514:	20000d64 	.word	0x20000d64

08005518 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800551e:	4b0b      	ldr	r3, [pc, #44]	; (800554c <xTaskGetSchedulerState+0x34>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d102      	bne.n	800552c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005526:	2301      	movs	r3, #1
 8005528:	607b      	str	r3, [r7, #4]
 800552a:	e008      	b.n	800553e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800552c:	4b08      	ldr	r3, [pc, #32]	; (8005550 <xTaskGetSchedulerState+0x38>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d102      	bne.n	800553a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005534:	2302      	movs	r3, #2
 8005536:	607b      	str	r3, [r7, #4]
 8005538:	e001      	b.n	800553e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800553a:	2300      	movs	r3, #0
 800553c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800553e:	687b      	ldr	r3, [r7, #4]
	}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	20000d50 	.word	0x20000d50
 8005550:	20000d6c 	.word	0x20000d6c

08005554 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d056      	beq.n	8005618 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800556a:	4b2e      	ldr	r3, [pc, #184]	; (8005624 <xTaskPriorityDisinherit+0xd0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	429a      	cmp	r2, r3
 8005572:	d00a      	beq.n	800558a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	60fb      	str	r3, [r7, #12]
}
 8005586:	bf00      	nop
 8005588:	e7fe      	b.n	8005588 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10a      	bne.n	80055a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	60bb      	str	r3, [r7, #8]
}
 80055a4:	bf00      	nop
 80055a6:	e7fe      	b.n	80055a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ac:	1e5a      	subs	r2, r3, #1
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d02c      	beq.n	8005618 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d128      	bne.n	8005618 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	3304      	adds	r3, #4
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fe fc46 	bl	8003e5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e8:	4b0f      	ldr	r3, [pc, #60]	; (8005628 <xTaskPriorityDisinherit+0xd4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d903      	bls.n	80055f8 <xTaskPriorityDisinherit+0xa4>
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	4a0c      	ldr	r2, [pc, #48]	; (8005628 <xTaskPriorityDisinherit+0xd4>)
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4a09      	ldr	r2, [pc, #36]	; (800562c <xTaskPriorityDisinherit+0xd8>)
 8005606:	441a      	add	r2, r3
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	3304      	adds	r3, #4
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f7fe fbc9 	bl	8003da6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005614:	2301      	movs	r3, #1
 8005616:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005618:	697b      	ldr	r3, [r7, #20]
	}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000870 	.word	0x20000870
 8005628:	20000d4c 	.word	0x20000d4c
 800562c:	20000874 	.word	0x20000874

08005630 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800563a:	4b21      	ldr	r3, [pc, #132]	; (80056c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005640:	4b20      	ldr	r3, [pc, #128]	; (80056c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3304      	adds	r3, #4
 8005646:	4618      	mov	r0, r3
 8005648:	f7fe fc08 	bl	8003e5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005652:	d10a      	bne.n	800566a <prvAddCurrentTaskToDelayedList+0x3a>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d007      	beq.n	800566a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800565a:	4b1a      	ldr	r3, [pc, #104]	; (80056c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3304      	adds	r3, #4
 8005660:	4619      	mov	r1, r3
 8005662:	4819      	ldr	r0, [pc, #100]	; (80056c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005664:	f7fe fb9f 	bl	8003da6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005668:	e026      	b.n	80056b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4413      	add	r3, r2
 8005670:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005672:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	429a      	cmp	r2, r3
 8005680:	d209      	bcs.n	8005696 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005682:	4b12      	ldr	r3, [pc, #72]	; (80056cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	4b0f      	ldr	r3, [pc, #60]	; (80056c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3304      	adds	r3, #4
 800568c:	4619      	mov	r1, r3
 800568e:	4610      	mov	r0, r2
 8005690:	f7fe fbac 	bl	8003dec <vListInsert>
}
 8005694:	e010      	b.n	80056b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005696:	4b0e      	ldr	r3, [pc, #56]	; (80056d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3304      	adds	r3, #4
 80056a0:	4619      	mov	r1, r3
 80056a2:	4610      	mov	r0, r2
 80056a4:	f7fe fba2 	bl	8003dec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80056a8:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d202      	bcs.n	80056b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80056b2:	4a08      	ldr	r2, [pc, #32]	; (80056d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	6013      	str	r3, [r2, #0]
}
 80056b8:	bf00      	nop
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20000d48 	.word	0x20000d48
 80056c4:	20000870 	.word	0x20000870
 80056c8:	20000d30 	.word	0x20000d30
 80056cc:	20000d00 	.word	0x20000d00
 80056d0:	20000cfc 	.word	0x20000cfc
 80056d4:	20000d64 	.word	0x20000d64

080056d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08a      	sub	sp, #40	; 0x28
 80056dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80056e2:	f000 facb 	bl	8005c7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80056e6:	4b1c      	ldr	r3, [pc, #112]	; (8005758 <xTimerCreateTimerTask+0x80>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d021      	beq.n	8005732 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80056f6:	1d3a      	adds	r2, r7, #4
 80056f8:	f107 0108 	add.w	r1, r7, #8
 80056fc:	f107 030c 	add.w	r3, r7, #12
 8005700:	4618      	mov	r0, r3
 8005702:	f7fe fb0b 	bl	8003d1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	9202      	str	r2, [sp, #8]
 800570e:	9301      	str	r3, [sp, #4]
 8005710:	2302      	movs	r3, #2
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	2300      	movs	r3, #0
 8005716:	460a      	mov	r2, r1
 8005718:	4910      	ldr	r1, [pc, #64]	; (800575c <xTimerCreateTimerTask+0x84>)
 800571a:	4811      	ldr	r0, [pc, #68]	; (8005760 <xTimerCreateTimerTask+0x88>)
 800571c:	f7ff f8ea 	bl	80048f4 <xTaskCreateStatic>
 8005720:	4603      	mov	r3, r0
 8005722:	4a10      	ldr	r2, [pc, #64]	; (8005764 <xTimerCreateTimerTask+0x8c>)
 8005724:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005726:	4b0f      	ldr	r3, [pc, #60]	; (8005764 <xTimerCreateTimerTask+0x8c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800572e:	2301      	movs	r3, #1
 8005730:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10a      	bne.n	800574e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	613b      	str	r3, [r7, #16]
}
 800574a:	bf00      	nop
 800574c:	e7fe      	b.n	800574c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800574e:	697b      	ldr	r3, [r7, #20]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	20000da0 	.word	0x20000da0
 800575c:	080071fc 	.word	0x080071fc
 8005760:	08005885 	.word	0x08005885
 8005764:	20000da4 	.word	0x20000da4

08005768 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08a      	sub	sp, #40	; 0x28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005776:	2300      	movs	r3, #0
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	623b      	str	r3, [r7, #32]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005796:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <xTimerGenericCommand+0x98>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d02a      	beq.n	80057f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b05      	cmp	r3, #5
 80057ae:	dc18      	bgt.n	80057e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80057b0:	f7ff feb2 	bl	8005518 <xTaskGetSchedulerState>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d109      	bne.n	80057ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80057ba:	4b11      	ldr	r3, [pc, #68]	; (8005800 <xTimerGenericCommand+0x98>)
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	f107 0110 	add.w	r1, r7, #16
 80057c2:	2300      	movs	r3, #0
 80057c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c6:	f7fe fcb3 	bl	8004130 <xQueueGenericSend>
 80057ca:	6278      	str	r0, [r7, #36]	; 0x24
 80057cc:	e012      	b.n	80057f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80057ce:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <xTimerGenericCommand+0x98>)
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	f107 0110 	add.w	r1, r7, #16
 80057d6:	2300      	movs	r3, #0
 80057d8:	2200      	movs	r2, #0
 80057da:	f7fe fca9 	bl	8004130 <xQueueGenericSend>
 80057de:	6278      	str	r0, [r7, #36]	; 0x24
 80057e0:	e008      	b.n	80057f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80057e2:	4b07      	ldr	r3, [pc, #28]	; (8005800 <xTimerGenericCommand+0x98>)
 80057e4:	6818      	ldr	r0, [r3, #0]
 80057e6:	f107 0110 	add.w	r1, r7, #16
 80057ea:	2300      	movs	r3, #0
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	f7fe fd9d 	bl	800432c <xQueueGenericSendFromISR>
 80057f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3728      	adds	r7, #40	; 0x28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20000da0 	.word	0x20000da0

08005804 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af02      	add	r7, sp, #8
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800580e:	4b1c      	ldr	r3, [pc, #112]	; (8005880 <prvProcessExpiredTimer+0x7c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	3304      	adds	r3, #4
 800581c:	4618      	mov	r0, r3
 800581e:	f7fe fb1d 	bl	8003e5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d122      	bne.n	8005870 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	18d1      	adds	r1, r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	6978      	ldr	r0, [r7, #20]
 8005838:	f000 f8c8 	bl	80059cc <prvInsertTimerInActiveList>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d016      	beq.n	8005870 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005842:	2300      	movs	r3, #0
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	2300      	movs	r3, #0
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	2100      	movs	r1, #0
 800584c:	6978      	ldr	r0, [r7, #20]
 800584e:	f7ff ff8b 	bl	8005768 <xTimerGenericCommand>
 8005852:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10a      	bne.n	8005870 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	60fb      	str	r3, [r7, #12]
}
 800586c:	bf00      	nop
 800586e:	e7fe      	b.n	800586e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	6978      	ldr	r0, [r7, #20]
 8005876:	4798      	blx	r3
}
 8005878:	bf00      	nop
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	20000d98 	.word	0x20000d98

08005884 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800588c:	f107 0308 	add.w	r3, r7, #8
 8005890:	4618      	mov	r0, r3
 8005892:	f000 f857 	bl	8005944 <prvGetNextExpireTime>
 8005896:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4619      	mov	r1, r3
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 f803 	bl	80058a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80058a2:	f000 f8d5 	bl	8005a50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058a6:	e7f1      	b.n	800588c <prvTimerTask+0x8>

080058a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80058b2:	f7ff fa3f 	bl	8004d34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058b6:	f107 0308 	add.w	r3, r7, #8
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 f866 	bl	800598c <prvSampleTimeNow>
 80058c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d130      	bne.n	800592a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <prvProcessTimerOrBlockTask+0x3c>
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d806      	bhi.n	80058e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80058d6:	f7ff fa3b 	bl	8004d50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80058da:	68f9      	ldr	r1, [r7, #12]
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff ff91 	bl	8005804 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80058e2:	e024      	b.n	800592e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d008      	beq.n	80058fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80058ea:	4b13      	ldr	r3, [pc, #76]	; (8005938 <prvProcessTimerOrBlockTask+0x90>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	bf0c      	ite	eq
 80058f4:	2301      	moveq	r3, #1
 80058f6:	2300      	movne	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80058fc:	4b0f      	ldr	r3, [pc, #60]	; (800593c <prvProcessTimerOrBlockTask+0x94>)
 80058fe:	6818      	ldr	r0, [r3, #0]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	4619      	mov	r1, r3
 800590a:	f7fe ffbf 	bl	800488c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800590e:	f7ff fa1f 	bl	8004d50 <xTaskResumeAll>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005918:	4b09      	ldr	r3, [pc, #36]	; (8005940 <prvProcessTimerOrBlockTask+0x98>)
 800591a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	f3bf 8f6f 	isb	sy
}
 8005928:	e001      	b.n	800592e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800592a:	f7ff fa11 	bl	8004d50 <xTaskResumeAll>
}
 800592e:	bf00      	nop
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000d9c 	.word	0x20000d9c
 800593c:	20000da0 	.word	0x20000da0
 8005940:	e000ed04 	.word	0xe000ed04

08005944 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800594c:	4b0e      	ldr	r3, [pc, #56]	; (8005988 <prvGetNextExpireTime+0x44>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	bf0c      	ite	eq
 8005956:	2301      	moveq	r3, #1
 8005958:	2300      	movne	r3, #0
 800595a:	b2db      	uxtb	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d105      	bne.n	8005976 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800596a:	4b07      	ldr	r3, [pc, #28]	; (8005988 <prvGetNextExpireTime+0x44>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	e001      	b.n	800597a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800597a:	68fb      	ldr	r3, [r7, #12]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	bc80      	pop	{r7}
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	20000d98 	.word	0x20000d98

0800598c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005994:	f7ff fa7a 	bl	8004e8c <xTaskGetTickCount>
 8005998:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800599a:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <prvSampleTimeNow+0x3c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d205      	bcs.n	80059b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80059a4:	f000 f908 	bl	8005bb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	e002      	b.n	80059b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80059b6:	4a04      	ldr	r2, [pc, #16]	; (80059c8 <prvSampleTimeNow+0x3c>)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80059bc:	68fb      	ldr	r3, [r7, #12]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20000da8 	.word	0x20000da8

080059cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80059da:	2300      	movs	r3, #0
 80059dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d812      	bhi.n	8005a18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	1ad2      	subs	r2, r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d302      	bcc.n	8005a06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a00:	2301      	movs	r3, #1
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	e01b      	b.n	8005a3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a06:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <prvInsertTimerInActiveList+0x7c>)
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4610      	mov	r0, r2
 8005a12:	f7fe f9eb 	bl	8003dec <vListInsert>
 8005a16:	e012      	b.n	8005a3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d206      	bcs.n	8005a2e <prvInsertTimerInActiveList+0x62>
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d302      	bcc.n	8005a2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	e007      	b.n	8005a3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a2e:	4b07      	ldr	r3, [pc, #28]	; (8005a4c <prvInsertTimerInActiveList+0x80>)
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3304      	adds	r3, #4
 8005a36:	4619      	mov	r1, r3
 8005a38:	4610      	mov	r0, r2
 8005a3a:	f7fe f9d7 	bl	8003dec <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005a3e:	697b      	ldr	r3, [r7, #20]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	20000d9c 	.word	0x20000d9c
 8005a4c:	20000d98 	.word	0x20000d98

08005a50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08e      	sub	sp, #56	; 0x38
 8005a54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a56:	e09d      	b.n	8005b94 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	da18      	bge.n	8005a90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005a5e:	1d3b      	adds	r3, r7, #4
 8005a60:	3304      	adds	r3, #4
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10a      	bne.n	8005a80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	61fb      	str	r3, [r7, #28]
}
 8005a7c:	bf00      	nop
 8005a7e:	e7fe      	b.n	8005a7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a86:	6850      	ldr	r0, [r2, #4]
 8005a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a8a:	6892      	ldr	r2, [r2, #8]
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	db7d      	blt.n	8005b92 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d004      	beq.n	8005aac <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fe f9d8 	bl	8003e5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005aac:	463b      	mov	r3, r7
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7ff ff6c 	bl	800598c <prvSampleTimeNow>
 8005ab4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b09      	cmp	r3, #9
 8005aba:	d86b      	bhi.n	8005b94 <prvProcessReceivedCommands+0x144>
 8005abc:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <prvProcessReceivedCommands+0x74>)
 8005abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac2:	bf00      	nop
 8005ac4:	08005aed 	.word	0x08005aed
 8005ac8:	08005aed 	.word	0x08005aed
 8005acc:	08005aed 	.word	0x08005aed
 8005ad0:	08005b95 	.word	0x08005b95
 8005ad4:	08005b49 	.word	0x08005b49
 8005ad8:	08005b81 	.word	0x08005b81
 8005adc:	08005aed 	.word	0x08005aed
 8005ae0:	08005aed 	.word	0x08005aed
 8005ae4:	08005b95 	.word	0x08005b95
 8005ae8:	08005b49 	.word	0x08005b49
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	18d1      	adds	r1, r2, r3
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005afa:	f7ff ff67 	bl	80059cc <prvInsertTimerInActiveList>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d047      	beq.n	8005b94 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b0a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d13f      	bne.n	8005b94 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	441a      	add	r2, r3
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	2300      	movs	r3, #0
 8005b22:	2100      	movs	r1, #0
 8005b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b26:	f7ff fe1f 	bl	8005768 <xTimerGenericCommand>
 8005b2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d130      	bne.n	8005b94 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	61bb      	str	r3, [r7, #24]
}
 8005b44:	bf00      	nop
 8005b46:	e7fe      	b.n	8005b46 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10a      	bne.n	8005b6c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	617b      	str	r3, [r7, #20]
}
 8005b68:	bf00      	nop
 8005b6a:	e7fe      	b.n	8005b6a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6e:	699a      	ldr	r2, [r3, #24]
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	18d1      	adds	r1, r2, r3
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b7a:	f7ff ff27 	bl	80059cc <prvInsertTimerInActiveList>
					break;
 8005b7e:	e009      	b.n	8005b94 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d104      	bne.n	8005b94 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b8c:	f000 fb6a 	bl	8006264 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b90:	e000      	b.n	8005b94 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005b92:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b94:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <prvProcessReceivedCommands+0x164>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	1d39      	adds	r1, r7, #4
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fe fc5d 	bl	800445c <xQueueReceive>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f47f af57 	bne.w	8005a58 <prvProcessReceivedCommands+0x8>
	}
}
 8005baa:	bf00      	nop
 8005bac:	bf00      	nop
 8005bae:	3730      	adds	r7, #48	; 0x30
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20000da0 	.word	0x20000da0

08005bb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bbe:	e045      	b.n	8005c4c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bc0:	4b2c      	ldr	r3, [pc, #176]	; (8005c74 <prvSwitchTimerLists+0xbc>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bca:	4b2a      	ldr	r3, [pc, #168]	; (8005c74 <prvSwitchTimerLists+0xbc>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7fe f93f 	bl	8003e5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d12e      	bne.n	8005c4c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d90e      	bls.n	8005c1e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c0c:	4b19      	ldr	r3, [pc, #100]	; (8005c74 <prvSwitchTimerLists+0xbc>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3304      	adds	r3, #4
 8005c14:	4619      	mov	r1, r3
 8005c16:	4610      	mov	r0, r2
 8005c18:	f7fe f8e8 	bl	8003dec <vListInsert>
 8005c1c:	e016      	b.n	8005c4c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c1e:	2300      	movs	r3, #0
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	2300      	movs	r3, #0
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	2100      	movs	r1, #0
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7ff fd9d 	bl	8005768 <xTimerGenericCommand>
 8005c2e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10a      	bne.n	8005c4c <prvSwitchTimerLists+0x94>
	__asm volatile
 8005c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	603b      	str	r3, [r7, #0]
}
 8005c48:	bf00      	nop
 8005c4a:	e7fe      	b.n	8005c4a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c4c:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <prvSwitchTimerLists+0xbc>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1b4      	bne.n	8005bc0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c56:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <prvSwitchTimerLists+0xbc>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c5c:	4b06      	ldr	r3, [pc, #24]	; (8005c78 <prvSwitchTimerLists+0xc0>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a04      	ldr	r2, [pc, #16]	; (8005c74 <prvSwitchTimerLists+0xbc>)
 8005c62:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c64:	4a04      	ldr	r2, [pc, #16]	; (8005c78 <prvSwitchTimerLists+0xc0>)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	6013      	str	r3, [r2, #0]
}
 8005c6a:	bf00      	nop
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20000d98 	.word	0x20000d98
 8005c78:	20000d9c 	.word	0x20000d9c

08005c7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c82:	f000 f92b 	bl	8005edc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c86:	4b15      	ldr	r3, [pc, #84]	; (8005cdc <prvCheckForValidListAndQueue+0x60>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d120      	bne.n	8005cd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c8e:	4814      	ldr	r0, [pc, #80]	; (8005ce0 <prvCheckForValidListAndQueue+0x64>)
 8005c90:	f7fe f85e 	bl	8003d50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c94:	4813      	ldr	r0, [pc, #76]	; (8005ce4 <prvCheckForValidListAndQueue+0x68>)
 8005c96:	f7fe f85b 	bl	8003d50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c9a:	4b13      	ldr	r3, [pc, #76]	; (8005ce8 <prvCheckForValidListAndQueue+0x6c>)
 8005c9c:	4a10      	ldr	r2, [pc, #64]	; (8005ce0 <prvCheckForValidListAndQueue+0x64>)
 8005c9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ca0:	4b12      	ldr	r3, [pc, #72]	; (8005cec <prvCheckForValidListAndQueue+0x70>)
 8005ca2:	4a10      	ldr	r2, [pc, #64]	; (8005ce4 <prvCheckForValidListAndQueue+0x68>)
 8005ca4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	4b11      	ldr	r3, [pc, #68]	; (8005cf0 <prvCheckForValidListAndQueue+0x74>)
 8005cac:	4a11      	ldr	r2, [pc, #68]	; (8005cf4 <prvCheckForValidListAndQueue+0x78>)
 8005cae:	2110      	movs	r1, #16
 8005cb0:	200a      	movs	r0, #10
 8005cb2:	f7fe f965 	bl	8003f80 <xQueueGenericCreateStatic>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	4a08      	ldr	r2, [pc, #32]	; (8005cdc <prvCheckForValidListAndQueue+0x60>)
 8005cba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005cbc:	4b07      	ldr	r3, [pc, #28]	; (8005cdc <prvCheckForValidListAndQueue+0x60>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d005      	beq.n	8005cd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005cc4:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <prvCheckForValidListAndQueue+0x60>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	490b      	ldr	r1, [pc, #44]	; (8005cf8 <prvCheckForValidListAndQueue+0x7c>)
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fe fdb6 	bl	800483c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cd0:	f000 f934 	bl	8005f3c <vPortExitCritical>
}
 8005cd4:	bf00      	nop
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20000da0 	.word	0x20000da0
 8005ce0:	20000d70 	.word	0x20000d70
 8005ce4:	20000d84 	.word	0x20000d84
 8005ce8:	20000d98 	.word	0x20000d98
 8005cec:	20000d9c 	.word	0x20000d9c
 8005cf0:	20000e4c 	.word	0x20000e4c
 8005cf4:	20000dac 	.word	0x20000dac
 8005cf8:	08007204 	.word	0x08007204

08005cfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	3b04      	subs	r3, #4
 8005d0c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	3b04      	subs	r3, #4
 8005d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f023 0201 	bic.w	r2, r3, #1
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	3b04      	subs	r3, #4
 8005d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d2c:	4a08      	ldr	r2, [pc, #32]	; (8005d50 <pxPortInitialiseStack+0x54>)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3b14      	subs	r3, #20
 8005d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3b20      	subs	r3, #32
 8005d42:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d44:	68fb      	ldr	r3, [r7, #12]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr
 8005d50:	08005d55 	.word	0x08005d55

08005d54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d5e:	4b12      	ldr	r3, [pc, #72]	; (8005da8 <prvTaskExitError+0x54>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d66:	d00a      	beq.n	8005d7e <prvTaskExitError+0x2a>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	60fb      	str	r3, [r7, #12]
}
 8005d7a:	bf00      	nop
 8005d7c:	e7fe      	b.n	8005d7c <prvTaskExitError+0x28>
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	60bb      	str	r3, [r7, #8]
}
 8005d90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d92:	bf00      	nop
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0fc      	beq.n	8005d94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d9a:	bf00      	nop
 8005d9c:	bf00      	nop
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	20000010 	.word	0x20000010
 8005dac:	00000000 	.word	0x00000000

08005db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005db0:	4b07      	ldr	r3, [pc, #28]	; (8005dd0 <pxCurrentTCBConst2>)
 8005db2:	6819      	ldr	r1, [r3, #0]
 8005db4:	6808      	ldr	r0, [r1, #0]
 8005db6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005dba:	f380 8809 	msr	PSP, r0
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f04f 0000 	mov.w	r0, #0
 8005dc6:	f380 8811 	msr	BASEPRI, r0
 8005dca:	f04e 0e0d 	orr.w	lr, lr, #13
 8005dce:	4770      	bx	lr

08005dd0 <pxCurrentTCBConst2>:
 8005dd0:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop

08005dd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005dd8:	4806      	ldr	r0, [pc, #24]	; (8005df4 <prvPortStartFirstTask+0x1c>)
 8005dda:	6800      	ldr	r0, [r0, #0]
 8005ddc:	6800      	ldr	r0, [r0, #0]
 8005dde:	f380 8808 	msr	MSP, r0
 8005de2:	b662      	cpsie	i
 8005de4:	b661      	cpsie	f
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	df00      	svc	0
 8005df0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005df2:	bf00      	nop
 8005df4:	e000ed08 	.word	0xe000ed08

08005df8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005dfe:	4b32      	ldr	r3, [pc, #200]	; (8005ec8 <xPortStartScheduler+0xd0>)
 8005e00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	22ff      	movs	r2, #255	; 0xff
 8005e0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	4b2a      	ldr	r3, [pc, #168]	; (8005ecc <xPortStartScheduler+0xd4>)
 8005e24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e26:	4b2a      	ldr	r3, [pc, #168]	; (8005ed0 <xPortStartScheduler+0xd8>)
 8005e28:	2207      	movs	r2, #7
 8005e2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e2c:	e009      	b.n	8005e42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005e2e:	4b28      	ldr	r3, [pc, #160]	; (8005ed0 <xPortStartScheduler+0xd8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	4a26      	ldr	r2, [pc, #152]	; (8005ed0 <xPortStartScheduler+0xd8>)
 8005e36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e42:	78fb      	ldrb	r3, [r7, #3]
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4a:	2b80      	cmp	r3, #128	; 0x80
 8005e4c:	d0ef      	beq.n	8005e2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e4e:	4b20      	ldr	r3, [pc, #128]	; (8005ed0 <xPortStartScheduler+0xd8>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f1c3 0307 	rsb	r3, r3, #7
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d00a      	beq.n	8005e70 <xPortStartScheduler+0x78>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	60bb      	str	r3, [r7, #8]
}
 8005e6c:	bf00      	nop
 8005e6e:	e7fe      	b.n	8005e6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e70:	4b17      	ldr	r3, [pc, #92]	; (8005ed0 <xPortStartScheduler+0xd8>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	021b      	lsls	r3, r3, #8
 8005e76:	4a16      	ldr	r2, [pc, #88]	; (8005ed0 <xPortStartScheduler+0xd8>)
 8005e78:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e7a:	4b15      	ldr	r3, [pc, #84]	; (8005ed0 <xPortStartScheduler+0xd8>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e82:	4a13      	ldr	r2, [pc, #76]	; (8005ed0 <xPortStartScheduler+0xd8>)
 8005e84:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e8e:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <xPortStartScheduler+0xdc>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a10      	ldr	r2, [pc, #64]	; (8005ed4 <xPortStartScheduler+0xdc>)
 8005e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e9a:	4b0e      	ldr	r3, [pc, #56]	; (8005ed4 <xPortStartScheduler+0xdc>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a0d      	ldr	r2, [pc, #52]	; (8005ed4 <xPortStartScheduler+0xdc>)
 8005ea0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ea4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ea6:	f000 f8b9 	bl	800601c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <xPortStartScheduler+0xe0>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005eb0:	f7ff ff92 	bl	8005dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005eb4:	f7ff f8b6 	bl	8005024 <vTaskSwitchContext>
	prvTaskExitError();
 8005eb8:	f7ff ff4c 	bl	8005d54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	e000e400 	.word	0xe000e400
 8005ecc:	20000e9c 	.word	0x20000e9c
 8005ed0:	20000ea0 	.word	0x20000ea0
 8005ed4:	e000ed20 	.word	0xe000ed20
 8005ed8:	20000010 	.word	0x20000010

08005edc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	607b      	str	r3, [r7, #4]
}
 8005ef4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ef6:	4b0f      	ldr	r3, [pc, #60]	; (8005f34 <vPortEnterCritical+0x58>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3301      	adds	r3, #1
 8005efc:	4a0d      	ldr	r2, [pc, #52]	; (8005f34 <vPortEnterCritical+0x58>)
 8005efe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f00:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <vPortEnterCritical+0x58>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d10f      	bne.n	8005f28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f08:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <vPortEnterCritical+0x5c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <vPortEnterCritical+0x4c>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	603b      	str	r3, [r7, #0]
}
 8005f24:	bf00      	nop
 8005f26:	e7fe      	b.n	8005f26 <vPortEnterCritical+0x4a>
	}
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bc80      	pop	{r7}
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	20000010 	.word	0x20000010
 8005f38:	e000ed04 	.word	0xe000ed04

08005f3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f42:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <vPortExitCritical+0x4c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10a      	bne.n	8005f60 <vPortExitCritical+0x24>
	__asm volatile
 8005f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	607b      	str	r3, [r7, #4]
}
 8005f5c:	bf00      	nop
 8005f5e:	e7fe      	b.n	8005f5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f60:	4b09      	ldr	r3, [pc, #36]	; (8005f88 <vPortExitCritical+0x4c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3b01      	subs	r3, #1
 8005f66:	4a08      	ldr	r2, [pc, #32]	; (8005f88 <vPortExitCritical+0x4c>)
 8005f68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f6a:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <vPortExitCritical+0x4c>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d105      	bne.n	8005f7e <vPortExitCritical+0x42>
 8005f72:	2300      	movs	r3, #0
 8005f74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	f383 8811 	msr	BASEPRI, r3
}
 8005f7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr
 8005f88:	20000010 	.word	0x20000010
 8005f8c:	00000000 	.word	0x00000000

08005f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f90:	f3ef 8009 	mrs	r0, PSP
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <pxCurrentTCBConst>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005fa0:	6010      	str	r0, [r2, #0]
 8005fa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005fa6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005faa:	f380 8811 	msr	BASEPRI, r0
 8005fae:	f7ff f839 	bl	8005024 <vTaskSwitchContext>
 8005fb2:	f04f 0000 	mov.w	r0, #0
 8005fb6:	f380 8811 	msr	BASEPRI, r0
 8005fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005fbe:	6819      	ldr	r1, [r3, #0]
 8005fc0:	6808      	ldr	r0, [r1, #0]
 8005fc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005fc6:	f380 8809 	msr	PSP, r0
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	4770      	bx	lr

08005fd0 <pxCurrentTCBConst>:
 8005fd0:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005fd4:	bf00      	nop
 8005fd6:	bf00      	nop

08005fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	607b      	str	r3, [r7, #4]
}
 8005ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ff2:	f7fe ff59 	bl	8004ea8 <xTaskIncrementTick>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ffc:	4b06      	ldr	r3, [pc, #24]	; (8006018 <SysTick_Handler+0x40>)
 8005ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	2300      	movs	r3, #0
 8006006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	f383 8811 	msr	BASEPRI, r3
}
 800600e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006010:	bf00      	nop
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	e000ed04 	.word	0xe000ed04

0800601c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006020:	4b0a      	ldr	r3, [pc, #40]	; (800604c <vPortSetupTimerInterrupt+0x30>)
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006026:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <vPortSetupTimerInterrupt+0x34>)
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800602c:	4b09      	ldr	r3, [pc, #36]	; (8006054 <vPortSetupTimerInterrupt+0x38>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a09      	ldr	r2, [pc, #36]	; (8006058 <vPortSetupTimerInterrupt+0x3c>)
 8006032:	fba2 2303 	umull	r2, r3, r2, r3
 8006036:	099b      	lsrs	r3, r3, #6
 8006038:	4a08      	ldr	r2, [pc, #32]	; (800605c <vPortSetupTimerInterrupt+0x40>)
 800603a:	3b01      	subs	r3, #1
 800603c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800603e:	4b03      	ldr	r3, [pc, #12]	; (800604c <vPortSetupTimerInterrupt+0x30>)
 8006040:	2207      	movs	r2, #7
 8006042:	601a      	str	r2, [r3, #0]
}
 8006044:	bf00      	nop
 8006046:	46bd      	mov	sp, r7
 8006048:	bc80      	pop	{r7}
 800604a:	4770      	bx	lr
 800604c:	e000e010 	.word	0xe000e010
 8006050:	e000e018 	.word	0xe000e018
 8006054:	20000000 	.word	0x20000000
 8006058:	10624dd3 	.word	0x10624dd3
 800605c:	e000e014 	.word	0xe000e014

08006060 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006066:	f3ef 8305 	mrs	r3, IPSR
 800606a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b0f      	cmp	r3, #15
 8006070:	d914      	bls.n	800609c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006072:	4a16      	ldr	r2, [pc, #88]	; (80060cc <vPortValidateInterruptPriority+0x6c>)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800607c:	4b14      	ldr	r3, [pc, #80]	; (80060d0 <vPortValidateInterruptPriority+0x70>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	7afa      	ldrb	r2, [r7, #11]
 8006082:	429a      	cmp	r2, r3
 8006084:	d20a      	bcs.n	800609c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	607b      	str	r3, [r7, #4]
}
 8006098:	bf00      	nop
 800609a:	e7fe      	b.n	800609a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800609c:	4b0d      	ldr	r3, [pc, #52]	; (80060d4 <vPortValidateInterruptPriority+0x74>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80060a4:	4b0c      	ldr	r3, [pc, #48]	; (80060d8 <vPortValidateInterruptPriority+0x78>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d90a      	bls.n	80060c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	603b      	str	r3, [r7, #0]
}
 80060be:	bf00      	nop
 80060c0:	e7fe      	b.n	80060c0 <vPortValidateInterruptPriority+0x60>
	}
 80060c2:	bf00      	nop
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bc80      	pop	{r7}
 80060ca:	4770      	bx	lr
 80060cc:	e000e3f0 	.word	0xe000e3f0
 80060d0:	20000e9c 	.word	0x20000e9c
 80060d4:	e000ed0c 	.word	0xe000ed0c
 80060d8:	20000ea0 	.word	0x20000ea0

080060dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08a      	sub	sp, #40	; 0x28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80060e4:	2300      	movs	r3, #0
 80060e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80060e8:	f7fe fe24 	bl	8004d34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80060ec:	4b58      	ldr	r3, [pc, #352]	; (8006250 <pvPortMalloc+0x174>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060f4:	f000 f910 	bl	8006318 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060f8:	4b56      	ldr	r3, [pc, #344]	; (8006254 <pvPortMalloc+0x178>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4013      	ands	r3, r2
 8006100:	2b00      	cmp	r3, #0
 8006102:	f040 808e 	bne.w	8006222 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01d      	beq.n	8006148 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800610c:	2208      	movs	r2, #8
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4413      	add	r3, r2
 8006112:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f003 0307 	and.w	r3, r3, #7
 800611a:	2b00      	cmp	r3, #0
 800611c:	d014      	beq.n	8006148 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f023 0307 	bic.w	r3, r3, #7
 8006124:	3308      	adds	r3, #8
 8006126:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f003 0307 	and.w	r3, r3, #7
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <pvPortMalloc+0x6c>
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	617b      	str	r3, [r7, #20]
}
 8006144:	bf00      	nop
 8006146:	e7fe      	b.n	8006146 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d069      	beq.n	8006222 <pvPortMalloc+0x146>
 800614e:	4b42      	ldr	r3, [pc, #264]	; (8006258 <pvPortMalloc+0x17c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	429a      	cmp	r2, r3
 8006156:	d864      	bhi.n	8006222 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006158:	4b40      	ldr	r3, [pc, #256]	; (800625c <pvPortMalloc+0x180>)
 800615a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800615c:	4b3f      	ldr	r3, [pc, #252]	; (800625c <pvPortMalloc+0x180>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006162:	e004      	b.n	800616e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	429a      	cmp	r2, r3
 8006176:	d903      	bls.n	8006180 <pvPortMalloc+0xa4>
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1f1      	bne.n	8006164 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006180:	4b33      	ldr	r3, [pc, #204]	; (8006250 <pvPortMalloc+0x174>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006186:	429a      	cmp	r2, r3
 8006188:	d04b      	beq.n	8006222 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2208      	movs	r2, #8
 8006190:	4413      	add	r3, r2
 8006192:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	1ad2      	subs	r2, r2, r3
 80061a4:	2308      	movs	r3, #8
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d91f      	bls.n	80061ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4413      	add	r3, r2
 80061b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <pvPortMalloc+0xf8>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	613b      	str	r3, [r7, #16]
}
 80061d0:	bf00      	nop
 80061d2:	e7fe      	b.n	80061d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	1ad2      	subs	r2, r2, r3
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061e6:	69b8      	ldr	r0, [r7, #24]
 80061e8:	f000 f8f8 	bl	80063dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061ec:	4b1a      	ldr	r3, [pc, #104]	; (8006258 <pvPortMalloc+0x17c>)
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	4a18      	ldr	r2, [pc, #96]	; (8006258 <pvPortMalloc+0x17c>)
 80061f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061fa:	4b17      	ldr	r3, [pc, #92]	; (8006258 <pvPortMalloc+0x17c>)
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	4b18      	ldr	r3, [pc, #96]	; (8006260 <pvPortMalloc+0x184>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d203      	bcs.n	800620e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006206:	4b14      	ldr	r3, [pc, #80]	; (8006258 <pvPortMalloc+0x17c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a15      	ldr	r2, [pc, #84]	; (8006260 <pvPortMalloc+0x184>)
 800620c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	4b10      	ldr	r3, [pc, #64]	; (8006254 <pvPortMalloc+0x178>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	431a      	orrs	r2, r3
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006222:	f7fe fd95 	bl	8004d50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00a      	beq.n	8006246 <pvPortMalloc+0x16a>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	60fb      	str	r3, [r7, #12]
}
 8006242:	bf00      	nop
 8006244:	e7fe      	b.n	8006244 <pvPortMalloc+0x168>
	return pvReturn;
 8006246:	69fb      	ldr	r3, [r7, #28]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3728      	adds	r7, #40	; 0x28
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20002eac 	.word	0x20002eac
 8006254:	20002eb8 	.word	0x20002eb8
 8006258:	20002eb0 	.word	0x20002eb0
 800625c:	20002ea4 	.word	0x20002ea4
 8006260:	20002eb4 	.word	0x20002eb4

08006264 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d048      	beq.n	8006308 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006276:	2308      	movs	r3, #8
 8006278:	425b      	negs	r3, r3
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	4413      	add	r3, r2
 800627e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	4b21      	ldr	r3, [pc, #132]	; (8006310 <vPortFree+0xac>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4013      	ands	r3, r2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <vPortFree+0x44>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	60fb      	str	r3, [r7, #12]
}
 80062a4:	bf00      	nop
 80062a6:	e7fe      	b.n	80062a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00a      	beq.n	80062c6 <vPortFree+0x62>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	60bb      	str	r3, [r7, #8]
}
 80062c2:	bf00      	nop
 80062c4:	e7fe      	b.n	80062c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	4b11      	ldr	r3, [pc, #68]	; (8006310 <vPortFree+0xac>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4013      	ands	r3, r2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d019      	beq.n	8006308 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d115      	bne.n	8006308 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <vPortFree+0xac>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	43db      	mvns	r3, r3
 80062e6:	401a      	ands	r2, r3
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062ec:	f7fe fd22 	bl	8004d34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	4b07      	ldr	r3, [pc, #28]	; (8006314 <vPortFree+0xb0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4413      	add	r3, r2
 80062fa:	4a06      	ldr	r2, [pc, #24]	; (8006314 <vPortFree+0xb0>)
 80062fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062fe:	6938      	ldr	r0, [r7, #16]
 8006300:	f000 f86c 	bl	80063dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006304:	f7fe fd24 	bl	8004d50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006308:	bf00      	nop
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20002eb8 	.word	0x20002eb8
 8006314:	20002eb0 	.word	0x20002eb0

08006318 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800631e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006322:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006324:	4b27      	ldr	r3, [pc, #156]	; (80063c4 <prvHeapInit+0xac>)
 8006326:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00c      	beq.n	800634c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3307      	adds	r3, #7
 8006336:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0307 	bic.w	r3, r3, #7
 800633e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	4a1f      	ldr	r2, [pc, #124]	; (80063c4 <prvHeapInit+0xac>)
 8006348:	4413      	add	r3, r2
 800634a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006350:	4a1d      	ldr	r2, [pc, #116]	; (80063c8 <prvHeapInit+0xb0>)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006356:	4b1c      	ldr	r3, [pc, #112]	; (80063c8 <prvHeapInit+0xb0>)
 8006358:	2200      	movs	r2, #0
 800635a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	4413      	add	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006364:	2208      	movs	r2, #8
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	1a9b      	subs	r3, r3, r2
 800636a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0307 	bic.w	r3, r3, #7
 8006372:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4a15      	ldr	r2, [pc, #84]	; (80063cc <prvHeapInit+0xb4>)
 8006378:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800637a:	4b14      	ldr	r3, [pc, #80]	; (80063cc <prvHeapInit+0xb4>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2200      	movs	r2, #0
 8006380:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006382:	4b12      	ldr	r3, [pc, #72]	; (80063cc <prvHeapInit+0xb4>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	1ad2      	subs	r2, r2, r3
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006398:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <prvHeapInit+0xb4>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	4a0a      	ldr	r2, [pc, #40]	; (80063d0 <prvHeapInit+0xb8>)
 80063a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	4a09      	ldr	r2, [pc, #36]	; (80063d4 <prvHeapInit+0xbc>)
 80063ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80063b0:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <prvHeapInit+0xc0>)
 80063b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80063b6:	601a      	str	r2, [r3, #0]
}
 80063b8:	bf00      	nop
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	bc80      	pop	{r7}
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	20000ea4 	.word	0x20000ea4
 80063c8:	20002ea4 	.word	0x20002ea4
 80063cc:	20002eac 	.word	0x20002eac
 80063d0:	20002eb4 	.word	0x20002eb4
 80063d4:	20002eb0 	.word	0x20002eb0
 80063d8:	20002eb8 	.word	0x20002eb8

080063dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063e4:	4b27      	ldr	r3, [pc, #156]	; (8006484 <prvInsertBlockIntoFreeList+0xa8>)
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	e002      	b.n	80063f0 <prvInsertBlockIntoFreeList+0x14>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d8f7      	bhi.n	80063ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	4413      	add	r3, r2
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	429a      	cmp	r2, r3
 800640a:	d108      	bne.n	800641e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	441a      	add	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	441a      	add	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	429a      	cmp	r2, r3
 8006430:	d118      	bne.n	8006464 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4b14      	ldr	r3, [pc, #80]	; (8006488 <prvInsertBlockIntoFreeList+0xac>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	429a      	cmp	r2, r3
 800643c:	d00d      	beq.n	800645a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	441a      	add	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	e008      	b.n	800646c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800645a:	4b0b      	ldr	r3, [pc, #44]	; (8006488 <prvInsertBlockIntoFreeList+0xac>)
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	e003      	b.n	800646c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	429a      	cmp	r2, r3
 8006472:	d002      	beq.n	800647a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800647a:	bf00      	nop
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	bc80      	pop	{r7}
 8006482:	4770      	bx	lr
 8006484:	20002ea4 	.word	0x20002ea4
 8006488:	20002eac 	.word	0x20002eac

0800648c <__errno>:
 800648c:	4b01      	ldr	r3, [pc, #4]	; (8006494 <__errno+0x8>)
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	20000014 	.word	0x20000014

08006498 <std>:
 8006498:	2300      	movs	r3, #0
 800649a:	b510      	push	{r4, lr}
 800649c:	4604      	mov	r4, r0
 800649e:	e9c0 3300 	strd	r3, r3, [r0]
 80064a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064a6:	6083      	str	r3, [r0, #8]
 80064a8:	8181      	strh	r1, [r0, #12]
 80064aa:	6643      	str	r3, [r0, #100]	; 0x64
 80064ac:	81c2      	strh	r2, [r0, #14]
 80064ae:	6183      	str	r3, [r0, #24]
 80064b0:	4619      	mov	r1, r3
 80064b2:	2208      	movs	r2, #8
 80064b4:	305c      	adds	r0, #92	; 0x5c
 80064b6:	f000 f91a 	bl	80066ee <memset>
 80064ba:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <std+0x38>)
 80064bc:	6224      	str	r4, [r4, #32]
 80064be:	6263      	str	r3, [r4, #36]	; 0x24
 80064c0:	4b04      	ldr	r3, [pc, #16]	; (80064d4 <std+0x3c>)
 80064c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80064c4:	4b04      	ldr	r3, [pc, #16]	; (80064d8 <std+0x40>)
 80064c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064c8:	4b04      	ldr	r3, [pc, #16]	; (80064dc <std+0x44>)
 80064ca:	6323      	str	r3, [r4, #48]	; 0x30
 80064cc:	bd10      	pop	{r4, pc}
 80064ce:	bf00      	nop
 80064d0:	080069ed 	.word	0x080069ed
 80064d4:	08006a0f 	.word	0x08006a0f
 80064d8:	08006a47 	.word	0x08006a47
 80064dc:	08006a6b 	.word	0x08006a6b

080064e0 <_cleanup_r>:
 80064e0:	4901      	ldr	r1, [pc, #4]	; (80064e8 <_cleanup_r+0x8>)
 80064e2:	f000 b8af 	b.w	8006644 <_fwalk_reent>
 80064e6:	bf00      	nop
 80064e8:	08006f95 	.word	0x08006f95

080064ec <__sfmoreglue>:
 80064ec:	b570      	push	{r4, r5, r6, lr}
 80064ee:	2568      	movs	r5, #104	; 0x68
 80064f0:	1e4a      	subs	r2, r1, #1
 80064f2:	4355      	muls	r5, r2
 80064f4:	460e      	mov	r6, r1
 80064f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80064fa:	f000 f901 	bl	8006700 <_malloc_r>
 80064fe:	4604      	mov	r4, r0
 8006500:	b140      	cbz	r0, 8006514 <__sfmoreglue+0x28>
 8006502:	2100      	movs	r1, #0
 8006504:	e9c0 1600 	strd	r1, r6, [r0]
 8006508:	300c      	adds	r0, #12
 800650a:	60a0      	str	r0, [r4, #8]
 800650c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006510:	f000 f8ed 	bl	80066ee <memset>
 8006514:	4620      	mov	r0, r4
 8006516:	bd70      	pop	{r4, r5, r6, pc}

08006518 <__sfp_lock_acquire>:
 8006518:	4801      	ldr	r0, [pc, #4]	; (8006520 <__sfp_lock_acquire+0x8>)
 800651a:	f000 b8d8 	b.w	80066ce <__retarget_lock_acquire_recursive>
 800651e:	bf00      	nop
 8006520:	20003000 	.word	0x20003000

08006524 <__sfp_lock_release>:
 8006524:	4801      	ldr	r0, [pc, #4]	; (800652c <__sfp_lock_release+0x8>)
 8006526:	f000 b8d3 	b.w	80066d0 <__retarget_lock_release_recursive>
 800652a:	bf00      	nop
 800652c:	20003000 	.word	0x20003000

08006530 <__sinit_lock_acquire>:
 8006530:	4801      	ldr	r0, [pc, #4]	; (8006538 <__sinit_lock_acquire+0x8>)
 8006532:	f000 b8cc 	b.w	80066ce <__retarget_lock_acquire_recursive>
 8006536:	bf00      	nop
 8006538:	20002ffb 	.word	0x20002ffb

0800653c <__sinit_lock_release>:
 800653c:	4801      	ldr	r0, [pc, #4]	; (8006544 <__sinit_lock_release+0x8>)
 800653e:	f000 b8c7 	b.w	80066d0 <__retarget_lock_release_recursive>
 8006542:	bf00      	nop
 8006544:	20002ffb 	.word	0x20002ffb

08006548 <__sinit>:
 8006548:	b510      	push	{r4, lr}
 800654a:	4604      	mov	r4, r0
 800654c:	f7ff fff0 	bl	8006530 <__sinit_lock_acquire>
 8006550:	69a3      	ldr	r3, [r4, #24]
 8006552:	b11b      	cbz	r3, 800655c <__sinit+0x14>
 8006554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006558:	f7ff bff0 	b.w	800653c <__sinit_lock_release>
 800655c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006560:	6523      	str	r3, [r4, #80]	; 0x50
 8006562:	4b13      	ldr	r3, [pc, #76]	; (80065b0 <__sinit+0x68>)
 8006564:	4a13      	ldr	r2, [pc, #76]	; (80065b4 <__sinit+0x6c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	62a2      	str	r2, [r4, #40]	; 0x28
 800656a:	42a3      	cmp	r3, r4
 800656c:	bf08      	it	eq
 800656e:	2301      	moveq	r3, #1
 8006570:	4620      	mov	r0, r4
 8006572:	bf08      	it	eq
 8006574:	61a3      	streq	r3, [r4, #24]
 8006576:	f000 f81f 	bl	80065b8 <__sfp>
 800657a:	6060      	str	r0, [r4, #4]
 800657c:	4620      	mov	r0, r4
 800657e:	f000 f81b 	bl	80065b8 <__sfp>
 8006582:	60a0      	str	r0, [r4, #8]
 8006584:	4620      	mov	r0, r4
 8006586:	f000 f817 	bl	80065b8 <__sfp>
 800658a:	2200      	movs	r2, #0
 800658c:	2104      	movs	r1, #4
 800658e:	60e0      	str	r0, [r4, #12]
 8006590:	6860      	ldr	r0, [r4, #4]
 8006592:	f7ff ff81 	bl	8006498 <std>
 8006596:	2201      	movs	r2, #1
 8006598:	2109      	movs	r1, #9
 800659a:	68a0      	ldr	r0, [r4, #8]
 800659c:	f7ff ff7c 	bl	8006498 <std>
 80065a0:	2202      	movs	r2, #2
 80065a2:	2112      	movs	r1, #18
 80065a4:	68e0      	ldr	r0, [r4, #12]
 80065a6:	f7ff ff77 	bl	8006498 <std>
 80065aa:	2301      	movs	r3, #1
 80065ac:	61a3      	str	r3, [r4, #24]
 80065ae:	e7d1      	b.n	8006554 <__sinit+0xc>
 80065b0:	080072d8 	.word	0x080072d8
 80065b4:	080064e1 	.word	0x080064e1

080065b8 <__sfp>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	4607      	mov	r7, r0
 80065bc:	f7ff ffac 	bl	8006518 <__sfp_lock_acquire>
 80065c0:	4b1e      	ldr	r3, [pc, #120]	; (800663c <__sfp+0x84>)
 80065c2:	681e      	ldr	r6, [r3, #0]
 80065c4:	69b3      	ldr	r3, [r6, #24]
 80065c6:	b913      	cbnz	r3, 80065ce <__sfp+0x16>
 80065c8:	4630      	mov	r0, r6
 80065ca:	f7ff ffbd 	bl	8006548 <__sinit>
 80065ce:	3648      	adds	r6, #72	; 0x48
 80065d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	d503      	bpl.n	80065e0 <__sfp+0x28>
 80065d8:	6833      	ldr	r3, [r6, #0]
 80065da:	b30b      	cbz	r3, 8006620 <__sfp+0x68>
 80065dc:	6836      	ldr	r6, [r6, #0]
 80065de:	e7f7      	b.n	80065d0 <__sfp+0x18>
 80065e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80065e4:	b9d5      	cbnz	r5, 800661c <__sfp+0x64>
 80065e6:	4b16      	ldr	r3, [pc, #88]	; (8006640 <__sfp+0x88>)
 80065e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065ec:	60e3      	str	r3, [r4, #12]
 80065ee:	6665      	str	r5, [r4, #100]	; 0x64
 80065f0:	f000 f86c 	bl	80066cc <__retarget_lock_init_recursive>
 80065f4:	f7ff ff96 	bl	8006524 <__sfp_lock_release>
 80065f8:	2208      	movs	r2, #8
 80065fa:	4629      	mov	r1, r5
 80065fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006600:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006604:	6025      	str	r5, [r4, #0]
 8006606:	61a5      	str	r5, [r4, #24]
 8006608:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800660c:	f000 f86f 	bl	80066ee <memset>
 8006610:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006614:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006618:	4620      	mov	r0, r4
 800661a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800661c:	3468      	adds	r4, #104	; 0x68
 800661e:	e7d9      	b.n	80065d4 <__sfp+0x1c>
 8006620:	2104      	movs	r1, #4
 8006622:	4638      	mov	r0, r7
 8006624:	f7ff ff62 	bl	80064ec <__sfmoreglue>
 8006628:	4604      	mov	r4, r0
 800662a:	6030      	str	r0, [r6, #0]
 800662c:	2800      	cmp	r0, #0
 800662e:	d1d5      	bne.n	80065dc <__sfp+0x24>
 8006630:	f7ff ff78 	bl	8006524 <__sfp_lock_release>
 8006634:	230c      	movs	r3, #12
 8006636:	603b      	str	r3, [r7, #0]
 8006638:	e7ee      	b.n	8006618 <__sfp+0x60>
 800663a:	bf00      	nop
 800663c:	080072d8 	.word	0x080072d8
 8006640:	ffff0001 	.word	0xffff0001

08006644 <_fwalk_reent>:
 8006644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006648:	4606      	mov	r6, r0
 800664a:	4688      	mov	r8, r1
 800664c:	2700      	movs	r7, #0
 800664e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006652:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006656:	f1b9 0901 	subs.w	r9, r9, #1
 800665a:	d505      	bpl.n	8006668 <_fwalk_reent+0x24>
 800665c:	6824      	ldr	r4, [r4, #0]
 800665e:	2c00      	cmp	r4, #0
 8006660:	d1f7      	bne.n	8006652 <_fwalk_reent+0xe>
 8006662:	4638      	mov	r0, r7
 8006664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006668:	89ab      	ldrh	r3, [r5, #12]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d907      	bls.n	800667e <_fwalk_reent+0x3a>
 800666e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006672:	3301      	adds	r3, #1
 8006674:	d003      	beq.n	800667e <_fwalk_reent+0x3a>
 8006676:	4629      	mov	r1, r5
 8006678:	4630      	mov	r0, r6
 800667a:	47c0      	blx	r8
 800667c:	4307      	orrs	r7, r0
 800667e:	3568      	adds	r5, #104	; 0x68
 8006680:	e7e9      	b.n	8006656 <_fwalk_reent+0x12>
	...

08006684 <__libc_init_array>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	2600      	movs	r6, #0
 8006688:	4d0c      	ldr	r5, [pc, #48]	; (80066bc <__libc_init_array+0x38>)
 800668a:	4c0d      	ldr	r4, [pc, #52]	; (80066c0 <__libc_init_array+0x3c>)
 800668c:	1b64      	subs	r4, r4, r5
 800668e:	10a4      	asrs	r4, r4, #2
 8006690:	42a6      	cmp	r6, r4
 8006692:	d109      	bne.n	80066a8 <__libc_init_array+0x24>
 8006694:	f000 fd74 	bl	8007180 <_init>
 8006698:	2600      	movs	r6, #0
 800669a:	4d0a      	ldr	r5, [pc, #40]	; (80066c4 <__libc_init_array+0x40>)
 800669c:	4c0a      	ldr	r4, [pc, #40]	; (80066c8 <__libc_init_array+0x44>)
 800669e:	1b64      	subs	r4, r4, r5
 80066a0:	10a4      	asrs	r4, r4, #2
 80066a2:	42a6      	cmp	r6, r4
 80066a4:	d105      	bne.n	80066b2 <__libc_init_array+0x2e>
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ac:	4798      	blx	r3
 80066ae:	3601      	adds	r6, #1
 80066b0:	e7ee      	b.n	8006690 <__libc_init_array+0xc>
 80066b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b6:	4798      	blx	r3
 80066b8:	3601      	adds	r6, #1
 80066ba:	e7f2      	b.n	80066a2 <__libc_init_array+0x1e>
 80066bc:	08007978 	.word	0x08007978
 80066c0:	08007978 	.word	0x08007978
 80066c4:	08007978 	.word	0x08007978
 80066c8:	0800797c 	.word	0x0800797c

080066cc <__retarget_lock_init_recursive>:
 80066cc:	4770      	bx	lr

080066ce <__retarget_lock_acquire_recursive>:
 80066ce:	4770      	bx	lr

080066d0 <__retarget_lock_release_recursive>:
 80066d0:	4770      	bx	lr

080066d2 <memcpy>:
 80066d2:	440a      	add	r2, r1
 80066d4:	4291      	cmp	r1, r2
 80066d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80066da:	d100      	bne.n	80066de <memcpy+0xc>
 80066dc:	4770      	bx	lr
 80066de:	b510      	push	{r4, lr}
 80066e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066e4:	4291      	cmp	r1, r2
 80066e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066ea:	d1f9      	bne.n	80066e0 <memcpy+0xe>
 80066ec:	bd10      	pop	{r4, pc}

080066ee <memset>:
 80066ee:	4603      	mov	r3, r0
 80066f0:	4402      	add	r2, r0
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d100      	bne.n	80066f8 <memset+0xa>
 80066f6:	4770      	bx	lr
 80066f8:	f803 1b01 	strb.w	r1, [r3], #1
 80066fc:	e7f9      	b.n	80066f2 <memset+0x4>
	...

08006700 <_malloc_r>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	1ccd      	adds	r5, r1, #3
 8006704:	f025 0503 	bic.w	r5, r5, #3
 8006708:	3508      	adds	r5, #8
 800670a:	2d0c      	cmp	r5, #12
 800670c:	bf38      	it	cc
 800670e:	250c      	movcc	r5, #12
 8006710:	2d00      	cmp	r5, #0
 8006712:	4606      	mov	r6, r0
 8006714:	db01      	blt.n	800671a <_malloc_r+0x1a>
 8006716:	42a9      	cmp	r1, r5
 8006718:	d903      	bls.n	8006722 <_malloc_r+0x22>
 800671a:	230c      	movs	r3, #12
 800671c:	6033      	str	r3, [r6, #0]
 800671e:	2000      	movs	r0, #0
 8006720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006722:	f000 fcc3 	bl	80070ac <__malloc_lock>
 8006726:	4921      	ldr	r1, [pc, #132]	; (80067ac <_malloc_r+0xac>)
 8006728:	680a      	ldr	r2, [r1, #0]
 800672a:	4614      	mov	r4, r2
 800672c:	b99c      	cbnz	r4, 8006756 <_malloc_r+0x56>
 800672e:	4f20      	ldr	r7, [pc, #128]	; (80067b0 <_malloc_r+0xb0>)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	b923      	cbnz	r3, 800673e <_malloc_r+0x3e>
 8006734:	4621      	mov	r1, r4
 8006736:	4630      	mov	r0, r6
 8006738:	f000 f948 	bl	80069cc <_sbrk_r>
 800673c:	6038      	str	r0, [r7, #0]
 800673e:	4629      	mov	r1, r5
 8006740:	4630      	mov	r0, r6
 8006742:	f000 f943 	bl	80069cc <_sbrk_r>
 8006746:	1c43      	adds	r3, r0, #1
 8006748:	d123      	bne.n	8006792 <_malloc_r+0x92>
 800674a:	230c      	movs	r3, #12
 800674c:	4630      	mov	r0, r6
 800674e:	6033      	str	r3, [r6, #0]
 8006750:	f000 fcb2 	bl	80070b8 <__malloc_unlock>
 8006754:	e7e3      	b.n	800671e <_malloc_r+0x1e>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	1b5b      	subs	r3, r3, r5
 800675a:	d417      	bmi.n	800678c <_malloc_r+0x8c>
 800675c:	2b0b      	cmp	r3, #11
 800675e:	d903      	bls.n	8006768 <_malloc_r+0x68>
 8006760:	6023      	str	r3, [r4, #0]
 8006762:	441c      	add	r4, r3
 8006764:	6025      	str	r5, [r4, #0]
 8006766:	e004      	b.n	8006772 <_malloc_r+0x72>
 8006768:	6863      	ldr	r3, [r4, #4]
 800676a:	42a2      	cmp	r2, r4
 800676c:	bf0c      	ite	eq
 800676e:	600b      	streq	r3, [r1, #0]
 8006770:	6053      	strne	r3, [r2, #4]
 8006772:	4630      	mov	r0, r6
 8006774:	f000 fca0 	bl	80070b8 <__malloc_unlock>
 8006778:	f104 000b 	add.w	r0, r4, #11
 800677c:	1d23      	adds	r3, r4, #4
 800677e:	f020 0007 	bic.w	r0, r0, #7
 8006782:	1ac2      	subs	r2, r0, r3
 8006784:	d0cc      	beq.n	8006720 <_malloc_r+0x20>
 8006786:	1a1b      	subs	r3, r3, r0
 8006788:	50a3      	str	r3, [r4, r2]
 800678a:	e7c9      	b.n	8006720 <_malloc_r+0x20>
 800678c:	4622      	mov	r2, r4
 800678e:	6864      	ldr	r4, [r4, #4]
 8006790:	e7cc      	b.n	800672c <_malloc_r+0x2c>
 8006792:	1cc4      	adds	r4, r0, #3
 8006794:	f024 0403 	bic.w	r4, r4, #3
 8006798:	42a0      	cmp	r0, r4
 800679a:	d0e3      	beq.n	8006764 <_malloc_r+0x64>
 800679c:	1a21      	subs	r1, r4, r0
 800679e:	4630      	mov	r0, r6
 80067a0:	f000 f914 	bl	80069cc <_sbrk_r>
 80067a4:	3001      	adds	r0, #1
 80067a6:	d1dd      	bne.n	8006764 <_malloc_r+0x64>
 80067a8:	e7cf      	b.n	800674a <_malloc_r+0x4a>
 80067aa:	bf00      	nop
 80067ac:	20002ebc 	.word	0x20002ebc
 80067b0:	20002ec0 	.word	0x20002ec0

080067b4 <_perror_r>:
 80067b4:	6983      	ldr	r3, [r0, #24]
 80067b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067b8:	4605      	mov	r5, r0
 80067ba:	460e      	mov	r6, r1
 80067bc:	68c4      	ldr	r4, [r0, #12]
 80067be:	b90b      	cbnz	r3, 80067c4 <_perror_r+0x10>
 80067c0:	f7ff fec2 	bl	8006548 <__sinit>
 80067c4:	4b43      	ldr	r3, [pc, #268]	; (80068d4 <_perror_r+0x120>)
 80067c6:	429c      	cmp	r4, r3
 80067c8:	d132      	bne.n	8006830 <_perror_r+0x7c>
 80067ca:	686c      	ldr	r4, [r5, #4]
 80067cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067ce:	07d8      	lsls	r0, r3, #31
 80067d0:	d405      	bmi.n	80067de <_perror_r+0x2a>
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	0599      	lsls	r1, r3, #22
 80067d6:	d402      	bmi.n	80067de <_perror_r+0x2a>
 80067d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067da:	f7ff ff78 	bl	80066ce <__retarget_lock_acquire_recursive>
 80067de:	4621      	mov	r1, r4
 80067e0:	4628      	mov	r0, r5
 80067e2:	f000 fbd7 	bl	8006f94 <_fflush_r>
 80067e6:	bb6e      	cbnz	r6, 8006844 <_perror_r+0x90>
 80067e8:	2201      	movs	r2, #1
 80067ea:	4628      	mov	r0, r5
 80067ec:	6829      	ldr	r1, [r5, #0]
 80067ee:	ab01      	add	r3, sp, #4
 80067f0:	f000 f940 	bl	8006a74 <_strerror_r>
 80067f4:	4607      	mov	r7, r0
 80067f6:	2800      	cmp	r0, #0
 80067f8:	d14f      	bne.n	800689a <_perror_r+0xe6>
 80067fa:	4837      	ldr	r0, [pc, #220]	; (80068d8 <_perror_r+0x124>)
 80067fc:	f7f9 fca8 	bl	8000150 <strlen>
 8006800:	4606      	mov	r6, r0
 8006802:	4f35      	ldr	r7, [pc, #212]	; (80068d8 <_perror_r+0x124>)
 8006804:	b156      	cbz	r6, 800681c <_perror_r+0x68>
 8006806:	4620      	mov	r0, r4
 8006808:	f000 fc00 	bl	800700c <fileno>
 800680c:	4633      	mov	r3, r6
 800680e:	4601      	mov	r1, r0
 8006810:	463a      	mov	r2, r7
 8006812:	4628      	mov	r0, r5
 8006814:	f000 fb16 	bl	8006e44 <_write_r>
 8006818:	2800      	cmp	r0, #0
 800681a:	da51      	bge.n	80068c0 <_perror_r+0x10c>
 800681c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006820:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006826:	07d2      	lsls	r2, r2, #31
 8006828:	81a3      	strh	r3, [r4, #12]
 800682a:	d54c      	bpl.n	80068c6 <_perror_r+0x112>
 800682c:	b003      	add	sp, #12
 800682e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006830:	4b2a      	ldr	r3, [pc, #168]	; (80068dc <_perror_r+0x128>)
 8006832:	429c      	cmp	r4, r3
 8006834:	d101      	bne.n	800683a <_perror_r+0x86>
 8006836:	68ac      	ldr	r4, [r5, #8]
 8006838:	e7c8      	b.n	80067cc <_perror_r+0x18>
 800683a:	4b29      	ldr	r3, [pc, #164]	; (80068e0 <_perror_r+0x12c>)
 800683c:	429c      	cmp	r4, r3
 800683e:	bf08      	it	eq
 8006840:	68ec      	ldreq	r4, [r5, #12]
 8006842:	e7c3      	b.n	80067cc <_perror_r+0x18>
 8006844:	7833      	ldrb	r3, [r6, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0ce      	beq.n	80067e8 <_perror_r+0x34>
 800684a:	4630      	mov	r0, r6
 800684c:	f7f9 fc80 	bl	8000150 <strlen>
 8006850:	4607      	mov	r7, r0
 8006852:	b157      	cbz	r7, 800686a <_perror_r+0xb6>
 8006854:	4620      	mov	r0, r4
 8006856:	f000 fbd9 	bl	800700c <fileno>
 800685a:	463b      	mov	r3, r7
 800685c:	4601      	mov	r1, r0
 800685e:	4632      	mov	r2, r6
 8006860:	4628      	mov	r0, r5
 8006862:	f000 faef 	bl	8006e44 <_write_r>
 8006866:	2800      	cmp	r0, #0
 8006868:	da14      	bge.n	8006894 <_perror_r+0xe0>
 800686a:	481e      	ldr	r0, [pc, #120]	; (80068e4 <_perror_r+0x130>)
 800686c:	f7f9 fc70 	bl	8000150 <strlen>
 8006870:	4606      	mov	r6, r0
 8006872:	4f1c      	ldr	r7, [pc, #112]	; (80068e4 <_perror_r+0x130>)
 8006874:	2e00      	cmp	r6, #0
 8006876:	d0b7      	beq.n	80067e8 <_perror_r+0x34>
 8006878:	4620      	mov	r0, r4
 800687a:	f000 fbc7 	bl	800700c <fileno>
 800687e:	4633      	mov	r3, r6
 8006880:	4601      	mov	r1, r0
 8006882:	463a      	mov	r2, r7
 8006884:	4628      	mov	r0, r5
 8006886:	f000 fadd 	bl	8006e44 <_write_r>
 800688a:	2800      	cmp	r0, #0
 800688c:	dbac      	blt.n	80067e8 <_perror_r+0x34>
 800688e:	1a36      	subs	r6, r6, r0
 8006890:	4407      	add	r7, r0
 8006892:	e7ef      	b.n	8006874 <_perror_r+0xc0>
 8006894:	1a3f      	subs	r7, r7, r0
 8006896:	4406      	add	r6, r0
 8006898:	e7db      	b.n	8006852 <_perror_r+0x9e>
 800689a:	f7f9 fc59 	bl	8000150 <strlen>
 800689e:	4606      	mov	r6, r0
 80068a0:	2e00      	cmp	r6, #0
 80068a2:	d0aa      	beq.n	80067fa <_perror_r+0x46>
 80068a4:	4620      	mov	r0, r4
 80068a6:	f000 fbb1 	bl	800700c <fileno>
 80068aa:	4633      	mov	r3, r6
 80068ac:	4601      	mov	r1, r0
 80068ae:	463a      	mov	r2, r7
 80068b0:	4628      	mov	r0, r5
 80068b2:	f000 fac7 	bl	8006e44 <_write_r>
 80068b6:	2800      	cmp	r0, #0
 80068b8:	db9f      	blt.n	80067fa <_perror_r+0x46>
 80068ba:	1a36      	subs	r6, r6, r0
 80068bc:	4407      	add	r7, r0
 80068be:	e7ef      	b.n	80068a0 <_perror_r+0xec>
 80068c0:	1a36      	subs	r6, r6, r0
 80068c2:	4407      	add	r7, r0
 80068c4:	e79e      	b.n	8006804 <_perror_r+0x50>
 80068c6:	059b      	lsls	r3, r3, #22
 80068c8:	d4b0      	bmi.n	800682c <_perror_r+0x78>
 80068ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068cc:	f7ff ff00 	bl	80066d0 <__retarget_lock_release_recursive>
 80068d0:	e7ac      	b.n	800682c <_perror_r+0x78>
 80068d2:	bf00      	nop
 80068d4:	08007298 	.word	0x08007298
 80068d8:	080072df 	.word	0x080072df
 80068dc:	080072b8 	.word	0x080072b8
 80068e0:	08007278 	.word	0x08007278
 80068e4:	080072dc 	.word	0x080072dc

080068e8 <perror>:
 80068e8:	4b02      	ldr	r3, [pc, #8]	; (80068f4 <perror+0xc>)
 80068ea:	4601      	mov	r1, r0
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	f7ff bf61 	b.w	80067b4 <_perror_r>
 80068f2:	bf00      	nop
 80068f4:	20000014 	.word	0x20000014

080068f8 <cleanup_glue>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	460c      	mov	r4, r1
 80068fc:	6809      	ldr	r1, [r1, #0]
 80068fe:	4605      	mov	r5, r0
 8006900:	b109      	cbz	r1, 8006906 <cleanup_glue+0xe>
 8006902:	f7ff fff9 	bl	80068f8 <cleanup_glue>
 8006906:	4621      	mov	r1, r4
 8006908:	4628      	mov	r0, r5
 800690a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800690e:	f000 bbd9 	b.w	80070c4 <_free_r>
	...

08006914 <_reclaim_reent>:
 8006914:	4b2c      	ldr	r3, [pc, #176]	; (80069c8 <_reclaim_reent+0xb4>)
 8006916:	b570      	push	{r4, r5, r6, lr}
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4604      	mov	r4, r0
 800691c:	4283      	cmp	r3, r0
 800691e:	d051      	beq.n	80069c4 <_reclaim_reent+0xb0>
 8006920:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006922:	b143      	cbz	r3, 8006936 <_reclaim_reent+0x22>
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d14a      	bne.n	80069c0 <_reclaim_reent+0xac>
 800692a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800692c:	6819      	ldr	r1, [r3, #0]
 800692e:	b111      	cbz	r1, 8006936 <_reclaim_reent+0x22>
 8006930:	4620      	mov	r0, r4
 8006932:	f000 fbc7 	bl	80070c4 <_free_r>
 8006936:	6961      	ldr	r1, [r4, #20]
 8006938:	b111      	cbz	r1, 8006940 <_reclaim_reent+0x2c>
 800693a:	4620      	mov	r0, r4
 800693c:	f000 fbc2 	bl	80070c4 <_free_r>
 8006940:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006942:	b111      	cbz	r1, 800694a <_reclaim_reent+0x36>
 8006944:	4620      	mov	r0, r4
 8006946:	f000 fbbd 	bl	80070c4 <_free_r>
 800694a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800694c:	b111      	cbz	r1, 8006954 <_reclaim_reent+0x40>
 800694e:	4620      	mov	r0, r4
 8006950:	f000 fbb8 	bl	80070c4 <_free_r>
 8006954:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006956:	b111      	cbz	r1, 800695e <_reclaim_reent+0x4a>
 8006958:	4620      	mov	r0, r4
 800695a:	f000 fbb3 	bl	80070c4 <_free_r>
 800695e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006960:	b111      	cbz	r1, 8006968 <_reclaim_reent+0x54>
 8006962:	4620      	mov	r0, r4
 8006964:	f000 fbae 	bl	80070c4 <_free_r>
 8006968:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800696a:	b111      	cbz	r1, 8006972 <_reclaim_reent+0x5e>
 800696c:	4620      	mov	r0, r4
 800696e:	f000 fba9 	bl	80070c4 <_free_r>
 8006972:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006974:	b111      	cbz	r1, 800697c <_reclaim_reent+0x68>
 8006976:	4620      	mov	r0, r4
 8006978:	f000 fba4 	bl	80070c4 <_free_r>
 800697c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800697e:	b111      	cbz	r1, 8006986 <_reclaim_reent+0x72>
 8006980:	4620      	mov	r0, r4
 8006982:	f000 fb9f 	bl	80070c4 <_free_r>
 8006986:	69a3      	ldr	r3, [r4, #24]
 8006988:	b1e3      	cbz	r3, 80069c4 <_reclaim_reent+0xb0>
 800698a:	4620      	mov	r0, r4
 800698c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800698e:	4798      	blx	r3
 8006990:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006992:	b1b9      	cbz	r1, 80069c4 <_reclaim_reent+0xb0>
 8006994:	4620      	mov	r0, r4
 8006996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800699a:	f7ff bfad 	b.w	80068f8 <cleanup_glue>
 800699e:	5949      	ldr	r1, [r1, r5]
 80069a0:	b941      	cbnz	r1, 80069b4 <_reclaim_reent+0xa0>
 80069a2:	3504      	adds	r5, #4
 80069a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069a6:	2d80      	cmp	r5, #128	; 0x80
 80069a8:	68d9      	ldr	r1, [r3, #12]
 80069aa:	d1f8      	bne.n	800699e <_reclaim_reent+0x8a>
 80069ac:	4620      	mov	r0, r4
 80069ae:	f000 fb89 	bl	80070c4 <_free_r>
 80069b2:	e7ba      	b.n	800692a <_reclaim_reent+0x16>
 80069b4:	680e      	ldr	r6, [r1, #0]
 80069b6:	4620      	mov	r0, r4
 80069b8:	f000 fb84 	bl	80070c4 <_free_r>
 80069bc:	4631      	mov	r1, r6
 80069be:	e7ef      	b.n	80069a0 <_reclaim_reent+0x8c>
 80069c0:	2500      	movs	r5, #0
 80069c2:	e7ef      	b.n	80069a4 <_reclaim_reent+0x90>
 80069c4:	bd70      	pop	{r4, r5, r6, pc}
 80069c6:	bf00      	nop
 80069c8:	20000014 	.word	0x20000014

080069cc <_sbrk_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	2300      	movs	r3, #0
 80069d0:	4d05      	ldr	r5, [pc, #20]	; (80069e8 <_sbrk_r+0x1c>)
 80069d2:	4604      	mov	r4, r0
 80069d4:	4608      	mov	r0, r1
 80069d6:	602b      	str	r3, [r5, #0]
 80069d8:	f7fa f93c 	bl	8000c54 <_sbrk>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d102      	bne.n	80069e6 <_sbrk_r+0x1a>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	b103      	cbz	r3, 80069e6 <_sbrk_r+0x1a>
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	20003004 	.word	0x20003004

080069ec <__sread>:
 80069ec:	b510      	push	{r4, lr}
 80069ee:	460c      	mov	r4, r1
 80069f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f4:	f000 fbb2 	bl	800715c <_read_r>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	bfab      	itete	ge
 80069fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006a00:	181b      	addge	r3, r3, r0
 8006a02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a06:	bfac      	ite	ge
 8006a08:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a0a:	81a3      	strhlt	r3, [r4, #12]
 8006a0c:	bd10      	pop	{r4, pc}

08006a0e <__swrite>:
 8006a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a12:	461f      	mov	r7, r3
 8006a14:	898b      	ldrh	r3, [r1, #12]
 8006a16:	4605      	mov	r5, r0
 8006a18:	05db      	lsls	r3, r3, #23
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	4616      	mov	r6, r2
 8006a1e:	d505      	bpl.n	8006a2c <__swrite+0x1e>
 8006a20:	2302      	movs	r3, #2
 8006a22:	2200      	movs	r2, #0
 8006a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a28:	f000 fb2e 	bl	8007088 <_lseek_r>
 8006a2c:	89a3      	ldrh	r3, [r4, #12]
 8006a2e:	4632      	mov	r2, r6
 8006a30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a34:	81a3      	strh	r3, [r4, #12]
 8006a36:	4628      	mov	r0, r5
 8006a38:	463b      	mov	r3, r7
 8006a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a42:	f000 b9ff 	b.w	8006e44 <_write_r>

08006a46 <__sseek>:
 8006a46:	b510      	push	{r4, lr}
 8006a48:	460c      	mov	r4, r1
 8006a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a4e:	f000 fb1b 	bl	8007088 <_lseek_r>
 8006a52:	1c43      	adds	r3, r0, #1
 8006a54:	89a3      	ldrh	r3, [r4, #12]
 8006a56:	bf15      	itete	ne
 8006a58:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a62:	81a3      	strheq	r3, [r4, #12]
 8006a64:	bf18      	it	ne
 8006a66:	81a3      	strhne	r3, [r4, #12]
 8006a68:	bd10      	pop	{r4, pc}

08006a6a <__sclose>:
 8006a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a6e:	f000 b9fb 	b.w	8006e68 <_close_r>
	...

08006a74 <_strerror_r>:
 8006a74:	b510      	push	{r4, lr}
 8006a76:	4604      	mov	r4, r0
 8006a78:	4608      	mov	r0, r1
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	288e      	cmp	r0, #142	; 0x8e
 8006a7e:	f200 812f 	bhi.w	8006ce0 <_strerror_r+0x26c>
 8006a82:	e8df f010 	tbh	[pc, r0, lsl #1]
 8006a86:	0138      	.short	0x0138
 8006a88:	0091008f 	.word	0x0091008f
 8006a8c:	00950093 	.word	0x00950093
 8006a90:	00990097 	.word	0x00990097
 8006a94:	009d009b 	.word	0x009d009b
 8006a98:	00a300a1 	.word	0x00a300a1
 8006a9c:	00a900a7 	.word	0x00a900a7
 8006aa0:	00ad00ab 	.word	0x00ad00ab
 8006aa4:	00af012d 	.word	0x00af012d
 8006aa8:	00b300b1 	.word	0x00b300b1
 8006aac:	00b700b5 	.word	0x00b700b5
 8006ab0:	00bf00bd 	.word	0x00bf00bd
 8006ab4:	00c700c5 	.word	0x00c700c5
 8006ab8:	00cb00c9 	.word	0x00cb00c9
 8006abc:	00d100cd 	.word	0x00d100cd
 8006ac0:	00d700d5 	.word	0x00d700d5
 8006ac4:	00db00d9 	.word	0x00db00d9
 8006ac8:	00df00dd 	.word	0x00df00dd
 8006acc:	00e300e1 	.word	0x00e300e1
 8006ad0:	012d012d 	.word	0x012d012d
 8006ad4:	012d012d 	.word	0x012d012d
 8006ad8:	012d012d 	.word	0x012d012d
 8006adc:	012d012d 	.word	0x012d012d
 8006ae0:	00eb00e7 	.word	0x00eb00e7
 8006ae4:	012d012d 	.word	0x012d012d
 8006ae8:	012d012d 	.word	0x012d012d
 8006aec:	012d012d 	.word	0x012d012d
 8006af0:	012d012d 	.word	0x012d012d
 8006af4:	012d012d 	.word	0x012d012d
 8006af8:	012d012d 	.word	0x012d012d
 8006afc:	00ed012d 	.word	0x00ed012d
 8006b00:	00ef0107 	.word	0x00ef0107
 8006b04:	012d00f1 	.word	0x012d00f1
 8006b08:	012d012d 	.word	0x012d012d
 8006b0c:	012d00f3 	.word	0x012d00f3
 8006b10:	012d012d 	.word	0x012d012d
 8006b14:	012d00f5 	.word	0x012d00f5
 8006b18:	00f9012d 	.word	0x00f9012d
 8006b1c:	012d012d 	.word	0x012d012d
 8006b20:	012d00fb 	.word	0x012d00fb
 8006b24:	012d012d 	.word	0x012d012d
 8006b28:	012d012d 	.word	0x012d012d
 8006b2c:	012d012d 	.word	0x012d012d
 8006b30:	012d012d 	.word	0x012d012d
 8006b34:	00fd012d 	.word	0x00fd012d
 8006b38:	00ff012d 	.word	0x00ff012d
 8006b3c:	01030101 	.word	0x01030101
 8006b40:	012d012d 	.word	0x012d012d
 8006b44:	012d0125 	.word	0x012d0125
 8006b48:	012d012d 	.word	0x012d012d
 8006b4c:	012d012d 	.word	0x012d012d
 8006b50:	012d012d 	.word	0x012d012d
 8006b54:	0113012d 	.word	0x0113012d
 8006b58:	01090105 	.word	0x01090105
 8006b5c:	010d010b 	.word	0x010d010b
 8006b60:	012d010f 	.word	0x012d010f
 8006b64:	01150111 	.word	0x01150111
 8006b68:	00e90119 	.word	0x00e90119
 8006b6c:	012b00c1 	.word	0x012b00c1
 8006b70:	00cf00b9 	.word	0x00cf00b9
 8006b74:	009f00bb 	.word	0x009f00bb
 8006b78:	012900a5 	.word	0x012900a5
 8006b7c:	012d00f7 	.word	0x012d00f7
 8006b80:	00c30117 	.word	0x00c30117
 8006b84:	011b011d 	.word	0x011b011d
 8006b88:	012d012d 	.word	0x012d012d
 8006b8c:	012d012d 	.word	0x012d012d
 8006b90:	00d3012d 	.word	0x00d3012d
 8006b94:	012d012d 	.word	0x012d012d
 8006b98:	00e5012d 	.word	0x00e5012d
 8006b9c:	011f0127 	.word	0x011f0127
 8006ba0:	01230121 	.word	0x01230121
 8006ba4:	4855      	ldr	r0, [pc, #340]	; (8006cfc <_strerror_r+0x288>)
 8006ba6:	bd10      	pop	{r4, pc}
 8006ba8:	4855      	ldr	r0, [pc, #340]	; (8006d00 <_strerror_r+0x28c>)
 8006baa:	e7fc      	b.n	8006ba6 <_strerror_r+0x132>
 8006bac:	4855      	ldr	r0, [pc, #340]	; (8006d04 <_strerror_r+0x290>)
 8006bae:	e7fa      	b.n	8006ba6 <_strerror_r+0x132>
 8006bb0:	4855      	ldr	r0, [pc, #340]	; (8006d08 <_strerror_r+0x294>)
 8006bb2:	e7f8      	b.n	8006ba6 <_strerror_r+0x132>
 8006bb4:	4855      	ldr	r0, [pc, #340]	; (8006d0c <_strerror_r+0x298>)
 8006bb6:	e7f6      	b.n	8006ba6 <_strerror_r+0x132>
 8006bb8:	4855      	ldr	r0, [pc, #340]	; (8006d10 <_strerror_r+0x29c>)
 8006bba:	e7f4      	b.n	8006ba6 <_strerror_r+0x132>
 8006bbc:	4855      	ldr	r0, [pc, #340]	; (8006d14 <_strerror_r+0x2a0>)
 8006bbe:	e7f2      	b.n	8006ba6 <_strerror_r+0x132>
 8006bc0:	4855      	ldr	r0, [pc, #340]	; (8006d18 <_strerror_r+0x2a4>)
 8006bc2:	e7f0      	b.n	8006ba6 <_strerror_r+0x132>
 8006bc4:	4855      	ldr	r0, [pc, #340]	; (8006d1c <_strerror_r+0x2a8>)
 8006bc6:	e7ee      	b.n	8006ba6 <_strerror_r+0x132>
 8006bc8:	4855      	ldr	r0, [pc, #340]	; (8006d20 <_strerror_r+0x2ac>)
 8006bca:	e7ec      	b.n	8006ba6 <_strerror_r+0x132>
 8006bcc:	4855      	ldr	r0, [pc, #340]	; (8006d24 <_strerror_r+0x2b0>)
 8006bce:	e7ea      	b.n	8006ba6 <_strerror_r+0x132>
 8006bd0:	4855      	ldr	r0, [pc, #340]	; (8006d28 <_strerror_r+0x2b4>)
 8006bd2:	e7e8      	b.n	8006ba6 <_strerror_r+0x132>
 8006bd4:	4855      	ldr	r0, [pc, #340]	; (8006d2c <_strerror_r+0x2b8>)
 8006bd6:	e7e6      	b.n	8006ba6 <_strerror_r+0x132>
 8006bd8:	4855      	ldr	r0, [pc, #340]	; (8006d30 <_strerror_r+0x2bc>)
 8006bda:	e7e4      	b.n	8006ba6 <_strerror_r+0x132>
 8006bdc:	4855      	ldr	r0, [pc, #340]	; (8006d34 <_strerror_r+0x2c0>)
 8006bde:	e7e2      	b.n	8006ba6 <_strerror_r+0x132>
 8006be0:	4855      	ldr	r0, [pc, #340]	; (8006d38 <_strerror_r+0x2c4>)
 8006be2:	e7e0      	b.n	8006ba6 <_strerror_r+0x132>
 8006be4:	4855      	ldr	r0, [pc, #340]	; (8006d3c <_strerror_r+0x2c8>)
 8006be6:	e7de      	b.n	8006ba6 <_strerror_r+0x132>
 8006be8:	4855      	ldr	r0, [pc, #340]	; (8006d40 <_strerror_r+0x2cc>)
 8006bea:	e7dc      	b.n	8006ba6 <_strerror_r+0x132>
 8006bec:	4855      	ldr	r0, [pc, #340]	; (8006d44 <_strerror_r+0x2d0>)
 8006bee:	e7da      	b.n	8006ba6 <_strerror_r+0x132>
 8006bf0:	4855      	ldr	r0, [pc, #340]	; (8006d48 <_strerror_r+0x2d4>)
 8006bf2:	e7d8      	b.n	8006ba6 <_strerror_r+0x132>
 8006bf4:	4855      	ldr	r0, [pc, #340]	; (8006d4c <_strerror_r+0x2d8>)
 8006bf6:	e7d6      	b.n	8006ba6 <_strerror_r+0x132>
 8006bf8:	4855      	ldr	r0, [pc, #340]	; (8006d50 <_strerror_r+0x2dc>)
 8006bfa:	e7d4      	b.n	8006ba6 <_strerror_r+0x132>
 8006bfc:	4855      	ldr	r0, [pc, #340]	; (8006d54 <_strerror_r+0x2e0>)
 8006bfe:	e7d2      	b.n	8006ba6 <_strerror_r+0x132>
 8006c00:	4855      	ldr	r0, [pc, #340]	; (8006d58 <_strerror_r+0x2e4>)
 8006c02:	e7d0      	b.n	8006ba6 <_strerror_r+0x132>
 8006c04:	4855      	ldr	r0, [pc, #340]	; (8006d5c <_strerror_r+0x2e8>)
 8006c06:	e7ce      	b.n	8006ba6 <_strerror_r+0x132>
 8006c08:	4855      	ldr	r0, [pc, #340]	; (8006d60 <_strerror_r+0x2ec>)
 8006c0a:	e7cc      	b.n	8006ba6 <_strerror_r+0x132>
 8006c0c:	4855      	ldr	r0, [pc, #340]	; (8006d64 <_strerror_r+0x2f0>)
 8006c0e:	e7ca      	b.n	8006ba6 <_strerror_r+0x132>
 8006c10:	4855      	ldr	r0, [pc, #340]	; (8006d68 <_strerror_r+0x2f4>)
 8006c12:	e7c8      	b.n	8006ba6 <_strerror_r+0x132>
 8006c14:	4855      	ldr	r0, [pc, #340]	; (8006d6c <_strerror_r+0x2f8>)
 8006c16:	e7c6      	b.n	8006ba6 <_strerror_r+0x132>
 8006c18:	4855      	ldr	r0, [pc, #340]	; (8006d70 <_strerror_r+0x2fc>)
 8006c1a:	e7c4      	b.n	8006ba6 <_strerror_r+0x132>
 8006c1c:	4855      	ldr	r0, [pc, #340]	; (8006d74 <_strerror_r+0x300>)
 8006c1e:	e7c2      	b.n	8006ba6 <_strerror_r+0x132>
 8006c20:	4855      	ldr	r0, [pc, #340]	; (8006d78 <_strerror_r+0x304>)
 8006c22:	e7c0      	b.n	8006ba6 <_strerror_r+0x132>
 8006c24:	4855      	ldr	r0, [pc, #340]	; (8006d7c <_strerror_r+0x308>)
 8006c26:	e7be      	b.n	8006ba6 <_strerror_r+0x132>
 8006c28:	4855      	ldr	r0, [pc, #340]	; (8006d80 <_strerror_r+0x30c>)
 8006c2a:	e7bc      	b.n	8006ba6 <_strerror_r+0x132>
 8006c2c:	4855      	ldr	r0, [pc, #340]	; (8006d84 <_strerror_r+0x310>)
 8006c2e:	e7ba      	b.n	8006ba6 <_strerror_r+0x132>
 8006c30:	4855      	ldr	r0, [pc, #340]	; (8006d88 <_strerror_r+0x314>)
 8006c32:	e7b8      	b.n	8006ba6 <_strerror_r+0x132>
 8006c34:	4855      	ldr	r0, [pc, #340]	; (8006d8c <_strerror_r+0x318>)
 8006c36:	e7b6      	b.n	8006ba6 <_strerror_r+0x132>
 8006c38:	4855      	ldr	r0, [pc, #340]	; (8006d90 <_strerror_r+0x31c>)
 8006c3a:	e7b4      	b.n	8006ba6 <_strerror_r+0x132>
 8006c3c:	4855      	ldr	r0, [pc, #340]	; (8006d94 <_strerror_r+0x320>)
 8006c3e:	e7b2      	b.n	8006ba6 <_strerror_r+0x132>
 8006c40:	4855      	ldr	r0, [pc, #340]	; (8006d98 <_strerror_r+0x324>)
 8006c42:	e7b0      	b.n	8006ba6 <_strerror_r+0x132>
 8006c44:	4855      	ldr	r0, [pc, #340]	; (8006d9c <_strerror_r+0x328>)
 8006c46:	e7ae      	b.n	8006ba6 <_strerror_r+0x132>
 8006c48:	4855      	ldr	r0, [pc, #340]	; (8006da0 <_strerror_r+0x32c>)
 8006c4a:	e7ac      	b.n	8006ba6 <_strerror_r+0x132>
 8006c4c:	4855      	ldr	r0, [pc, #340]	; (8006da4 <_strerror_r+0x330>)
 8006c4e:	e7aa      	b.n	8006ba6 <_strerror_r+0x132>
 8006c50:	4855      	ldr	r0, [pc, #340]	; (8006da8 <_strerror_r+0x334>)
 8006c52:	e7a8      	b.n	8006ba6 <_strerror_r+0x132>
 8006c54:	4855      	ldr	r0, [pc, #340]	; (8006dac <_strerror_r+0x338>)
 8006c56:	e7a6      	b.n	8006ba6 <_strerror_r+0x132>
 8006c58:	4855      	ldr	r0, [pc, #340]	; (8006db0 <_strerror_r+0x33c>)
 8006c5a:	e7a4      	b.n	8006ba6 <_strerror_r+0x132>
 8006c5c:	4855      	ldr	r0, [pc, #340]	; (8006db4 <_strerror_r+0x340>)
 8006c5e:	e7a2      	b.n	8006ba6 <_strerror_r+0x132>
 8006c60:	4855      	ldr	r0, [pc, #340]	; (8006db8 <_strerror_r+0x344>)
 8006c62:	e7a0      	b.n	8006ba6 <_strerror_r+0x132>
 8006c64:	4855      	ldr	r0, [pc, #340]	; (8006dbc <_strerror_r+0x348>)
 8006c66:	e79e      	b.n	8006ba6 <_strerror_r+0x132>
 8006c68:	4855      	ldr	r0, [pc, #340]	; (8006dc0 <_strerror_r+0x34c>)
 8006c6a:	e79c      	b.n	8006ba6 <_strerror_r+0x132>
 8006c6c:	4855      	ldr	r0, [pc, #340]	; (8006dc4 <_strerror_r+0x350>)
 8006c6e:	e79a      	b.n	8006ba6 <_strerror_r+0x132>
 8006c70:	4855      	ldr	r0, [pc, #340]	; (8006dc8 <_strerror_r+0x354>)
 8006c72:	e798      	b.n	8006ba6 <_strerror_r+0x132>
 8006c74:	4855      	ldr	r0, [pc, #340]	; (8006dcc <_strerror_r+0x358>)
 8006c76:	e796      	b.n	8006ba6 <_strerror_r+0x132>
 8006c78:	4855      	ldr	r0, [pc, #340]	; (8006dd0 <_strerror_r+0x35c>)
 8006c7a:	e794      	b.n	8006ba6 <_strerror_r+0x132>
 8006c7c:	4855      	ldr	r0, [pc, #340]	; (8006dd4 <_strerror_r+0x360>)
 8006c7e:	e792      	b.n	8006ba6 <_strerror_r+0x132>
 8006c80:	4855      	ldr	r0, [pc, #340]	; (8006dd8 <_strerror_r+0x364>)
 8006c82:	e790      	b.n	8006ba6 <_strerror_r+0x132>
 8006c84:	4855      	ldr	r0, [pc, #340]	; (8006ddc <_strerror_r+0x368>)
 8006c86:	e78e      	b.n	8006ba6 <_strerror_r+0x132>
 8006c88:	4855      	ldr	r0, [pc, #340]	; (8006de0 <_strerror_r+0x36c>)
 8006c8a:	e78c      	b.n	8006ba6 <_strerror_r+0x132>
 8006c8c:	4855      	ldr	r0, [pc, #340]	; (8006de4 <_strerror_r+0x370>)
 8006c8e:	e78a      	b.n	8006ba6 <_strerror_r+0x132>
 8006c90:	4855      	ldr	r0, [pc, #340]	; (8006de8 <_strerror_r+0x374>)
 8006c92:	e788      	b.n	8006ba6 <_strerror_r+0x132>
 8006c94:	4855      	ldr	r0, [pc, #340]	; (8006dec <_strerror_r+0x378>)
 8006c96:	e786      	b.n	8006ba6 <_strerror_r+0x132>
 8006c98:	4855      	ldr	r0, [pc, #340]	; (8006df0 <_strerror_r+0x37c>)
 8006c9a:	e784      	b.n	8006ba6 <_strerror_r+0x132>
 8006c9c:	4855      	ldr	r0, [pc, #340]	; (8006df4 <_strerror_r+0x380>)
 8006c9e:	e782      	b.n	8006ba6 <_strerror_r+0x132>
 8006ca0:	4855      	ldr	r0, [pc, #340]	; (8006df8 <_strerror_r+0x384>)
 8006ca2:	e780      	b.n	8006ba6 <_strerror_r+0x132>
 8006ca4:	4855      	ldr	r0, [pc, #340]	; (8006dfc <_strerror_r+0x388>)
 8006ca6:	e77e      	b.n	8006ba6 <_strerror_r+0x132>
 8006ca8:	4855      	ldr	r0, [pc, #340]	; (8006e00 <_strerror_r+0x38c>)
 8006caa:	e77c      	b.n	8006ba6 <_strerror_r+0x132>
 8006cac:	4855      	ldr	r0, [pc, #340]	; (8006e04 <_strerror_r+0x390>)
 8006cae:	e77a      	b.n	8006ba6 <_strerror_r+0x132>
 8006cb0:	4855      	ldr	r0, [pc, #340]	; (8006e08 <_strerror_r+0x394>)
 8006cb2:	e778      	b.n	8006ba6 <_strerror_r+0x132>
 8006cb4:	4855      	ldr	r0, [pc, #340]	; (8006e0c <_strerror_r+0x398>)
 8006cb6:	e776      	b.n	8006ba6 <_strerror_r+0x132>
 8006cb8:	4855      	ldr	r0, [pc, #340]	; (8006e10 <_strerror_r+0x39c>)
 8006cba:	e774      	b.n	8006ba6 <_strerror_r+0x132>
 8006cbc:	4855      	ldr	r0, [pc, #340]	; (8006e14 <_strerror_r+0x3a0>)
 8006cbe:	e772      	b.n	8006ba6 <_strerror_r+0x132>
 8006cc0:	4855      	ldr	r0, [pc, #340]	; (8006e18 <_strerror_r+0x3a4>)
 8006cc2:	e770      	b.n	8006ba6 <_strerror_r+0x132>
 8006cc4:	4855      	ldr	r0, [pc, #340]	; (8006e1c <_strerror_r+0x3a8>)
 8006cc6:	e76e      	b.n	8006ba6 <_strerror_r+0x132>
 8006cc8:	4855      	ldr	r0, [pc, #340]	; (8006e20 <_strerror_r+0x3ac>)
 8006cca:	e76c      	b.n	8006ba6 <_strerror_r+0x132>
 8006ccc:	4855      	ldr	r0, [pc, #340]	; (8006e24 <_strerror_r+0x3b0>)
 8006cce:	e76a      	b.n	8006ba6 <_strerror_r+0x132>
 8006cd0:	4855      	ldr	r0, [pc, #340]	; (8006e28 <_strerror_r+0x3b4>)
 8006cd2:	e768      	b.n	8006ba6 <_strerror_r+0x132>
 8006cd4:	4855      	ldr	r0, [pc, #340]	; (8006e2c <_strerror_r+0x3b8>)
 8006cd6:	e766      	b.n	8006ba6 <_strerror_r+0x132>
 8006cd8:	4855      	ldr	r0, [pc, #340]	; (8006e30 <_strerror_r+0x3bc>)
 8006cda:	e764      	b.n	8006ba6 <_strerror_r+0x132>
 8006cdc:	4855      	ldr	r0, [pc, #340]	; (8006e34 <_strerror_r+0x3c0>)
 8006cde:	e762      	b.n	8006ba6 <_strerror_r+0x132>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	bf14      	ite	ne
 8006ce4:	461a      	movne	r2, r3
 8006ce6:	4622      	moveq	r2, r4
 8006ce8:	f000 f8aa 	bl	8006e40 <_user_strerror>
 8006cec:	4b52      	ldr	r3, [pc, #328]	; (8006e38 <_strerror_r+0x3c4>)
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	bf08      	it	eq
 8006cf2:	4618      	moveq	r0, r3
 8006cf4:	e757      	b.n	8006ba6 <_strerror_r+0x132>
 8006cf6:	4851      	ldr	r0, [pc, #324]	; (8006e3c <_strerror_r+0x3c8>)
 8006cf8:	e755      	b.n	8006ba6 <_strerror_r+0x132>
 8006cfa:	bf00      	nop
 8006cfc:	080072e1 	.word	0x080072e1
 8006d00:	080072eb 	.word	0x080072eb
 8006d04:	08007305 	.word	0x08007305
 8006d08:	08007315 	.word	0x08007315
 8006d0c:	0800732d 	.word	0x0800732d
 8006d10:	08007337 	.word	0x08007337
 8006d14:	08007351 	.word	0x08007351
 8006d18:	08007363 	.word	0x08007363
 8006d1c:	08007375 	.word	0x08007375
 8006d20:	0800738e 	.word	0x0800738e
 8006d24:	0800739e 	.word	0x0800739e
 8006d28:	080073aa 	.word	0x080073aa
 8006d2c:	080073c7 	.word	0x080073c7
 8006d30:	080073d9 	.word	0x080073d9
 8006d34:	080073ea 	.word	0x080073ea
 8006d38:	080073fc 	.word	0x080073fc
 8006d3c:	08007408 	.word	0x08007408
 8006d40:	08007420 	.word	0x08007420
 8006d44:	0800742c 	.word	0x0800742c
 8006d48:	0800743e 	.word	0x0800743e
 8006d4c:	0800744d 	.word	0x0800744d
 8006d50:	0800745d 	.word	0x0800745d
 8006d54:	0800746a 	.word	0x0800746a
 8006d58:	08007489 	.word	0x08007489
 8006d5c:	08007498 	.word	0x08007498
 8006d60:	080074a9 	.word	0x080074a9
 8006d64:	080074cd 	.word	0x080074cd
 8006d68:	080074eb 	.word	0x080074eb
 8006d6c:	08007509 	.word	0x08007509
 8006d70:	08007529 	.word	0x08007529
 8006d74:	08007540 	.word	0x08007540
 8006d78:	0800754f 	.word	0x0800754f
 8006d7c:	0800755e 	.word	0x0800755e
 8006d80:	08007572 	.word	0x08007572
 8006d84:	0800758a 	.word	0x0800758a
 8006d88:	08007598 	.word	0x08007598
 8006d8c:	080075a5 	.word	0x080075a5
 8006d90:	080075bb 	.word	0x080075bb
 8006d94:	080075ca 	.word	0x080075ca
 8006d98:	080075d6 	.word	0x080075d6
 8006d9c:	08007605 	.word	0x08007605
 8006da0:	08007616 	.word	0x08007616
 8006da4:	08007631 	.word	0x08007631
 8006da8:	08007644 	.word	0x08007644
 8006dac:	0800765a 	.word	0x0800765a
 8006db0:	08007663 	.word	0x08007663
 8006db4:	0800767a 	.word	0x0800767a
 8006db8:	08007682 	.word	0x08007682
 8006dbc:	0800768f 	.word	0x0800768f
 8006dc0:	080076a4 	.word	0x080076a4
 8006dc4:	080076b8 	.word	0x080076b8
 8006dc8:	080076d0 	.word	0x080076d0
 8006dcc:	080076df 	.word	0x080076df
 8006dd0:	080076f0 	.word	0x080076f0
 8006dd4:	08007703 	.word	0x08007703
 8006dd8:	0800770f 	.word	0x0800770f
 8006ddc:	08007728 	.word	0x08007728
 8006de0:	0800773c 	.word	0x0800773c
 8006de4:	08007757 	.word	0x08007757
 8006de8:	0800776f 	.word	0x0800776f
 8006dec:	08007789 	.word	0x08007789
 8006df0:	08007791 	.word	0x08007791
 8006df4:	080077c1 	.word	0x080077c1
 8006df8:	080077e0 	.word	0x080077e0
 8006dfc:	080077ff 	.word	0x080077ff
 8006e00:	08007816 	.word	0x08007816
 8006e04:	08007829 	.word	0x08007829
 8006e08:	08007842 	.word	0x08007842
 8006e0c:	08007859 	.word	0x08007859
 8006e10:	0800786f 	.word	0x0800786f
 8006e14:	08007890 	.word	0x08007890
 8006e18:	080078a8 	.word	0x080078a8
 8006e1c:	080078c4 	.word	0x080078c4
 8006e20:	080078d7 	.word	0x080078d7
 8006e24:	080078ed 	.word	0x080078ed
 8006e28:	08007901 	.word	0x08007901
 8006e2c:	08007923 	.word	0x08007923
 8006e30:	08007949 	.word	0x08007949
 8006e34:	0800795a 	.word	0x0800795a
 8006e38:	080072e0 	.word	0x080072e0
 8006e3c:	0800796f 	.word	0x0800796f

08006e40 <_user_strerror>:
 8006e40:	2000      	movs	r0, #0
 8006e42:	4770      	bx	lr

08006e44 <_write_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	4604      	mov	r4, r0
 8006e48:	4608      	mov	r0, r1
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	4d05      	ldr	r5, [pc, #20]	; (8006e64 <_write_r+0x20>)
 8006e50:	602a      	str	r2, [r5, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	f7f9 fecb 	bl	8000bee <_write>
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	d102      	bne.n	8006e62 <_write_r+0x1e>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	b103      	cbz	r3, 8006e62 <_write_r+0x1e>
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	bd38      	pop	{r3, r4, r5, pc}
 8006e64:	20003004 	.word	0x20003004

08006e68 <_close_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	4d05      	ldr	r5, [pc, #20]	; (8006e84 <_close_r+0x1c>)
 8006e6e:	4604      	mov	r4, r0
 8006e70:	4608      	mov	r0, r1
 8006e72:	602b      	str	r3, [r5, #0]
 8006e74:	f7f9 fed7 	bl	8000c26 <_close>
 8006e78:	1c43      	adds	r3, r0, #1
 8006e7a:	d102      	bne.n	8006e82 <_close_r+0x1a>
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	b103      	cbz	r3, 8006e82 <_close_r+0x1a>
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	20003004 	.word	0x20003004

08006e88 <__sflush_r>:
 8006e88:	898a      	ldrh	r2, [r1, #12]
 8006e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e8e:	4605      	mov	r5, r0
 8006e90:	0710      	lsls	r0, r2, #28
 8006e92:	460c      	mov	r4, r1
 8006e94:	d458      	bmi.n	8006f48 <__sflush_r+0xc0>
 8006e96:	684b      	ldr	r3, [r1, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	dc05      	bgt.n	8006ea8 <__sflush_r+0x20>
 8006e9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	dc02      	bgt.n	8006ea8 <__sflush_r+0x20>
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eaa:	2e00      	cmp	r6, #0
 8006eac:	d0f9      	beq.n	8006ea2 <__sflush_r+0x1a>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006eb4:	682f      	ldr	r7, [r5, #0]
 8006eb6:	602b      	str	r3, [r5, #0]
 8006eb8:	d032      	beq.n	8006f20 <__sflush_r+0x98>
 8006eba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	075a      	lsls	r2, r3, #29
 8006ec0:	d505      	bpl.n	8006ece <__sflush_r+0x46>
 8006ec2:	6863      	ldr	r3, [r4, #4]
 8006ec4:	1ac0      	subs	r0, r0, r3
 8006ec6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ec8:	b10b      	cbz	r3, 8006ece <__sflush_r+0x46>
 8006eca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ecc:	1ac0      	subs	r0, r0, r3
 8006ece:	2300      	movs	r3, #0
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	6a21      	ldr	r1, [r4, #32]
 8006ed8:	47b0      	blx	r6
 8006eda:	1c43      	adds	r3, r0, #1
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	d106      	bne.n	8006eee <__sflush_r+0x66>
 8006ee0:	6829      	ldr	r1, [r5, #0]
 8006ee2:	291d      	cmp	r1, #29
 8006ee4:	d82c      	bhi.n	8006f40 <__sflush_r+0xb8>
 8006ee6:	4a2a      	ldr	r2, [pc, #168]	; (8006f90 <__sflush_r+0x108>)
 8006ee8:	40ca      	lsrs	r2, r1
 8006eea:	07d6      	lsls	r6, r2, #31
 8006eec:	d528      	bpl.n	8006f40 <__sflush_r+0xb8>
 8006eee:	2200      	movs	r2, #0
 8006ef0:	6062      	str	r2, [r4, #4]
 8006ef2:	6922      	ldr	r2, [r4, #16]
 8006ef4:	04d9      	lsls	r1, r3, #19
 8006ef6:	6022      	str	r2, [r4, #0]
 8006ef8:	d504      	bpl.n	8006f04 <__sflush_r+0x7c>
 8006efa:	1c42      	adds	r2, r0, #1
 8006efc:	d101      	bne.n	8006f02 <__sflush_r+0x7a>
 8006efe:	682b      	ldr	r3, [r5, #0]
 8006f00:	b903      	cbnz	r3, 8006f04 <__sflush_r+0x7c>
 8006f02:	6560      	str	r0, [r4, #84]	; 0x54
 8006f04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f06:	602f      	str	r7, [r5, #0]
 8006f08:	2900      	cmp	r1, #0
 8006f0a:	d0ca      	beq.n	8006ea2 <__sflush_r+0x1a>
 8006f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f10:	4299      	cmp	r1, r3
 8006f12:	d002      	beq.n	8006f1a <__sflush_r+0x92>
 8006f14:	4628      	mov	r0, r5
 8006f16:	f000 f8d5 	bl	80070c4 <_free_r>
 8006f1a:	2000      	movs	r0, #0
 8006f1c:	6360      	str	r0, [r4, #52]	; 0x34
 8006f1e:	e7c1      	b.n	8006ea4 <__sflush_r+0x1c>
 8006f20:	6a21      	ldr	r1, [r4, #32]
 8006f22:	2301      	movs	r3, #1
 8006f24:	4628      	mov	r0, r5
 8006f26:	47b0      	blx	r6
 8006f28:	1c41      	adds	r1, r0, #1
 8006f2a:	d1c7      	bne.n	8006ebc <__sflush_r+0x34>
 8006f2c:	682b      	ldr	r3, [r5, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0c4      	beq.n	8006ebc <__sflush_r+0x34>
 8006f32:	2b1d      	cmp	r3, #29
 8006f34:	d001      	beq.n	8006f3a <__sflush_r+0xb2>
 8006f36:	2b16      	cmp	r3, #22
 8006f38:	d101      	bne.n	8006f3e <__sflush_r+0xb6>
 8006f3a:	602f      	str	r7, [r5, #0]
 8006f3c:	e7b1      	b.n	8006ea2 <__sflush_r+0x1a>
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f44:	81a3      	strh	r3, [r4, #12]
 8006f46:	e7ad      	b.n	8006ea4 <__sflush_r+0x1c>
 8006f48:	690f      	ldr	r7, [r1, #16]
 8006f4a:	2f00      	cmp	r7, #0
 8006f4c:	d0a9      	beq.n	8006ea2 <__sflush_r+0x1a>
 8006f4e:	0793      	lsls	r3, r2, #30
 8006f50:	bf18      	it	ne
 8006f52:	2300      	movne	r3, #0
 8006f54:	680e      	ldr	r6, [r1, #0]
 8006f56:	bf08      	it	eq
 8006f58:	694b      	ldreq	r3, [r1, #20]
 8006f5a:	eba6 0807 	sub.w	r8, r6, r7
 8006f5e:	600f      	str	r7, [r1, #0]
 8006f60:	608b      	str	r3, [r1, #8]
 8006f62:	f1b8 0f00 	cmp.w	r8, #0
 8006f66:	dd9c      	ble.n	8006ea2 <__sflush_r+0x1a>
 8006f68:	4643      	mov	r3, r8
 8006f6a:	463a      	mov	r2, r7
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	6a21      	ldr	r1, [r4, #32]
 8006f70:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f72:	47b0      	blx	r6
 8006f74:	2800      	cmp	r0, #0
 8006f76:	dc06      	bgt.n	8006f86 <__sflush_r+0xfe>
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f82:	81a3      	strh	r3, [r4, #12]
 8006f84:	e78e      	b.n	8006ea4 <__sflush_r+0x1c>
 8006f86:	4407      	add	r7, r0
 8006f88:	eba8 0800 	sub.w	r8, r8, r0
 8006f8c:	e7e9      	b.n	8006f62 <__sflush_r+0xda>
 8006f8e:	bf00      	nop
 8006f90:	20400001 	.word	0x20400001

08006f94 <_fflush_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	690b      	ldr	r3, [r1, #16]
 8006f98:	4605      	mov	r5, r0
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	b913      	cbnz	r3, 8006fa4 <_fflush_r+0x10>
 8006f9e:	2500      	movs	r5, #0
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
 8006fa4:	b118      	cbz	r0, 8006fae <_fflush_r+0x1a>
 8006fa6:	6983      	ldr	r3, [r0, #24]
 8006fa8:	b90b      	cbnz	r3, 8006fae <_fflush_r+0x1a>
 8006faa:	f7ff facd 	bl	8006548 <__sinit>
 8006fae:	4b14      	ldr	r3, [pc, #80]	; (8007000 <_fflush_r+0x6c>)
 8006fb0:	429c      	cmp	r4, r3
 8006fb2:	d11b      	bne.n	8006fec <_fflush_r+0x58>
 8006fb4:	686c      	ldr	r4, [r5, #4]
 8006fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d0ef      	beq.n	8006f9e <_fflush_r+0xa>
 8006fbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006fc0:	07d0      	lsls	r0, r2, #31
 8006fc2:	d404      	bmi.n	8006fce <_fflush_r+0x3a>
 8006fc4:	0599      	lsls	r1, r3, #22
 8006fc6:	d402      	bmi.n	8006fce <_fflush_r+0x3a>
 8006fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fca:	f7ff fb80 	bl	80066ce <__retarget_lock_acquire_recursive>
 8006fce:	4628      	mov	r0, r5
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	f7ff ff59 	bl	8006e88 <__sflush_r>
 8006fd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fd8:	4605      	mov	r5, r0
 8006fda:	07da      	lsls	r2, r3, #31
 8006fdc:	d4e0      	bmi.n	8006fa0 <_fflush_r+0xc>
 8006fde:	89a3      	ldrh	r3, [r4, #12]
 8006fe0:	059b      	lsls	r3, r3, #22
 8006fe2:	d4dd      	bmi.n	8006fa0 <_fflush_r+0xc>
 8006fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fe6:	f7ff fb73 	bl	80066d0 <__retarget_lock_release_recursive>
 8006fea:	e7d9      	b.n	8006fa0 <_fflush_r+0xc>
 8006fec:	4b05      	ldr	r3, [pc, #20]	; (8007004 <_fflush_r+0x70>)
 8006fee:	429c      	cmp	r4, r3
 8006ff0:	d101      	bne.n	8006ff6 <_fflush_r+0x62>
 8006ff2:	68ac      	ldr	r4, [r5, #8]
 8006ff4:	e7df      	b.n	8006fb6 <_fflush_r+0x22>
 8006ff6:	4b04      	ldr	r3, [pc, #16]	; (8007008 <_fflush_r+0x74>)
 8006ff8:	429c      	cmp	r4, r3
 8006ffa:	bf08      	it	eq
 8006ffc:	68ec      	ldreq	r4, [r5, #12]
 8006ffe:	e7da      	b.n	8006fb6 <_fflush_r+0x22>
 8007000:	08007298 	.word	0x08007298
 8007004:	080072b8 	.word	0x080072b8
 8007008:	08007278 	.word	0x08007278

0800700c <fileno>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	4e1a      	ldr	r6, [pc, #104]	; (8007078 <fileno+0x6c>)
 8007010:	4604      	mov	r4, r0
 8007012:	6835      	ldr	r5, [r6, #0]
 8007014:	b125      	cbz	r5, 8007020 <fileno+0x14>
 8007016:	69ab      	ldr	r3, [r5, #24]
 8007018:	b913      	cbnz	r3, 8007020 <fileno+0x14>
 800701a:	4628      	mov	r0, r5
 800701c:	f7ff fa94 	bl	8006548 <__sinit>
 8007020:	4b16      	ldr	r3, [pc, #88]	; (800707c <fileno+0x70>)
 8007022:	429c      	cmp	r4, r3
 8007024:	d118      	bne.n	8007058 <fileno+0x4c>
 8007026:	686c      	ldr	r4, [r5, #4]
 8007028:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800702a:	07d8      	lsls	r0, r3, #31
 800702c:	d405      	bmi.n	800703a <fileno+0x2e>
 800702e:	89a3      	ldrh	r3, [r4, #12]
 8007030:	0599      	lsls	r1, r3, #22
 8007032:	d402      	bmi.n	800703a <fileno+0x2e>
 8007034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007036:	f7ff fb4a 	bl	80066ce <__retarget_lock_acquire_recursive>
 800703a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800703e:	b1ab      	cbz	r3, 800706c <fileno+0x60>
 8007040:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8007044:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007046:	07d2      	lsls	r2, r2, #31
 8007048:	d404      	bmi.n	8007054 <fileno+0x48>
 800704a:	059b      	lsls	r3, r3, #22
 800704c:	d402      	bmi.n	8007054 <fileno+0x48>
 800704e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007050:	f7ff fb3e 	bl	80066d0 <__retarget_lock_release_recursive>
 8007054:	4628      	mov	r0, r5
 8007056:	bd70      	pop	{r4, r5, r6, pc}
 8007058:	4b09      	ldr	r3, [pc, #36]	; (8007080 <fileno+0x74>)
 800705a:	429c      	cmp	r4, r3
 800705c:	d101      	bne.n	8007062 <fileno+0x56>
 800705e:	68ac      	ldr	r4, [r5, #8]
 8007060:	e7e2      	b.n	8007028 <fileno+0x1c>
 8007062:	4b08      	ldr	r3, [pc, #32]	; (8007084 <fileno+0x78>)
 8007064:	429c      	cmp	r4, r3
 8007066:	bf08      	it	eq
 8007068:	68ec      	ldreq	r4, [r5, #12]
 800706a:	e7dd      	b.n	8007028 <fileno+0x1c>
 800706c:	2109      	movs	r1, #9
 800706e:	6832      	ldr	r2, [r6, #0]
 8007070:	f04f 35ff 	mov.w	r5, #4294967295
 8007074:	6011      	str	r1, [r2, #0]
 8007076:	e7e5      	b.n	8007044 <fileno+0x38>
 8007078:	20000014 	.word	0x20000014
 800707c:	08007298 	.word	0x08007298
 8007080:	080072b8 	.word	0x080072b8
 8007084:	08007278 	.word	0x08007278

08007088 <_lseek_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4604      	mov	r4, r0
 800708c:	4608      	mov	r0, r1
 800708e:	4611      	mov	r1, r2
 8007090:	2200      	movs	r2, #0
 8007092:	4d05      	ldr	r5, [pc, #20]	; (80070a8 <_lseek_r+0x20>)
 8007094:	602a      	str	r2, [r5, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	f7f9 fdd0 	bl	8000c3c <_lseek>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	d102      	bne.n	80070a6 <_lseek_r+0x1e>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	b103      	cbz	r3, 80070a6 <_lseek_r+0x1e>
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	bd38      	pop	{r3, r4, r5, pc}
 80070a8:	20003004 	.word	0x20003004

080070ac <__malloc_lock>:
 80070ac:	4801      	ldr	r0, [pc, #4]	; (80070b4 <__malloc_lock+0x8>)
 80070ae:	f7ff bb0e 	b.w	80066ce <__retarget_lock_acquire_recursive>
 80070b2:	bf00      	nop
 80070b4:	20002ffc 	.word	0x20002ffc

080070b8 <__malloc_unlock>:
 80070b8:	4801      	ldr	r0, [pc, #4]	; (80070c0 <__malloc_unlock+0x8>)
 80070ba:	f7ff bb09 	b.w	80066d0 <__retarget_lock_release_recursive>
 80070be:	bf00      	nop
 80070c0:	20002ffc 	.word	0x20002ffc

080070c4 <_free_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	4605      	mov	r5, r0
 80070c8:	2900      	cmp	r1, #0
 80070ca:	d043      	beq.n	8007154 <_free_r+0x90>
 80070cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070d0:	1f0c      	subs	r4, r1, #4
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	bfb8      	it	lt
 80070d6:	18e4      	addlt	r4, r4, r3
 80070d8:	f7ff ffe8 	bl	80070ac <__malloc_lock>
 80070dc:	4a1e      	ldr	r2, [pc, #120]	; (8007158 <_free_r+0x94>)
 80070de:	6813      	ldr	r3, [r2, #0]
 80070e0:	4610      	mov	r0, r2
 80070e2:	b933      	cbnz	r3, 80070f2 <_free_r+0x2e>
 80070e4:	6063      	str	r3, [r4, #4]
 80070e6:	6014      	str	r4, [r2, #0]
 80070e8:	4628      	mov	r0, r5
 80070ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070ee:	f7ff bfe3 	b.w	80070b8 <__malloc_unlock>
 80070f2:	42a3      	cmp	r3, r4
 80070f4:	d90a      	bls.n	800710c <_free_r+0x48>
 80070f6:	6821      	ldr	r1, [r4, #0]
 80070f8:	1862      	adds	r2, r4, r1
 80070fa:	4293      	cmp	r3, r2
 80070fc:	bf01      	itttt	eq
 80070fe:	681a      	ldreq	r2, [r3, #0]
 8007100:	685b      	ldreq	r3, [r3, #4]
 8007102:	1852      	addeq	r2, r2, r1
 8007104:	6022      	streq	r2, [r4, #0]
 8007106:	6063      	str	r3, [r4, #4]
 8007108:	6004      	str	r4, [r0, #0]
 800710a:	e7ed      	b.n	80070e8 <_free_r+0x24>
 800710c:	461a      	mov	r2, r3
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	b10b      	cbz	r3, 8007116 <_free_r+0x52>
 8007112:	42a3      	cmp	r3, r4
 8007114:	d9fa      	bls.n	800710c <_free_r+0x48>
 8007116:	6811      	ldr	r1, [r2, #0]
 8007118:	1850      	adds	r0, r2, r1
 800711a:	42a0      	cmp	r0, r4
 800711c:	d10b      	bne.n	8007136 <_free_r+0x72>
 800711e:	6820      	ldr	r0, [r4, #0]
 8007120:	4401      	add	r1, r0
 8007122:	1850      	adds	r0, r2, r1
 8007124:	4283      	cmp	r3, r0
 8007126:	6011      	str	r1, [r2, #0]
 8007128:	d1de      	bne.n	80070e8 <_free_r+0x24>
 800712a:	6818      	ldr	r0, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	4401      	add	r1, r0
 8007130:	6011      	str	r1, [r2, #0]
 8007132:	6053      	str	r3, [r2, #4]
 8007134:	e7d8      	b.n	80070e8 <_free_r+0x24>
 8007136:	d902      	bls.n	800713e <_free_r+0x7a>
 8007138:	230c      	movs	r3, #12
 800713a:	602b      	str	r3, [r5, #0]
 800713c:	e7d4      	b.n	80070e8 <_free_r+0x24>
 800713e:	6820      	ldr	r0, [r4, #0]
 8007140:	1821      	adds	r1, r4, r0
 8007142:	428b      	cmp	r3, r1
 8007144:	bf01      	itttt	eq
 8007146:	6819      	ldreq	r1, [r3, #0]
 8007148:	685b      	ldreq	r3, [r3, #4]
 800714a:	1809      	addeq	r1, r1, r0
 800714c:	6021      	streq	r1, [r4, #0]
 800714e:	6063      	str	r3, [r4, #4]
 8007150:	6054      	str	r4, [r2, #4]
 8007152:	e7c9      	b.n	80070e8 <_free_r+0x24>
 8007154:	bd38      	pop	{r3, r4, r5, pc}
 8007156:	bf00      	nop
 8007158:	20002ebc 	.word	0x20002ebc

0800715c <_read_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4604      	mov	r4, r0
 8007160:	4608      	mov	r0, r1
 8007162:	4611      	mov	r1, r2
 8007164:	2200      	movs	r2, #0
 8007166:	4d05      	ldr	r5, [pc, #20]	; (800717c <_read_r+0x20>)
 8007168:	602a      	str	r2, [r5, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	f7f9 fd22 	bl	8000bb4 <_read>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_read_r+0x1e>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_read_r+0x1e>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	20003004 	.word	0x20003004

08007180 <_init>:
 8007180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007182:	bf00      	nop
 8007184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007186:	bc08      	pop	{r3}
 8007188:	469e      	mov	lr, r3
 800718a:	4770      	bx	lr

0800718c <_fini>:
 800718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718e:	bf00      	nop
 8007190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007192:	bc08      	pop	{r3}
 8007194:	469e      	mov	lr, r3
 8007196:	4770      	bx	lr
