
Diplom_First_Step.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080084c0  080084c0  000184c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085a8  080085a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080085a8  080085a8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085a8  080085a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085a8  080085a8  000185a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085ac  080085ac  000185ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080085b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000428c  20000074  08008624  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004300  08008624  00024300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb75  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040f8  00000000  00000000  0003ec12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  00042d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001500  00000000  00000000  00044388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aacf  00000000  00000000  00045888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bb3  00000000  00000000  00060357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096730  00000000  00000000  00078f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010f63a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006158  00000000  00000000  0010f690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080084a8 	.word	0x080084a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080084a8 	.word	0x080084a8

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <vApplicationGetIdleTaskMemory+0x28>)
 80009e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <vApplicationGetIdleTaskMemory+0x2c>)
 80009ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009f6:	bf00      	nop
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	20000090 	.word	0x20000090
 8000a04:	20000144 	.word	0x20000144

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	b5b0      	push	{r4, r5, r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0e:	f000 fcbb 	bl	8001388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a12:	f000 f823 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a16:	f000 f8ed 	bl	8000bf4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a1a:	f000 f89b 	bl	8000b54 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000a1e:	f000 f8c3 	bl	8000ba8 <MX_DMA_Init>
  MX_SPI2_Init();
 8000a22:	f000 f861 	bl	8000ae8 <MX_SPI2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, ADXL345_Data_Collector_Task, osPriorityNormal, 0, 1536);
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <main+0x4c>)
 8000a28:	1d3c      	adds	r4, r7, #4
 8000a2a:	461d      	mov	r5, r3
 8000a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 fffd 	bl	8005a3c <osThreadCreate>
 8000a42:	4603      	mov	r3, r0
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <main+0x50>)
 8000a46:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADXL345_Config();
 8000a48:	f000 f964 	bl	8000d14 <ADXL345_Config>
  //UART_Cobs_Config();
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a4c:	f004 ffef 	bl	8005a2e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <main+0x48>
 8000a52:	bf00      	nop
 8000a54:	080084cc 	.word	0x080084cc
 8000a58:	200040c0 	.word	0x200040c0

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b090      	sub	sp, #64	; 0x40
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0318 	add.w	r3, r7, #24
 8000a66:	2228      	movs	r2, #40	; 0x28
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f007 fc52 	bl	8008314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a82:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a90:	2302      	movs	r3, #2
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a9a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa0:	f107 0318 	add.w	r3, r7, #24
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f001 f9d3 	bl	8001e50 <HAL_RCC_OscConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ab0:	f000 fa64 	bl	8000f7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2102      	movs	r1, #2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fc3e 	bl	8002350 <HAL_RCC_ClockConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ada:	f000 fa4f 	bl	8000f7c <Error_Handler>
  }
}
 8000ade:	bf00      	nop
 8000ae0:	3740      	adds	r7, #64	; 0x40
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_SPI2_Init+0x64>)
 8000aee:	4a18      	ldr	r2, [pc, #96]	; (8000b50 <MX_SPI2_Init+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000af2:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <MX_SPI2_Init+0x64>)
 8000af4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000af8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_SPI2_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <MX_SPI2_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_SPI2_Init+0x64>)
 8000b08:	2202      	movs	r2, #2
 8000b0a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_SPI2_Init+0x64>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_SPI2_Init+0x64>)
 8000b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b18:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_SPI2_Init+0x64>)
 8000b1c:	2218      	movs	r2, #24
 8000b1e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <MX_SPI2_Init+0x64>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_SPI2_Init+0x64>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <MX_SPI2_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_SPI2_Init+0x64>)
 8000b34:	220a      	movs	r2, #10
 8000b36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <MX_SPI2_Init+0x64>)
 8000b3a:	f001 fdd3 	bl	80026e4 <HAL_SPI_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b44:	f000 fa1a 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200040c4 	.word	0x200040c4
 8000b50:	40003800 	.word	0x40003800

08000b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <MX_USART2_UART_Init+0x50>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b8c:	f003 fa7e 	bl	800408c <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b96:	f000 f9f1 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200041d8 	.word	0x200041d8
 8000ba4:	40004400 	.word	0x40004400

08000ba8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <MX_DMA_Init+0x48>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <MX_DMA_Init+0x48>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6153      	str	r3, [r2, #20]
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <MX_DMA_Init+0x48>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2105      	movs	r1, #5
 8000bca:	200e      	movs	r0, #14
 8000bcc:	f000 fcc3 	bl	8001556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000bd0:	200e      	movs	r0, #14
 8000bd2:	f000 fcdc 	bl	800158e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2105      	movs	r1, #5
 8000bda:	200f      	movs	r0, #15
 8000bdc:	f000 fcbb 	bl	8001556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000be0:	200f      	movs	r0, #15
 8000be2:	f000 fcd4 	bl	800158e <HAL_NVIC_EnableIRQ>

}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c08:	4b3d      	ldr	r3, [pc, #244]	; (8000d00 <MX_GPIO_Init+0x10c>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a3c      	ldr	r2, [pc, #240]	; (8000d00 <MX_GPIO_Init+0x10c>)
 8000c0e:	f043 0310 	orr.w	r3, r3, #16
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b3a      	ldr	r3, [pc, #232]	; (8000d00 <MX_GPIO_Init+0x10c>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0310 	and.w	r3, r3, #16
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c20:	4b37      	ldr	r3, [pc, #220]	; (8000d00 <MX_GPIO_Init+0x10c>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a36      	ldr	r2, [pc, #216]	; (8000d00 <MX_GPIO_Init+0x10c>)
 8000c26:	f043 0320 	orr.w	r3, r3, #32
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b34      	ldr	r3, [pc, #208]	; (8000d00 <MX_GPIO_Init+0x10c>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0320 	and.w	r3, r3, #32
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c38:	4b31      	ldr	r3, [pc, #196]	; (8000d00 <MX_GPIO_Init+0x10c>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a30      	ldr	r2, [pc, #192]	; (8000d00 <MX_GPIO_Init+0x10c>)
 8000c3e:	f043 0304 	orr.w	r3, r3, #4
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <MX_GPIO_Init+0x10c>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c50:	4b2b      	ldr	r3, [pc, #172]	; (8000d00 <MX_GPIO_Init+0x10c>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a2a      	ldr	r2, [pc, #168]	; (8000d00 <MX_GPIO_Init+0x10c>)
 8000c56:	f043 0308 	orr.w	r3, r3, #8
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <MX_GPIO_Init+0x10c>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f003 0308 	and.w	r3, r3, #8
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2120      	movs	r1, #32
 8000c6c:	4825      	ldr	r0, [pc, #148]	; (8000d04 <MX_GPIO_Init+0x110>)
 8000c6e:	f001 f8bf 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2140      	movs	r1, #64	; 0x40
 8000c76:	4824      	ldr	r0, [pc, #144]	; (8000d08 <MX_GPIO_Init+0x114>)
 8000c78:	f001 f8ba 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin GPIO_Int2_Accelerometer_Pin */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_Int2_Accelerometer_Pin;
 8000c7c:	f242 0310 	movw	r3, #8208	; 0x2010
 8000c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c82:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <MX_GPIO_Init+0x118>)
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4619      	mov	r1, r3
 8000c90:	481f      	ldr	r0, [pc, #124]	; (8000d10 <MX_GPIO_Init+0x11c>)
 8000c92:	f000 ff29 	bl	8001ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_Pin */
  GPIO_InitStruct.Pin = Green_Pin;
 8000c96:	2320      	movs	r3, #32
 8000c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Green_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	4619      	mov	r1, r3
 8000cac:	4815      	ldr	r0, [pc, #84]	; (8000d04 <MX_GPIO_Init+0x110>)
 8000cae:	f000 ff1b 	bl	8001ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Int1_Accelerometer_Pin */
  GPIO_InitStruct.Pin = GPIO_Int1_Accelerometer_Pin;
 8000cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_GPIO_Init+0x118>)
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_Int1_Accelerometer_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480f      	ldr	r0, [pc, #60]	; (8000d04 <MX_GPIO_Init+0x110>)
 8000cc8:	f000 ff0e 	bl	8001ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000ccc:	2340      	movs	r3, #64	; 0x40
 8000cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4809      	ldr	r0, [pc, #36]	; (8000d08 <MX_GPIO_Init+0x114>)
 8000ce4:	f000 ff00 	bl	8001ae8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2105      	movs	r1, #5
 8000cec:	2028      	movs	r0, #40	; 0x28
 8000cee:	f000 fc32 	bl	8001556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cf2:	2028      	movs	r0, #40	; 0x28
 8000cf4:	f000 fc4b 	bl	800158e <HAL_NVIC_EnableIRQ>

}
 8000cf8:	bf00      	nop
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010800 	.word	0x40010800
 8000d08:	40010c00 	.word	0x40010c00
 8000d0c:	10110000 	.word	0x10110000
 8000d10:	40011000 	.word	0x40011000

08000d14 <ADXL345_Config>:

/* USER CODE BEGIN 4 */
void ADXL345_Config()
{
 8000d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af02      	add	r7, sp, #8

	ADXL.spi.spi_rtos							=	&spi_rtos;
 8000d1a:	4b67      	ldr	r3, [pc, #412]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000d1c:	4a67      	ldr	r2, [pc, #412]	; (8000ebc <ADXL345_Config+0x1a8>)
 8000d1e:	601a      	str	r2, [r3, #0]
	ADXL.spi.spi_rtos->hspi 					=	&hspi2;
 8000d20:	4b65      	ldr	r3, [pc, #404]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a66      	ldr	r2, [pc, #408]	; (8000ec0 <ADXL345_Config+0x1ac>)
 8000d26:	601a      	str	r2, [r3, #0]
	if(spi_freertos_init(ADXL.spi.spi_rtos) == SPI_FREERTOS_EXIST)
 8000d28:	4b63      	ldr	r3, [pc, #396]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f004 fb17 	bl	8005360 <spi_freertos_init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b05      	cmp	r3, #5
 8000d36:	d101      	bne.n	8000d3c <ADXL345_Config+0x28>
	{
		Error_Handler();
 8000d38:	f000 f920 	bl	8000f7c <Error_Handler>
	}
	ADXL.spi.nss.pin							=	SPI_CS_Pin;
 8000d3c:	4b5e      	ldr	r3, [pc, #376]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d44:	721a      	strb	r2, [r3, #8]
 8000d46:	2200      	movs	r2, #0
 8000d48:	725a      	strb	r2, [r3, #9]
	ADXL.spi.nss.port 							=	SPI_CS_GPIO_Port;
 8000d4a:	4b5b      	ldr	r3, [pc, #364]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	711a      	strb	r2, [r3, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f042 020c 	orr.w	r2, r2, #12
 8000d56:	715a      	strb	r2, [r3, #5]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f042 0201 	orr.w	r2, r2, #1
 8000d5e:	719a      	strb	r2, [r3, #6]
 8000d60:	2200      	movs	r2, #0
 8000d62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d66:	71da      	strb	r2, [r3, #7]
	ADXL.settings.data_rate 					=	ADXL345_DATARATE_3200_HZ;
 8000d68:	4b53      	ldr	r3, [pc, #332]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	f883 2020 	strb.w	r2, [r3, #32]
	ADXL.settings.meas_range					=	ADXL345_RANGE_16_G;
 8000d70:	4b51      	ldr	r3, [pc, #324]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000d72:	2203      	movs	r2, #3
 8000d74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ADXL.settings.align							=	ADXL345_ALIGN_LSB;
 8000d78:	4b4f      	ldr	r3, [pc, #316]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ADXL.settings.resolution 					=	ADXL345_RESOLUTION_FULL;
 8000d80:	4b4d      	ldr	r3, [pc, #308]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000d82:	2208      	movs	r2, #8
 8000d84:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	Offset Parameter
	ADXL.settings.offset.x 						=	0;
 8000d88:	4b4b      	ldr	r3, [pc, #300]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ADXL.settings.offset.y 						=	0;
 8000d90:	4b49      	ldr	r3, [pc, #292]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	ADXL.settings.offset.z 						=	0;
 8000d98:	4b47      	ldr	r3, [pc, #284]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	//	Interrupt Settings
	ADXL.settings.int_en 						=	/*ADXL345_INT_DATA_READY;//*/ ADXL345_INT_WATERMARK | ADXL345_INT_OVERRUN;
 8000da0:	4b45      	ldr	r3, [pc, #276]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000da2:	2203      	movs	r2, #3
 8000da4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	ADXL.settings.map_to_int2 					=	/*ADXL345_INT_DATA_READY;//*/~ADXL345_INT_WATERMARK & ADXL345_INT_OVERRUN;
 8000da8:	4b43      	ldr	r3, [pc, #268]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	ADXL.int1.pin 								=	GPIO_Int1_Accelerometer_Pin;
 8000db0:	4b41      	ldr	r3, [pc, #260]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	751a      	strb	r2, [r3, #20]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f042 0204 	orr.w	r2, r2, #4
 8000dbc:	755a      	strb	r2, [r3, #21]
	ADXL.int1.port								=	GPIO_Int1_Accelerometer_GPIO_Port;
 8000dbe:	4b3e      	ldr	r3, [pc, #248]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	741a      	strb	r2, [r3, #16]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f042 0208 	orr.w	r2, r2, #8
 8000dca:	745a      	strb	r2, [r3, #17]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f042 0201 	orr.w	r2, r2, #1
 8000dd2:	749a      	strb	r2, [r3, #18]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dda:	74da      	strb	r2, [r3, #19]
	ADXL.int2.pin 								=	GPIO_Int2_Accelerometer_Pin;
 8000ddc:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	f042 0210 	orr.w	r2, r2, #16
 8000de4:	771a      	strb	r2, [r3, #28]
 8000de6:	2200      	movs	r2, #0
 8000de8:	775a      	strb	r2, [r3, #29]
	ADXL.int2.port								=	GPIO_Int2_Accelerometer_GPIO_Port;
 8000dea:	4b33      	ldr	r3, [pc, #204]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	761a      	strb	r2, [r3, #24]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f042 0210 	orr.w	r2, r2, #16
 8000df6:	765a      	strb	r2, [r3, #25]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f042 0201 	orr.w	r2, r2, #1
 8000dfe:	769a      	strb	r2, [r3, #26]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e06:	76da      	strb	r2, [r3, #27]
	ADXL.settings.fifo_watermark 				=	/*0x00; //*/0x25;
 8000e08:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000e0a:	2225      	movs	r2, #37	; 0x25
 8000e0c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	ADXL.settings.fifo_mode 					=	/*ADXL345_FIFO_BYPASS; //*/ADXL345_FIFO_FIFO;
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000e12:	2240      	movs	r2, #64	; 0x40
 8000e14:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	ADXL.settings.fifo_trigger 					=	ADXL345_FIFO_TRIG_INT1;
 8000e18:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	ADXL.mutex_timeout 							=	100;
 8000e20:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 8000e28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	ADXL.transfer_timeout 						=	100;
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 8000e46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	//	Configurate FREE RTOS AND ADXL345

	hadxl.hadxl 								=	ADXL;
 8000e5c:	4a19      	ldr	r2, [pc, #100]	; (8000ec4 <ADXL345_Config+0x1b0>)
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <ADXL345_Config+0x1a4>)
 8000e60:	4610      	mov	r0, r2
 8000e62:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8000e66:	4602      	mov	r2, r0
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f8d1 c000 	ldr.w	ip, [r1]
 8000e6e:	684e      	ldr	r6, [r1, #4]
 8000e70:	688d      	ldr	r5, [r1, #8]
 8000e72:	68c9      	ldr	r1, [r1, #12]
 8000e74:	f8c2 c000 	str.w	ip, [r2]
 8000e78:	6056      	str	r6, [r2, #4]
 8000e7a:	6095      	str	r5, [r2, #8]
 8000e7c:	60d1      	str	r1, [r2, #12]
 8000e7e:	3310      	adds	r3, #16
 8000e80:	3010      	adds	r0, #16
 8000e82:	42a3      	cmp	r3, r4
 8000e84:	d1ef      	bne.n	8000e66 <ADXL345_Config+0x152>
 8000e86:	4602      	mov	r2, r0
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6013      	str	r3, [r2, #0]
	hadxl.fifo_frame_size 						=	128;
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <ADXL345_Config+0x1b0>)
 8000e8e:	2280      	movs	r2, #128	; 0x80
 8000e90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadxl.fifo_frame_qty 						=	8;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <ADXL345_Config+0x1b0>)
 8000e96:	2208      	movs	r2, #8
 8000e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	adxl345_task_create(						"Task_ADXL345_RTOS",
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <ADXL345_Config+0x1b0>)
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <ADXL345_Config+0x1b4>)
 8000eaa:	f004 f8ef 	bl	800508c <adxl345_task_create>
	/*while(adxl345_init(&ADXL) != ADXL345_OK)
	{
	}
#endif*/

}
 8000eae:	bf00      	nop
 8000eb0:	3704      	adds	r7, #4
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20004260 	.word	0x20004260
 8000ebc:	20004188 	.word	0x20004188
 8000ec0:	200040c4 	.word	0x200040c4
 8000ec4:	20004198 	.word	0x20004198
 8000ec8:	080084e8 	.word	0x080084e8

08000ecc <ADXL345_Data_Collector_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ADXL345_Data_Collector_Task */
void ADXL345_Data_Collector_Task(void const * argument)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	f2ad 7d14 	subw	sp, sp, #1812	; 0x714
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	6018      	str	r0, [r3, #0]
	float Signal[256];
	adxl345_acc_data_t	data[128], *data_read;
	uint16_t Index_Count;
Start_Mesurments:

	Index_Count 					= 	0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8a7 370e 	strh.w	r3, [r7, #1806]	; 0x70e
	//adxl345_start(&ADXL);

	/* Infinite loop */
	while(Index_Count <= Length_Realization)
 8000ede:	e033      	b.n	8000f48 <ADXL345_Data_Collector_Task+0x7c>
	{
		adxl345_resume();
 8000ee0:	f004 f918 	bl	8005114 <adxl345_resume>
		xQueueReceive(hadxl.fifo_frame_ptr_queue, &data, portMAX_DELAY);
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <ADXL345_Data_Collector_Task+0x88>)
 8000ee6:	f8d3 3039 	ldr.w	r3, [r3, #57]	; 0x39
 8000eea:	f107 010c 	add.w	r1, r7, #12
 8000eee:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f005 f922 	bl	800613c <xQueueReceive>
		for (uint16_t i = 0; i<127; i++)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8a7 370c 	strh.w	r3, [r7, #1804]	; 0x70c
 8000efe:	e01a      	b.n	8000f36 <ADXL345_Data_Collector_Task+0x6a>
		{
			Signal[i] = adxl345_convert_float_mpss(data[i].y);
 8000f00:	f8b7 270c 	ldrh.w	r2, [r7, #1804]	; 0x70c
 8000f04:	f107 010c 	add.w	r1, r7, #12
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	440b      	add	r3, r1
 8000f12:	3302      	adds	r3, #2
 8000f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f18:	f8b7 470c 	ldrh.w	r4, [r7, #1804]	; 0x70c
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f003 fc9f 	bl	8004860 <adxl345_convert_float_mpss>
 8000f22:	4602      	mov	r2, r0
 8000f24:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8000f28:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		for (uint16_t i = 0; i<127; i++)
 8000f2c:	f8b7 370c 	ldrh.w	r3, [r7, #1804]	; 0x70c
 8000f30:	3301      	adds	r3, #1
 8000f32:	f8a7 370c 	strh.w	r3, [r7, #1804]	; 0x70c
 8000f36:	f8b7 370c 	ldrh.w	r3, [r7, #1804]	; 0x70c
 8000f3a:	2b7e      	cmp	r3, #126	; 0x7e
 8000f3c:	d9e0      	bls.n	8000f00 <ADXL345_Data_Collector_Task+0x34>
		}
		Index_Count++;
 8000f3e:	f8b7 370e 	ldrh.w	r3, [r7, #1806]	; 0x70e
 8000f42:	3301      	adds	r3, #1
 8000f44:	f8a7 370e 	strh.w	r3, [r7, #1806]	; 0x70e
	while(Index_Count <= Length_Realization)
 8000f48:	f8b7 370e 	ldrh.w	r3, [r7, #1806]	; 0x70e
 8000f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f50:	d9c6      	bls.n	8000ee0 <ADXL345_Data_Collector_Task+0x14>
	}

	//uart_cobs_send(&Cobs_UART, &Signal, Length_Realization, 10 * portTICK_PERIOD_MS);
	goto Start_Mesurments;
 8000f52:	e7c1      	b.n	8000ed8 <ADXL345_Data_Collector_Task+0xc>
 8000f54:	20004198 	.word	0x20004198

08000f58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d101      	bne.n	8000f6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f6a:	f000 fa23 	bl	80013b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40000800 	.word	0x40000800

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <Error_Handler+0x8>
	...

08000f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f8e:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <HAL_MspInit+0x68>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <HAL_MspInit+0x68>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6193      	str	r3, [r2, #24]
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_MspInit+0x68>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_MspInit+0x68>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a11      	ldr	r2, [pc, #68]	; (8000ff0 <HAL_MspInit+0x68>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	61d3      	str	r3, [r2, #28]
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_MspInit+0x68>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	210f      	movs	r1, #15
 8000fc2:	f06f 0001 	mvn.w	r0, #1
 8000fc6:	f000 fac6 	bl	8001556 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_MspInit+0x6c>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_MspInit+0x6c>)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000

08000ff8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a47      	ldr	r2, [pc, #284]	; (8001130 <HAL_SPI_MspInit+0x138>)
 8001014:	4293      	cmp	r3, r2
 8001016:	f040 8086 	bne.w	8001126 <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800101a:	4b46      	ldr	r3, [pc, #280]	; (8001134 <HAL_SPI_MspInit+0x13c>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a45      	ldr	r2, [pc, #276]	; (8001134 <HAL_SPI_MspInit+0x13c>)
 8001020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b43      	ldr	r3, [pc, #268]	; (8001134 <HAL_SPI_MspInit+0x13c>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4b40      	ldr	r3, [pc, #256]	; (8001134 <HAL_SPI_MspInit+0x13c>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a3f      	ldr	r2, [pc, #252]	; (8001134 <HAL_SPI_MspInit+0x13c>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <HAL_SPI_MspInit+0x13c>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800104a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800104e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4619      	mov	r1, r3
 800105e:	4836      	ldr	r0, [pc, #216]	; (8001138 <HAL_SPI_MspInit+0x140>)
 8001060:	f000 fd42 	bl	8001ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001064:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001068:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	4619      	mov	r1, r3
 8001078:	482f      	ldr	r0, [pc, #188]	; (8001138 <HAL_SPI_MspInit+0x140>)
 800107a:	f000 fd35 	bl	8001ae8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800107e:	4b2f      	ldr	r3, [pc, #188]	; (800113c <HAL_SPI_MspInit+0x144>)
 8001080:	4a2f      	ldr	r2, [pc, #188]	; (8001140 <HAL_SPI_MspInit+0x148>)
 8001082:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001084:	4b2d      	ldr	r3, [pc, #180]	; (800113c <HAL_SPI_MspInit+0x144>)
 8001086:	2200      	movs	r2, #0
 8001088:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800108a:	4b2c      	ldr	r3, [pc, #176]	; (800113c <HAL_SPI_MspInit+0x144>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001090:	4b2a      	ldr	r3, [pc, #168]	; (800113c <HAL_SPI_MspInit+0x144>)
 8001092:	2280      	movs	r2, #128	; 0x80
 8001094:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001096:	4b29      	ldr	r3, [pc, #164]	; (800113c <HAL_SPI_MspInit+0x144>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <HAL_SPI_MspInit+0x144>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80010a2:	4b26      	ldr	r3, [pc, #152]	; (800113c <HAL_SPI_MspInit+0x144>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <HAL_SPI_MspInit+0x144>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80010ae:	4823      	ldr	r0, [pc, #140]	; (800113c <HAL_SPI_MspInit+0x144>)
 80010b0:	f000 fa7c 	bl	80015ac <HAL_DMA_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 80010ba:	f7ff ff5f 	bl	8000f7c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a1e      	ldr	r2, [pc, #120]	; (800113c <HAL_SPI_MspInit+0x144>)
 80010c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80010c4:	4a1d      	ldr	r2, [pc, #116]	; (800113c <HAL_SPI_MspInit+0x144>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80010ca:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <HAL_SPI_MspInit+0x14c>)
 80010cc:	4a1e      	ldr	r2, [pc, #120]	; (8001148 <HAL_SPI_MspInit+0x150>)
 80010ce:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <HAL_SPI_MspInit+0x14c>)
 80010d2:	2210      	movs	r2, #16
 80010d4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d6:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <HAL_SPI_MspInit+0x14c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_SPI_MspInit+0x14c>)
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <HAL_SPI_MspInit+0x14c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <HAL_SPI_MspInit+0x14c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_SPI_MspInit+0x14c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <HAL_SPI_MspInit+0x14c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80010fa:	4812      	ldr	r0, [pc, #72]	; (8001144 <HAL_SPI_MspInit+0x14c>)
 80010fc:	f000 fa56 	bl	80015ac <HAL_DMA_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8001106:	f7ff ff39 	bl	8000f7c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <HAL_SPI_MspInit+0x14c>)
 800110e:	649a      	str	r2, [r3, #72]	; 0x48
 8001110:	4a0c      	ldr	r2, [pc, #48]	; (8001144 <HAL_SPI_MspInit+0x14c>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2105      	movs	r1, #5
 800111a:	2024      	movs	r0, #36	; 0x24
 800111c:	f000 fa1b 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001120:	2024      	movs	r0, #36	; 0x24
 8001122:	f000 fa34 	bl	800158e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001126:	bf00      	nop
 8001128:	3720      	adds	r7, #32
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40003800 	.word	0x40003800
 8001134:	40021000 	.word	0x40021000
 8001138:	40010c00 	.word	0x40010c00
 800113c:	20004144 	.word	0x20004144
 8001140:	40020044 	.word	0x40020044
 8001144:	2000421c 	.word	0x2000421c
 8001148:	40020058 	.word	0x40020058

0800114c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a19      	ldr	r2, [pc, #100]	; (80011cc <HAL_UART_MspInit+0x80>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d12b      	bne.n	80011c4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_UART_MspInit+0x84>)
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <HAL_UART_MspInit+0x84>)
 8001172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001176:	61d3      	str	r3, [r2, #28]
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_UART_MspInit+0x84>)
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_UART_MspInit+0x84>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a11      	ldr	r2, [pc, #68]	; (80011d0 <HAL_UART_MspInit+0x84>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_UART_MspInit+0x84>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800119c:	230c      	movs	r3, #12
 800119e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2302      	movs	r3, #2
 80011a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4619      	mov	r1, r3
 80011ae:	4809      	ldr	r0, [pc, #36]	; (80011d4 <HAL_UART_MspInit+0x88>)
 80011b0:	f000 fc9a 	bl	8001ae8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2105      	movs	r1, #5
 80011b8:	2026      	movs	r0, #38	; 0x26
 80011ba:	f000 f9cc 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011be:	2026      	movs	r0, #38	; 0x26
 80011c0:	f000 f9e5 	bl	800158e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011c4:	bf00      	nop
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40004400 	.word	0x40004400
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010800 	.word	0x40010800

080011d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08c      	sub	sp, #48	; 0x30
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	201e      	movs	r0, #30
 80011ee:	f000 f9b2 	bl	8001556 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011f2:	201e      	movs	r0, #30
 80011f4:	f000 f9cb 	bl	800158e <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <HAL_InitTick+0xa0>)
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	4a1e      	ldr	r2, [pc, #120]	; (8001278 <HAL_InitTick+0xa0>)
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	61d3      	str	r3, [r2, #28]
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <HAL_InitTick+0xa0>)
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001210:	f107 0210 	add.w	r2, r7, #16
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fa14 	bl	8002648 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001220:	f001 f9ea 	bl	80025f8 <HAL_RCC_GetPCLK1Freq>
 8001224:	4603      	mov	r3, r0
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800122a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122c:	4a13      	ldr	r2, [pc, #76]	; (800127c <HAL_InitTick+0xa4>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	0c9b      	lsrs	r3, r3, #18
 8001234:	3b01      	subs	r3, #1
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_InitTick+0xa8>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <HAL_InitTick+0xac>)
 800123c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <HAL_InitTick+0xa8>)
 8001240:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001244:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001246:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <HAL_InitTick+0xa8>)
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <HAL_InitTick+0xa8>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_InitTick+0xa8>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001258:	4809      	ldr	r0, [pc, #36]	; (8001280 <HAL_InitTick+0xa8>)
 800125a:	f002 fccd 	bl	8003bf8 <HAL_TIM_Base_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d104      	bne.n	800126e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001264:	4806      	ldr	r0, [pc, #24]	; (8001280 <HAL_InitTick+0xa8>)
 8001266:	f002 fd1f 	bl	8003ca8 <HAL_TIM_Base_Start_IT>
 800126a:	4603      	mov	r3, r0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3730      	adds	r7, #48	; 0x30
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40021000 	.word	0x40021000
 800127c:	431bde83 	.word	0x431bde83
 8001280:	200042a8 	.word	0x200042a8
 8001284:	40000800 	.word	0x40000800

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800128c:	e7fe      	b.n	800128c <NMI_Handler+0x4>

0800128e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <HardFault_Handler+0x4>

08001294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <MemManage_Handler+0x4>

0800129a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
	...

080012b4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <DMA1_Channel4_IRQHandler+0x10>)
 80012ba:	f000 fae1 	bl	8001880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20004144 	.word	0x20004144

080012c8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <DMA1_Channel5_IRQHandler+0x10>)
 80012ce:	f000 fad7 	bl	8001880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000421c 	.word	0x2000421c

080012dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <TIM4_IRQHandler+0x10>)
 80012e2:	f002 fd33 	bl	8003d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200042a8 	.word	0x200042a8

080012f0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <SPI2_IRQHandler+0x10>)
 80012f6:	f002 f91b 	bl	8003530 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200040c4 	.word	0x200040c4

08001304 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <USART2_IRQHandler+0x10>)
 800130a:	f002 ff0d 	bl	8004128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200041d8 	.word	0x200041d8

08001318 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800131c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001320:	f000 fd7e 	bl	8001e20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001324:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001328:	f000 fd7a 	bl	8001e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800133e:	490d      	ldr	r1, [pc, #52]	; (8001374 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001344:	e002      	b.n	800134c <LoopCopyDataInit>

08001346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134a:	3304      	adds	r3, #4

0800134c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800134c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001350:	d3f9      	bcc.n	8001346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001354:	4c0a      	ldr	r4, [pc, #40]	; (8001380 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001358:	e001      	b.n	800135e <LoopFillZerobss>

0800135a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800135c:	3204      	adds	r2, #4

0800135e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001360:	d3fb      	bcc.n	800135a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001362:	f7ff ffe5 	bl	8001330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001366:	f006 ffa1 	bl	80082ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800136a:	f7ff fb4d 	bl	8000a08 <main>
  bx lr
 800136e:	4770      	bx	lr
  ldr r0, =_sdata
 8001370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001374:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001378:	080085b0 	.word	0x080085b0
  ldr r2, =_sbss
 800137c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001380:	20004300 	.word	0x20004300

08001384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <ADC1_2_IRQHandler>
	...

08001388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <HAL_Init+0x28>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <HAL_Init+0x28>)
 8001392:	f043 0310 	orr.w	r3, r3, #16
 8001396:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001398:	2003      	movs	r0, #3
 800139a:	f000 f8d1 	bl	8001540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800139e:	200f      	movs	r0, #15
 80013a0:	f7ff ff1a 	bl	80011d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a4:	f7ff fdf0 	bl	8000f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40022000 	.word	0x40022000

080013b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_IncTick+0x1c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_IncTick+0x20>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a03      	ldr	r2, [pc, #12]	; (80013d4 <HAL_IncTick+0x20>)
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	20000008 	.word	0x20000008
 80013d4:	200042f0 	.word	0x200042f0

080013d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b02      	ldr	r3, [pc, #8]	; (80013e8 <HAL_GetTick+0x10>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	200042f0 	.word	0x200042f0

080013ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141e:	4a04      	ldr	r2, [pc, #16]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	60d3      	str	r3, [r2, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <__NVIC_GetPriorityGrouping+0x18>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	f003 0307 	and.w	r3, r3, #7
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	2b00      	cmp	r3, #0
 8001460:	db0b      	blt.n	800147a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f003 021f 	and.w	r2, r3, #31
 8001468:	4906      	ldr	r1, [pc, #24]	; (8001484 <__NVIC_EnableIRQ+0x34>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	095b      	lsrs	r3, r3, #5
 8001470:	2001      	movs	r0, #1
 8001472:	fa00 f202 	lsl.w	r2, r0, r2
 8001476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	e000e100 	.word	0xe000e100

08001488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	db0a      	blt.n	80014b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	490c      	ldr	r1, [pc, #48]	; (80014d4 <__NVIC_SetPriority+0x4c>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	0112      	lsls	r2, r2, #4
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b0:	e00a      	b.n	80014c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4908      	ldr	r1, [pc, #32]	; (80014d8 <__NVIC_SetPriority+0x50>)
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	3b04      	subs	r3, #4
 80014c0:	0112      	lsls	r2, r2, #4
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	440b      	add	r3, r1
 80014c6:	761a      	strb	r2, [r3, #24]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f1c3 0307 	rsb	r3, r3, #7
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	bf28      	it	cs
 80014fa:	2304      	movcs	r3, #4
 80014fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3304      	adds	r3, #4
 8001502:	2b06      	cmp	r3, #6
 8001504:	d902      	bls.n	800150c <NVIC_EncodePriority+0x30>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3b03      	subs	r3, #3
 800150a:	e000      	b.n	800150e <NVIC_EncodePriority+0x32>
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	f04f 32ff 	mov.w	r2, #4294967295
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	401a      	ands	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001524:	f04f 31ff 	mov.w	r1, #4294967295
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43d9      	mvns	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	4313      	orrs	r3, r2
         );
}
 8001536:	4618      	mov	r0, r3
 8001538:	3724      	adds	r7, #36	; 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff4f 	bl	80013ec <__NVIC_SetPriorityGrouping>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001568:	f7ff ff64 	bl	8001434 <__NVIC_GetPriorityGrouping>
 800156c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	6978      	ldr	r0, [r7, #20]
 8001574:	f7ff ffb2 	bl	80014dc <NVIC_EncodePriority>
 8001578:	4602      	mov	r2, r0
 800157a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff81 	bl	8001488 <__NVIC_SetPriority>
}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff57 	bl	8001450 <__NVIC_EnableIRQ>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e043      	b.n	800164a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b22      	ldr	r3, [pc, #136]	; (8001654 <HAL_DMA_Init+0xa8>)
 80015ca:	4413      	add	r3, r2
 80015cc:	4a22      	ldr	r2, [pc, #136]	; (8001658 <HAL_DMA_Init+0xac>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	009a      	lsls	r2, r3, #2
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a1f      	ldr	r2, [pc, #124]	; (800165c <HAL_DMA_Init+0xb0>)
 80015de:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001604:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001610:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	bffdfff8 	.word	0xbffdfff8
 8001658:	cccccccd 	.word	0xcccccccd
 800165c:	40020000 	.word	0x40020000

08001660 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_DMA_Start_IT+0x20>
 800167c:	2302      	movs	r3, #2
 800167e:	e04a      	b.n	8001716 <HAL_DMA_Start_IT+0xb6>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800168e:	2b01      	cmp	r3, #1
 8001690:	d13a      	bne.n	8001708 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2202      	movs	r2, #2
 8001696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0201 	bic.w	r2, r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 f9e8 	bl	8001a8c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 020e 	orr.w	r2, r2, #14
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	e00f      	b.n	80016f6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0204 	bic.w	r2, r2, #4
 80016e4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 020a 	orr.w	r2, r2, #10
 80016f4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f042 0201 	orr.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	e005      	b.n	8001714 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001710:	2302      	movs	r3, #2
 8001712:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001714:	7dfb      	ldrb	r3, [r7, #23]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800171e:	b480      	push	{r7}
 8001720:	b085      	sub	sp, #20
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001730:	2b02      	cmp	r3, #2
 8001732:	d008      	beq.n	8001746 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2204      	movs	r2, #4
 8001738:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e020      	b.n	8001788 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 020e 	bic.w	r2, r2, #14
 8001754:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0201 	bic.w	r2, r2, #1
 8001764:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f202 	lsl.w	r2, r1, r2
 8001774:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001786:	7bfb      	ldrb	r3, [r7, #15]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
	...

08001794 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d005      	beq.n	80017b6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2204      	movs	r2, #4
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	e051      	b.n	800185a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 020e 	bic.w	r2, r2, #14
 80017c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0201 	bic.w	r2, r2, #1
 80017d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a22      	ldr	r2, [pc, #136]	; (8001864 <HAL_DMA_Abort_IT+0xd0>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d029      	beq.n	8001834 <HAL_DMA_Abort_IT+0xa0>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a20      	ldr	r2, [pc, #128]	; (8001868 <HAL_DMA_Abort_IT+0xd4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d022      	beq.n	8001830 <HAL_DMA_Abort_IT+0x9c>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a1f      	ldr	r2, [pc, #124]	; (800186c <HAL_DMA_Abort_IT+0xd8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d01a      	beq.n	800182a <HAL_DMA_Abort_IT+0x96>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1d      	ldr	r2, [pc, #116]	; (8001870 <HAL_DMA_Abort_IT+0xdc>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d012      	beq.n	8001824 <HAL_DMA_Abort_IT+0x90>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a1c      	ldr	r2, [pc, #112]	; (8001874 <HAL_DMA_Abort_IT+0xe0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d00a      	beq.n	800181e <HAL_DMA_Abort_IT+0x8a>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1a      	ldr	r2, [pc, #104]	; (8001878 <HAL_DMA_Abort_IT+0xe4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d102      	bne.n	8001818 <HAL_DMA_Abort_IT+0x84>
 8001812:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001816:	e00e      	b.n	8001836 <HAL_DMA_Abort_IT+0xa2>
 8001818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800181c:	e00b      	b.n	8001836 <HAL_DMA_Abort_IT+0xa2>
 800181e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001822:	e008      	b.n	8001836 <HAL_DMA_Abort_IT+0xa2>
 8001824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001828:	e005      	b.n	8001836 <HAL_DMA_Abort_IT+0xa2>
 800182a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182e:	e002      	b.n	8001836 <HAL_DMA_Abort_IT+0xa2>
 8001830:	2310      	movs	r3, #16
 8001832:	e000      	b.n	8001836 <HAL_DMA_Abort_IT+0xa2>
 8001834:	2301      	movs	r3, #1
 8001836:	4a11      	ldr	r2, [pc, #68]	; (800187c <HAL_DMA_Abort_IT+0xe8>)
 8001838:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	4798      	blx	r3
    } 
  }
  return status;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40020008 	.word	0x40020008
 8001868:	4002001c 	.word	0x4002001c
 800186c:	40020030 	.word	0x40020030
 8001870:	40020044 	.word	0x40020044
 8001874:	40020058 	.word	0x40020058
 8001878:	4002006c 	.word	0x4002006c
 800187c:	40020000 	.word	0x40020000

08001880 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	2204      	movs	r2, #4
 800189e:	409a      	lsls	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d04f      	beq.n	8001948 <HAL_DMA_IRQHandler+0xc8>
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d04a      	beq.n	8001948 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d107      	bne.n	80018d0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0204 	bic.w	r2, r2, #4
 80018ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a66      	ldr	r2, [pc, #408]	; (8001a70 <HAL_DMA_IRQHandler+0x1f0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d029      	beq.n	800192e <HAL_DMA_IRQHandler+0xae>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a65      	ldr	r2, [pc, #404]	; (8001a74 <HAL_DMA_IRQHandler+0x1f4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d022      	beq.n	800192a <HAL_DMA_IRQHandler+0xaa>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a63      	ldr	r2, [pc, #396]	; (8001a78 <HAL_DMA_IRQHandler+0x1f8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d01a      	beq.n	8001924 <HAL_DMA_IRQHandler+0xa4>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a62      	ldr	r2, [pc, #392]	; (8001a7c <HAL_DMA_IRQHandler+0x1fc>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d012      	beq.n	800191e <HAL_DMA_IRQHandler+0x9e>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a60      	ldr	r2, [pc, #384]	; (8001a80 <HAL_DMA_IRQHandler+0x200>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00a      	beq.n	8001918 <HAL_DMA_IRQHandler+0x98>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a5f      	ldr	r2, [pc, #380]	; (8001a84 <HAL_DMA_IRQHandler+0x204>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d102      	bne.n	8001912 <HAL_DMA_IRQHandler+0x92>
 800190c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001910:	e00e      	b.n	8001930 <HAL_DMA_IRQHandler+0xb0>
 8001912:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001916:	e00b      	b.n	8001930 <HAL_DMA_IRQHandler+0xb0>
 8001918:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800191c:	e008      	b.n	8001930 <HAL_DMA_IRQHandler+0xb0>
 800191e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001922:	e005      	b.n	8001930 <HAL_DMA_IRQHandler+0xb0>
 8001924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001928:	e002      	b.n	8001930 <HAL_DMA_IRQHandler+0xb0>
 800192a:	2340      	movs	r3, #64	; 0x40
 800192c:	e000      	b.n	8001930 <HAL_DMA_IRQHandler+0xb0>
 800192e:	2304      	movs	r3, #4
 8001930:	4a55      	ldr	r2, [pc, #340]	; (8001a88 <HAL_DMA_IRQHandler+0x208>)
 8001932:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 8094 	beq.w	8001a66 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001946:	e08e      	b.n	8001a66 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	2202      	movs	r2, #2
 800194e:	409a      	lsls	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d056      	beq.n	8001a06 <HAL_DMA_IRQHandler+0x186>
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d051      	beq.n	8001a06 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0320 	and.w	r3, r3, #32
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10b      	bne.n	8001988 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 020a 	bic.w	r2, r2, #10
 800197e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a38      	ldr	r2, [pc, #224]	; (8001a70 <HAL_DMA_IRQHandler+0x1f0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d029      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x166>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a37      	ldr	r2, [pc, #220]	; (8001a74 <HAL_DMA_IRQHandler+0x1f4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d022      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x162>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a35      	ldr	r2, [pc, #212]	; (8001a78 <HAL_DMA_IRQHandler+0x1f8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d01a      	beq.n	80019dc <HAL_DMA_IRQHandler+0x15c>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a34      	ldr	r2, [pc, #208]	; (8001a7c <HAL_DMA_IRQHandler+0x1fc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d012      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x156>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a32      	ldr	r2, [pc, #200]	; (8001a80 <HAL_DMA_IRQHandler+0x200>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d00a      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x150>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a31      	ldr	r2, [pc, #196]	; (8001a84 <HAL_DMA_IRQHandler+0x204>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d102      	bne.n	80019ca <HAL_DMA_IRQHandler+0x14a>
 80019c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019c8:	e00e      	b.n	80019e8 <HAL_DMA_IRQHandler+0x168>
 80019ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ce:	e00b      	b.n	80019e8 <HAL_DMA_IRQHandler+0x168>
 80019d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d4:	e008      	b.n	80019e8 <HAL_DMA_IRQHandler+0x168>
 80019d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019da:	e005      	b.n	80019e8 <HAL_DMA_IRQHandler+0x168>
 80019dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e0:	e002      	b.n	80019e8 <HAL_DMA_IRQHandler+0x168>
 80019e2:	2320      	movs	r3, #32
 80019e4:	e000      	b.n	80019e8 <HAL_DMA_IRQHandler+0x168>
 80019e6:	2302      	movs	r3, #2
 80019e8:	4a27      	ldr	r2, [pc, #156]	; (8001a88 <HAL_DMA_IRQHandler+0x208>)
 80019ea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d034      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a04:	e02f      	b.n	8001a66 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d028      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x1e8>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d023      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 020e 	bic.w	r2, r2, #14
 8001a2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a38:	2101      	movs	r1, #1
 8001a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d004      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	4798      	blx	r3
    }
  }
  return;
 8001a66:	bf00      	nop
 8001a68:	bf00      	nop
}
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40020008 	.word	0x40020008
 8001a74:	4002001c 	.word	0x4002001c
 8001a78:	40020030 	.word	0x40020030
 8001a7c:	40020044 	.word	0x40020044
 8001a80:	40020058 	.word	0x40020058
 8001a84:	4002006c 	.word	0x4002006c
 8001a88:	40020000 	.word	0x40020000

08001a8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d108      	bne.n	8001acc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001aca:	e007      	b.n	8001adc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	60da      	str	r2, [r3, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
	...

08001ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b08b      	sub	sp, #44	; 0x2c
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afa:	e169      	b.n	8001dd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001afc:	2201      	movs	r2, #1
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	f040 8158 	bne.w	8001dca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a9a      	ldr	r2, [pc, #616]	; (8001d88 <HAL_GPIO_Init+0x2a0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d05e      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b24:	4a98      	ldr	r2, [pc, #608]	; (8001d88 <HAL_GPIO_Init+0x2a0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d875      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b2a:	4a98      	ldr	r2, [pc, #608]	; (8001d8c <HAL_GPIO_Init+0x2a4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d058      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b30:	4a96      	ldr	r2, [pc, #600]	; (8001d8c <HAL_GPIO_Init+0x2a4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d86f      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b36:	4a96      	ldr	r2, [pc, #600]	; (8001d90 <HAL_GPIO_Init+0x2a8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d052      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b3c:	4a94      	ldr	r2, [pc, #592]	; (8001d90 <HAL_GPIO_Init+0x2a8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d869      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b42:	4a94      	ldr	r2, [pc, #592]	; (8001d94 <HAL_GPIO_Init+0x2ac>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d04c      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b48:	4a92      	ldr	r2, [pc, #584]	; (8001d94 <HAL_GPIO_Init+0x2ac>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d863      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b4e:	4a92      	ldr	r2, [pc, #584]	; (8001d98 <HAL_GPIO_Init+0x2b0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d046      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b54:	4a90      	ldr	r2, [pc, #576]	; (8001d98 <HAL_GPIO_Init+0x2b0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d85d      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b5a:	2b12      	cmp	r3, #18
 8001b5c:	d82a      	bhi.n	8001bb4 <HAL_GPIO_Init+0xcc>
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d859      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b62:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <HAL_GPIO_Init+0x80>)
 8001b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b68:	08001be3 	.word	0x08001be3
 8001b6c:	08001bbd 	.word	0x08001bbd
 8001b70:	08001bcf 	.word	0x08001bcf
 8001b74:	08001c11 	.word	0x08001c11
 8001b78:	08001c17 	.word	0x08001c17
 8001b7c:	08001c17 	.word	0x08001c17
 8001b80:	08001c17 	.word	0x08001c17
 8001b84:	08001c17 	.word	0x08001c17
 8001b88:	08001c17 	.word	0x08001c17
 8001b8c:	08001c17 	.word	0x08001c17
 8001b90:	08001c17 	.word	0x08001c17
 8001b94:	08001c17 	.word	0x08001c17
 8001b98:	08001c17 	.word	0x08001c17
 8001b9c:	08001c17 	.word	0x08001c17
 8001ba0:	08001c17 	.word	0x08001c17
 8001ba4:	08001c17 	.word	0x08001c17
 8001ba8:	08001c17 	.word	0x08001c17
 8001bac:	08001bc5 	.word	0x08001bc5
 8001bb0:	08001bd9 	.word	0x08001bd9
 8001bb4:	4a79      	ldr	r2, [pc, #484]	; (8001d9c <HAL_GPIO_Init+0x2b4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d013      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bba:	e02c      	b.n	8001c16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	623b      	str	r3, [r7, #32]
          break;
 8001bc2:	e029      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	623b      	str	r3, [r7, #32]
          break;
 8001bcc:	e024      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	3308      	adds	r3, #8
 8001bd4:	623b      	str	r3, [r7, #32]
          break;
 8001bd6:	e01f      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	330c      	adds	r3, #12
 8001bde:	623b      	str	r3, [r7, #32]
          break;
 8001be0:	e01a      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bea:	2304      	movs	r3, #4
 8001bec:	623b      	str	r3, [r7, #32]
          break;
 8001bee:	e013      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	611a      	str	r2, [r3, #16]
          break;
 8001c02:	e009      	b.n	8001c18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c04:	2308      	movs	r3, #8
 8001c06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	615a      	str	r2, [r3, #20]
          break;
 8001c0e:	e003      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
          break;
 8001c14:	e000      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          break;
 8001c16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2bff      	cmp	r3, #255	; 0xff
 8001c1c:	d801      	bhi.n	8001c22 <HAL_GPIO_Init+0x13a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	e001      	b.n	8001c26 <HAL_GPIO_Init+0x13e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3304      	adds	r3, #4
 8001c26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2bff      	cmp	r3, #255	; 0xff
 8001c2c:	d802      	bhi.n	8001c34 <HAL_GPIO_Init+0x14c>
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	e002      	b.n	8001c3a <HAL_GPIO_Init+0x152>
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	3b08      	subs	r3, #8
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	210f      	movs	r1, #15
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	6a39      	ldr	r1, [r7, #32]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	431a      	orrs	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80b1 	beq.w	8001dca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c68:	4b4d      	ldr	r3, [pc, #308]	; (8001da0 <HAL_GPIO_Init+0x2b8>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a4c      	ldr	r2, [pc, #304]	; (8001da0 <HAL_GPIO_Init+0x2b8>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b4a      	ldr	r3, [pc, #296]	; (8001da0 <HAL_GPIO_Init+0x2b8>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c80:	4a48      	ldr	r2, [pc, #288]	; (8001da4 <HAL_GPIO_Init+0x2bc>)
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3302      	adds	r3, #2
 8001c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a40      	ldr	r2, [pc, #256]	; (8001da8 <HAL_GPIO_Init+0x2c0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d013      	beq.n	8001cd4 <HAL_GPIO_Init+0x1ec>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a3f      	ldr	r2, [pc, #252]	; (8001dac <HAL_GPIO_Init+0x2c4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_GPIO_Init+0x1e8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a3e      	ldr	r2, [pc, #248]	; (8001db0 <HAL_GPIO_Init+0x2c8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d007      	beq.n	8001ccc <HAL_GPIO_Init+0x1e4>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a3d      	ldr	r2, [pc, #244]	; (8001db4 <HAL_GPIO_Init+0x2cc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d101      	bne.n	8001cc8 <HAL_GPIO_Init+0x1e0>
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e006      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001cc8:	2304      	movs	r3, #4
 8001cca:	e004      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e002      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd8:	f002 0203 	and.w	r2, r2, #3
 8001cdc:	0092      	lsls	r2, r2, #2
 8001cde:	4093      	lsls	r3, r2
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ce6:	492f      	ldr	r1, [pc, #188]	; (8001da4 <HAL_GPIO_Init+0x2bc>)
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3302      	adds	r3, #2
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d00:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	492c      	ldr	r1, [pc, #176]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	4928      	ldr	r1, [pc, #160]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	4922      	ldr	r1, [pc, #136]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	491e      	ldr	r1, [pc, #120]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	4918      	ldr	r1, [pc, #96]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	608b      	str	r3, [r1, #8]
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	4914      	ldr	r1, [pc, #80]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d021      	beq.n	8001dbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	490e      	ldr	r1, [pc, #56]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60cb      	str	r3, [r1, #12]
 8001d84:	e021      	b.n	8001dca <HAL_GPIO_Init+0x2e2>
 8001d86:	bf00      	nop
 8001d88:	10320000 	.word	0x10320000
 8001d8c:	10310000 	.word	0x10310000
 8001d90:	10220000 	.word	0x10220000
 8001d94:	10210000 	.word	0x10210000
 8001d98:	10120000 	.word	0x10120000
 8001d9c:	10110000 	.word	0x10110000
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010000 	.word	0x40010000
 8001da8:	40010800 	.word	0x40010800
 8001dac:	40010c00 	.word	0x40010c00
 8001db0:	40011000 	.word	0x40011000
 8001db4:	40011400 	.word	0x40011400
 8001db8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_GPIO_Init+0x304>)
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	4909      	ldr	r1, [pc, #36]	; (8001dec <HAL_GPIO_Init+0x304>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	3301      	adds	r3, #1
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f47f ae8e 	bne.w	8001afc <HAL_GPIO_Init+0x14>
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	372c      	adds	r7, #44	; 0x2c
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e00:	787b      	ldrb	r3, [r7, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e0c:	e003      	b.n	8001e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e0e:	887b      	ldrh	r3, [r7, #2]
 8001e10:	041a      	lsls	r2, r3, #16
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	611a      	str	r2, [r3, #16]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d006      	beq.n	8001e44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e36:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 f9c0 	bl	80051c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40010400 	.word	0x40010400

08001e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e26c      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8087 	beq.w	8001f7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e70:	4b92      	ldr	r3, [pc, #584]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d00c      	beq.n	8001e96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e7c:	4b8f      	ldr	r3, [pc, #572]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d112      	bne.n	8001eae <HAL_RCC_OscConfig+0x5e>
 8001e88:	4b8c      	ldr	r3, [pc, #560]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e94:	d10b      	bne.n	8001eae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e96:	4b89      	ldr	r3, [pc, #548]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d06c      	beq.n	8001f7c <HAL_RCC_OscConfig+0x12c>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d168      	bne.n	8001f7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e246      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x76>
 8001eb8:	4b80      	ldr	r3, [pc, #512]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a7f      	ldr	r2, [pc, #508]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	e02e      	b.n	8001f24 <HAL_RCC_OscConfig+0xd4>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x98>
 8001ece:	4b7b      	ldr	r3, [pc, #492]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a7a      	ldr	r2, [pc, #488]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b78      	ldr	r3, [pc, #480]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a77      	ldr	r2, [pc, #476]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e01d      	b.n	8001f24 <HAL_RCC_OscConfig+0xd4>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0xbc>
 8001ef2:	4b72      	ldr	r3, [pc, #456]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a71      	ldr	r2, [pc, #452]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b6f      	ldr	r3, [pc, #444]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6e      	ldr	r2, [pc, #440]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0xd4>
 8001f0c:	4b6b      	ldr	r3, [pc, #428]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a6a      	ldr	r2, [pc, #424]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b68      	ldr	r3, [pc, #416]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a67      	ldr	r2, [pc, #412]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fa54 	bl	80013d8 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff fa50 	bl	80013d8 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1fa      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0xe4>
 8001f52:	e014      	b.n	8001f7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fa40 	bl	80013d8 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff fa3c 	bl	80013d8 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1e6      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	4b53      	ldr	r3, [pc, #332]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x10c>
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d063      	beq.n	8002052 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f8a:	4b4c      	ldr	r3, [pc, #304]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00b      	beq.n	8001fae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f96:	4b49      	ldr	r3, [pc, #292]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d11c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x18c>
 8001fa2:	4b46      	ldr	r3, [pc, #280]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d116      	bne.n	8001fdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	4b43      	ldr	r3, [pc, #268]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x176>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e1ba      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc6:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4939      	ldr	r1, [pc, #228]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fda:	e03a      	b.n	8002052 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe4:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <HAL_RCC_OscConfig+0x270>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7ff f9f5 	bl	80013d8 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7ff f9f1 	bl	80013d8 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e19b      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4927      	ldr	r1, [pc, #156]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
 8002024:	e015      	b.n	8002052 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002026:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <HAL_RCC_OscConfig+0x270>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff f9d4 	bl	80013d8 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002034:	f7ff f9d0 	bl	80013d8 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e17a      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d03a      	beq.n	80020d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d019      	beq.n	800209a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002066:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <HAL_RCC_OscConfig+0x274>)
 8002068:	2201      	movs	r2, #1
 800206a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206c:	f7ff f9b4 	bl	80013d8 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002074:	f7ff f9b0 	bl	80013d8 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e15a      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002092:	2001      	movs	r0, #1
 8002094:	f000 fb08 	bl	80026a8 <RCC_Delay>
 8002098:	e01c      	b.n	80020d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_RCC_OscConfig+0x274>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a0:	f7ff f99a 	bl	80013d8 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a6:	e00f      	b.n	80020c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a8:	f7ff f996 	bl	80013d8 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d908      	bls.n	80020c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e140      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	42420000 	.word	0x42420000
 80020c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c8:	4b9e      	ldr	r3, [pc, #632]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1e9      	bne.n	80020a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80a6 	beq.w	800222e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e6:	4b97      	ldr	r3, [pc, #604]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10d      	bne.n	800210e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	4b94      	ldr	r3, [pc, #592]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4a93      	ldr	r2, [pc, #588]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	61d3      	str	r3, [r2, #28]
 80020fe:	4b91      	ldr	r3, [pc, #580]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210a:	2301      	movs	r3, #1
 800210c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210e:	4b8e      	ldr	r3, [pc, #568]	; (8002348 <HAL_RCC_OscConfig+0x4f8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d118      	bne.n	800214c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211a:	4b8b      	ldr	r3, [pc, #556]	; (8002348 <HAL_RCC_OscConfig+0x4f8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a8a      	ldr	r2, [pc, #552]	; (8002348 <HAL_RCC_OscConfig+0x4f8>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7ff f957 	bl	80013d8 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212e:	f7ff f953 	bl	80013d8 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b64      	cmp	r3, #100	; 0x64
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0fd      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	4b81      	ldr	r3, [pc, #516]	; (8002348 <HAL_RCC_OscConfig+0x4f8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x312>
 8002154:	4b7b      	ldr	r3, [pc, #492]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4a7a      	ldr	r2, [pc, #488]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6213      	str	r3, [r2, #32]
 8002160:	e02d      	b.n	80021be <HAL_RCC_OscConfig+0x36e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x334>
 800216a:	4b76      	ldr	r3, [pc, #472]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a75      	ldr	r2, [pc, #468]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	6213      	str	r3, [r2, #32]
 8002176:	4b73      	ldr	r3, [pc, #460]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a72      	ldr	r2, [pc, #456]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800217c:	f023 0304 	bic.w	r3, r3, #4
 8002180:	6213      	str	r3, [r2, #32]
 8002182:	e01c      	b.n	80021be <HAL_RCC_OscConfig+0x36e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b05      	cmp	r3, #5
 800218a:	d10c      	bne.n	80021a6 <HAL_RCC_OscConfig+0x356>
 800218c:	4b6d      	ldr	r3, [pc, #436]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4a6c      	ldr	r2, [pc, #432]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002192:	f043 0304 	orr.w	r3, r3, #4
 8002196:	6213      	str	r3, [r2, #32]
 8002198:	4b6a      	ldr	r3, [pc, #424]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a69      	ldr	r2, [pc, #420]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6213      	str	r3, [r2, #32]
 80021a4:	e00b      	b.n	80021be <HAL_RCC_OscConfig+0x36e>
 80021a6:	4b67      	ldr	r3, [pc, #412]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a66      	ldr	r2, [pc, #408]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	4b64      	ldr	r3, [pc, #400]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4a63      	ldr	r2, [pc, #396]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d015      	beq.n	80021f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c6:	f7ff f907 	bl	80013d8 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7ff f903 	bl	80013d8 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0ab      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e4:	4b57      	ldr	r3, [pc, #348]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0ee      	beq.n	80021ce <HAL_RCC_OscConfig+0x37e>
 80021f0:	e014      	b.n	800221c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f2:	f7ff f8f1 	bl	80013d8 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7ff f8ed 	bl	80013d8 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e095      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002210:	4b4c      	ldr	r3, [pc, #304]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1ee      	bne.n	80021fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d105      	bne.n	800222e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002222:	4b48      	ldr	r3, [pc, #288]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	4a47      	ldr	r2, [pc, #284]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8081 	beq.w	800233a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002238:	4b42      	ldr	r3, [pc, #264]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d061      	beq.n	8002308 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d146      	bne.n	80022da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224c:	4b3f      	ldr	r3, [pc, #252]	; (800234c <HAL_RCC_OscConfig+0x4fc>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7ff f8c1 	bl	80013d8 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225a:	f7ff f8bd 	bl	80013d8 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e067      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226c:	4b35      	ldr	r3, [pc, #212]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002280:	d108      	bne.n	8002294 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002282:	4b30      	ldr	r3, [pc, #192]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	492d      	ldr	r1, [pc, #180]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002294:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a19      	ldr	r1, [r3, #32]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	430b      	orrs	r3, r1
 80022a6:	4927      	ldr	r1, [pc, #156]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <HAL_RCC_OscConfig+0x4fc>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b2:	f7ff f891 	bl	80013d8 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ba:	f7ff f88d 	bl	80013d8 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e037      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x46a>
 80022d8:	e02f      	b.n	800233a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <HAL_RCC_OscConfig+0x4fc>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff f87a 	bl	80013d8 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e8:	f7ff f876 	bl	80013d8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e020      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x498>
 8002306:	e018      	b.n	800233a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e013      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	429a      	cmp	r2, r3
 8002326:	d106      	bne.n	8002336 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002332:	429a      	cmp	r2, r3
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	40007000 	.word	0x40007000
 800234c:	42420060 	.word	0x42420060

08002350 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0d0      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002364:	4b6a      	ldr	r3, [pc, #424]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d910      	bls.n	8002394 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b67      	ldr	r3, [pc, #412]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 0207 	bic.w	r2, r3, #7
 800237a:	4965      	ldr	r1, [pc, #404]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b63      	ldr	r3, [pc, #396]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0b8      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ac:	4b59      	ldr	r3, [pc, #356]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4a58      	ldr	r2, [pc, #352]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c4:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	494d      	ldr	r1, [pc, #308]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d040      	beq.n	8002470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d115      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e07f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240e:	4b41      	ldr	r3, [pc, #260]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e073      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241e:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e06b      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f023 0203 	bic.w	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4936      	ldr	r1, [pc, #216]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002440:	f7fe ffca 	bl	80013d8 <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	e00a      	b.n	800245e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002448:	f7fe ffc6 	bl	80013d8 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	; 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e053      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 020c 	and.w	r2, r3, #12
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	429a      	cmp	r2, r3
 800246e:	d1eb      	bne.n	8002448 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d210      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 0207 	bic.w	r2, r3, #7
 8002486:	4922      	ldr	r1, [pc, #136]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e032      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4916      	ldr	r1, [pc, #88]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	490e      	ldr	r1, [pc, #56]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024de:	f000 f821 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80024e2:	4602      	mov	r2, r0
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	490a      	ldr	r1, [pc, #40]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024f0:	5ccb      	ldrb	r3, [r1, r3]
 80024f2:	fa22 f303 	lsr.w	r3, r2, r3
 80024f6:	4a09      	ldr	r2, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1cc>)
 80024f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1d0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fe6a 	bl	80011d8 <HAL_InitTick>

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40022000 	.word	0x40022000
 8002514:	40021000 	.word	0x40021000
 8002518:	08008530 	.word	0x08008530
 800251c:	20000000 	.word	0x20000000
 8002520:	20000004 	.word	0x20000004

08002524 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	b490      	push	{r4, r7}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800252a:	4b2a      	ldr	r3, [pc, #168]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800252c:	1d3c      	adds	r4, r7, #4
 800252e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002534:	f240 2301 	movw	r3, #513	; 0x201
 8002538:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800254e:	4b22      	ldr	r3, [pc, #136]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b04      	cmp	r3, #4
 800255c:	d002      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x40>
 800255e:	2b08      	cmp	r3, #8
 8002560:	d003      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0x46>
 8002562:	e02d      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002564:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002566:	623b      	str	r3, [r7, #32]
      break;
 8002568:	e02d      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	0c9b      	lsrs	r3, r3, #18
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002576:	4413      	add	r3, r2
 8002578:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800257c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002588:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	0c5b      	lsrs	r3, r3, #17
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002596:	4413      	add	r3, r2
 8002598:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800259c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	4a0e      	ldr	r2, [pc, #56]	; (80025dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a2:	fb02 f203 	mul.w	r2, r2, r3
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
 80025ae:	e004      	b.n	80025ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025b4:	fb02 f303 	mul.w	r3, r2, r3
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	623b      	str	r3, [r7, #32]
      break;
 80025be:	e002      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c2:	623b      	str	r3, [r7, #32]
      break;
 80025c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025c6:	6a3b      	ldr	r3, [r7, #32]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3728      	adds	r7, #40	; 0x28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc90      	pop	{r4, r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	08008518 	.word	0x08008518
 80025d8:	40021000 	.word	0x40021000
 80025dc:	007a1200 	.word	0x007a1200
 80025e0:	003d0900 	.word	0x003d0900

080025e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e8:	4b02      	ldr	r3, [pc, #8]	; (80025f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	20000000 	.word	0x20000000

080025f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025fc:	f7ff fff2 	bl	80025e4 <HAL_RCC_GetHCLKFreq>
 8002600:	4602      	mov	r2, r0
 8002602:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	4903      	ldr	r1, [pc, #12]	; (800261c <HAL_RCC_GetPCLK1Freq+0x24>)
 800260e:	5ccb      	ldrb	r3, [r1, r3]
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000
 800261c:	08008540 	.word	0x08008540

08002620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002624:	f7ff ffde 	bl	80025e4 <HAL_RCC_GetHCLKFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	0adb      	lsrs	r3, r3, #11
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4903      	ldr	r1, [pc, #12]	; (8002644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002636:	5ccb      	ldrb	r3, [r1, r3]
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40021000 	.word	0x40021000
 8002644:	08008540 	.word	0x08008540

08002648 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	220f      	movs	r2, #15
 8002656:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_RCC_GetClockConfig+0x58>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0203 	and.w	r2, r3, #3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <HAL_RCC_GetClockConfig+0x58>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_GetClockConfig+0x58>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <HAL_RCC_GetClockConfig+0x58>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	08db      	lsrs	r3, r3, #3
 8002682:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_RCC_GetClockConfig+0x5c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0207 	and.w	r2, r3, #7
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40022000 	.word	0x40022000

080026a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <RCC_Delay+0x34>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <RCC_Delay+0x38>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	0a5b      	lsrs	r3, r3, #9
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	fb02 f303 	mul.w	r3, r2, r3
 80026c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026c4:	bf00      	nop
  }
  while (Delay --);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	60fa      	str	r2, [r7, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f9      	bne.n	80026c4 <RCC_Delay+0x1c>
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	20000000 	.word	0x20000000
 80026e0:	10624dd3 	.word	0x10624dd3

080026e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e096      	b.n	8002824 <HAL_SPI_Init+0x140>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d108      	bne.n	8002710 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002706:	d009      	beq.n	800271c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
 800270e:	e005      	b.n	800271c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d126      	bne.n	800277c <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a3c      	ldr	r2, [pc, #240]	; (800282c <HAL_SPI_Init+0x148>)
 800273a:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a3c      	ldr	r2, [pc, #240]	; (8002830 <HAL_SPI_Init+0x14c>)
 8002740:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a3b      	ldr	r2, [pc, #236]	; (8002834 <HAL_SPI_Init+0x150>)
 8002746:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a3b      	ldr	r2, [pc, #236]	; (8002838 <HAL_SPI_Init+0x154>)
 800274c:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a3a      	ldr	r2, [pc, #232]	; (800283c <HAL_SPI_Init+0x158>)
 8002752:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a3a      	ldr	r2, [pc, #232]	; (8002840 <HAL_SPI_Init+0x15c>)
 8002758:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a39      	ldr	r2, [pc, #228]	; (8002844 <HAL_SPI_Init+0x160>)
 800275e:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a39      	ldr	r2, [pc, #228]	; (8002848 <HAL_SPI_Init+0x164>)
 8002764:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800276a:	2b00      	cmp	r3, #0
 800276c:	d102      	bne.n	8002774 <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a36      	ldr	r2, [pc, #216]	; (800284c <HAL_SPI_Init+0x168>)
 8002772:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002792:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e0:	ea42 0103 	orr.w	r1, r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	0c1a      	lsrs	r2, r3, #16
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f002 0204 	and.w	r2, r2, #4
 8002802:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69da      	ldr	r2, [r3, #28]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002812:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	08005885 	.word	0x08005885
 8002830:	08005835 	.word	0x08005835
 8002834:	080058d5 	.word	0x080058d5
 8002838:	08003701 	.word	0x08003701
 800283c:	08003713 	.word	0x08003713
 8002840:	08003725 	.word	0x08003725
 8002844:	08003737 	.word	0x08003737
 8002848:	08003749 	.word	0x08003749
 800284c:	08000ff9 	.word	0x08000ff9

08002850 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	4613      	mov	r3, r2
 800285e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_SPI_Transmit+0x22>
 800286e:	2302      	movs	r3, #2
 8002870:	e126      	b.n	8002ac0 <HAL_SPI_Transmit+0x270>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800287a:	f7fe fdad 	bl	80013d8 <HAL_GetTick>
 800287e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d002      	beq.n	8002896 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002890:	2302      	movs	r3, #2
 8002892:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002894:	e10b      	b.n	8002aae <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <HAL_SPI_Transmit+0x52>
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d102      	bne.n	80028a8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028a6:	e102      	b.n	8002aae <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2203      	movs	r2, #3
 80028ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	88fa      	ldrh	r2, [r7, #6]
 80028c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	88fa      	ldrh	r2, [r7, #6]
 80028c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ee:	d10f      	bne.n	8002910 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800290e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291a:	2b40      	cmp	r3, #64	; 0x40
 800291c:	d007      	beq.n	800292e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800292c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002936:	d14b      	bne.n	80029d0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_SPI_Transmit+0xf6>
 8002940:	8afb      	ldrh	r3, [r7, #22]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d13e      	bne.n	80029c4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	881a      	ldrh	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	1c9a      	adds	r2, r3, #2
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800296a:	e02b      	b.n	80029c4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b02      	cmp	r3, #2
 8002978:	d112      	bne.n	80029a0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	881a      	ldrh	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	1c9a      	adds	r2, r3, #2
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	86da      	strh	r2, [r3, #54]	; 0x36
 800299e:	e011      	b.n	80029c4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029a0:	f7fe fd1a 	bl	80013d8 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d803      	bhi.n	80029b8 <HAL_SPI_Transmit+0x168>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b6:	d102      	bne.n	80029be <HAL_SPI_Transmit+0x16e>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d102      	bne.n	80029c4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029c2:	e074      	b.n	8002aae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1ce      	bne.n	800296c <HAL_SPI_Transmit+0x11c>
 80029ce:	e04c      	b.n	8002a6a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <HAL_SPI_Transmit+0x18e>
 80029d8:	8afb      	ldrh	r3, [r7, #22]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d140      	bne.n	8002a60 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	330c      	adds	r3, #12
 80029e8:	7812      	ldrb	r2, [r2, #0]
 80029ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a04:	e02c      	b.n	8002a60 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d113      	bne.n	8002a3c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	330c      	adds	r3, #12
 8002a1e:	7812      	ldrb	r2, [r2, #0]
 8002a20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a3a:	e011      	b.n	8002a60 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a3c:	f7fe fccc 	bl	80013d8 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d803      	bhi.n	8002a54 <HAL_SPI_Transmit+0x204>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a52:	d102      	bne.n	8002a5a <HAL_SPI_Transmit+0x20a>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d102      	bne.n	8002a60 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a5e:	e026      	b.n	8002aae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1cd      	bne.n	8002a06 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	6839      	ldr	r1, [r7, #0]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f001 f8a4 	bl	8003bbc <SPI_EndRxTxTransaction>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10a      	bne.n	8002a9e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a88:	2300      	movs	r3, #0
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	77fb      	strb	r3, [r7, #31]
 8002aaa:	e000      	b.n	8002aae <HAL_SPI_Transmit+0x25e>
  }

error:
 8002aac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002abe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3720      	adds	r7, #32
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ae4:	d112      	bne.n	8002b0c <HAL_SPI_Receive+0x44>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10e      	bne.n	8002b0c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2204      	movs	r2, #4
 8002af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002af6:	88fa      	ldrh	r2, [r7, #6]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	4613      	mov	r3, r2
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f8f1 	bl	8002cea <HAL_SPI_TransmitReceive>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	e0ea      	b.n	8002ce2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_SPI_Receive+0x52>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e0e3      	b.n	8002ce2 <HAL_SPI_Receive+0x21a>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b22:	f7fe fc59 	bl	80013d8 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d002      	beq.n	8002b3a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b34:	2302      	movs	r3, #2
 8002b36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b38:	e0ca      	b.n	8002cd0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <HAL_SPI_Receive+0x7e>
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d102      	bne.n	8002b4c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b4a:	e0c1      	b.n	8002cd0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2204      	movs	r2, #4
 8002b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	88fa      	ldrh	r2, [r7, #6]
 8002b64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	88fa      	ldrh	r2, [r7, #6]
 8002b6a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b92:	d10f      	bne.n	8002bb4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bb2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b40      	cmp	r3, #64	; 0x40
 8002bc0:	d007      	beq.n	8002bd2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d162      	bne.n	8002ca0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002bda:	e02e      	b.n	8002c3a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d115      	bne.n	8002c16 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f103 020c 	add.w	r2, r3, #12
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf6:	7812      	ldrb	r2, [r2, #0]
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c14:	e011      	b.n	8002c3a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c16:	f7fe fbdf 	bl	80013d8 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d803      	bhi.n	8002c2e <HAL_SPI_Receive+0x166>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	d102      	bne.n	8002c34 <HAL_SPI_Receive+0x16c>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d102      	bne.n	8002c3a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c38:	e04a      	b.n	8002cd0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1cb      	bne.n	8002bdc <HAL_SPI_Receive+0x114>
 8002c44:	e031      	b.n	8002caa <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d113      	bne.n	8002c7c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	b292      	uxth	r2, r2
 8002c60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c66:	1c9a      	adds	r2, r3, #2
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c7a:	e011      	b.n	8002ca0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c7c:	f7fe fbac 	bl	80013d8 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d803      	bhi.n	8002c94 <HAL_SPI_Receive+0x1cc>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c92:	d102      	bne.n	8002c9a <HAL_SPI_Receive+0x1d2>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c9e:	e017      	b.n	8002cd0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1cd      	bne.n	8002c46 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	6839      	ldr	r1, [r7, #0]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 ff32 	bl	8003b18 <SPI_EndRxTransaction>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	75fb      	strb	r3, [r7, #23]
 8002ccc:	e000      	b.n	8002cd0 <HAL_SPI_Receive+0x208>
  }

error :
 8002cce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b08c      	sub	sp, #48	; 0x30
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_SPI_TransmitReceive+0x26>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e18a      	b.n	8003026 <HAL_SPI_TransmitReceive+0x33c>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d18:	f7fe fb5e 	bl	80013d8 <HAL_GetTick>
 8002d1c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d2e:	887b      	ldrh	r3, [r7, #2]
 8002d30:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d00f      	beq.n	8002d5a <HAL_SPI_TransmitReceive+0x70>
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d40:	d107      	bne.n	8002d52 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d103      	bne.n	8002d52 <HAL_SPI_TransmitReceive+0x68>
 8002d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d003      	beq.n	8002d5a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d52:	2302      	movs	r3, #2
 8002d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d58:	e15b      	b.n	8003012 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_SPI_TransmitReceive+0x82>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <HAL_SPI_TransmitReceive+0x82>
 8002d66:	887b      	ldrh	r3, [r7, #2]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d103      	bne.n	8002d74 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d72:	e14e      	b.n	8003012 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d003      	beq.n	8002d88 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2205      	movs	r2, #5
 8002d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	887a      	ldrh	r2, [r7, #2]
 8002d98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	887a      	ldrh	r2, [r7, #2]
 8002d9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	887a      	ldrh	r2, [r7, #2]
 8002daa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	887a      	ldrh	r2, [r7, #2]
 8002db0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b40      	cmp	r3, #64	; 0x40
 8002dca:	d007      	beq.n	8002ddc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de4:	d178      	bne.n	8002ed8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_SPI_TransmitReceive+0x10a>
 8002dee:	8b7b      	ldrh	r3, [r7, #26]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d166      	bne.n	8002ec2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	881a      	ldrh	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	1c9a      	adds	r2, r3, #2
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e18:	e053      	b.n	8002ec2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d11b      	bne.n	8002e60 <HAL_SPI_TransmitReceive+0x176>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d016      	beq.n	8002e60 <HAL_SPI_TransmitReceive+0x176>
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d113      	bne.n	8002e60 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	881a      	ldrh	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	1c9a      	adds	r2, r3, #2
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d119      	bne.n	8002ea2 <HAL_SPI_TransmitReceive+0x1b8>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d014      	beq.n	8002ea2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	b292      	uxth	r2, r2
 8002e84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8a:	1c9a      	adds	r2, r3, #2
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ea2:	f7fe fa99 	bl	80013d8 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d807      	bhi.n	8002ec2 <HAL_SPI_TransmitReceive+0x1d8>
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d003      	beq.n	8002ec2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ec0:	e0a7      	b.n	8003012 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1a6      	bne.n	8002e1a <HAL_SPI_TransmitReceive+0x130>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1a1      	bne.n	8002e1a <HAL_SPI_TransmitReceive+0x130>
 8002ed6:	e07c      	b.n	8002fd2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_SPI_TransmitReceive+0x1fc>
 8002ee0:	8b7b      	ldrh	r3, [r7, #26]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d16b      	bne.n	8002fbe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	330c      	adds	r3, #12
 8002ef0:	7812      	ldrb	r2, [r2, #0]
 8002ef2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f0c:	e057      	b.n	8002fbe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d11c      	bne.n	8002f56 <HAL_SPI_TransmitReceive+0x26c>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d017      	beq.n	8002f56 <HAL_SPI_TransmitReceive+0x26c>
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d114      	bne.n	8002f56 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	330c      	adds	r3, #12
 8002f36:	7812      	ldrb	r2, [r2, #0]
 8002f38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d119      	bne.n	8002f98 <HAL_SPI_TransmitReceive+0x2ae>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d014      	beq.n	8002f98 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f94:	2301      	movs	r3, #1
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f98:	f7fe fa1e 	bl	80013d8 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d803      	bhi.n	8002fb0 <HAL_SPI_TransmitReceive+0x2c6>
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fae:	d102      	bne.n	8002fb6 <HAL_SPI_TransmitReceive+0x2cc>
 8002fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d103      	bne.n	8002fbe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fbc:	e029      	b.n	8003012 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1a2      	bne.n	8002f0e <HAL_SPI_TransmitReceive+0x224>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d19d      	bne.n	8002f0e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 fdf0 	bl	8003bbc <SPI_EndRxTxTransaction>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d006      	beq.n	8002ff0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002fee:	e010      	b.n	8003012 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10b      	bne.n	8003010 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	e000      	b.n	8003012 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003010:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003022:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003026:	4618      	mov	r0, r3
 8003028:	3730      	adds	r7, #48	; 0x30
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	4613      	mov	r3, r2
 800303c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_SPI_Transmit_DMA+0x20>
 800304c:	2302      	movs	r3, #2
 800304e:	e09b      	b.n	8003188 <HAL_SPI_Transmit_DMA+0x158>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d002      	beq.n	800306a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003064:	2302      	movs	r3, #2
 8003066:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003068:	e089      	b.n	800317e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <HAL_SPI_Transmit_DMA+0x46>
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d102      	bne.n	800307c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	75fb      	strb	r3, [r7, #23]
    goto error;
 800307a:	e080      	b.n	800317e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2203      	movs	r2, #3
 8003080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	88fa      	ldrh	r2, [r7, #6]
 8003094:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	88fa      	ldrh	r2, [r7, #6]
 800309a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c2:	d10f      	bne.n	80030e4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e8:	4a29      	ldr	r2, [pc, #164]	; (8003190 <HAL_SPI_Transmit_DMA+0x160>)
 80030ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f0:	4a28      	ldr	r2, [pc, #160]	; (8003194 <HAL_SPI_Transmit_DMA+0x164>)
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f8:	4a27      	ldr	r2, [pc, #156]	; (8003198 <HAL_SPI_Transmit_DMA+0x168>)
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003100:	2200      	movs	r2, #0
 8003102:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	4619      	mov	r1, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	330c      	adds	r3, #12
 8003114:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800311a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800311c:	f7fe faa0 	bl	8001660 <HAL_DMA_Start_IT>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00c      	beq.n	8003140 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	f043 0210 	orr.w	r2, r3, #16
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800313e:	e01e      	b.n	800317e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314a:	2b40      	cmp	r3, #64	; 0x40
 800314c:	d007      	beq.n	800315e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800315c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0220 	orr.w	r2, r2, #32
 800316c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0202 	orr.w	r2, r2, #2
 800317c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003186:	7dfb      	ldrb	r3, [r7, #23]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	08003941 	.word	0x08003941
 8003194:	0800375b 	.word	0x0800375b
 8003198:	0800399b 	.word	0x0800399b

0800319c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d110      	bne.n	80031d8 <HAL_SPI_Receive_DMA+0x3c>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031be:	d10b      	bne.n	80031d8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2204      	movs	r2, #4
 80031c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f8ac 	bl	800332c <HAL_SPI_TransmitReceive_DMA>
 80031d4:	4603      	mov	r3, r0
 80031d6:	e09f      	b.n	8003318 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_SPI_Receive_DMA+0x4a>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e098      	b.n	8003318 <HAL_SPI_Receive_DMA+0x17c>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d002      	beq.n	8003200 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
 80031fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031fe:	e086      	b.n	800330e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <HAL_SPI_Receive_DMA+0x70>
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d102      	bne.n	8003212 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003210:	e07d      	b.n	800330e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2204      	movs	r2, #4
 8003216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	88fa      	ldrh	r2, [r7, #6]
 800322a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	88fa      	ldrh	r2, [r7, #6]
 8003230:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003252:	d10f      	bne.n	8003274 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003262:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003272:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003278:	4a29      	ldr	r2, [pc, #164]	; (8003320 <HAL_SPI_Receive_DMA+0x184>)
 800327a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003280:	4a28      	ldr	r2, [pc, #160]	; (8003324 <HAL_SPI_Receive_DMA+0x188>)
 8003282:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003288:	4a27      	ldr	r2, [pc, #156]	; (8003328 <HAL_SPI_Receive_DMA+0x18c>)
 800328a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003290:	2200      	movs	r2, #0
 8003292:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	330c      	adds	r3, #12
 800329e:	4619      	mov	r1, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80032ac:	f7fe f9d8 	bl	8001660 <HAL_DMA_Start_IT>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00c      	beq.n	80032d0 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ba:	f043 0210 	orr.w	r2, r3, #16
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80032ce:	e01e      	b.n	800330e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032da:	2b40      	cmp	r3, #64	; 0x40
 80032dc:	d007      	beq.n	80032ee <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ec:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0220 	orr.w	r2, r2, #32
 80032fc:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0201 	orr.w	r2, r2, #1
 800330c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003316:	7dfb      	ldrb	r3, [r7, #23]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	0800395f 	.word	0x0800395f
 8003324:	08003805 	.word	0x08003805
 8003328:	0800399b 	.word	0x0800399b

0800332c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_SPI_TransmitReceive_DMA+0x20>
 8003348:	2302      	movs	r3, #2
 800334a:	e0e3      	b.n	8003514 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800335a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003362:	7dbb      	ldrb	r3, [r7, #22]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d00d      	beq.n	8003384 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800336e:	d106      	bne.n	800337e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d102      	bne.n	800337e <HAL_SPI_TransmitReceive_DMA+0x52>
 8003378:	7dbb      	ldrb	r3, [r7, #22]
 800337a:	2b04      	cmp	r3, #4
 800337c:	d002      	beq.n	8003384 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800337e:	2302      	movs	r3, #2
 8003380:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003382:	e0c2      	b.n	800350a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003390:	887b      	ldrh	r3, [r7, #2]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
    goto error;
 800339a:	e0b6      	b.n	800350a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d003      	beq.n	80033b0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2205      	movs	r2, #5
 80033ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	887a      	ldrh	r2, [r7, #2]
 80033c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	887a      	ldrh	r2, [r7, #2]
 80033c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	887a      	ldrh	r2, [r7, #2]
 80033d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	887a      	ldrh	r2, [r7, #2]
 80033d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d108      	bne.n	8003404 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f6:	4a49      	ldr	r2, [pc, #292]	; (800351c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80033f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fe:	4a48      	ldr	r2, [pc, #288]	; (8003520 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003400:	629a      	str	r2, [r3, #40]	; 0x28
 8003402:	e007      	b.n	8003414 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003408:	4a46      	ldr	r2, [pc, #280]	; (8003524 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003410:	4a45      	ldr	r2, [pc, #276]	; (8003528 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003412:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003418:	4a44      	ldr	r2, [pc, #272]	; (800352c <HAL_SPI_TransmitReceive_DMA+0x200>)
 800341a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003420:	2200      	movs	r2, #0
 8003422:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	330c      	adds	r3, #12
 800342e:	4619      	mov	r1, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800343a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800343c:	f7fe f910 	bl	8001660 <HAL_DMA_Start_IT>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00c      	beq.n	8003460 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344a:	f043 0210 	orr.w	r2, r3, #16
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800345e:	e054      	b.n	800350a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003474:	2200      	movs	r2, #0
 8003476:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347c:	2200      	movs	r2, #0
 800347e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003484:	2200      	movs	r2, #0
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348c:	2200      	movs	r2, #0
 800348e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	4619      	mov	r1, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	330c      	adds	r3, #12
 80034a0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80034a8:	f7fe f8da 	bl	8001660 <HAL_DMA_Start_IT>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00c      	beq.n	80034cc <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b6:	f043 0210 	orr.w	r2, r3, #16
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80034ca:	e01e      	b.n	800350a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d6:	2b40      	cmp	r3, #64	; 0x40
 80034d8:	d007      	beq.n	80034ea <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034e8:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0220 	orr.w	r2, r2, #32
 80034f8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0202 	orr.w	r2, r2, #2
 8003508:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003512:	7dfb      	ldrb	r3, [r7, #23]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	0800395f 	.word	0x0800395f
 8003520:	08003805 	.word	0x08003805
 8003524:	0800397d 	.word	0x0800397d
 8003528:	080038af 	.word	0x080038af
 800352c:	0800399b 	.word	0x0800399b

08003530 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	099b      	lsrs	r3, r3, #6
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10f      	bne.n	8003574 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d004      	beq.n	8003574 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	4798      	blx	r3
    return;
 8003572:	e0bf      	b.n	80036f4 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_SPI_IRQHandler+0x66>
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	09db      	lsrs	r3, r3, #7
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d004      	beq.n	8003596 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	4798      	blx	r3
    return;
 8003594:	e0ae      	b.n	80036f4 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	095b      	lsrs	r3, r3, #5
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_SPI_IRQHandler+0x80>
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	099b      	lsrs	r3, r3, #6
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80a2 	beq.w	80036f4 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 809b 	beq.w	80036f4 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d023      	beq.n	8003612 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d011      	beq.n	80035fa <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	f043 0204 	orr.w	r2, r3, #4
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	e00b      	b.n	8003612 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	693b      	ldr	r3, [r7, #16]
        return;
 8003610:	e070      	b.n	80036f4 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	095b      	lsrs	r3, r3, #5
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d014      	beq.n	8003648 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003622:	f043 0201 	orr.w	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364c:	2b00      	cmp	r3, #0
 800364e:	d050      	beq.n	80036f2 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800365e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d104      	bne.n	800367c <HAL_SPI_IRQHandler+0x14c>
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d034      	beq.n	80036e6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0203 	bic.w	r2, r2, #3
 800368a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d011      	beq.n	80036b8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003698:	4a18      	ldr	r2, [pc, #96]	; (80036fc <HAL_SPI_IRQHandler+0x1cc>)
 800369a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fe f877 	bl	8001794 <HAL_DMA_Abort_IT>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d017      	beq.n	80036f0 <HAL_SPI_IRQHandler+0x1c0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c4:	4a0d      	ldr	r2, [pc, #52]	; (80036fc <HAL_SPI_IRQHandler+0x1cc>)
 80036c6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe f861 	bl	8001794 <HAL_DMA_Abort_IT>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00b      	beq.n	80036f0 <HAL_SPI_IRQHandler+0x1c0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80036e4:	e004      	b.n	80036f0 <HAL_SPI_IRQHandler+0x1c0>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80036ee:	e000      	b.n	80036f2 <HAL_SPI_IRQHandler+0x1c2>
        if (hspi->hdmatx != NULL)
 80036f0:	bf00      	nop
    return;
 80036f2:	bf00      	nop
  }
}
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	080039dd 	.word	0x080039dd

08003700 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr

08003712 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr

08003736 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b086      	sub	sp, #24
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003768:	f7fd fe36 	bl	80013d8 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b20      	cmp	r3, #32
 800377a:	d03c      	beq.n	80037f6 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0220 	bic.w	r2, r2, #32
 800378a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0202 	bic.w	r2, r2, #2
 800379a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	2164      	movs	r1, #100	; 0x64
 80037a0:	6978      	ldr	r0, [r7, #20]
 80037a2:	f000 fa0b 	bl	8003bbc <SPI_EndRxTxTransaction>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b0:	f043 0220 	orr.w	r2, r3, #32
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2200      	movs	r2, #0
 80037da:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d004      	beq.n	80037f6 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	6978      	ldr	r0, [r7, #20]
 80037f2:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80037f4:	e003      	b.n	80037fe <SPI_DMATransmitCplt+0xa4>
    }
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	6978      	ldr	r0, [r7, #20]
 80037fc:	4798      	blx	r3
#else
  HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003812:	f7fd fde1 	bl	80013d8 <HAL_GetTick>
 8003816:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b20      	cmp	r3, #32
 8003824:	d03c      	beq.n	80038a0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0220 	bic.w	r2, r2, #32
 8003834:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10d      	bne.n	800385a <SPI_DMAReceiveCplt+0x56>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003846:	d108      	bne.n	800385a <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0203 	bic.w	r2, r2, #3
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	e007      	b.n	800386a <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0201 	bic.w	r2, r2, #1
 8003868:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	2164      	movs	r1, #100	; 0x64
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f952 	bl	8003b18 <SPI_EndRxTransaction>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	2b00      	cmp	r3, #0
 8003894:	d004      	beq.n	80038a0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800389e:	e003      	b.n	80038a8 <SPI_DMAReceiveCplt+0xa4>
    }
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	4798      	blx	r3
#else
  HAL_SPI_RxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038bc:	f7fd fd8c 	bl	80013d8 <HAL_GetTick>
 80038c0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d030      	beq.n	8003932 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0220 	bic.w	r2, r2, #32
 80038de:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	2164      	movs	r1, #100	; 0x64
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f969 	bl	8003bbc <SPI_EndRxTxTransaction>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f4:	f043 0220 	orr.w	r2, r3, #32
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0203 	bic.w	r2, r2, #3
 800390a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003930:	e003      	b.n	800393a <SPI_DMATransmitReceiveCplt+0x8c>
    }
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	4798      	blx	r3
#else
  HAL_SPI_TxRxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	4798      	blx	r3
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	4798      	blx	r3
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0203 	bic.w	r2, r2, #3
 80039b6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	f043 0210 	orr.w	r2, r3, #16
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80039d4:	bf00      	nop
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80039fe:	bf00      	nop
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a18:	f7fd fcde 	bl	80013d8 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	4413      	add	r3, r2
 8003a26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a28:	f7fd fcd6 	bl	80013d8 <HAL_GetTick>
 8003a2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a2e:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	015b      	lsls	r3, r3, #5
 8003a34:	0d1b      	lsrs	r3, r3, #20
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	fb02 f303 	mul.w	r3, r2, r3
 8003a3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a3e:	e054      	b.n	8003aea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d050      	beq.n	8003aea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a48:	f7fd fcc6 	bl	80013d8 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	69fa      	ldr	r2, [r7, #28]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d902      	bls.n	8003a5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d13d      	bne.n	8003ada <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a76:	d111      	bne.n	8003a9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a80:	d004      	beq.n	8003a8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8a:	d107      	bne.n	8003a9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa4:	d10f      	bne.n	8003ac6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ac4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e017      	b.n	8003b0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4013      	ands	r3, r2
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	bf0c      	ite	eq
 8003afa:	2301      	moveq	r3, #1
 8003afc:	2300      	movne	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d19b      	bne.n	8003a40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3720      	adds	r7, #32
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000000 	.word	0x20000000

08003b18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b2c:	d111      	bne.n	8003b52 <SPI_EndRxTransaction+0x3a>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b36:	d004      	beq.n	8003b42 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b40:	d107      	bne.n	8003b52 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b50:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b5a:	d117      	bne.n	8003b8c <SPI_EndRxTransaction+0x74>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b64:	d112      	bne.n	8003b8c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2101      	movs	r1, #1
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f7ff ff49 	bl	8003a08 <SPI_WaitFlagStateUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01a      	beq.n	8003bb2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e013      	b.n	8003bb4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2200      	movs	r2, #0
 8003b94:	2180      	movs	r1, #128	; 0x80
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f7ff ff36 	bl	8003a08 <SPI_WaitFlagStateUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d007      	beq.n	8003bb2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba6:	f043 0220 	orr.w	r2, r3, #32
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e000      	b.n	8003bb4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2180      	movs	r1, #128	; 0x80
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f7ff ff18 	bl	8003a08 <SPI_WaitFlagStateUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be2:	f043 0220 	orr.w	r2, r3, #32
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e000      	b.n	8003bf0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e041      	b.n	8003c8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f839 	bl	8003c96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f000 f9b4 	bl	8003fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d001      	beq.n	8003cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e03a      	b.n	8003d36 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a18      	ldr	r2, [pc, #96]	; (8003d40 <HAL_TIM_Base_Start_IT+0x98>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00e      	beq.n	8003d00 <HAL_TIM_Base_Start_IT+0x58>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cea:	d009      	beq.n	8003d00 <HAL_TIM_Base_Start_IT+0x58>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <HAL_TIM_Base_Start_IT+0x9c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d004      	beq.n	8003d00 <HAL_TIM_Base_Start_IT+0x58>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a13      	ldr	r2, [pc, #76]	; (8003d48 <HAL_TIM_Base_Start_IT+0xa0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d111      	bne.n	8003d24 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b06      	cmp	r3, #6
 8003d10:	d010      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d22:	e007      	b.n	8003d34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr
 8003d40:	40012c00 	.word	0x40012c00
 8003d44:	40000400 	.word	0x40000400
 8003d48:	40000800 	.word	0x40000800

08003d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d122      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d11b      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0202 	mvn.w	r2, #2
 8003d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f8ed 	bl	8003f6e <HAL_TIM_IC_CaptureCallback>
 8003d94:	e005      	b.n	8003da2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f8e0 	bl	8003f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f8ef 	bl	8003f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d122      	bne.n	8003dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d11b      	bne.n	8003dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0204 	mvn.w	r2, #4
 8003dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f8c3 	bl	8003f6e <HAL_TIM_IC_CaptureCallback>
 8003de8:	e005      	b.n	8003df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f8b6 	bl	8003f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f8c5 	bl	8003f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d122      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d11b      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 0208 	mvn.w	r2, #8
 8003e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2204      	movs	r2, #4
 8003e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f899 	bl	8003f6e <HAL_TIM_IC_CaptureCallback>
 8003e3c:	e005      	b.n	8003e4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f88c 	bl	8003f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f89b 	bl	8003f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0310 	and.w	r3, r3, #16
 8003e5a:	2b10      	cmp	r3, #16
 8003e5c:	d122      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	2b10      	cmp	r3, #16
 8003e6a:	d11b      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0210 	mvn.w	r2, #16
 8003e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2208      	movs	r2, #8
 8003e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f86f 	bl	8003f6e <HAL_TIM_IC_CaptureCallback>
 8003e90:	e005      	b.n	8003e9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f862 	bl	8003f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f871 	bl	8003f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d10e      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d107      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0201 	mvn.w	r2, #1
 8003ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fd f844 	bl	8000f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eda:	2b80      	cmp	r3, #128	; 0x80
 8003edc:	d10e      	bne.n	8003efc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee8:	2b80      	cmp	r3, #128	; 0x80
 8003eea:	d107      	bne.n	8003efc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f8bf 	bl	800407a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f06:	2b40      	cmp	r3, #64	; 0x40
 8003f08:	d10e      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b40      	cmp	r3, #64	; 0x40
 8003f16:	d107      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f835 	bl	8003f92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b20      	cmp	r3, #32
 8003f34:	d10e      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d107      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0220 	mvn.w	r2, #32
 8003f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f88a 	bl	8004068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f54:	bf00      	nop
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr

08003f6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr

08003f92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a29      	ldr	r2, [pc, #164]	; (800405c <TIM_Base_SetConfig+0xb8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00b      	beq.n	8003fd4 <TIM_Base_SetConfig+0x30>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc2:	d007      	beq.n	8003fd4 <TIM_Base_SetConfig+0x30>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a26      	ldr	r2, [pc, #152]	; (8004060 <TIM_Base_SetConfig+0xbc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_Base_SetConfig+0x30>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a25      	ldr	r2, [pc, #148]	; (8004064 <TIM_Base_SetConfig+0xc0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d108      	bne.n	8003fe6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a1c      	ldr	r2, [pc, #112]	; (800405c <TIM_Base_SetConfig+0xb8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00b      	beq.n	8004006 <TIM_Base_SetConfig+0x62>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff4:	d007      	beq.n	8004006 <TIM_Base_SetConfig+0x62>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a19      	ldr	r2, [pc, #100]	; (8004060 <TIM_Base_SetConfig+0xbc>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d003      	beq.n	8004006 <TIM_Base_SetConfig+0x62>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a18      	ldr	r2, [pc, #96]	; (8004064 <TIM_Base_SetConfig+0xc0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d108      	bne.n	8004018 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4313      	orrs	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a07      	ldr	r2, [pc, #28]	; (800405c <TIM_Base_SetConfig+0xb8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d103      	bne.n	800404c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	615a      	str	r2, [r3, #20]
}
 8004052:	bf00      	nop
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr
 800405c:	40012c00 	.word	0x40012c00
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800

08004068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	4770      	bx	lr

0800407a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr

0800408c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e03f      	b.n	800411e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d106      	bne.n	80040b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fd f84a 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2224      	movs	r2, #36	; 0x24
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fb37 	bl	8004744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08a      	sub	sp, #40	; 0x28
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004148:	2300      	movs	r3, #0
 800414a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10d      	bne.n	800417a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_UART_IRQHandler+0x52>
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fa3d 	bl	80045f2 <UART_Receive_IT>
      return;
 8004178:	e17b      	b.n	8004472 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80b1 	beq.w	80042e4 <HAL_UART_IRQHandler+0x1bc>
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d105      	bne.n	8004198 <HAL_UART_IRQHandler+0x70>
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 80a6 	beq.w	80042e4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <HAL_UART_IRQHandler+0x90>
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	f043 0201 	orr.w	r2, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_UART_IRQHandler+0xb0>
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	f043 0202 	orr.w	r2, r3, #2
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_UART_IRQHandler+0xd0>
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	f043 0204 	orr.w	r2, r3, #4
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00f      	beq.n	8004222 <HAL_UART_IRQHandler+0xfa>
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d104      	bne.n	8004216 <HAL_UART_IRQHandler+0xee>
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	f043 0208 	orr.w	r2, r3, #8
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 811e 	beq.w	8004468 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d007      	beq.n	8004246 <HAL_UART_IRQHandler+0x11e>
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f9d6 	bl	80045f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004250:	2b00      	cmp	r3, #0
 8004252:	bf14      	ite	ne
 8004254:	2301      	movne	r3, #1
 8004256:	2300      	moveq	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d102      	bne.n	800426e <HAL_UART_IRQHandler+0x146>
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d031      	beq.n	80042d2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f918 	bl	80044a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427e:	2b00      	cmp	r3, #0
 8004280:	d023      	beq.n	80042ca <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004290:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	2b00      	cmp	r3, #0
 8004298:	d013      	beq.n	80042c2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	4a76      	ldr	r2, [pc, #472]	; (8004478 <HAL_UART_IRQHandler+0x350>)
 80042a0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fd fa74 	bl	8001794 <HAL_DMA_Abort_IT>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d016      	beq.n	80042e0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042bc:	4610      	mov	r0, r2
 80042be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c0:	e00e      	b.n	80042e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f8da 	bl	800447c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c8:	e00a      	b.n	80042e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f8d6 	bl	800447c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d0:	e006      	b.n	80042e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f8d2 	bl	800447c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80042de:	e0c3      	b.n	8004468 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e0:	bf00      	nop
    return;
 80042e2:	e0c1      	b.n	8004468 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	f040 80a1 	bne.w	8004430 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 809b 	beq.w	8004430 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 8095 	beq.w	8004430 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d04e      	beq.n	80043c8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004334:	8a3b      	ldrh	r3, [r7, #16]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 8098 	beq.w	800446c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004340:	8a3a      	ldrh	r2, [r7, #16]
 8004342:	429a      	cmp	r2, r3
 8004344:	f080 8092 	bcs.w	800446c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	8a3a      	ldrh	r2, [r7, #16]
 800434c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	2b20      	cmp	r3, #32
 8004356:	d02b      	beq.n	80043b0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004366:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695a      	ldr	r2, [r3, #20]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695a      	ldr	r2, [r3, #20]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004386:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0210 	bic.w	r2, r2, #16
 80043a4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fd f9b7 	bl	800171e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	b29b      	uxth	r3, r3
 80043be:	4619      	mov	r1, r3
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f864 	bl	800448e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80043c6:	e051      	b.n	800446c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d047      	beq.n	8004470 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80043e0:	8a7b      	ldrh	r3, [r7, #18]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d044      	beq.n	8004470 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043f4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695a      	ldr	r2, [r3, #20]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0210 	bic.w	r2, r2, #16
 8004422:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004424:	8a7b      	ldrh	r3, [r7, #18]
 8004426:	4619      	mov	r1, r3
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f830 	bl	800448e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800442e:	e01f      	b.n	8004470 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_UART_IRQHandler+0x324>
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f86d 	bl	8004524 <UART_Transmit_IT>
    return;
 800444a:	e012      	b.n	8004472 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00d      	beq.n	8004472 <HAL_UART_IRQHandler+0x34a>
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f8ae 	bl	80045c2 <UART_EndTransmit_IT>
    return;
 8004466:	e004      	b.n	8004472 <HAL_UART_IRQHandler+0x34a>
    return;
 8004468:	bf00      	nop
 800446a:	e002      	b.n	8004472 <HAL_UART_IRQHandler+0x34a>
      return;
 800446c:	bf00      	nop
 800446e:	e000      	b.n	8004472 <HAL_UART_IRQHandler+0x34a>
      return;
 8004470:	bf00      	nop
  }
}
 8004472:	3728      	adds	r7, #40	; 0x28
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	080044fd 	.word	0x080044fd

0800447c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	4770      	bx	lr

0800448e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	460b      	mov	r3, r1
 8004498:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr

080044a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695a      	ldr	r2, [r3, #20]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0201 	bic.w	r2, r2, #1
 80044ca:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d107      	bne.n	80044e4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0210 	bic.w	r2, r2, #16
 80044e2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f7ff ffb0 	bl	800447c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800451c:	bf00      	nop
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b21      	cmp	r3, #33	; 0x21
 8004536:	d13e      	bne.n	80045b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004540:	d114      	bne.n	800456c <UART_Transmit_IT+0x48>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d110      	bne.n	800456c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	461a      	mov	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800455e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	1c9a      	adds	r2, r3, #2
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	621a      	str	r2, [r3, #32]
 800456a:	e008      	b.n	800457e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	1c59      	adds	r1, r3, #1
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6211      	str	r1, [r2, #32]
 8004576:	781a      	ldrb	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29b      	uxth	r3, r3
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	4619      	mov	r1, r3
 800458c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10f      	bne.n	80045b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e000      	b.n	80045b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045b6:	2302      	movs	r3, #2
  }
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr

080045c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f001 f9e4 	bl	80059b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b086      	sub	sp, #24
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b22      	cmp	r3, #34	; 0x22
 8004604:	f040 8099 	bne.w	800473a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004610:	d117      	bne.n	8004642 <UART_Receive_IT+0x50>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d113      	bne.n	8004642 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	b29b      	uxth	r3, r3
 800462c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004630:	b29a      	uxth	r2, r3
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	1c9a      	adds	r2, r3, #2
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	629a      	str	r2, [r3, #40]	; 0x28
 8004640:	e026      	b.n	8004690 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004646:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004654:	d007      	beq.n	8004666 <UART_Receive_IT+0x74>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10a      	bne.n	8004674 <UART_Receive_IT+0x82>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	b2da      	uxtb	r2, r3
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	701a      	strb	r2, [r3, #0]
 8004672:	e008      	b.n	8004686 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004680:	b2da      	uxtb	r2, r3
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29b      	uxth	r3, r3
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	4619      	mov	r1, r3
 800469e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d148      	bne.n	8004736 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0220 	bic.w	r2, r2, #32
 80046b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695a      	ldr	r2, [r3, #20]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0201 	bic.w	r2, r2, #1
 80046d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d123      	bne.n	800472c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0210 	bic.w	r2, r2, #16
 80046f8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	2b10      	cmp	r3, #16
 8004706:	d10a      	bne.n	800471e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004722:	4619      	mov	r1, r3
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7ff feb2 	bl	800448e <HAL_UARTEx_RxEventCallback>
 800472a:	e002      	b.n	8004732 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f001 f917 	bl	8005960 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	e002      	b.n	800473c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	e000      	b.n	800473c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800473a:	2302      	movs	r3, #2
  }
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800477e:	f023 030c 	bic.w	r3, r3, #12
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	68b9      	ldr	r1, [r7, #8]
 8004788:	430b      	orrs	r3, r1
 800478a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a2c      	ldr	r2, [pc, #176]	; (8004858 <UART_SetConfig+0x114>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d103      	bne.n	80047b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047ac:	f7fd ff38 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	e002      	b.n	80047ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047b4:	f7fd ff20 	bl	80025f8 <HAL_RCC_GetPCLK1Freq>
 80047b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	009a      	lsls	r2, r3, #2
 80047c4:	441a      	add	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	4a22      	ldr	r2, [pc, #136]	; (800485c <UART_SetConfig+0x118>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	0119      	lsls	r1, r3, #4
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	009a      	lsls	r2, r3, #2
 80047e4:	441a      	add	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f0:	4b1a      	ldr	r3, [pc, #104]	; (800485c <UART_SetConfig+0x118>)
 80047f2:	fba3 0302 	umull	r0, r3, r3, r2
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	2064      	movs	r0, #100	; 0x64
 80047fa:	fb00 f303 	mul.w	r3, r0, r3
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	3332      	adds	r3, #50	; 0x32
 8004804:	4a15      	ldr	r2, [pc, #84]	; (800485c <UART_SetConfig+0x118>)
 8004806:	fba2 2303 	umull	r2, r3, r2, r3
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004810:	4419      	add	r1, r3
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4613      	mov	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	009a      	lsls	r2, r3, #2
 800481c:	441a      	add	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	fbb2 f2f3 	udiv	r2, r2, r3
 8004828:	4b0c      	ldr	r3, [pc, #48]	; (800485c <UART_SetConfig+0x118>)
 800482a:	fba3 0302 	umull	r0, r3, r3, r2
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	2064      	movs	r0, #100	; 0x64
 8004832:	fb00 f303 	mul.w	r3, r0, r3
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	3332      	adds	r3, #50	; 0x32
 800483c:	4a07      	ldr	r2, [pc, #28]	; (800485c <UART_SetConfig+0x118>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	f003 020f 	and.w	r2, r3, #15
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	440a      	add	r2, r1
 800484e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004850:	bf00      	nop
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40013800 	.word	0x40013800
 800485c:	51eb851f 	.word	0x51eb851f

08004860 <adxl345_convert_float_mpss>:
{
	return (float) u * ADXL345_MG2G_MULTIPLIER;
}
/* convert data to float in m/s^2 */
float adxl345_convert_float_mpss(int16_t u)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	80fb      	strh	r3, [r7, #6]
	return (float) u * ADXL345_MG2G_MULTIPLIER * 9.81f;
 800486a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800486e:	4618      	mov	r0, r3
 8004870:	f7fc f85e 	bl	8000930 <__aeabi_i2f>
 8004874:	4603      	mov	r3, r0
 8004876:	4618      	mov	r0, r3
 8004878:	f7fb fef8 	bl	800066c <__aeabi_f2d>
 800487c:	a30c      	add	r3, pc, #48	; (adr r3, 80048b0 <adxl345_convert_float_mpss+0x50>)
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	f7fb fc65 	bl	8000150 <__aeabi_dmul>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4610      	mov	r0, r2
 800488c:	4619      	mov	r1, r3
 800488e:	a30a      	add	r3, pc, #40	; (adr r3, 80048b8 <adxl345_convert_float_mpss+0x58>)
 8004890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004894:	f7fb fc5c 	bl	8000150 <__aeabi_dmul>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4610      	mov	r0, r2
 800489e:	4619      	mov	r1, r3
 80048a0:	f7fb ff3c 	bl	800071c <__aeabi_d2f>
 80048a4:	4603      	mov	r3, r0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80048b4:	3f70624d 	.word	0x3f70624d
 80048b8:	60000000 	.word	0x60000000
 80048bc:	40239eb8 	.word	0x40239eb8

080048c0 <adxl345_init>:
  High-level functions
----------------------------------------------------------------------*/

/* Init the device*/
adxl345_status adxl345_init(adxl345_handle_t* hadxl)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
	/* register callback for check SPI configuration */
	spi_freertos_set_check_config_callback(&(hadxl->spi),
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	495e      	ldr	r1, [pc, #376]	; (8004a44 <adxl345_init+0x184>)
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fd73 	bl	80053b8 <spi_freertos_set_check_config_callback>
		adxl345_spi_check_config);
	
	uint8_t reg;
	adxl345_status ret = ADXL345_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	73fb      	strb	r3, [r7, #15]
	/* set up NSS into inactive state */
	spi_freertos_nss_high(&(hadxl->spi));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 ff80 	bl	80057de <spi_freertos_nss_high>
	
	/* Read Device ID */
	ret = adxl345_read_spi(hadxl, ADXL345_REG_DEVID,
 80048de:	f107 020e 	add.w	r2, r7, #14
 80048e2:	2301      	movs	r3, #1
 80048e4:	2100      	movs	r1, #0
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f962 	bl	8004bb0 <adxl345_read_spi>
 80048ec:	4603      	mov	r3, r0
 80048ee:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <adxl345_init+0x3a>
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	e09f      	b.n	8004a3a <adxl345_init+0x17a>
	if(reg != ADXL345_ID) return ADXL345_NODEV;
 80048fa:	7bbb      	ldrb	r3, [r7, #14]
 80048fc:	2be5      	cmp	r3, #229	; 0xe5
 80048fe:	d001      	beq.n	8004904 <adxl345_init+0x44>
 8004900:	2302      	movs	r3, #2
 8004902:	e09a      	b.n	8004a3a <adxl345_init+0x17a>
	
	/* Disable device operation */
	reg = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi(hadxl, ADXL345_REG_POWER_CTL,
 8004908:	f107 020e 	add.w	r2, r7, #14
 800490c:	2301      	movs	r3, #1
 800490e:	212d      	movs	r1, #45	; 0x2d
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f927 	bl	8004b64 <adxl345_write_spi>
 8004916:	4603      	mov	r3, r0
 8004918:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <adxl345_init+0x64>
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	e08a      	b.n	8004a3a <adxl345_init+0x17a>
	
	/* Clear interrupts */
	reg = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_ENABLE,
 8004928:	f107 020e 	add.w	r2, r7, #14
 800492c:	2301      	movs	r3, #1
 800492e:	212e      	movs	r1, #46	; 0x2e
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f917 	bl	8004b64 <adxl345_write_spi>
 8004936:	4603      	mov	r3, r0
 8004938:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <adxl345_init+0x84>
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	e07a      	b.n	8004a3a <adxl345_init+0x17a>

	/* Write device settings */
	/* Data rate */
	ret = adxl345_write_spi(hadxl, ADXL345_REG_BW_RATE,
		(void *) &(hadxl->settings.data_rate),
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f103 0220 	add.w	r2, r3, #32
	ret = adxl345_write_spi(hadxl, ADXL345_REG_BW_RATE,
 800494a:	2301      	movs	r3, #1
 800494c:	212c      	movs	r1, #44	; 0x2c
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f908 	bl	8004b64 <adxl345_write_spi>
 8004954:	4603      	mov	r3, r0
 8004956:	73fb      	strb	r3, [r7, #15]
		sizeof(hadxl->settings.data_rate));
	if(ret != ADXL345_OK) return ret;
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <adxl345_init+0xa2>
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	e06b      	b.n	8004a3a <adxl345_init+0x17a>
	
	/* Data format */
	reg = 	hadxl->settings.meas_range | hadxl->settings.align |
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800496e:	4313      	orrs	r3, r2
 8004970:	b2da      	uxtb	r2, r3
			hadxl->settings.resolution;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
	reg = 	hadxl->settings.meas_range | hadxl->settings.align |
 8004978:	4313      	orrs	r3, r2
 800497a:	b2db      	uxtb	r3, r3
 800497c:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi(hadxl, ADXL345_REG_DATA_FORMAT,
 800497e:	f107 020e 	add.w	r2, r7, #14
 8004982:	2301      	movs	r3, #1
 8004984:	2131      	movs	r1, #49	; 0x31
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f8ec 	bl	8004b64 <adxl345_write_spi>
 800498c:	4603      	mov	r3, r0
 800498e:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <adxl345_init+0xda>
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	e04f      	b.n	8004a3a <adxl345_init+0x17a>
	
	/* Acc offset */
	ret = adxl345_write_spi(hadxl, ADXL345_REG_OFSX,
		(void *) &(hadxl->settings.offset),
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f103 0224 	add.w	r2, r3, #36	; 0x24
	ret = adxl345_write_spi(hadxl, ADXL345_REG_OFSX,
 80049a0:	2303      	movs	r3, #3
 80049a2:	211e      	movs	r1, #30
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f8dd 	bl	8004b64 <adxl345_write_spi>
 80049aa:	4603      	mov	r3, r0
 80049ac:	73fb      	strb	r3, [r7, #15]
		sizeof(hadxl->settings.offset));
	if(ret != ADXL345_OK) return ret;
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <adxl345_init+0xf8>
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	e040      	b.n	8004a3a <adxl345_init+0x17a>
	
	/* FIFO */
	reg = 	hadxl->settings.fifo_mode | hadxl->settings.fifo_trigger |
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80049c4:	4313      	orrs	r3, r2
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	b25a      	sxtb	r2, r3
		(hadxl->settings.fifo_watermark&ADXL345_FIFO_CTL_SAMPLES_MASK);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80049d0:	b25b      	sxtb	r3, r3
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	b25b      	sxtb	r3, r3
	reg = 	hadxl->settings.fifo_mode | hadxl->settings.fifo_trigger |
 80049d8:	4313      	orrs	r3, r2
 80049da:	b25b      	sxtb	r3, r3
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi(hadxl, ADXL345_REG_FIFO_CTL,
 80049e0:	f107 020e 	add.w	r2, r7, #14
 80049e4:	2301      	movs	r3, #1
 80049e6:	2138      	movs	r1, #56	; 0x38
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f8bb 	bl	8004b64 <adxl345_write_spi>
 80049ee:	4603      	mov	r3, r0
 80049f0:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <adxl345_init+0x13c>
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	e01e      	b.n	8004a3a <adxl345_init+0x17a>
	
	/* Interrupts */
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_MAP,
		(void *) &(hadxl->settings.map_to_int2),
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f103 0228 	add.w	r2, r3, #40	; 0x28
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_MAP,
 8004a02:	2301      	movs	r3, #1
 8004a04:	212f      	movs	r1, #47	; 0x2f
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f8ac 	bl	8004b64 <adxl345_write_spi>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	73fb      	strb	r3, [r7, #15]
		sizeof(hadxl->settings.map_to_int2));
	if(ret != ADXL345_OK) return ret;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <adxl345_init+0x15a>
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
 8004a18:	e00f      	b.n	8004a3a <adxl345_init+0x17a>
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_ENABLE,
		(void *) &(hadxl->settings.int_en),
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f103 0227 	add.w	r2, r3, #39	; 0x27
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_ENABLE,
 8004a20:	2301      	movs	r3, #1
 8004a22:	212e      	movs	r1, #46	; 0x2e
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f89d 	bl	8004b64 <adxl345_write_spi>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	73fb      	strb	r3, [r7, #15]
		sizeof(hadxl->settings.int_en));
	if(ret != ADXL345_OK) return ret;
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <adxl345_init+0x178>
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	e000      	b.n	8004a3a <adxl345_init+0x17a>
	
	return ret;
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	08004c81 	.word	0x08004c81

08004a48 <adxl345_start>:
		offset, sizeof(adxl345_acc_offset_t));
}

/* Start acceleration measurements */
adxl345_status adxl345_start(adxl345_handle_t* hadxl)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
	uint8_t data;
	adxl345_status ret = ADXL345_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	73fb      	strb	r3, [r7, #15]
	ret = adxl345_read_spi_dma(hadxl, ADXL345_REG_POWER_CTL,
 8004a54:	f107 020e 	add.w	r2, r7, #14
 8004a58:	2301      	movs	r3, #1
 8004a5a:	212d      	movs	r1, #45	; 0x2d
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f8ee 	bl	8004c3e <adxl345_read_spi_dma>
 8004a62:	4603      	mov	r3, r0
 8004a64:	73fb      	strb	r3, [r7, #15]
							&data, sizeof(data));
	if(ret != ADXL345_OK) return ret;
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <adxl345_start+0x28>
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	e00e      	b.n	8004a8e <adxl345_start+0x46>
	data |= ADXL345_MEASURE;
 8004a70:	7bbb      	ldrb	r3, [r7, #14]
 8004a72:	f043 0308 	orr.w	r3, r3, #8
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi_dma(hadxl, ADXL345_REG_POWER_CTL,
 8004a7a:	f107 020e 	add.w	r2, r7, #14
 8004a7e:	2301      	movs	r3, #1
 8004a80:	212d      	movs	r1, #45	; 0x2d
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f8b5 	bl	8004bf2 <adxl345_write_spi_dma>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	73fb      	strb	r3, [r7, #15]
							&data, sizeof(data));
	return ret;
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <adxl345_stop>:

/* Stop acceleration measurements */
adxl345_status adxl345_stop(adxl345_handle_t* hadxl)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b084      	sub	sp, #16
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
	uint8_t data;
	adxl345_status ret = ADXL345_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	73fb      	strb	r3, [r7, #15]
	ret = adxl345_read_spi_dma(hadxl, ADXL345_REG_POWER_CTL,
 8004aa2:	f107 020e 	add.w	r2, r7, #14
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	212d      	movs	r1, #45	; 0x2d
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f8c7 	bl	8004c3e <adxl345_read_spi_dma>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	73fb      	strb	r3, [r7, #15]
							&data, sizeof(data));
	if(ret != ADXL345_OK) return ret;
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <adxl345_stop+0x28>
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	e00e      	b.n	8004adc <adxl345_stop+0x46>
	data &= (~ADXL345_MEASURE);
 8004abe:	7bbb      	ldrb	r3, [r7, #14]
 8004ac0:	f023 0308 	bic.w	r3, r3, #8
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi_dma(hadxl, ADXL345_REG_POWER_CTL,
 8004ac8:	f107 020e 	add.w	r2, r7, #14
 8004acc:	2301      	movs	r3, #1
 8004ace:	212d      	movs	r1, #45	; 0x2d
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f88e 	bl	8004bf2 <adxl345_write_spi_dma>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	73fb      	strb	r3, [r7, #15]
							&data, sizeof(data));
	return ret;
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <adxl345_get_data>:

/* Get the acceleration data for all axes */
adxl345_status adxl345_get_data(adxl345_handle_t* hadxl,
	adxl345_acc_data_t* data)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
	return adxl345_read_spi_dma(hadxl, ADXL345_REG_DATAX0,
 8004aee:	2306      	movs	r3, #6
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	2132      	movs	r1, #50	; 0x32
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f8a2 	bl	8004c3e <adxl345_read_spi_dma>
 8004afa:	4603      	mov	r3, r0
		data, sizeof(adxl345_acc_data_t));
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <adxl345_fifo_flush>:

/* Flush internal FIFO */
adxl345_status adxl345_fifo_flush(adxl345_handle_t* hadxl)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
	adxl345_acc_data_t tmp;
	uint8_t sample_cnt = 0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	73fb      	strb	r3, [r7, #15]
	while(adxl345_get_int_src(hadxl) & ADXL345_INT_DATA_READY)
 8004b10:	e00c      	b.n	8004b2c <adxl345_fifo_flush+0x28>
	{
		if(sample_cnt++ > ADXL345_FLUSH_THESHOLD)
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	73fa      	strb	r2, [r7, #15]
 8004b18:	2b40      	cmp	r3, #64	; 0x40
 8004b1a:	d901      	bls.n	8004b20 <adxl345_fifo_flush+0x1c>
			return ADXL345_ERR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e00d      	b.n	8004b3c <adxl345_fifo_flush+0x38>
		adxl345_get_data(hadxl, &tmp);
 8004b20:	f107 0308 	add.w	r3, r7, #8
 8004b24:	4619      	mov	r1, r3
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff ffdc 	bl	8004ae4 <adxl345_get_data>
	while(adxl345_get_int_src(hadxl) & ADXL345_INT_DATA_READY)
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f809 	bl	8004b44 <adxl345_get_int_src>
 8004b32:	4603      	mov	r3, r0
 8004b34:	b25b      	sxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	dbeb      	blt.n	8004b12 <adxl345_fifo_flush+0xe>
	}
	return ADXL345_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <adxl345_get_int_src>:
	return id;
}

/* Read the INT_SOURCE register */
uint8_t adxl345_get_int_src(adxl345_handle_t* hadxl)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	adxl345_read_spi(hadxl, ADXL345_REG_INT_SOURCE,
 8004b4c:	f107 020f 	add.w	r2, r7, #15
 8004b50:	2301      	movs	r3, #1
 8004b52:	2130      	movs	r1, #48	; 0x30
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f82b 	bl	8004bb0 <adxl345_read_spi>
		(void *) &reg, sizeof(reg));
	return reg;
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <adxl345_write_spi>:
----------------------------------------------------------------------*/

/* Write registers through SPI */
adxl345_status adxl345_write_spi(adxl345_handle_t* hadxl,
	uint8_t addr, void* buf, size_t size)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	; 0x28
 8004b68:	af04      	add	r7, sp, #16
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	607a      	str	r2, [r7, #4]
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	460b      	mov	r3, r1
 8004b72:	72fb      	strb	r3, [r7, #11]
	/* Command - write multiple bytes */
	uint8_t cmd = ADXL345_SPI_MB | (addr & ADXL345_SPI_ADDR_MASK);
 8004b74:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b7c:	b25b      	sxtb	r3, r3
 8004b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b82:	b25b      	sxtb	r3, r3
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	75fb      	strb	r3, [r7, #23]
	
	return (adxl345_status) spi_freertos_write(&(hadxl->spi), &cmd, sizeof(cmd),
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		buf, size, hadxl->mutex_timeout, (uint32_t) hadxl->transfer_timeout);
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	6b12      	ldr	r2, [r2, #48]	; 0x30
	return (adxl345_status) spi_freertos_write(&(hadxl->spi), &cmd, sizeof(cmd),
 8004b92:	f107 0117 	add.w	r1, r7, #23
 8004b96:	9202      	str	r2, [sp, #8]
 8004b98:	9301      	str	r3, [sp, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f000 fc16 	bl	80053d2 <spi_freertos_write>
 8004ba6:	4603      	mov	r3, r0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <adxl345_read_spi>:

/* Read registers through SPI */
adxl345_status adxl345_read_spi(adxl345_handle_t* hadxl,
	uint8_t addr, void* buf, size_t size)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	; 0x28
 8004bb4:	af04      	add	r7, sp, #16
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	607a      	str	r2, [r7, #4]
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	72fb      	strb	r3, [r7, #11]
	/* Command - read multiple bytes */
	uint8_t cmd = ADXL345_SPI_READ |
				ADXL345_SPI_MB | (addr&ADXL345_SPI_ADDR_MASK);
 8004bc0:	7afb      	ldrb	r3, [r7, #11]
 8004bc2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004bc6:	b2db      	uxtb	r3, r3
	uint8_t cmd = ADXL345_SPI_READ |
 8004bc8:	75fb      	strb	r3, [r7, #23]
	
	return (adxl345_status) spi_freertos_read(&(hadxl->spi), &cmd, sizeof(cmd),
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		buf, size, hadxl->mutex_timeout, (uint32_t) hadxl->transfer_timeout);
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	6b12      	ldr	r2, [r2, #48]	; 0x30
	return (adxl345_status) spi_freertos_read(&(hadxl->spi), &cmd, sizeof(cmd),
 8004bd4:	f107 0117 	add.w	r1, r7, #23
 8004bd8:	9202      	str	r2, [sp, #8]
 8004bda:	9301      	str	r3, [sp, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f000 fc71 	bl	80054ca <spi_freertos_read>
 8004be8:	4603      	mov	r3, r0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <adxl345_write_spi_dma>:

/* Write registers through SPI using DMA */
adxl345_status adxl345_write_spi_dma(adxl345_handle_t* hadxl,
	uint8_t addr, void* buf, size_t size)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b08a      	sub	sp, #40	; 0x28
 8004bf6:	af04      	add	r7, sp, #16
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	72fb      	strb	r3, [r7, #11]
	/* Command - write multiple bytes */
	uint8_t cmd = ADXL345_SPI_MB | (addr & ADXL345_SPI_ADDR_MASK);
 8004c02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004c06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c0a:	b25b      	sxtb	r3, r3
 8004c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c10:	b25b      	sxtb	r3, r3
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	75fb      	strb	r3, [r7, #23]
	
	return (adxl345_status) spi_freertos_write_dma(&(hadxl->spi),
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c20:	f107 0117 	add.w	r1, r7, #23
 8004c24:	9202      	str	r2, [sp, #8]
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f000 fcc7 	bl	80055c2 <spi_freertos_write_dma>
 8004c34:	4603      	mov	r3, r0
		&cmd, sizeof(cmd), buf, size,
		hadxl->mutex_timeout, hadxl->transfer_timeout);
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <adxl345_read_spi_dma>:

/* Read registers through SPI using DMA */
adxl345_status adxl345_read_spi_dma(adxl345_handle_t* hadxl,
	uint8_t addr, void* buf, size_t size)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b08a      	sub	sp, #40	; 0x28
 8004c42:	af04      	add	r7, sp, #16
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	72fb      	strb	r3, [r7, #11]
	uint8_t cmd = ADXL345_SPI_READ |
				ADXL345_SPI_MB | (addr&ADXL345_SPI_ADDR_MASK);
 8004c4e:	7afb      	ldrb	r3, [r7, #11]
 8004c50:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004c54:	b2db      	uxtb	r3, r3
	uint8_t cmd = ADXL345_SPI_READ |
 8004c56:	75fb      	strb	r3, [r7, #23]
	
	return (adxl345_status) spi_freertos_read_dma(&(hadxl->spi),
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c62:	f107 0117 	add.w	r1, r7, #23
 8004c66:	9202      	str	r2, [sp, #8]
 8004c68:	9301      	str	r3, [sp, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f000 fd30 	bl	80056d6 <spi_freertos_read_dma>
 8004c76:	4603      	mov	r3, r0
		&cmd, sizeof(cmd), buf, size,
		hadxl->mutex_timeout, hadxl->transfer_timeout);
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <adxl345_spi_check_config>:

/* Check and change SPI configuration */
void adxl345_spi_check_config(SPI_HandleTypeDef* hspi)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	/* Check configuration */
	if( (hspi->Init.CLKPhase    != ADXL345_SPI_CPHA)       ||
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d10f      	bne.n	8004cb0 <adxl345_spi_check_config+0x30>
		(hspi->Init.CLKPolarity != ADXL345_SPI_CPOL)       ||
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
	if( (hspi->Init.CLKPhase    != ADXL345_SPI_CPHA)       ||
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d10b      	bne.n	8004cb0 <adxl345_spi_check_config+0x30>
		(hspi->Init.DataSize    != ADXL345_SPI_DATASIZE)   ||
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
		(hspi->Init.CLKPolarity != ADXL345_SPI_CPOL)       ||
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d107      	bne.n	8004cb0 <adxl345_spi_check_config+0x30>
		(hspi->Init.Direction   != ADXL345_SPI_DIRECTION)  ||
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
		(hspi->Init.DataSize    != ADXL345_SPI_DATASIZE)   ||
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d103      	bne.n	8004cb0 <adxl345_spi_check_config+0x30>
		(hspi->Init.FirstBit    != ADXL345_SPI_BIT_ORDER))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
		(hspi->Init.Direction   != ADXL345_SPI_DIRECTION)  ||
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d016      	beq.n	8004cde <adxl345_spi_check_config+0x5e>
	{
		hspi->Init.CLKPhase     = ADXL345_SPI_CPHA;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	615a      	str	r2, [r3, #20]
		hspi->Init.CLKPolarity  = ADXL345_SPI_CPOL;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2202      	movs	r2, #2
 8004cba:	611a      	str	r2, [r3, #16]
		hspi->Init.DataSize     = ADXL345_SPI_DATASIZE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	60da      	str	r2, [r3, #12]
		hspi->Init.Direction    = ADXL345_SPI_DIRECTION;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	609a      	str	r2, [r3, #8]
		hspi->Init.FirstBit     = ADXL345_SPI_BIT_ORDER;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	621a      	str	r2, [r3, #32]
		if (HAL_SPI_Init(hspi) != HAL_OK)
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fd fd08 	bl	80026e4 <HAL_SPI_Init>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <adxl345_spi_check_config+0x5e>
		{
			Error_Handler();
 8004cda:	f7fc f94f 	bl	8000f7c <Error_Handler>
		}
	}
}
 8004cde:	bf00      	nop
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <adxl345_task>:
static void adxl345_int2(uint16_t pin, BaseType_t* pxHigherPriorityTaskWoken);
static osThreadId adxl345_task_id;
static adxl345_task_handle_t* htask;

void adxl345_task(void const * argument)
{	
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	1d3b      	adds	r3, r7, #4
 8004cf2:	6018      	str	r0, [r3, #0]
	htask = (adxl345_task_handle_t *) argument;
 8004cf4:	4a85      	ldr	r2, [pc, #532]	; (8004f0c <adxl345_task+0x224>)
 8004cf6:	1d3b      	adds	r3, r7, #4
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6013      	str	r3, [r2, #0]
	adxl345_power_state_t state = ADXL345_STANDBY;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317

	uint32_t event;
	uint8_t sample_idx = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	f887 3316 	strb.w	r3, [r7, #790]	; 0x316
	uint8_t frame_idx = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f887 3315 	strb.w	r3, [r7, #789]	; 0x315
	uint8_t i = 0;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f887 3314 	strb.w	r3, [r7, #788]	; 0x314
	
	/* Initializing ADXL345 */
	if(adxl345_init(&(htask->hadxl)) != ADXL345_OK)
 8004d14:	4b7d      	ldr	r3, [pc, #500]	; (8004f0c <adxl345_task+0x224>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff fdd1 	bl	80048c0 <adxl345_init>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <adxl345_task+0x40>
		Error_Handler();
 8004d24:	f7fc f92a 	bl	8000f7c <Error_Handler>

	/* Allocating FIFO memory  */
	adxl345_acc_data_t *fifo = pvPortMalloc(htask->fifo_frame_size*
 8004d28:	4b78      	ldr	r3, [pc, #480]	; (8004f0c <adxl345_task+0x224>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d30:	461a      	mov	r2, r3
		htask->fifo_frame_qty*sizeof(adxl345_acc_data_t)), test[128];
 8004d32:	4b76      	ldr	r3, [pc, #472]	; (8004f0c <adxl345_task+0x224>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
	adxl345_acc_data_t *fifo = pvPortMalloc(htask->fifo_frame_size*
 8004d3a:	fb03 f302 	mul.w	r3, r3, r2
 8004d3e:	461a      	mov	r2, r3
 8004d40:	4613      	mov	r3, r2
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	4413      	add	r3, r2
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f003 f8d7 	bl	8007efc <pvPortMalloc>
 8004d4e:	f8c7 0310 	str.w	r0, [r7, #784]	; 0x310
	if(fifo == NULL)
 8004d52:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <adxl345_task+0x76>
		Error_Handler();
 8004d5a:	f7fc f90f 	bl	8000f7c <Error_Handler>
	adxl345_acc_data_t *ptr_to_send = NULL;
 8004d5e:	f107 0308 	add.w	r3, r7, #8
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
	
	/* Flush ADXL345 internal FIFO */
	if(adxl345_fifo_flush(&(htask->hadxl)) != ADXL345_OK)
 8004d66:	4b69      	ldr	r3, [pc, #420]	; (8004f0c <adxl345_task+0x224>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff feca 	bl	8004b04 <adxl345_fifo_flush>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <adxl345_task+0x92>
		Error_Handler();
 8004d76:	f7fc f901 	bl	8000f7c <Error_Handler>
	/* Suspend acc */
	if(adxl345_stop(&(htask->hadxl)) != ADXL345_OK)
 8004d7a:	4b64      	ldr	r3, [pc, #400]	; (8004f0c <adxl345_task+0x224>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff fe89 	bl	8004a96 <adxl345_stop>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <adxl345_task+0xa6>
						Error_Handler();
 8004d8a:	f7fc f8f7 	bl	8000f7c <Error_Handler>
	
	/* Registering interrupt handlers */
	if(exti_freertos_register(htask->hadxl.int1.pin, adxl345_int1) != pdTRUE)
 8004d8e:	4b5f      	ldr	r3, [pc, #380]	; (8004f0c <adxl345_task+0x224>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	8a9b      	ldrh	r3, [r3, #20]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	495e      	ldr	r1, [pc, #376]	; (8004f10 <adxl345_task+0x228>)
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 f9f5 	bl	8005188 <exti_freertos_register>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d001      	beq.n	8004da8 <adxl345_task+0xc0>
		Error_Handler();
 8004da4:	f7fc f8ea 	bl	8000f7c <Error_Handler>
	if(exti_freertos_register(htask->hadxl.int2.pin, adxl345_int2) != pdTRUE)
 8004da8:	4b58      	ldr	r3, [pc, #352]	; (8004f0c <adxl345_task+0x224>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	8b9b      	ldrh	r3, [r3, #28]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	4958      	ldr	r1, [pc, #352]	; (8004f14 <adxl345_task+0x22c>)
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 f9e8 	bl	8005188 <exti_freertos_register>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d001      	beq.n	8004dc2 <adxl345_task+0xda>
		Error_Handler();
 8004dbe:	f7fc f8dd 	bl	8000f7c <Error_Handler>

	/* Notify than init complete */
	xSemaphoreGive(htask->suspend_notify);
 8004dc2:	4b52      	ldr	r3, [pc, #328]	; (8004f0c <adxl345_task+0x224>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004dc8:	2300      	movs	r3, #0
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2100      	movs	r1, #0
 8004dce:	f001 f829 	bl	8005e24 <xQueueGenericSend>

	/* Event loop */
	while(1)
	{
		xTaskNotifyWait(pdFALSE, UINT32_MAX, &event, portMAX_DELAY);
 8004dd2:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 8004dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dda:	f04f 31ff 	mov.w	r1, #4294967295
 8004dde:	2000      	movs	r0, #0
 8004de0:	f002 fc5a 	bl	8007698 <xTaskNotifyWait>

		switch(state)
 8004de4:	f897 3317 	ldrb.w	r3, [r7, #791]	; 0x317
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <adxl345_task+0x10c>
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	f000 812c 	beq.w	800504a <adxl345_task+0x362>
 8004df2:	e145      	b.n	8005080 <adxl345_task+0x398>
		{
		case ADXL345_RUN:
			/* Suspend request */
			if(event & ADXL345_SUSPEND)
 8004df4:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01f      	beq.n	8004e40 <adxl345_task+0x158>
			{
				/* Stop ADXL345 */
				if(adxl345_stop(&(htask->hadxl)) != ADXL345_OK)
 8004e00:	4b42      	ldr	r3, [pc, #264]	; (8004f0c <adxl345_task+0x224>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff fe46 	bl	8004a96 <adxl345_stop>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <adxl345_task+0x12c>
					Error_Handler();
 8004e10:	f7fc f8b4 	bl	8000f7c <Error_Handler>
				/* Flush ADXL345 internal FIFO */
				if(adxl345_fifo_flush(&(htask->hadxl)) != ADXL345_OK)
 8004e14:	4b3d      	ldr	r3, [pc, #244]	; (8004f0c <adxl345_task+0x224>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff fe73 	bl	8004b04 <adxl345_fifo_flush>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <adxl345_task+0x140>
					Error_Handler();
 8004e24:	f7fc f8aa 	bl	8000f7c <Error_Handler>
				xSemaphoreGive(htask->suspend_notify);
 8004e28:	4b38      	ldr	r3, [pc, #224]	; (8004f0c <adxl345_task+0x224>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2200      	movs	r2, #0
 8004e32:	2100      	movs	r1, #0
 8004e34:	f000 fff6 	bl	8005e24 <xQueueGenericSend>
				state = ADXL345_STANDBY;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
				break;
 8004e3e:	e11f      	b.n	8005080 <adxl345_task+0x398>
			}
			/* ADXL345 internal FIFO overflow */
			if(event & ADXL345_EXTI2)
 8004e40:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d049      	beq.n	8004ee0 <adxl345_task+0x1f8>
			{
				if(!adxl345_get_int_src(&(htask->hadxl)) & ADXL345_INT_OVERRUN)
 8004e4c:	4b2f      	ldr	r3, [pc, #188]	; (8004f0c <adxl345_task+0x224>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7ff fe77 	bl	8004b44 <adxl345_get_int_src>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 810a 	beq.w	8005072 <adxl345_task+0x38a>
					break;
				/* Stop ADXL345 */
				if(adxl345_stop(&(htask->hadxl)) != ADXL345_OK)
 8004e5e:	4b2b      	ldr	r3, [pc, #172]	; (8004f0c <adxl345_task+0x224>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff fe17 	bl	8004a96 <adxl345_stop>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <adxl345_task+0x18a>
					Error_Handler();
 8004e6e:	f7fc f885 	bl	8000f7c <Error_Handler>
				/* Flush ADXL345 internal FIFO */
				if(adxl345_fifo_flush(&(htask->hadxl)) != ADXL345_OK)
 8004e72:	4b26      	ldr	r3, [pc, #152]	; (8004f0c <adxl345_task+0x224>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff fe44 	bl	8004b04 <adxl345_fifo_flush>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <adxl345_task+0x19e>
					Error_Handler();
 8004e82:	f7fc f87b 	bl	8000f7c <Error_Handler>
				/* ADXL345 hard fault */
				if(!(event & ADXL345_EXTI1))
 8004e86:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <adxl345_task+0x1be>
					if(adxl345_init(&(htask->hadxl)) != ADXL345_OK)
 8004e92:	4b1e      	ldr	r3, [pc, #120]	; (8004f0c <adxl345_task+0x224>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff fd12 	bl	80048c0 <adxl345_init>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <adxl345_task+0x1be>
						Error_Handler();
 8004ea2:	f7fc f86b 	bl	8000f7c <Error_Handler>
				/* Start ADXL345 again */
				if(adxl345_start(&(htask->hadxl)) != ADXL345_OK)
 8004ea6:	4b19      	ldr	r3, [pc, #100]	; (8004f0c <adxl345_task+0x224>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff fdcc 	bl	8004a48 <adxl345_start>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <adxl345_task+0x1d2>
					Error_Handler();
 8004eb6:	f7fc f861 	bl	8000f7c <Error_Handler>
				if(adxl345_get_int_src(&(htask->hadxl)) & ADXL345_INT_OVERRUN)
 8004eba:	4b14      	ldr	r3, [pc, #80]	; (8004f0c <adxl345_task+0x224>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff fe40 	bl	8004b44 <adxl345_get_int_src>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 80d3 	beq.w	8005076 <adxl345_task+0x38e>
					xTaskNotify(adxl345_task_id, ADXL345_EXTI2, eSetBits);
 8004ed0:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <adxl345_task+0x230>)
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	2102      	movs	r1, #2
 8004eda:	f002 fc3d 	bl	8007758 <xTaskGenericNotify>
				break;
 8004ede:	e0ca      	b.n	8005076 <adxl345_task+0x38e>
			}
			/* ADXL345 internal FIFO watermark is exceeded */
			if(event & ADXL345_EXTI1)
 8004ee0:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 80c6 	beq.w	800507a <adxl345_task+0x392>
			{
				/* Get burst of data from ADXL345 internal FIFO */

				HAL_GPIO_WritePin(htask->hadxl.spi.nss.port, htask->hadxl.spi.nss.pin, GPIO_PIN_RESET);
 8004eee:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <adxl345_task+0x224>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6858      	ldr	r0, [r3, #4]
 8004ef4:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <adxl345_task+0x224>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	891b      	ldrh	r3, [r3, #8]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2200      	movs	r2, #0
 8004efe:	4619      	mov	r1, r3
 8004f00:	f7fc ff76 	bl	8001df0 <HAL_GPIO_WritePin>

				for(i = 0; i < htask->hadxl.settings.fifo_watermark; i++)
 8004f04:	2300      	movs	r3, #0
 8004f06:	f887 3314 	strb.w	r3, [r7, #788]	; 0x314
 8004f0a:	e029      	b.n	8004f60 <adxl345_task+0x278>
 8004f0c:	20000348 	.word	0x20000348
 8004f10:	08005131 	.word	0x08005131
 8004f14:	0800515d 	.word	0x0800515d
 8004f18:	20000344 	.word	0x20000344
					adxl345_get_data(&(htask->hadxl),
 8004f1c:	4b59      	ldr	r3, [pc, #356]	; (8005084 <adxl345_task+0x39c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
						&(fifo[frame_idx*htask->hadxl.settings.fifo_watermark +
 8004f22:	f897 3315 	ldrb.w	r3, [r7, #789]	; 0x315
 8004f26:	4a57      	ldr	r2, [pc, #348]	; (8005084 <adxl345_task+0x39c>)
 8004f28:	6812      	ldr	r2, [r2, #0]
 8004f2a:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8004f2e:	fb02 f203 	mul.w	r2, r2, r3
							sample_idx++]));
 8004f32:	f897 3316 	ldrb.w	r3, [r7, #790]	; 0x316
 8004f36:	1c59      	adds	r1, r3, #1
 8004f38:	f887 1316 	strb.w	r1, [r7, #790]	; 0x316
						&(fifo[frame_idx*htask->hadxl.settings.fifo_watermark +
 8004f3c:	4413      	add	r3, r2
 8004f3e:	461a      	mov	r2, r3
 8004f40:	4613      	mov	r3, r2
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	4413      	add	r3, r2
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	461a      	mov	r2, r3
					adxl345_get_data(&(htask->hadxl),
 8004f4a:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8004f4e:	4413      	add	r3, r2
 8004f50:	4619      	mov	r1, r3
 8004f52:	f7ff fdc7 	bl	8004ae4 <adxl345_get_data>
				for(i = 0; i < htask->hadxl.settings.fifo_watermark; i++)
 8004f56:	f897 3314 	ldrb.w	r3, [r7, #788]	; 0x314
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	f887 3314 	strb.w	r3, [r7, #788]	; 0x314
 8004f60:	4b48      	ldr	r3, [pc, #288]	; (8005084 <adxl345_task+0x39c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004f68:	f897 2314 	ldrb.w	r2, [r7, #788]	; 0x314
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d3d5      	bcc.n	8004f1c <adxl345_task+0x234>

				HAL_GPIO_WritePin(htask->hadxl.spi.nss.port, htask->hadxl.spi.nss.pin, GPIO_PIN_SET);
 8004f70:	4b44      	ldr	r3, [pc, #272]	; (8005084 <adxl345_task+0x39c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6858      	ldr	r0, [r3, #4]
 8004f76:	4b43      	ldr	r3, [pc, #268]	; (8005084 <adxl345_task+0x39c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	891b      	ldrh	r3, [r3, #8]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2201      	movs	r2, #1
 8004f80:	4619      	mov	r1, r3
 8004f82:	f7fc ff35 	bl	8001df0 <HAL_GPIO_WritePin>

				/* Generate interrupt event if FIFO watermark is still exceeded */
				if(adxl345_get_int_src(&(htask->hadxl)) & ADXL345_INT_WATERMARK)
 8004f86:	4b3f      	ldr	r3, [pc, #252]	; (8005084 <adxl345_task+0x39c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff fdda 	bl	8004b44 <adxl345_get_int_src>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d006      	beq.n	8004fa8 <adxl345_task+0x2c0>
					xTaskNotify(adxl345_task_id, ADXL345_EXTI1, eSetBits);
 8004f9a:	4b3b      	ldr	r3, [pc, #236]	; (8005088 <adxl345_task+0x3a0>)
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	f002 fbd8 	bl	8007758 <xTaskGenericNotify>
				/* Send frame pointer to queue if frame is full, switch to next */
				if(sample_idx >= htask->fifo_frame_size)
 8004fa8:	4b36      	ldr	r3, [pc, #216]	; (8005084 <adxl345_task+0x39c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fb0:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d360      	bcc.n	800507a <adxl345_task+0x392>
				{
					sample_idx = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f887 3316 	strb.w	r3, [r7, #790]	; 0x316
					ptr_to_send = &(fifo[frame_idx*htask->hadxl.settings.fifo_watermark]);
 8004fbe:	f897 3315 	ldrb.w	r3, [r7, #789]	; 0x315
 8004fc2:	4a30      	ldr	r2, [pc, #192]	; (8005084 <adxl345_task+0x39c>)
 8004fc4:	6812      	ldr	r2, [r2, #0]
 8004fc6:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8004fca:	fb02 f303 	mul.w	r3, r2, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	4413      	add	r3, r2
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	461a      	mov	r2, r3
 8004fda:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8004fde:	441a      	add	r2, r3
 8004fe0:	f107 0308 	add.w	r3, r7, #8
 8004fe4:	601a      	str	r2, [r3, #0]
					*test=fifo[frame_idx*htask->hadxl.settings.fifo_watermark];
 8004fe6:	f897 3315 	ldrb.w	r3, [r7, #789]	; 0x315
 8004fea:	4a26      	ldr	r2, [pc, #152]	; (8005084 <adxl345_task+0x39c>)
 8004fec:	6812      	ldr	r2, [r2, #0]
 8004fee:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	4413      	add	r3, r2
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	461a      	mov	r2, r3
 8005002:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8005006:	441a      	add	r2, r3
 8005008:	f107 030c 	add.w	r3, r7, #12
 800500c:	6810      	ldr	r0, [r2, #0]
 800500e:	6018      	str	r0, [r3, #0]
 8005010:	8892      	ldrh	r2, [r2, #4]
 8005012:	809a      	strh	r2, [r3, #4]
					xQueueSend(htask->fifo_frame_ptr_queue, &ptr_to_send, 0);
 8005014:	4b1b      	ldr	r3, [pc, #108]	; (8005084 <adxl345_task+0x39c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f8d3 0039 	ldr.w	r0, [r3, #57]	; 0x39
 800501c:	f107 0108 	add.w	r1, r7, #8
 8005020:	2300      	movs	r3, #0
 8005022:	2200      	movs	r2, #0
 8005024:	f000 fefe 	bl	8005e24 <xQueueGenericSend>
					if(++frame_idx >= htask->fifo_frame_qty)
 8005028:	f897 3315 	ldrb.w	r3, [r7, #789]	; 0x315
 800502c:	3301      	adds	r3, #1
 800502e:	f887 3315 	strb.w	r3, [r7, #789]	; 0x315
 8005032:	4b14      	ldr	r3, [pc, #80]	; (8005084 <adxl345_task+0x39c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503a:	f897 2315 	ldrb.w	r2, [r7, #789]	; 0x315
 800503e:	429a      	cmp	r2, r3
 8005040:	d31b      	bcc.n	800507a <adxl345_task+0x392>
						frame_idx = 0;
 8005042:	2300      	movs	r3, #0
 8005044:	f887 3315 	strb.w	r3, [r7, #789]	; 0x315
				}
			}
			break;
 8005048:	e017      	b.n	800507a <adxl345_task+0x392>
		case ADXL345_STANDBY:
			/* Resume request */
			if(event & ADXL345_RESUME)
 800504a:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d013      	beq.n	800507e <adxl345_task+0x396>
			{
				/* Start ADXL345 */
				if(adxl345_start(&(htask->hadxl)) != ADXL345_OK)
 8005056:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <adxl345_task+0x39c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff fcf4 	bl	8004a48 <adxl345_start>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <adxl345_task+0x382>
					Error_Handler();
 8005066:	f7fb ff89 	bl	8000f7c <Error_Handler>
				state = ADXL345_RUN;
 800506a:	2300      	movs	r3, #0
 800506c:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
			}
			break;
 8005070:	e005      	b.n	800507e <adxl345_task+0x396>
					break;
 8005072:	bf00      	nop
 8005074:	e6ad      	b.n	8004dd2 <adxl345_task+0xea>
				break;
 8005076:	bf00      	nop
 8005078:	e6ab      	b.n	8004dd2 <adxl345_task+0xea>
			break;
 800507a:	bf00      	nop
 800507c:	e6a9      	b.n	8004dd2 <adxl345_task+0xea>
			break;
 800507e:	bf00      	nop
		xTaskNotifyWait(pdFALSE, UINT32_MAX, &event, portMAX_DELAY);
 8005080:	e6a7      	b.n	8004dd2 <adxl345_task+0xea>
 8005082:	bf00      	nop
 8005084:	20000348 	.word	0x20000348
 8005088:	20000344 	.word	0x20000344

0800508c <adxl345_task_create>:
}

osThreadId adxl345_task_create(char *name, osPriority priority,
	uint32_t instances, uint32_t stack_size,
	adxl345_task_handle_t* htask)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08c      	sub	sp, #48	; 0x30
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	607a      	str	r2, [r7, #4]
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	460b      	mov	r3, r1
 800509a:	817b      	strh	r3, [r7, #10]
	/* create semaphores, mutexes and queues */
	htask->fifo_frame_ptr_queue = xQueueCreate(htask->fifo_frame_qty,
 800509c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a2:	2200      	movs	r2, #0
 80050a4:	2104      	movs	r1, #4
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fe2c 	bl	8005d04 <xQueueGenericCreate>
 80050ac:	4602      	mov	r2, r0
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b0:	f8c3 2039 	str.w	r2, [r3, #57]	; 0x39
		sizeof(adxl345_acc_data_t*));
	htask->suspend_notify = xSemaphoreCreateBinary();
 80050b4:	2203      	movs	r2, #3
 80050b6:	2100      	movs	r1, #0
 80050b8:	2001      	movs	r0, #1
 80050ba:	f000 fe23 	bl	8005d04 <xQueueGenericCreate>
 80050be:	4602      	mov	r2, r0
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	635a      	str	r2, [r3, #52]	; 0x34
	
	/* create tread */
	osThreadDef_t thread = {
 80050c4:	f107 0314 	add.w	r3, r7, #20
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	605a      	str	r2, [r3, #4]
 80050ce:	609a      	str	r2, [r3, #8]
 80050d0:	60da      	str	r2, [r3, #12]
 80050d2:	611a      	str	r2, [r3, #16]
 80050d4:	615a      	str	r2, [r3, #20]
 80050d6:	619a      	str	r2, [r3, #24]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	4b0b      	ldr	r3, [pc, #44]	; (800510c <adxl345_task_create+0x80>)
 80050de:	61bb      	str	r3, [r7, #24]
 80050e0:	897b      	ldrh	r3, [r7, #10]
 80050e2:	83bb      	strh	r3, [r7, #28]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	623b      	str	r3, [r7, #32]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
		.tpriority	= priority,
		.instances	= instances,
		.stacksize	= stack_size
	};

	adxl345_task_id = osThreadCreate(&thread, (void *) htask);
 80050ec:	f107 0314 	add.w	r3, r7, #20
 80050f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fca2 	bl	8005a3c <osThreadCreate>
 80050f8:	4603      	mov	r3, r0
 80050fa:	4a05      	ldr	r2, [pc, #20]	; (8005110 <adxl345_task_create+0x84>)
 80050fc:	6013      	str	r3, [r2, #0]
	return adxl345_task_id;
 80050fe:	4b04      	ldr	r3, [pc, #16]	; (8005110 <adxl345_task_create+0x84>)
 8005100:	681b      	ldr	r3, [r3, #0]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3730      	adds	r7, #48	; 0x30
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	08004ce9 	.word	0x08004ce9
 8005110:	20000344 	.word	0x20000344

08005114 <adxl345_resume>:
{
	return xSemaphoreTake(htask->suspend_notify, timeout);
}

void adxl345_resume(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
	xTaskNotify(adxl345_task_id, ADXL345_RESUME, eSetBits);
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <adxl345_resume+0x18>)
 800511a:	6818      	ldr	r0, [r3, #0]
 800511c:	2300      	movs	r3, #0
 800511e:	2201      	movs	r2, #1
 8005120:	2108      	movs	r1, #8
 8005122:	f002 fb19 	bl	8007758 <xTaskGenericNotify>
}
 8005126:	bf00      	nop
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000344 	.word	0x20000344

08005130 <adxl345_int1>:

static void adxl345_int1(uint16_t pin, BaseType_t* pxHigherPriorityTaskWoken)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af02      	add	r7, sp, #8
 8005136:	4603      	mov	r3, r0
 8005138:	6039      	str	r1, [r7, #0]
 800513a:	80fb      	strh	r3, [r7, #6]
	xTaskNotifyFromISR(adxl345_task_id, ADXL345_EXTI1, eSetBits,
 800513c:	4b06      	ldr	r3, [pc, #24]	; (8005158 <adxl345_int1+0x28>)
 800513e:	6818      	ldr	r0, [r3, #0]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	2300      	movs	r3, #0
 8005146:	2201      	movs	r2, #1
 8005148:	2101      	movs	r1, #1
 800514a:	f002 fbaf 	bl	80078ac <xTaskGenericNotifyFromISR>
		pxHigherPriorityTaskWoken);
}
 800514e:	bf00      	nop
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20000344 	.word	0x20000344

0800515c <adxl345_int2>:


static void adxl345_int2(uint16_t pin, BaseType_t* pxHigherPriorityTaskWoken)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af02      	add	r7, sp, #8
 8005162:	4603      	mov	r3, r0
 8005164:	6039      	str	r1, [r7, #0]
 8005166:	80fb      	strh	r3, [r7, #6]
	xTaskNotifyFromISR(adxl345_task_id, ADXL345_EXTI2, eSetBits,
 8005168:	4b06      	ldr	r3, [pc, #24]	; (8005184 <adxl345_int2+0x28>)
 800516a:	6818      	ldr	r0, [r3, #0]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	2300      	movs	r3, #0
 8005172:	2201      	movs	r2, #1
 8005174:	2102      	movs	r1, #2
 8005176:	f002 fb99 	bl	80078ac <xTaskGenericNotifyFromISR>
		pxHigherPriorityTaskWoken);
}
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000344 	.word	0x20000344

08005188 <exti_freertos_register>:


/* register handler on EXTI GPIO pin */
BaseType_t exti_freertos_register(uint16_t pin,
	void (*handler)(uint16_t pin, BaseType_t* pxHigherPriorityTaskWoken))
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	6039      	str	r1, [r7, #0]
 8005192:	80fb      	strh	r3, [r7, #6]
	if(exti_freertos_find_item(pin) != NULL)
 8005194:	88fb      	ldrh	r3, [r7, #6]
 8005196:	4618      	mov	r0, r3
 8005198:	f000 f86c 	bl	8005274 <exti_freertos_find_item>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <exti_freertos_register+0x1e>
		return pdFALSE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	e009      	b.n	80051ba <exti_freertos_register+0x32>
	taskENTER_CRITICAL();
 80051a6:	f002 fda9 	bl	8007cfc <vPortEnterCritical>
	exti_freertos_list_append(pin, handler);
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	6839      	ldr	r1, [r7, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 f830 	bl	8005214 <exti_freertos_list_append>
	taskEXIT_CRITICAL();
 80051b4:	f002 fdd2 	bl	8007d5c <vPortExitCritical>
	return pdTRUE;
 80051b8:	2301      	movs	r3, #1
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <HAL_GPIO_EXTI_Callback>:
	taskEXIT_CRITICAL();
}

/* EXTI ISR */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	4603      	mov	r3, r0
 80051cc:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60bb      	str	r3, [r7, #8]
	exti_freertos_list_t *service = exti_freertos_find_item(GPIO_Pin);
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 f84d 	bl	8005274 <exti_freertos_find_item>
 80051da:	60f8      	str	r0, [r7, #12]
	if(service == NULL) return;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d012      	beq.n	8005208 <HAL_GPIO_EXTI_Callback+0x44>
	service->handler(GPIO_Pin, &xHigherPriorityTaskWoken);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f107 0108 	add.w	r1, r7, #8
 80051ea:	88fa      	ldrh	r2, [r7, #6]
 80051ec:	4610      	mov	r0, r2
 80051ee:	4798      	blx	r3
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <HAL_GPIO_EXTI_Callback+0x46>
 80051f6:	4b06      	ldr	r3, [pc, #24]	; (8005210 <HAL_GPIO_EXTI_Callback+0x4c>)
 80051f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	e000      	b.n	800520a <HAL_GPIO_EXTI_Callback+0x46>
	if(service == NULL) return;
 8005208:	bf00      	nop
}
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	e000ed04 	.word	0xe000ed04

08005214 <exti_freertos_list_append>:
static exti_freertos_list_t* exti_freertos_list_begin = NULL;

/* Append the item at the end of list */
static exti_freertos_list_t* exti_freertos_list_append(uint16_t pin,
	void (*handler)(uint16_t pin, BaseType_t* pxHigherPriorityTaskWoken))
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	4603      	mov	r3, r0
 800521c:	6039      	str	r1, [r7, #0]
 800521e:	80fb      	strh	r3, [r7, #6]
	/* creating item */
	exti_freertos_list_t* new_item = (exti_freertos_list_t*)
		pvPortMalloc(sizeof(exti_freertos_list_t));
 8005220:	200c      	movs	r0, #12
 8005222:	f002 fe6b 	bl	8007efc <pvPortMalloc>
 8005226:	60b8      	str	r0, [r7, #8]
	new_item->pin = pin;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	88fa      	ldrh	r2, [r7, #6]
 800522c:	801a      	strh	r2, [r3, #0]
	new_item->handler = handler;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	605a      	str	r2, [r3, #4]
	new_item->next = NULL;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2200      	movs	r2, #0
 8005238:	609a      	str	r2, [r3, #8]
	/* if list is empty, create and return the begin of list */
	if(exti_freertos_list_begin == NULL)
 800523a:	4b0d      	ldr	r3, [pc, #52]	; (8005270 <exti_freertos_list_append+0x5c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d103      	bne.n	800524a <exti_freertos_list_append+0x36>
		exti_freertos_list_begin = new_item;
 8005242:	4a0b      	ldr	r2, [pc, #44]	; (8005270 <exti_freertos_list_append+0x5c>)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	6013      	str	r3, [r2, #0]
 8005248:	e00d      	b.n	8005266 <exti_freertos_list_append+0x52>
	/* else find end of list and append item at the end of list */
	else
	{
		exti_freertos_list_t *item = exti_freertos_list_begin;
 800524a:	4b09      	ldr	r3, [pc, #36]	; (8005270 <exti_freertos_list_append+0x5c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60fb      	str	r3, [r7, #12]
		while(item->next != NULL)
 8005250:	e002      	b.n	8005258 <exti_freertos_list_append+0x44>
			item = item->next;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	60fb      	str	r3, [r7, #12]
		while(item->next != NULL)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1f8      	bne.n	8005252 <exti_freertos_list_append+0x3e>
		item->next = new_item;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	609a      	str	r2, [r3, #8]
	}
	return new_item;
 8005266:	68bb      	ldr	r3, [r7, #8]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	2000034c 	.word	0x2000034c

08005274 <exti_freertos_find_item>:
	return item;
}

/* Find item in list with mached pin */
exti_freertos_list_t* exti_freertos_find_item(uint16_t pin)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	80fb      	strh	r3, [r7, #6]
	exti_freertos_list_t *item = exti_freertos_list_begin;
 800527e:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <exti_freertos_find_item+0x38>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 8005284:	e007      	b.n	8005296 <exti_freertos_find_item+0x22>
	{
		if(item->pin == pin)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	88fa      	ldrh	r2, [r7, #6]
 800528c:	429a      	cmp	r2, r3
 800528e:	d006      	beq.n	800529e <exti_freertos_find_item+0x2a>
			break;
		item = item->next;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1f4      	bne.n	8005286 <exti_freertos_find_item+0x12>
 800529c:	e000      	b.n	80052a0 <exti_freertos_find_item+0x2c>
			break;
 800529e:	bf00      	nop
	}
	return item;
 80052a0:	68fb      	ldr	r3, [r7, #12]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr
 80052ac:	2000034c 	.word	0x2000034c

080052b0 <spi_rtos_list_append>:
/* Root of SPI FreeRTOS list */
static struct spi_rtos_list *spi_rtos_list_begin = NULL;

/* Append the item at the end of SPI FreeRTOS list */
static struct spi_rtos_list* spi_rtos_list_append(spi_freertos_t *spi_rtos)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
	/* if list is empty, create and return the begin of list */
	if(spi_rtos_list_begin == NULL)
 80052b8:	4b19      	ldr	r3, [pc, #100]	; (8005320 <spi_rtos_list_append+0x70>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d110      	bne.n	80052e2 <spi_rtos_list_append+0x32>
	{
		spi_rtos_list_begin = (struct spi_rtos_list*)
			pvPortMalloc(sizeof(struct spi_rtos_list));
 80052c0:	2008      	movs	r0, #8
 80052c2:	f002 fe1b 	bl	8007efc <pvPortMalloc>
 80052c6:	4603      	mov	r3, r0
		spi_rtos_list_begin = (struct spi_rtos_list*)
 80052c8:	4a15      	ldr	r2, [pc, #84]	; (8005320 <spi_rtos_list_append+0x70>)
 80052ca:	6013      	str	r3, [r2, #0]
		spi_rtos_list_begin->spi_rtos = spi_rtos;
 80052cc:	4b14      	ldr	r3, [pc, #80]	; (8005320 <spi_rtos_list_append+0x70>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	601a      	str	r2, [r3, #0]
		spi_rtos_list_begin->next = NULL;
 80052d4:	4b12      	ldr	r3, [pc, #72]	; (8005320 <spi_rtos_list_append+0x70>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2200      	movs	r2, #0
 80052da:	605a      	str	r2, [r3, #4]
		return spi_rtos_list_begin;
 80052dc:	4b10      	ldr	r3, [pc, #64]	; (8005320 <spi_rtos_list_append+0x70>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	e01a      	b.n	8005318 <spi_rtos_list_append+0x68>
	}
	/* else find end of list */
	struct spi_rtos_list *item = spi_rtos_list_begin;
 80052e2:	4b0f      	ldr	r3, [pc, #60]	; (8005320 <spi_rtos_list_append+0x70>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60fb      	str	r3, [r7, #12]
	while(item->next != NULL)
 80052e8:	e002      	b.n	80052f0 <spi_rtos_list_append+0x40>
		item = item->next;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	60fb      	str	r3, [r7, #12]
	while(item->next != NULL)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1f8      	bne.n	80052ea <spi_rtos_list_append+0x3a>
	/* and create and append item at the end of list */
	item->next = (struct spi_rtos_list*)
		pvPortMalloc(sizeof(struct spi_rtos_list));
 80052f8:	2008      	movs	r0, #8
 80052fa:	f002 fdff 	bl	8007efc <pvPortMalloc>
 80052fe:	4602      	mov	r2, r0
	item->next = (struct spi_rtos_list*)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	605a      	str	r2, [r3, #4]
	item->next->spi_rtos = spi_rtos;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	601a      	str	r2, [r3, #0]
	item->next->next = NULL;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	605a      	str	r2, [r3, #4]
	return item->next;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	685b      	ldr	r3, [r3, #4]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	20000350 	.word	0x20000350

08005324 <spi_rtos_list_find_item>:
}

/* Find item in SPI FreeRTOS list with mached SPI_HandleTypeDef */
static struct spi_rtos_list* spi_rtos_list_find_item
	(SPI_HandleTypeDef* hspi)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	struct spi_rtos_list *item = spi_rtos_list_begin;
 800532c:	4b0b      	ldr	r3, [pc, #44]	; (800535c <spi_rtos_list_find_item+0x38>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 8005332:	e008      	b.n	8005346 <spi_rtos_list_find_item+0x22>
	{
		if(item->spi_rtos->hspi == hspi)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	429a      	cmp	r2, r3
 800533e:	d006      	beq.n	800534e <spi_rtos_list_find_item+0x2a>
			break;
		else
			item = item->next;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f3      	bne.n	8005334 <spi_rtos_list_find_item+0x10>
 800534c:	e000      	b.n	8005350 <spi_rtos_list_find_item+0x2c>
			break;
 800534e:	bf00      	nop
	}
	return item;
 8005350:	68fb      	ldr	r3, [r7, #12]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr
 800535c:	20000350 	.word	0x20000350

08005360 <spi_freertos_init>:

/* Initialize SPI with FreeRTOS mutexes and semaphores */
spi_freertos_status spi_freertos_init(spi_freertos_t* spi_rtos)
{	
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
	/* find hspi into list */
	if(spi_rtos_list_find_item(spi_rtos->hspi) != NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff ffd9 	bl	8005324 <spi_rtos_list_find_item>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <spi_freertos_init+0x1c>
		return SPI_FREERTOS_EXIST;
 8005378:	2305      	movs	r3, #5
 800537a:	e019      	b.n	80053b0 <spi_freertos_init+0x50>
	
	/* if hspi not found, create semaphores and mutexes */
	spi_rtos->mutex = xSemaphoreCreateMutex();
 800537c:	2001      	movs	r0, #1
 800537e:	f000 fd38 	bl	8005df2 <xQueueCreateMutex>
 8005382:	4602      	mov	r2, r0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	605a      	str	r2, [r3, #4]
	spi_rtos->tx_complete = xSemaphoreCreateBinary();
 8005388:	2203      	movs	r2, #3
 800538a:	2100      	movs	r1, #0
 800538c:	2001      	movs	r0, #1
 800538e:	f000 fcb9 	bl	8005d04 <xQueueGenericCreate>
 8005392:	4602      	mov	r2, r0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	60da      	str	r2, [r3, #12]
	spi_rtos->rx_complete = xSemaphoreCreateBinary();
 8005398:	2203      	movs	r2, #3
 800539a:	2100      	movs	r1, #0
 800539c:	2001      	movs	r0, #1
 800539e:	f000 fcb1 	bl	8005d04 <xQueueGenericCreate>
 80053a2:	4602      	mov	r2, r0
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	609a      	str	r2, [r3, #8]
	
	/* register spi_freertos_base into list */
	spi_rtos_list_append(spi_rtos);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff ff81 	bl	80052b0 <spi_rtos_list_append>
	return SPI_FREERTOS_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <spi_freertos_set_check_config_callback>:

/* Set callback for check SPI configuration (CPHA, CPOL, rate, etc.)
 * before transaction */
void spi_freertos_set_check_config_callback(spi_freertos_nss_t* spi,
	void (*check_spi_conf_callback)(SPI_HandleTypeDef *hspi))
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
	spi->check_spi_conf_callback = check_spi_conf_callback;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	60da      	str	r2, [r3, #12]
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr

080053d2 <spi_freertos_write>:
/* Write registers through SPI */
spi_freertos_status spi_freertos_write(spi_freertos_nss_t* spi,
	const void* cmd,  size_t cmd_size,
	const void* data, size_t data_size,
	TickType_t mutex_timeout, uint32_t transfer_timeout)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b086      	sub	sp, #24
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
 80053de:	603b      	str	r3, [r7, #0]
	spi_freertos_status ret = SPI_FREERTOS_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef hal_ret;
	/* Take SPI mutex */
	if(xSemaphoreTake(spi->spi_rtos->mutex, mutex_timeout) == pdFALSE)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 ff85 	bl	80062fc <xQueueSemaphoreTake>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d102      	bne.n	80053fe <spi_freertos_write+0x2c>
	{
		ret = SPI_FREERTOS_BUSY;
 80053f8:	2303      	movs	r3, #3
 80053fa:	75fb      	strb	r3, [r7, #23]
		goto exit;
 80053fc:	e060      	b.n	80054c0 <spi_freertos_write+0xee>
	}
	
	/* Check and change SPI configuration if nessessary */
	if(spi->check_spi_conf_callback != NULL)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d006      	beq.n	8005414 <spi_freertos_write+0x42>
		spi->check_spi_conf_callback(spi->spi_rtos->hspi);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	6812      	ldr	r2, [r2, #0]
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	4610      	mov	r0, r2
 8005412:	4798      	blx	r3
	
	/* NSS to low - start of transaction */
	spi_freertos_nss_low(spi);
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f9f7 	bl	8005808 <spi_freertos_nss_low>
	
	/* Command data write from buffer */
	if(cmd_size == 0) goto data_stage;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01d      	beq.n	800545c <spi_freertos_write+0x8a>
	hal_ret = HAL_SPI_Transmit(spi->spi_rtos->hspi,
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	b29a      	uxth	r2, r3
 800542a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	f7fd fa0f 	bl	8002850 <HAL_SPI_Transmit>
 8005432:	4603      	mov	r3, r0
 8005434:	75bb      	strb	r3, [r7, #22]
		(void *) cmd, cmd_size, transfer_timeout);
	switch(hal_ret)
 8005436:	7dbb      	ldrb	r3, [r7, #22]
 8005438:	2b03      	cmp	r3, #3
 800543a:	d00c      	beq.n	8005456 <spi_freertos_write+0x84>
 800543c:	2b03      	cmp	r3, #3
 800543e:	dc0f      	bgt.n	8005460 <spi_freertos_write+0x8e>
 8005440:	2b01      	cmp	r3, #1
 8005442:	d002      	beq.n	800544a <spi_freertos_write+0x78>
 8005444:	2b02      	cmp	r3, #2
 8005446:	d003      	beq.n	8005450 <spi_freertos_write+0x7e>
			goto end_of_transaction;
		case HAL_TIMEOUT:
			ret = SPI_FREERTOS_TIMEOUT;
			goto end_of_transaction;
		default:
			break;
 8005448:	e00a      	b.n	8005460 <spi_freertos_write+0x8e>
			ret = SPI_FREERTOS_ERR;
 800544a:	2301      	movs	r3, #1
 800544c:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 800544e:	e02c      	b.n	80054aa <spi_freertos_write+0xd8>
			ret = SPI_FREERTOS_BUSY;
 8005450:	2303      	movs	r3, #3
 8005452:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 8005454:	e029      	b.n	80054aa <spi_freertos_write+0xd8>
			ret = SPI_FREERTOS_TIMEOUT;
 8005456:	2304      	movs	r3, #4
 8005458:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 800545a:	e026      	b.n	80054aa <spi_freertos_write+0xd8>
	if(cmd_size == 0) goto data_stage;
 800545c:	bf00      	nop
 800545e:	e000      	b.n	8005462 <spi_freertos_write+0x90>
			break;
 8005460:	bf00      	nop
	}
	
	data_stage:
	if(data_size == 0) goto end_of_transaction;
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01d      	beq.n	80054a4 <spi_freertos_write+0xd2>
	
	/* Data write from buffer */
	hal_ret = HAL_SPI_Transmit(spi->spi_rtos->hspi,
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	b29a      	uxth	r2, r3
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	6839      	ldr	r1, [r7, #0]
 8005476:	f7fd f9eb 	bl	8002850 <HAL_SPI_Transmit>
 800547a:	4603      	mov	r3, r0
 800547c:	75bb      	strb	r3, [r7, #22]
		(void *) data, data_size, transfer_timeout);
	switch(hal_ret)
 800547e:	7dbb      	ldrb	r3, [r7, #22]
 8005480:	2b03      	cmp	r3, #3
 8005482:	d00c      	beq.n	800549e <spi_freertos_write+0xcc>
 8005484:	2b03      	cmp	r3, #3
 8005486:	dc0f      	bgt.n	80054a8 <spi_freertos_write+0xd6>
 8005488:	2b01      	cmp	r3, #1
 800548a:	d002      	beq.n	8005492 <spi_freertos_write+0xc0>
 800548c:	2b02      	cmp	r3, #2
 800548e:	d003      	beq.n	8005498 <spi_freertos_write+0xc6>
			goto end_of_transaction;
		case HAL_TIMEOUT:
			ret = SPI_FREERTOS_TIMEOUT;
			goto end_of_transaction;
		default:
			break;
 8005490:	e00a      	b.n	80054a8 <spi_freertos_write+0xd6>
			ret = SPI_FREERTOS_ERR;
 8005492:	2301      	movs	r3, #1
 8005494:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 8005496:	e008      	b.n	80054aa <spi_freertos_write+0xd8>
			ret = SPI_FREERTOS_BUSY;
 8005498:	2303      	movs	r3, #3
 800549a:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 800549c:	e005      	b.n	80054aa <spi_freertos_write+0xd8>
			ret = SPI_FREERTOS_TIMEOUT;
 800549e:	2304      	movs	r3, #4
 80054a0:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 80054a2:	e002      	b.n	80054aa <spi_freertos_write+0xd8>
	if(data_size == 0) goto end_of_transaction;
 80054a4:	bf00      	nop
 80054a6:	e000      	b.n	80054aa <spi_freertos_write+0xd8>
			break;
 80054a8:	bf00      	nop
	}

	end_of_transaction:
	/* NSS to high - end of transaction */
	spi_freertos_nss_high(spi);
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 f997 	bl	80057de <spi_freertos_nss_high>
	
	/* Give back SPI mutex */
	xSemaphoreGive(spi->spi_rtos->mutex);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6858      	ldr	r0, [r3, #4]
 80054b6:	2300      	movs	r3, #0
 80054b8:	2200      	movs	r2, #0
 80054ba:	2100      	movs	r1, #0
 80054bc:	f000 fcb2 	bl	8005e24 <xQueueGenericSend>
	
	exit:
	return ret;
 80054c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <spi_freertos_read>:
/* Read registers through SPI */
spi_freertos_status spi_freertos_read(spi_freertos_nss_t* spi,
	const void* cmd,  size_t cmd_size,
	const void* data, size_t data_size,
	TickType_t mutex_timeout, uint32_t transfer_timeout)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b086      	sub	sp, #24
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	607a      	str	r2, [r7, #4]
 80054d6:	603b      	str	r3, [r7, #0]
	spi_freertos_status ret = SPI_FREERTOS_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef hal_ret;
	/* Take SPI mutex */
	if(xSemaphoreTake(spi->spi_rtos->mutex, mutex_timeout) == pdFALSE)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 ff09 	bl	80062fc <xQueueSemaphoreTake>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d102      	bne.n	80054f6 <spi_freertos_read+0x2c>
	{
		ret = SPI_FREERTOS_BUSY;
 80054f0:	2303      	movs	r3, #3
 80054f2:	75fb      	strb	r3, [r7, #23]
		goto exit;
 80054f4:	e060      	b.n	80055b8 <spi_freertos_read+0xee>
	}
	
	/* Check and change SPI configuration if nessessary */
	if(spi->check_spi_conf_callback != NULL)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d006      	beq.n	800550c <spi_freertos_read+0x42>
		spi->check_spi_conf_callback(spi->spi_rtos->hspi);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	6812      	ldr	r2, [r2, #0]
 8005506:	6812      	ldr	r2, [r2, #0]
 8005508:	4610      	mov	r0, r2
 800550a:	4798      	blx	r3
	
	/* NSS to low - start of transaction */
	spi_freertos_nss_low(spi);
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f97b 	bl	8005808 <spi_freertos_nss_low>
	
	/* Command data write from buffer */
	if(cmd_size == 0) goto data_stage;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01d      	beq.n	8005554 <spi_freertos_read+0x8a>
	hal_ret = HAL_SPI_Transmit(spi->spi_rtos->hspi,
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	b29a      	uxth	r2, r3
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	f7fd f993 	bl	8002850 <HAL_SPI_Transmit>
 800552a:	4603      	mov	r3, r0
 800552c:	75bb      	strb	r3, [r7, #22]
		(void *) cmd, cmd_size, transfer_timeout);
	switch(hal_ret)
 800552e:	7dbb      	ldrb	r3, [r7, #22]
 8005530:	2b03      	cmp	r3, #3
 8005532:	d00c      	beq.n	800554e <spi_freertos_read+0x84>
 8005534:	2b03      	cmp	r3, #3
 8005536:	dc0f      	bgt.n	8005558 <spi_freertos_read+0x8e>
 8005538:	2b01      	cmp	r3, #1
 800553a:	d002      	beq.n	8005542 <spi_freertos_read+0x78>
 800553c:	2b02      	cmp	r3, #2
 800553e:	d003      	beq.n	8005548 <spi_freertos_read+0x7e>
		goto end_of_transaction;
	case HAL_TIMEOUT:
		ret = SPI_FREERTOS_TIMEOUT;
		goto end_of_transaction;
	default:
		break;
 8005540:	e00a      	b.n	8005558 <spi_freertos_read+0x8e>
		ret = SPI_FREERTOS_ERR;
 8005542:	2301      	movs	r3, #1
 8005544:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8005546:	e02c      	b.n	80055a2 <spi_freertos_read+0xd8>
		ret = SPI_FREERTOS_BUSY;
 8005548:	2303      	movs	r3, #3
 800554a:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 800554c:	e029      	b.n	80055a2 <spi_freertos_read+0xd8>
		ret = SPI_FREERTOS_TIMEOUT;
 800554e:	2304      	movs	r3, #4
 8005550:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8005552:	e026      	b.n	80055a2 <spi_freertos_read+0xd8>
	if(cmd_size == 0) goto data_stage;
 8005554:	bf00      	nop
 8005556:	e000      	b.n	800555a <spi_freertos_read+0x90>
		break;
 8005558:	bf00      	nop
	}
	
	data_stage:
	if(data_size == 0) goto end_of_transaction;
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01d      	beq.n	800559c <spi_freertos_read+0xd2>
	
	/* Data read to buffer */
	hal_ret = HAL_SPI_Receive(spi->spi_rtos->hspi,
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	b29a      	uxth	r2, r3
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	f7fd faab 	bl	8002ac8 <HAL_SPI_Receive>
 8005572:	4603      	mov	r3, r0
 8005574:	75bb      	strb	r3, [r7, #22]
		(void *) data, data_size, transfer_timeout);
	switch(hal_ret)
 8005576:	7dbb      	ldrb	r3, [r7, #22]
 8005578:	2b03      	cmp	r3, #3
 800557a:	d00c      	beq.n	8005596 <spi_freertos_read+0xcc>
 800557c:	2b03      	cmp	r3, #3
 800557e:	dc0f      	bgt.n	80055a0 <spi_freertos_read+0xd6>
 8005580:	2b01      	cmp	r3, #1
 8005582:	d002      	beq.n	800558a <spi_freertos_read+0xc0>
 8005584:	2b02      	cmp	r3, #2
 8005586:	d003      	beq.n	8005590 <spi_freertos_read+0xc6>
		goto end_of_transaction;
	case HAL_TIMEOUT:
		ret = SPI_FREERTOS_TIMEOUT;
		goto end_of_transaction;
	default:
		break;
 8005588:	e00a      	b.n	80055a0 <spi_freertos_read+0xd6>
		ret = SPI_FREERTOS_ERR;
 800558a:	2301      	movs	r3, #1
 800558c:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 800558e:	e008      	b.n	80055a2 <spi_freertos_read+0xd8>
		ret = SPI_FREERTOS_BUSY;
 8005590:	2303      	movs	r3, #3
 8005592:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8005594:	e005      	b.n	80055a2 <spi_freertos_read+0xd8>
		ret = SPI_FREERTOS_TIMEOUT;
 8005596:	2304      	movs	r3, #4
 8005598:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 800559a:	e002      	b.n	80055a2 <spi_freertos_read+0xd8>
	if(data_size == 0) goto end_of_transaction;
 800559c:	bf00      	nop
 800559e:	e000      	b.n	80055a2 <spi_freertos_read+0xd8>
		break;
 80055a0:	bf00      	nop
	}

	end_of_transaction:
	/* NSS to high - end of transaction */
	spi_freertos_nss_high(spi);
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 f91b 	bl	80057de <spi_freertos_nss_high>
	
	/* Give back SPI mutex */
	xSemaphoreGive(spi->spi_rtos->mutex);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6858      	ldr	r0, [r3, #4]
 80055ae:	2300      	movs	r3, #0
 80055b0:	2200      	movs	r2, #0
 80055b2:	2100      	movs	r1, #0
 80055b4:	f000 fc36 	bl	8005e24 <xQueueGenericSend>
	
	exit:
	return ret;
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <spi_freertos_write_dma>:
/* Write registers through SPI using DMA */
spi_freertos_status spi_freertos_write_dma(spi_freertos_nss_t* spi,
	const void* cmd,  size_t cmd_size,
	const void* data, size_t data_size,
	TickType_t mutex_timeout, TickType_t transfer_timeout)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b086      	sub	sp, #24
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	607a      	str	r2, [r7, #4]
 80055ce:	603b      	str	r3, [r7, #0]
	spi_freertos_status ret = SPI_FREERTOS_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef hal_ret;
	/* Take SPI mutex */
	if(xSemaphoreTake(spi->spi_rtos->mutex, mutex_timeout) == pdFALSE)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fe8d 	bl	80062fc <xQueueSemaphoreTake>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d102      	bne.n	80055ee <spi_freertos_write_dma+0x2c>
	{
		ret = SPI_FREERTOS_BUSY;
 80055e8:	2303      	movs	r3, #3
 80055ea:	75fb      	strb	r3, [r7, #23]
		goto exit;
 80055ec:	e06e      	b.n	80056cc <spi_freertos_write_dma+0x10a>
	}
	
	/* Check and change SPI configuration if nessessary */
	if(spi->check_spi_conf_callback != NULL)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d006      	beq.n	8005604 <spi_freertos_write_dma+0x42>
		spi->check_spi_conf_callback(spi->spi_rtos->hspi);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	6812      	ldr	r2, [r2, #0]
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	4610      	mov	r0, r2
 8005602:	4798      	blx	r3
	
	/* NSS to low - start of transaction */
	spi_freertos_nss_low(spi);
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 f8ff 	bl	8005808 <spi_freertos_nss_low>
	
	/* Command data DMA write from buffer */
	if(cmd_size == 0) goto data_stage;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d024      	beq.n	800565a <spi_freertos_write_dma+0x98>
	hal_ret = HAL_SPI_Transmit_DMA(spi->spi_rtos->hspi,
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	b292      	uxth	r2, r2
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	4618      	mov	r0, r3
 800561e:	f7fd fd07 	bl	8003030 <HAL_SPI_Transmit_DMA>
 8005622:	4603      	mov	r3, r0
 8005624:	75bb      	strb	r3, [r7, #22]
		(void *) cmd, cmd_size);
	switch(hal_ret)
 8005626:	7dbb      	ldrb	r3, [r7, #22]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d00d      	beq.n	8005648 <spi_freertos_write_dma+0x86>
 800562c:	2b02      	cmp	r3, #2
 800562e:	d00e      	beq.n	800564e <spi_freertos_write_dma+0x8c>
		goto end_of_transaction;
	case HAL_BUSY:
		ret = SPI_FREERTOS_BUSY;
		goto end_of_transaction;
	default:
		break;
 8005630:	bf00      	nop
	}
	
	/* Waiting for transfer complete */
	if(xSemaphoreTake(spi->spi_rtos->tx_complete, transfer_timeout)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fe5e 	bl	80062fc <xQueueSemaphoreTake>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10b      	bne.n	800565e <spi_freertos_write_dma+0x9c>
 8005646:	e005      	b.n	8005654 <spi_freertos_write_dma+0x92>
		ret = SPI_FREERTOS_ERR;
 8005648:	2301      	movs	r3, #1
 800564a:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 800564c:	e033      	b.n	80056b6 <spi_freertos_write_dma+0xf4>
		ret = SPI_FREERTOS_BUSY;
 800564e:	2303      	movs	r3, #3
 8005650:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8005652:	e030      	b.n	80056b6 <spi_freertos_write_dma+0xf4>
		== pdFALSE)
	{
		ret = SPI_FREERTOS_TIMEOUT;
 8005654:	2304      	movs	r3, #4
 8005656:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8005658:	e02d      	b.n	80056b6 <spi_freertos_write_dma+0xf4>
	if(cmd_size == 0) goto data_stage;
 800565a:	bf00      	nop
 800565c:	e000      	b.n	8005660 <spi_freertos_write_dma+0x9e>
	}
	
	data_stage:
 800565e:	bf00      	nop
	if(data_size == 0) goto end_of_transaction;
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d024      	beq.n	80056b0 <spi_freertos_write_dma+0xee>
	
	/* Data DMA write from buffer */
	hal_ret = HAL_SPI_Transmit_DMA(spi->spi_rtos->hspi,
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6a3a      	ldr	r2, [r7, #32]
 800566e:	b292      	uxth	r2, r2
 8005670:	6839      	ldr	r1, [r7, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f7fd fcdc 	bl	8003030 <HAL_SPI_Transmit_DMA>
 8005678:	4603      	mov	r3, r0
 800567a:	75bb      	strb	r3, [r7, #22]
		(void *) data, data_size);
	switch(hal_ret)
 800567c:	7dbb      	ldrb	r3, [r7, #22]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d00d      	beq.n	800569e <spi_freertos_write_dma+0xdc>
 8005682:	2b02      	cmp	r3, #2
 8005684:	d00e      	beq.n	80056a4 <spi_freertos_write_dma+0xe2>
		goto end_of_transaction;
	case HAL_BUSY:
		ret = SPI_FREERTOS_BUSY;
		goto end_of_transaction;
	default:
		break;
 8005686:	bf00      	nop
	}
	
	/* Waiting for transfer complete */
	if(xSemaphoreTake(spi->spi_rtos->tx_complete, transfer_timeout)	== pdFALSE)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fe33 	bl	80062fc <xQueueSemaphoreTake>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10b      	bne.n	80056b4 <spi_freertos_write_dma+0xf2>
 800569c:	e005      	b.n	80056aa <spi_freertos_write_dma+0xe8>
		ret = SPI_FREERTOS_ERR;
 800569e:	2301      	movs	r3, #1
 80056a0:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 80056a2:	e008      	b.n	80056b6 <spi_freertos_write_dma+0xf4>
		ret = SPI_FREERTOS_BUSY;
 80056a4:	2303      	movs	r3, #3
 80056a6:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 80056a8:	e005      	b.n	80056b6 <spi_freertos_write_dma+0xf4>
	{
		ret = SPI_FREERTOS_TIMEOUT;
 80056aa:	2304      	movs	r3, #4
 80056ac:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 80056ae:	e002      	b.n	80056b6 <spi_freertos_write_dma+0xf4>
	if(data_size == 0) goto end_of_transaction;
 80056b0:	bf00      	nop
 80056b2:	e000      	b.n	80056b6 <spi_freertos_write_dma+0xf4>
	}
	
	end_of_transaction:
 80056b4:	bf00      	nop
	/* NSS to high - end of transaction */
	spi_freertos_nss_high(spi);
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 f891 	bl	80057de <spi_freertos_nss_high>
	
	/* Give back SPI mutex */
	xSemaphoreGive(spi->spi_rtos->mutex);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6858      	ldr	r0, [r3, #4]
 80056c2:	2300      	movs	r3, #0
 80056c4:	2200      	movs	r2, #0
 80056c6:	2100      	movs	r1, #0
 80056c8:	f000 fbac 	bl	8005e24 <xQueueGenericSend>
	
	exit:
	return ret;
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <spi_freertos_read_dma>:
/* Read registers through SPI using DMA */
spi_freertos_status spi_freertos_read_dma(spi_freertos_nss_t* spi,
	const void* cmd,  size_t cmd_size,
	const void* data, size_t data_size,
	TickType_t mutex_timeout, TickType_t transfer_timeout)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b086      	sub	sp, #24
 80056da:	af00      	add	r7, sp, #0
 80056dc:	60f8      	str	r0, [r7, #12]
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	607a      	str	r2, [r7, #4]
 80056e2:	603b      	str	r3, [r7, #0]
	spi_freertos_status ret = SPI_FREERTOS_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef hal_ret;
	/* Take SPI mutex */
	if(xSemaphoreTake(spi->spi_rtos->mutex, mutex_timeout) == pdFALSE)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fe03 	bl	80062fc <xQueueSemaphoreTake>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d102      	bne.n	8005702 <spi_freertos_read_dma+0x2c>
	{
		ret = SPI_FREERTOS_BUSY;
 80056fc:	2303      	movs	r3, #3
 80056fe:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8005700:	e068      	b.n	80057d4 <spi_freertos_read_dma+0xfe>
	}
	
	/* Check and change SPI configuration if nessessary */
	if(spi->check_spi_conf_callback != NULL)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d006      	beq.n	8005718 <spi_freertos_read_dma+0x42>
		spi->check_spi_conf_callback(spi->spi_rtos->hspi);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	4610      	mov	r0, r2
 8005716:	4798      	blx	r3
	
	/* NSS to low - start of transaction */
	//spi_freertos_nss_low(spi);
	
	/* Command data DMA write from buffer */
	if(cmd_size == 0) goto data_stage;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d024      	beq.n	8005768 <spi_freertos_read_dma+0x92>
	hal_ret = HAL_SPI_Transmit_DMA(spi->spi_rtos->hspi,
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	b292      	uxth	r2, r2
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	4618      	mov	r0, r3
 800572c:	f7fd fc80 	bl	8003030 <HAL_SPI_Transmit_DMA>
 8005730:	4603      	mov	r3, r0
 8005732:	75bb      	strb	r3, [r7, #22]
		(void *) cmd, cmd_size);
	switch(hal_ret)
 8005734:	7dbb      	ldrb	r3, [r7, #22]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d00d      	beq.n	8005756 <spi_freertos_read_dma+0x80>
 800573a:	2b02      	cmp	r3, #2
 800573c:	d00e      	beq.n	800575c <spi_freertos_read_dma+0x86>
		goto end_of_transaction;
	case HAL_BUSY:
		ret = SPI_FREERTOS_BUSY;
		goto end_of_transaction;
	default:
		break;
 800573e:	bf00      	nop
	}
	
	/* Waiting for transfer complete */
	if(xSemaphoreTake(spi->spi_rtos->tx_complete, transfer_timeout)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fdd7 	bl	80062fc <xQueueSemaphoreTake>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10b      	bne.n	800576c <spi_freertos_read_dma+0x96>
 8005754:	e005      	b.n	8005762 <spi_freertos_read_dma+0x8c>
		ret = SPI_FREERTOS_ERR;
 8005756:	2301      	movs	r3, #1
 8005758:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 800575a:	e033      	b.n	80057c4 <spi_freertos_read_dma+0xee>
		ret = SPI_FREERTOS_BUSY;
 800575c:	2303      	movs	r3, #3
 800575e:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8005760:	e030      	b.n	80057c4 <spi_freertos_read_dma+0xee>
		== pdFALSE)
	{
		ret = SPI_FREERTOS_TIMEOUT;
 8005762:	2304      	movs	r3, #4
 8005764:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8005766:	e02d      	b.n	80057c4 <spi_freertos_read_dma+0xee>
	if(cmd_size == 0) goto data_stage;
 8005768:	bf00      	nop
 800576a:	e000      	b.n	800576e <spi_freertos_read_dma+0x98>
	}
	
	data_stage:
 800576c:	bf00      	nop
	if(data_size == 0) goto end_of_transaction;
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d024      	beq.n	80057be <spi_freertos_read_dma+0xe8>
	
	/* Data DMA read to buffer */
	hal_ret = HAL_SPI_Receive_DMA(spi->spi_rtos->hspi,
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6a3a      	ldr	r2, [r7, #32]
 800577c:	b292      	uxth	r2, r2
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	4618      	mov	r0, r3
 8005782:	f7fd fd0b 	bl	800319c <HAL_SPI_Receive_DMA>
 8005786:	4603      	mov	r3, r0
 8005788:	75bb      	strb	r3, [r7, #22]
		(void *) data, data_size);
	switch(hal_ret)
 800578a:	7dbb      	ldrb	r3, [r7, #22]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d00d      	beq.n	80057ac <spi_freertos_read_dma+0xd6>
 8005790:	2b02      	cmp	r3, #2
 8005792:	d00e      	beq.n	80057b2 <spi_freertos_read_dma+0xdc>
		goto end_of_transaction;
	case HAL_BUSY:
		ret = SPI_FREERTOS_BUSY;
		goto end_of_transaction;
	default:
		break;
 8005794:	bf00      	nop
	}
	
	/* Waiting for transfer complete */
	if(xSemaphoreTake(spi->spi_rtos->rx_complete, transfer_timeout)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fdac 	bl	80062fc <xQueueSemaphoreTake>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10b      	bne.n	80057c2 <spi_freertos_read_dma+0xec>
 80057aa:	e005      	b.n	80057b8 <spi_freertos_read_dma+0xe2>
		ret = SPI_FREERTOS_ERR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 80057b0:	e008      	b.n	80057c4 <spi_freertos_read_dma+0xee>
		ret = SPI_FREERTOS_BUSY;
 80057b2:	2303      	movs	r3, #3
 80057b4:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 80057b6:	e005      	b.n	80057c4 <spi_freertos_read_dma+0xee>
		== pdFALSE)
	{
		ret = SPI_FREERTOS_TIMEOUT;
 80057b8:	2304      	movs	r3, #4
 80057ba:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 80057bc:	e002      	b.n	80057c4 <spi_freertos_read_dma+0xee>
	if(data_size == 0) goto end_of_transaction;
 80057be:	bf00      	nop
 80057c0:	e000      	b.n	80057c4 <spi_freertos_read_dma+0xee>
	}
	
	end_of_transaction:
 80057c2:	bf00      	nop
	/* NSS to high - end of transaction */
	//spi_freertos_nss_high(spi);
	
	/* Give back SPI mutex */
	xSemaphoreGive(spi->spi_rtos->mutex);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6858      	ldr	r0, [r3, #4]
 80057ca:	2300      	movs	r3, #0
 80057cc:	2200      	movs	r2, #0
 80057ce:	2100      	movs	r1, #0
 80057d0:	f000 fb28 	bl	8005e24 <xQueueGenericSend>
	
	exit:
	return ret;
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <spi_freertos_nss_high>:
	return ret;
}

/* Set NSS pin to high */
inline void spi_freertos_nss_high(spi_freertos_nss_t* spi)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b082      	sub	sp, #8
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
	if(spi->nss.port != NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d008      	beq.n	8005800 <spi_freertos_nss_high+0x22>
		HAL_GPIO_WritePin(spi->nss.port, spi->nss.pin, GPIO_PIN_SET);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6858      	ldr	r0, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	891b      	ldrh	r3, [r3, #8]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2201      	movs	r2, #1
 80057fa:	4619      	mov	r1, r3
 80057fc:	f7fc faf8 	bl	8001df0 <HAL_GPIO_WritePin>
}
 8005800:	bf00      	nop
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <spi_freertos_nss_low>:

/* Set NSS pin to low */
inline void spi_freertos_nss_low(spi_freertos_nss_t* spi)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
	if(spi->nss.port != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <spi_freertos_nss_low+0x22>
		HAL_GPIO_WritePin(spi->nss.port, spi->nss.pin, GPIO_PIN_RESET);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6858      	ldr	r0, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	891b      	ldrh	r3, [r3, #8]
 8005820:	b29b      	uxth	r3, r3
 8005822:	2200      	movs	r2, #0
 8005824:	4619      	mov	r1, r3
 8005826:	f7fc fae3 	bl	8001df0 <HAL_GPIO_WritePin>
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
	...

08005834 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi);
*/

/* RX complete */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800583c:	2300      	movs	r3, #0
 800583e:	60bb      	str	r3, [r7, #8]
	struct spi_rtos_list *item = spi_rtos_list_find_item(hspi);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff fd6f 	bl	8005324 <spi_rtos_list_find_item>
 8005846:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d014      	beq.n	8005878 <HAL_SPI_RxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->spi_rtos->rx_complete,
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f107 0208 	add.w	r2, r7, #8
 8005858:	4611      	mov	r1, r2
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fbe0 	bl	8006020 <xQueueGiveFromISR>
		&xHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <HAL_SPI_RxCpltCallback+0x46>
 8005866:	4b06      	ldr	r3, [pc, #24]	; (8005880 <HAL_SPI_RxCpltCallback+0x4c>)
 8005868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	e000      	b.n	800587a <HAL_SPI_RxCpltCallback+0x46>
	if(item == NULL) return;
 8005878:	bf00      	nop
}
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	e000ed04 	.word	0xe000ed04

08005884 <HAL_SPI_TxCpltCallback>:

/* TX complete */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800588c:	2300      	movs	r3, #0
 800588e:	60bb      	str	r3, [r7, #8]
	struct spi_rtos_list *item = spi_rtos_list_find_item(hspi);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff fd47 	bl	8005324 <spi_rtos_list_find_item>
 8005896:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d014      	beq.n	80058c8 <HAL_SPI_TxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->spi_rtos->tx_complete,
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f107 0208 	add.w	r2, r7, #8
 80058a8:	4611      	mov	r1, r2
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fbb8 	bl	8006020 <xQueueGiveFromISR>
		&xHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <HAL_SPI_TxCpltCallback+0x46>
 80058b6:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <HAL_SPI_TxCpltCallback+0x4c>)
 80058b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	e000      	b.n	80058ca <HAL_SPI_TxCpltCallback+0x46>
	if(item == NULL) return;
 80058c8:	bf00      	nop
}
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	e000ed04 	.word	0xe000ed04

080058d4 <HAL_SPI_TxRxCpltCallback>:

/* Full-duplex complete - rx_complete semaphore is used*/
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80058dc:	2300      	movs	r3, #0
 80058de:	60bb      	str	r3, [r7, #8]
	struct spi_rtos_list *item = spi_rtos_list_find_item(hspi);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7ff fd1f 	bl	8005324 <spi_rtos_list_find_item>
 80058e6:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d014      	beq.n	8005918 <HAL_SPI_TxRxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->spi_rtos->rx_complete,
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f107 0208 	add.w	r2, r7, #8
 80058f8:	4611      	mov	r1, r2
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fb90 	bl	8006020 <xQueueGiveFromISR>
		&xHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d009      	beq.n	800591a <HAL_SPI_TxRxCpltCallback+0x46>
 8005906:	4b06      	ldr	r3, [pc, #24]	; (8005920 <HAL_SPI_TxRxCpltCallback+0x4c>)
 8005908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	e000      	b.n	800591a <HAL_SPI_TxRxCpltCallback+0x46>
	if(item == NULL) return;
 8005918:	bf00      	nop
}
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	e000ed04 	.word	0xe000ed04

08005924 <uart_rtos_list_find_item>:
}

/* Find item in SPI FreeRTOS list with mached SPI_HandleTypeDef */
static struct uart_rtos_list* uart_rtos_list_find_item
	(UART_HandleTypeDef* huart)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]

	struct uart_rtos_list *item = uart_rtos_list_begin;
 800592c:	4b0b      	ldr	r3, [pc, #44]	; (800595c <uart_rtos_list_find_item+0x38>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 8005932:	e008      	b.n	8005946 <uart_rtos_list_find_item+0x22>
	{
		if(item->uart_rtos->huart == huart)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	429a      	cmp	r2, r3
 800593e:	d006      	beq.n	800594e <uart_rtos_list_find_item+0x2a>
			break;
		else
			item = item->next;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1f3      	bne.n	8005934 <uart_rtos_list_find_item+0x10>
 800594c:	e000      	b.n	8005950 <uart_rtos_list_find_item+0x2c>
			break;
 800594e:	bf00      	nop
	}
	return item;
 8005950:	68fb      	ldr	r3, [r7, #12]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	bc80      	pop	{r7}
 800595a:	4770      	bx	lr
 800595c:	20000354 	.word	0x20000354

08005960 <HAL_UART_RxCpltCallback>:
	return rtn;
}

/* USART RX complete inperrupt */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005968:	2300      	movs	r3, #0
 800596a:	60bb      	str	r3, [r7, #8]
	struct uart_rtos_list *item = uart_rtos_list_find_item(huart);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff ffd9 	bl	8005924 <uart_rtos_list_find_item>
 8005972:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d014      	beq.n	80059a4 <HAL_UART_RxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->uart_rtos->rx_complete,	&xHigherPriorityTaskWoken);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f107 0208 	add.w	r2, r7, #8
 8005984:	4611      	mov	r1, r2
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fb4a 	bl	8006020 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <HAL_UART_RxCpltCallback+0x46>
 8005992:	4b06      	ldr	r3, [pc, #24]	; (80059ac <HAL_UART_RxCpltCallback+0x4c>)
 8005994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	e000      	b.n	80059a6 <HAL_UART_RxCpltCallback+0x46>
	if(item == NULL) return;
 80059a4:	bf00      	nop
}
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	e000ed04 	.word	0xe000ed04

080059b0 <HAL_UART_TxCpltCallback>:

/* USART TX complete inperrupt */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80059b8:	2300      	movs	r3, #0
 80059ba:	60bb      	str	r3, [r7, #8]
	struct uart_rtos_list *item = uart_rtos_list_find_item(huart);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7ff ffb1 	bl	8005924 <uart_rtos_list_find_item>
 80059c2:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d014      	beq.n	80059f4 <HAL_UART_TxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->uart_rtos->tx_complete,	&xHigherPriorityTaskWoken);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	f107 0208 	add.w	r2, r7, #8
 80059d4:	4611      	mov	r1, r2
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fb22 	bl	8006020 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <HAL_UART_TxCpltCallback+0x46>
 80059e2:	4b06      	ldr	r3, [pc, #24]	; (80059fc <HAL_UART_TxCpltCallback+0x4c>)
 80059e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	e000      	b.n	80059f6 <HAL_UART_TxCpltCallback+0x46>
	if(item == NULL) return;
 80059f4:	bf00      	nop
}
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	e000ed04 	.word	0xe000ed04

08005a00 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a12:	2b84      	cmp	r3, #132	; 0x84
 8005a14:	d005      	beq.n	8005a22 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005a16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	3303      	adds	r3, #3
 8005a20:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005a22:	68fb      	ldr	r3, [r7, #12]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bc80      	pop	{r7}
 8005a2c:	4770      	bx	lr

08005a2e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005a32:	f001 f837 	bl	8006aa4 <vTaskStartScheduler>
  
  return osOK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a3e:	b089      	sub	sp, #36	; 0x24
 8005a40:	af04      	add	r7, sp, #16
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d020      	beq.n	8005a90 <osThreadCreate+0x54>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d01c      	beq.n	8005a90 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685c      	ldr	r4, [r3, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681d      	ldr	r5, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691e      	ldr	r6, [r3, #16]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff ffc9 	bl	8005a00 <makeFreeRtosPriority>
 8005a6e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a78:	9202      	str	r2, [sp, #8]
 8005a7a:	9301      	str	r3, [sp, #4]
 8005a7c:	9100      	str	r1, [sp, #0]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	4632      	mov	r2, r6
 8005a82:	4629      	mov	r1, r5
 8005a84:	4620      	mov	r0, r4
 8005a86:	f000 fe6c 	bl	8006762 <xTaskCreateStatic>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	e01c      	b.n	8005aca <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685c      	ldr	r4, [r3, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a9c:	b29e      	uxth	r6, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7ff ffab 	bl	8005a00 <makeFreeRtosPriority>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	f107 030c 	add.w	r3, r7, #12
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	9200      	str	r2, [sp, #0]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	4632      	mov	r2, r6
 8005ab8:	4629      	mov	r1, r5
 8005aba:	4620      	mov	r0, r4
 8005abc:	f000 fead 	bl	800681a <xTaskCreate>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d001      	beq.n	8005aca <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e000      	b.n	8005acc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005aca:	68fb      	ldr	r3, [r7, #12]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ad4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f103 0208 	add.w	r2, r3, #8
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f103 0208 	add.w	r2, r3, #8
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f103 0208 	add.w	r2, r3, #8
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr

08005b12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bc80      	pop	{r7}
 8005b28:	4770      	bx	lr

08005b2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b085      	sub	sp, #20
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	601a      	str	r2, [r3, #0]
}
 8005b66:	bf00      	nop
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr

08005b70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b86:	d103      	bne.n	8005b90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e00c      	b.n	8005baa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3308      	adds	r3, #8
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	e002      	b.n	8005b9e <vListInsert+0x2e>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d2f6      	bcs.n	8005b98 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	601a      	str	r2, [r3, #0]
}
 8005bd6:	bf00      	nop
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bc80      	pop	{r7}
 8005bde:	4770      	bx	lr

08005be0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6892      	ldr	r2, [r2, #8]
 8005bf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6852      	ldr	r2, [r2, #4]
 8005c00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d103      	bne.n	8005c14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	1e5a      	subs	r2, r3, #1
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bc80      	pop	{r7}
 8005c30:	4770      	bx	lr
	...

08005c34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10a      	bne.n	8005c5e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c5a:	bf00      	nop
 8005c5c:	e7fe      	b.n	8005c5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c5e:	f002 f84d 	bl	8007cfc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	68f9      	ldr	r1, [r7, #12]
 8005c6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c6e:	fb01 f303 	mul.w	r3, r1, r3
 8005c72:	441a      	add	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	68f9      	ldr	r1, [r7, #12]
 8005c92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c94:	fb01 f303 	mul.w	r3, r1, r3
 8005c98:	441a      	add	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	22ff      	movs	r2, #255	; 0xff
 8005ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	22ff      	movs	r2, #255	; 0xff
 8005caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d114      	bne.n	8005cde <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01a      	beq.n	8005cf2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3310      	adds	r3, #16
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f001 f947 	bl	8006f54 <xTaskRemoveFromEventList>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d012      	beq.n	8005cf2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <xQueueGenericReset+0xcc>)
 8005cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	e009      	b.n	8005cf2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3310      	adds	r3, #16
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7ff fef6 	bl	8005ad4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	3324      	adds	r3, #36	; 0x24
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff fef1 	bl	8005ad4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005cf2:	f002 f833 	bl	8007d5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005cf6:	2301      	movs	r3, #1
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	e000ed04 	.word	0xe000ed04

08005d04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b08a      	sub	sp, #40	; 0x28
 8005d08:	af02      	add	r7, sp, #8
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <xQueueGenericCreate+0x2a>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	613b      	str	r3, [r7, #16]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d102      	bne.n	8005d3a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	61fb      	str	r3, [r7, #28]
 8005d38:	e004      	b.n	8005d44 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	fb02 f303 	mul.w	r3, r2, r3
 8005d42:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	3348      	adds	r3, #72	; 0x48
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f002 f8d7 	bl	8007efc <pvPortMalloc>
 8005d4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00f      	beq.n	8005d76 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	3348      	adds	r3, #72	; 0x48
 8005d5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d64:	79fa      	ldrb	r2, [r7, #7]
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	68b9      	ldr	r1, [r7, #8]
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 f805 	bl	8005d80 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005d76:	69bb      	ldr	r3, [r7, #24]
	}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3720      	adds	r7, #32
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d103      	bne.n	8005d9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	e002      	b.n	8005da2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005dae:	2101      	movs	r1, #1
 8005db0:	69b8      	ldr	r0, [r7, #24]
 8005db2:	f7ff ff3f 	bl	8005c34 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005db6:	bf00      	nop
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b082      	sub	sp, #8
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00e      	beq.n	8005dea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005dde:	2300      	movs	r3, #0
 8005de0:	2200      	movs	r2, #0
 8005de2:	2100      	movs	r1, #0
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f81d 	bl	8005e24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b086      	sub	sp, #24
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	4603      	mov	r3, r0
 8005dfa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	2300      	movs	r3, #0
 8005e02:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	461a      	mov	r2, r3
 8005e08:	6939      	ldr	r1, [r7, #16]
 8005e0a:	6978      	ldr	r0, [r7, #20]
 8005e0c:	f7ff ff7a 	bl	8005d04 <xQueueGenericCreate>
 8005e10:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f7ff ffd3 	bl	8005dbe <prvInitialiseMutex>

		return pxNewQueue;
 8005e18:	68fb      	ldr	r3, [r7, #12]
	}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08e      	sub	sp, #56	; 0x38
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e32:	2300      	movs	r3, #0
 8005e34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10a      	bne.n	8005e56 <xQueueGenericSend+0x32>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e52:	bf00      	nop
 8005e54:	e7fe      	b.n	8005e54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d103      	bne.n	8005e64 <xQueueGenericSend+0x40>
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <xQueueGenericSend+0x44>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <xQueueGenericSend+0x46>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10a      	bne.n	8005e84 <xQueueGenericSend+0x60>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d103      	bne.n	8005e92 <xQueueGenericSend+0x6e>
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <xQueueGenericSend+0x72>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e000      	b.n	8005e98 <xQueueGenericSend+0x74>
 8005e96:	2300      	movs	r3, #0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10a      	bne.n	8005eb2 <xQueueGenericSend+0x8e>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	623b      	str	r3, [r7, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005eb2:	f001 fa13 	bl	80072dc <xTaskGetSchedulerState>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d102      	bne.n	8005ec2 <xQueueGenericSend+0x9e>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <xQueueGenericSend+0xa2>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <xQueueGenericSend+0xa4>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <xQueueGenericSend+0xbe>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	61fb      	str	r3, [r7, #28]
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ee2:	f001 ff0b 	bl	8007cfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d302      	bcc.n	8005ef8 <xQueueGenericSend+0xd4>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d129      	bne.n	8005f4c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	68b9      	ldr	r1, [r7, #8]
 8005efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005efe:	f000 fb20 	bl	8006542 <prvCopyDataToQueue>
 8005f02:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d010      	beq.n	8005f2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	3324      	adds	r3, #36	; 0x24
 8005f10:	4618      	mov	r0, r3
 8005f12:	f001 f81f 	bl	8006f54 <xTaskRemoveFromEventList>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d013      	beq.n	8005f44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f1c:	4b3f      	ldr	r3, [pc, #252]	; (800601c <xQueueGenericSend+0x1f8>)
 8005f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	e00a      	b.n	8005f44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d007      	beq.n	8005f44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f34:	4b39      	ldr	r3, [pc, #228]	; (800601c <xQueueGenericSend+0x1f8>)
 8005f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f44:	f001 ff0a 	bl	8007d5c <vPortExitCritical>
				return pdPASS;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e063      	b.n	8006014 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d103      	bne.n	8005f5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f52:	f001 ff03 	bl	8007d5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f56:	2300      	movs	r3, #0
 8005f58:	e05c      	b.n	8006014 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d106      	bne.n	8005f6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f60:	f107 0314 	add.w	r3, r7, #20
 8005f64:	4618      	mov	r0, r3
 8005f66:	f001 f857 	bl	8007018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f6e:	f001 fef5 	bl	8007d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f72:	f000 fe01 	bl	8006b78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f76:	f001 fec1 	bl	8007cfc <vPortEnterCritical>
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f80:	b25b      	sxtb	r3, r3
 8005f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f86:	d103      	bne.n	8005f90 <xQueueGenericSend+0x16c>
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f96:	b25b      	sxtb	r3, r3
 8005f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9c:	d103      	bne.n	8005fa6 <xQueueGenericSend+0x182>
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fa6:	f001 fed9 	bl	8007d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005faa:	1d3a      	adds	r2, r7, #4
 8005fac:	f107 0314 	add.w	r3, r7, #20
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f001 f846 	bl	8007044 <xTaskCheckForTimeOut>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d124      	bne.n	8006008 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005fbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fc0:	f000 fbb7 	bl	8006732 <prvIsQueueFull>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d018      	beq.n	8005ffc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	3310      	adds	r3, #16
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 ff9a 	bl	8006f0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fda:	f000 fb42 	bl	8006662 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005fde:	f000 fdd9 	bl	8006b94 <xTaskResumeAll>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f47f af7c 	bne.w	8005ee2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005fea:	4b0c      	ldr	r3, [pc, #48]	; (800601c <xQueueGenericSend+0x1f8>)
 8005fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	e772      	b.n	8005ee2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ffe:	f000 fb30 	bl	8006662 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006002:	f000 fdc7 	bl	8006b94 <xTaskResumeAll>
 8006006:	e76c      	b.n	8005ee2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800600a:	f000 fb2a 	bl	8006662 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800600e:	f000 fdc1 	bl	8006b94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006012:	2300      	movs	r3, #0
		}
	}
}
 8006014:	4618      	mov	r0, r3
 8006016:	3738      	adds	r7, #56	; 0x38
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	e000ed04 	.word	0xe000ed04

08006020 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08e      	sub	sp, #56	; 0x38
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10a      	bne.n	800604a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	623b      	str	r3, [r7, #32]
}
 8006046:	bf00      	nop
 8006048:	e7fe      	b.n	8006048 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00a      	beq.n	8006068 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	61fb      	str	r3, [r7, #28]
}
 8006064:	bf00      	nop
 8006066:	e7fe      	b.n	8006066 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d103      	bne.n	8006078 <xQueueGiveFromISR+0x58>
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <xQueueGiveFromISR+0x5c>
 8006078:	2301      	movs	r3, #1
 800607a:	e000      	b.n	800607e <xQueueGiveFromISR+0x5e>
 800607c:	2300      	movs	r3, #0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	61bb      	str	r3, [r7, #24]
}
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006098:	f001 fef2 	bl	8007e80 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800609c:	f3ef 8211 	mrs	r2, BASEPRI
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	617a      	str	r2, [r7, #20]
 80060b2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80060b4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060bc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d22b      	bcs.n	8006120 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e2:	d112      	bne.n	800610a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d016      	beq.n	800611a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	3324      	adds	r3, #36	; 0x24
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 ff2f 	bl	8006f54 <xTaskRemoveFromEventList>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00e      	beq.n	800611a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00b      	beq.n	800611a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2201      	movs	r2, #1
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	e007      	b.n	800611a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800610a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800610e:	3301      	adds	r3, #1
 8006110:	b2db      	uxtb	r3, r3
 8006112:	b25a      	sxtb	r2, r3
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800611a:	2301      	movs	r3, #1
 800611c:	637b      	str	r3, [r7, #52]	; 0x34
 800611e:	e001      	b.n	8006124 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006120:	2300      	movs	r3, #0
 8006122:	637b      	str	r3, [r7, #52]	; 0x34
 8006124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006126:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800612e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006132:	4618      	mov	r0, r3
 8006134:	3738      	adds	r7, #56	; 0x38
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08c      	sub	sp, #48	; 0x30
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006148:	2300      	movs	r3, #0
 800614a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10a      	bne.n	800616c <xQueueReceive+0x30>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	623b      	str	r3, [r7, #32]
}
 8006168:	bf00      	nop
 800616a:	e7fe      	b.n	800616a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d103      	bne.n	800617a <xQueueReceive+0x3e>
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <xQueueReceive+0x42>
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <xQueueReceive+0x44>
 800617e:	2300      	movs	r3, #0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <xQueueReceive+0x5e>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	61fb      	str	r3, [r7, #28]
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800619a:	f001 f89f 	bl	80072dc <xTaskGetSchedulerState>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d102      	bne.n	80061aa <xQueueReceive+0x6e>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <xQueueReceive+0x72>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <xQueueReceive+0x74>
 80061ae:	2300      	movs	r3, #0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <xQueueReceive+0x8e>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	61bb      	str	r3, [r7, #24]
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80061ca:	f001 fd97 	bl	8007cfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d01f      	beq.n	800621a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061de:	f000 fa1a 	bl	8006616 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	1e5a      	subs	r2, r3, #1
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00f      	beq.n	8006212 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	3310      	adds	r3, #16
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 feac 	bl	8006f54 <xTaskRemoveFromEventList>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d007      	beq.n	8006212 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006202:	4b3d      	ldr	r3, [pc, #244]	; (80062f8 <xQueueReceive+0x1bc>)
 8006204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006212:	f001 fda3 	bl	8007d5c <vPortExitCritical>
				return pdPASS;
 8006216:	2301      	movs	r3, #1
 8006218:	e069      	b.n	80062ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d103      	bne.n	8006228 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006220:	f001 fd9c 	bl	8007d5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006224:	2300      	movs	r3, #0
 8006226:	e062      	b.n	80062ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d106      	bne.n	800623c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800622e:	f107 0310 	add.w	r3, r7, #16
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fef0 	bl	8007018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006238:	2301      	movs	r3, #1
 800623a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800623c:	f001 fd8e 	bl	8007d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006240:	f000 fc9a 	bl	8006b78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006244:	f001 fd5a 	bl	8007cfc <vPortEnterCritical>
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800624e:	b25b      	sxtb	r3, r3
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006254:	d103      	bne.n	800625e <xQueueReceive+0x122>
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006264:	b25b      	sxtb	r3, r3
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626a:	d103      	bne.n	8006274 <xQueueReceive+0x138>
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006274:	f001 fd72 	bl	8007d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006278:	1d3a      	adds	r2, r7, #4
 800627a:	f107 0310 	add.w	r3, r7, #16
 800627e:	4611      	mov	r1, r2
 8006280:	4618      	mov	r0, r3
 8006282:	f000 fedf 	bl	8007044 <xTaskCheckForTimeOut>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d123      	bne.n	80062d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800628c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800628e:	f000 fa3a 	bl	8006706 <prvIsQueueEmpty>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d017      	beq.n	80062c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	3324      	adds	r3, #36	; 0x24
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	4611      	mov	r1, r2
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fe33 	bl	8006f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062a8:	f000 f9db 	bl	8006662 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062ac:	f000 fc72 	bl	8006b94 <xTaskResumeAll>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d189      	bne.n	80061ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80062b6:	4b10      	ldr	r3, [pc, #64]	; (80062f8 <xQueueReceive+0x1bc>)
 80062b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	e780      	b.n	80061ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ca:	f000 f9ca 	bl	8006662 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062ce:	f000 fc61 	bl	8006b94 <xTaskResumeAll>
 80062d2:	e77a      	b.n	80061ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80062d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062d6:	f000 f9c4 	bl	8006662 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062da:	f000 fc5b 	bl	8006b94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e0:	f000 fa11 	bl	8006706 <prvIsQueueEmpty>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f43f af6f 	beq.w	80061ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3730      	adds	r7, #48	; 0x30
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	e000ed04 	.word	0xe000ed04

080062fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08e      	sub	sp, #56	; 0x38
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006306:	2300      	movs	r3, #0
 8006308:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800630e:	2300      	movs	r3, #0
 8006310:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	623b      	str	r3, [r7, #32]
}
 800632a:	bf00      	nop
 800632c:	e7fe      	b.n	800632c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	61fb      	str	r3, [r7, #28]
}
 8006348:	bf00      	nop
 800634a:	e7fe      	b.n	800634a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800634c:	f000 ffc6 	bl	80072dc <xTaskGetSchedulerState>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d102      	bne.n	800635c <xQueueSemaphoreTake+0x60>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <xQueueSemaphoreTake+0x64>
 800635c:	2301      	movs	r3, #1
 800635e:	e000      	b.n	8006362 <xQueueSemaphoreTake+0x66>
 8006360:	2300      	movs	r3, #0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10a      	bne.n	800637c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	61bb      	str	r3, [r7, #24]
}
 8006378:	bf00      	nop
 800637a:	e7fe      	b.n	800637a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800637c:	f001 fcbe 	bl	8007cfc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006388:	2b00      	cmp	r3, #0
 800638a:	d024      	beq.n	80063d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	1e5a      	subs	r2, r3, #1
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d104      	bne.n	80063a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800639c:	f001 f968 	bl	8007670 <pvTaskIncrementMutexHeldCount>
 80063a0:	4602      	mov	r2, r0
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00f      	beq.n	80063ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b0:	3310      	adds	r3, #16
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fdce 	bl	8006f54 <xTaskRemoveFromEventList>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d007      	beq.n	80063ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063be:	4b54      	ldr	r3, [pc, #336]	; (8006510 <xQueueSemaphoreTake+0x214>)
 80063c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063ce:	f001 fcc5 	bl	8007d5c <vPortExitCritical>
				return pdPASS;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e097      	b.n	8006506 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d111      	bne.n	8006400 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	617b      	str	r3, [r7, #20]
}
 80063f4:	bf00      	nop
 80063f6:	e7fe      	b.n	80063f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80063f8:	f001 fcb0 	bl	8007d5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80063fc:	2300      	movs	r3, #0
 80063fe:	e082      	b.n	8006506 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006402:	2b00      	cmp	r3, #0
 8006404:	d106      	bne.n	8006414 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006406:	f107 030c 	add.w	r3, r7, #12
 800640a:	4618      	mov	r0, r3
 800640c:	f000 fe04 	bl	8007018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006410:	2301      	movs	r3, #1
 8006412:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006414:	f001 fca2 	bl	8007d5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006418:	f000 fbae 	bl	8006b78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800641c:	f001 fc6e 	bl	8007cfc <vPortEnterCritical>
 8006420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006426:	b25b      	sxtb	r3, r3
 8006428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642c:	d103      	bne.n	8006436 <xQueueSemaphoreTake+0x13a>
 800642e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800643c:	b25b      	sxtb	r3, r3
 800643e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006442:	d103      	bne.n	800644c <xQueueSemaphoreTake+0x150>
 8006444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800644c:	f001 fc86 	bl	8007d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006450:	463a      	mov	r2, r7
 8006452:	f107 030c 	add.w	r3, r7, #12
 8006456:	4611      	mov	r1, r2
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fdf3 	bl	8007044 <xTaskCheckForTimeOut>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d132      	bne.n	80064ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006464:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006466:	f000 f94e 	bl	8006706 <prvIsQueueEmpty>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d026      	beq.n	80064be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d109      	bne.n	800648c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006478:	f001 fc40 	bl	8007cfc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	4618      	mov	r0, r3
 8006482:	f000 ff49 	bl	8007318 <xTaskPriorityInherit>
 8006486:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006488:	f001 fc68 	bl	8007d5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648e:	3324      	adds	r3, #36	; 0x24
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	4611      	mov	r1, r2
 8006494:	4618      	mov	r0, r3
 8006496:	f000 fd39 	bl	8006f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800649a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800649c:	f000 f8e1 	bl	8006662 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064a0:	f000 fb78 	bl	8006b94 <xTaskResumeAll>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f47f af68 	bne.w	800637c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80064ac:	4b18      	ldr	r3, [pc, #96]	; (8006510 <xQueueSemaphoreTake+0x214>)
 80064ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	e75e      	b.n	800637c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80064be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064c0:	f000 f8cf 	bl	8006662 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064c4:	f000 fb66 	bl	8006b94 <xTaskResumeAll>
 80064c8:	e758      	b.n	800637c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80064ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064cc:	f000 f8c9 	bl	8006662 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064d0:	f000 fb60 	bl	8006b94 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064d6:	f000 f916 	bl	8006706 <prvIsQueueEmpty>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f43f af4d 	beq.w	800637c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00d      	beq.n	8006504 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80064e8:	f001 fc08 	bl	8007cfc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80064ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064ee:	f000 f811 	bl	8006514 <prvGetDisinheritPriorityAfterTimeout>
 80064f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80064f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064fa:	4618      	mov	r0, r3
 80064fc:	f001 f818 	bl	8007530 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006500:	f001 fc2c 	bl	8007d5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006504:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006506:	4618      	mov	r0, r3
 8006508:	3738      	adds	r7, #56	; 0x38
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	e000ed04 	.word	0xe000ed04

08006514 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	2b00      	cmp	r3, #0
 8006522:	d006      	beq.n	8006532 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f1c3 0307 	rsb	r3, r3, #7
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e001      	b.n	8006536 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006532:	2300      	movs	r3, #0
 8006534:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006536:	68fb      	ldr	r3, [r7, #12]
	}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	bc80      	pop	{r7}
 8006540:	4770      	bx	lr

08006542 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b086      	sub	sp, #24
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006556:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10d      	bne.n	800657c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d14d      	bne.n	8006604 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	4618      	mov	r0, r3
 800656e:	f000 ff59 	bl	8007424 <xTaskPriorityDisinherit>
 8006572:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	605a      	str	r2, [r3, #4]
 800657a:	e043      	b.n	8006604 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d119      	bne.n	80065b6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6898      	ldr	r0, [r3, #8]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	461a      	mov	r2, r3
 800658c:	68b9      	ldr	r1, [r7, #8]
 800658e:	f001 feb3 	bl	80082f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	441a      	add	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d32b      	bcc.n	8006604 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	609a      	str	r2, [r3, #8]
 80065b4:	e026      	b.n	8006604 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	68d8      	ldr	r0, [r3, #12]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	461a      	mov	r2, r3
 80065c0:	68b9      	ldr	r1, [r7, #8]
 80065c2:	f001 fe99 	bl	80082f8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	68da      	ldr	r2, [r3, #12]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	425b      	negs	r3, r3
 80065d0:	441a      	add	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d207      	bcs.n	80065f2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	425b      	negs	r3, r3
 80065ec:	441a      	add	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d105      	bne.n	8006604 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	3b01      	subs	r3, #1
 8006602:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800660c:	697b      	ldr	r3, [r7, #20]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006624:	2b00      	cmp	r3, #0
 8006626:	d018      	beq.n	800665a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68da      	ldr	r2, [r3, #12]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	441a      	add	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	429a      	cmp	r2, r3
 8006640:	d303      	bcc.n	800664a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68d9      	ldr	r1, [r3, #12]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	461a      	mov	r2, r3
 8006654:	6838      	ldr	r0, [r7, #0]
 8006656:	f001 fe4f 	bl	80082f8 <memcpy>
	}
}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800666a:	f001 fb47 	bl	8007cfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006674:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006676:	e011      	b.n	800669c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	2b00      	cmp	r3, #0
 800667e:	d012      	beq.n	80066a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3324      	adds	r3, #36	; 0x24
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fc65 	bl	8006f54 <xTaskRemoveFromEventList>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006690:	f000 fd3a 	bl	8007108 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	3b01      	subs	r3, #1
 8006698:	b2db      	uxtb	r3, r3
 800669a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800669c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	dce9      	bgt.n	8006678 <prvUnlockQueue+0x16>
 80066a4:	e000      	b.n	80066a8 <prvUnlockQueue+0x46>
					break;
 80066a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	22ff      	movs	r2, #255	; 0xff
 80066ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80066b0:	f001 fb54 	bl	8007d5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066b4:	f001 fb22 	bl	8007cfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066c0:	e011      	b.n	80066e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d012      	beq.n	80066f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	3310      	adds	r3, #16
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 fc40 	bl	8006f54 <xTaskRemoveFromEventList>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80066da:	f000 fd15 	bl	8007108 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80066de:	7bbb      	ldrb	r3, [r7, #14]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	dce9      	bgt.n	80066c2 <prvUnlockQueue+0x60>
 80066ee:	e000      	b.n	80066f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80066f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	22ff      	movs	r2, #255	; 0xff
 80066f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80066fa:	f001 fb2f 	bl	8007d5c <vPortExitCritical>
}
 80066fe:	bf00      	nop
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800670e:	f001 faf5 	bl	8007cfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006716:	2b00      	cmp	r3, #0
 8006718:	d102      	bne.n	8006720 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800671a:	2301      	movs	r3, #1
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	e001      	b.n	8006724 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006724:	f001 fb1a 	bl	8007d5c <vPortExitCritical>

	return xReturn;
 8006728:	68fb      	ldr	r3, [r7, #12]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800673a:	f001 fadf 	bl	8007cfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006746:	429a      	cmp	r2, r3
 8006748:	d102      	bne.n	8006750 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800674a:	2301      	movs	r3, #1
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	e001      	b.n	8006754 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006750:	2300      	movs	r3, #0
 8006752:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006754:	f001 fb02 	bl	8007d5c <vPortExitCritical>

	return xReturn;
 8006758:	68fb      	ldr	r3, [r7, #12]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006762:	b580      	push	{r7, lr}
 8006764:	b08e      	sub	sp, #56	; 0x38
 8006766:	af04      	add	r7, sp, #16
 8006768:	60f8      	str	r0, [r7, #12]
 800676a:	60b9      	str	r1, [r7, #8]
 800676c:	607a      	str	r2, [r7, #4]
 800676e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10a      	bne.n	800678c <xTaskCreateStatic+0x2a>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	623b      	str	r3, [r7, #32]
}
 8006788:	bf00      	nop
 800678a:	e7fe      	b.n	800678a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800678c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <xTaskCreateStatic+0x46>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	61fb      	str	r3, [r7, #28]
}
 80067a4:	bf00      	nop
 80067a6:	e7fe      	b.n	80067a6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067a8:	23b4      	movs	r3, #180	; 0xb4
 80067aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	2bb4      	cmp	r3, #180	; 0xb4
 80067b0:	d00a      	beq.n	80067c8 <xTaskCreateStatic+0x66>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	61bb      	str	r3, [r7, #24]
}
 80067c4:	bf00      	nop
 80067c6:	e7fe      	b.n	80067c6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80067c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d01e      	beq.n	800680c <xTaskCreateStatic+0xaa>
 80067ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d01b      	beq.n	800680c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	2202      	movs	r2, #2
 80067e2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067e6:	2300      	movs	r3, #0
 80067e8:	9303      	str	r3, [sp, #12]
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	9302      	str	r3, [sp, #8]
 80067ee:	f107 0314 	add.w	r3, r7, #20
 80067f2:	9301      	str	r3, [sp, #4]
 80067f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 f850 	bl	80068a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006804:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006806:	f000 f8e3 	bl	80069d0 <prvAddNewTaskToReadyList>
 800680a:	e001      	b.n	8006810 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800680c:	2300      	movs	r3, #0
 800680e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006810:	697b      	ldr	r3, [r7, #20]
	}
 8006812:	4618      	mov	r0, r3
 8006814:	3728      	adds	r7, #40	; 0x28
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800681a:	b580      	push	{r7, lr}
 800681c:	b08c      	sub	sp, #48	; 0x30
 800681e:	af04      	add	r7, sp, #16
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	603b      	str	r3, [r7, #0]
 8006826:	4613      	mov	r3, r2
 8006828:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4618      	mov	r0, r3
 8006830:	f001 fb64 	bl	8007efc <pvPortMalloc>
 8006834:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00e      	beq.n	800685a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800683c:	20b4      	movs	r0, #180	; 0xb4
 800683e:	f001 fb5d 	bl	8007efc <pvPortMalloc>
 8006842:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	631a      	str	r2, [r3, #48]	; 0x30
 8006850:	e005      	b.n	800685e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006852:	6978      	ldr	r0, [r7, #20]
 8006854:	f001 fc16 	bl	8008084 <vPortFree>
 8006858:	e001      	b.n	800685e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800685a:	2300      	movs	r3, #0
 800685c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d017      	beq.n	8006894 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800686c:	88fa      	ldrh	r2, [r7, #6]
 800686e:	2300      	movs	r3, #0
 8006870:	9303      	str	r3, [sp, #12]
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	9302      	str	r3, [sp, #8]
 8006876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006878:	9301      	str	r3, [sp, #4]
 800687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	68b9      	ldr	r1, [r7, #8]
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 f80e 	bl	80068a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006888:	69f8      	ldr	r0, [r7, #28]
 800688a:	f000 f8a1 	bl	80069d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800688e:	2301      	movs	r3, #1
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	e002      	b.n	800689a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006894:	f04f 33ff 	mov.w	r3, #4294967295
 8006898:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800689a:	69bb      	ldr	r3, [r7, #24]
	}
 800689c:	4618      	mov	r0, r3
 800689e:	3720      	adds	r7, #32
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80068bc:	3b01      	subs	r3, #1
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	f023 0307 	bic.w	r3, r3, #7
 80068ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	f003 0307 	and.w	r3, r3, #7
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <prvInitialiseNewTask+0x48>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	617b      	str	r3, [r7, #20]
}
 80068e8:	bf00      	nop
 80068ea:	e7fe      	b.n	80068ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068ec:	2300      	movs	r3, #0
 80068ee:	61fb      	str	r3, [r7, #28]
 80068f0:	e012      	b.n	8006918 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	4413      	add	r3, r2
 80068f8:	7819      	ldrb	r1, [r3, #0]
 80068fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	4413      	add	r3, r2
 8006900:	3334      	adds	r3, #52	; 0x34
 8006902:	460a      	mov	r2, r1
 8006904:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	4413      	add	r3, r2
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d006      	beq.n	8006920 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	3301      	adds	r3, #1
 8006916:	61fb      	str	r3, [r7, #28]
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	2b0f      	cmp	r3, #15
 800691c:	d9e9      	bls.n	80068f2 <prvInitialiseNewTask+0x4e>
 800691e:	e000      	b.n	8006922 <prvInitialiseNewTask+0x7e>
		{
			break;
 8006920:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	2b06      	cmp	r3, #6
 800692e:	d901      	bls.n	8006934 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006930:	2306      	movs	r3, #6
 8006932:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006938:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800693e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006942:	2200      	movs	r2, #0
 8006944:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	3304      	adds	r3, #4
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff f8e1 	bl	8005b12 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	3318      	adds	r3, #24
 8006954:	4618      	mov	r0, r3
 8006956:	f7ff f8dc 	bl	8005b12 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	f1c3 0207 	rsb	r2, r3, #7
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800696e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	2200      	movs	r2, #0
 8006974:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	2200      	movs	r2, #0
 800697c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006982:	334c      	adds	r3, #76	; 0x4c
 8006984:	2260      	movs	r2, #96	; 0x60
 8006986:	2100      	movs	r1, #0
 8006988:	4618      	mov	r0, r3
 800698a:	f001 fcc3 	bl	8008314 <memset>
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	4a0c      	ldr	r2, [pc, #48]	; (80069c4 <prvInitialiseNewTask+0x120>)
 8006992:	651a      	str	r2, [r3, #80]	; 0x50
 8006994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006996:	4a0c      	ldr	r2, [pc, #48]	; (80069c8 <prvInitialiseNewTask+0x124>)
 8006998:	655a      	str	r2, [r3, #84]	; 0x54
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	4a0b      	ldr	r2, [pc, #44]	; (80069cc <prvInitialiseNewTask+0x128>)
 800699e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	68f9      	ldr	r1, [r7, #12]
 80069a4:	69b8      	ldr	r0, [r7, #24]
 80069a6:	f001 f8b7 	bl	8007b18 <pxPortInitialiseStack>
 80069aa:	4602      	mov	r2, r0
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80069b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80069b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069bc:	bf00      	nop
 80069be:	3720      	adds	r7, #32
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	08008568 	.word	0x08008568
 80069c8:	08008588 	.word	0x08008588
 80069cc:	08008548 	.word	0x08008548

080069d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80069d8:	f001 f990 	bl	8007cfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069dc:	4b2a      	ldr	r3, [pc, #168]	; (8006a88 <prvAddNewTaskToReadyList+0xb8>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3301      	adds	r3, #1
 80069e2:	4a29      	ldr	r2, [pc, #164]	; (8006a88 <prvAddNewTaskToReadyList+0xb8>)
 80069e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80069e6:	4b29      	ldr	r3, [pc, #164]	; (8006a8c <prvAddNewTaskToReadyList+0xbc>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d109      	bne.n	8006a02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80069ee:	4a27      	ldr	r2, [pc, #156]	; (8006a8c <prvAddNewTaskToReadyList+0xbc>)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069f4:	4b24      	ldr	r3, [pc, #144]	; (8006a88 <prvAddNewTaskToReadyList+0xb8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d110      	bne.n	8006a1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069fc:	f000 fba8 	bl	8007150 <prvInitialiseTaskLists>
 8006a00:	e00d      	b.n	8006a1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a02:	4b23      	ldr	r3, [pc, #140]	; (8006a90 <prvAddNewTaskToReadyList+0xc0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d109      	bne.n	8006a1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a0a:	4b20      	ldr	r3, [pc, #128]	; (8006a8c <prvAddNewTaskToReadyList+0xbc>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d802      	bhi.n	8006a1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a18:	4a1c      	ldr	r2, [pc, #112]	; (8006a8c <prvAddNewTaskToReadyList+0xbc>)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a1e:	4b1d      	ldr	r3, [pc, #116]	; (8006a94 <prvAddNewTaskToReadyList+0xc4>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3301      	adds	r3, #1
 8006a24:	4a1b      	ldr	r2, [pc, #108]	; (8006a94 <prvAddNewTaskToReadyList+0xc4>)
 8006a26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	409a      	lsls	r2, r3
 8006a30:	4b19      	ldr	r3, [pc, #100]	; (8006a98 <prvAddNewTaskToReadyList+0xc8>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	4a18      	ldr	r2, [pc, #96]	; (8006a98 <prvAddNewTaskToReadyList+0xc8>)
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3e:	4613      	mov	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4a15      	ldr	r2, [pc, #84]	; (8006a9c <prvAddNewTaskToReadyList+0xcc>)
 8006a48:	441a      	add	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4610      	mov	r0, r2
 8006a52:	f7ff f86a 	bl	8005b2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a56:	f001 f981 	bl	8007d5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	; (8006a90 <prvAddNewTaskToReadyList+0xc0>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00e      	beq.n	8006a80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a62:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <prvAddNewTaskToReadyList+0xbc>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d207      	bcs.n	8006a80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <prvAddNewTaskToReadyList+0xd0>)
 8006a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	20000458 	.word	0x20000458
 8006a8c:	20000358 	.word	0x20000358
 8006a90:	20000464 	.word	0x20000464
 8006a94:	20000474 	.word	0x20000474
 8006a98:	20000460 	.word	0x20000460
 8006a9c:	2000035c 	.word	0x2000035c
 8006aa0:	e000ed04 	.word	0xe000ed04

08006aa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08a      	sub	sp, #40	; 0x28
 8006aa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ab2:	463a      	mov	r2, r7
 8006ab4:	1d39      	adds	r1, r7, #4
 8006ab6:	f107 0308 	add.w	r3, r7, #8
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7f9 ff8c 	bl	80009d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	9202      	str	r2, [sp, #8]
 8006ac8:	9301      	str	r3, [sp, #4]
 8006aca:	2300      	movs	r3, #0
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	460a      	mov	r2, r1
 8006ad2:	4921      	ldr	r1, [pc, #132]	; (8006b58 <vTaskStartScheduler+0xb4>)
 8006ad4:	4821      	ldr	r0, [pc, #132]	; (8006b5c <vTaskStartScheduler+0xb8>)
 8006ad6:	f7ff fe44 	bl	8006762 <xTaskCreateStatic>
 8006ada:	4603      	mov	r3, r0
 8006adc:	4a20      	ldr	r2, [pc, #128]	; (8006b60 <vTaskStartScheduler+0xbc>)
 8006ade:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ae0:	4b1f      	ldr	r3, [pc, #124]	; (8006b60 <vTaskStartScheduler+0xbc>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	617b      	str	r3, [r7, #20]
 8006aec:	e001      	b.n	8006af2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d11b      	bne.n	8006b30 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	613b      	str	r3, [r7, #16]
}
 8006b0a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b0c:	4b15      	ldr	r3, [pc, #84]	; (8006b64 <vTaskStartScheduler+0xc0>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	334c      	adds	r3, #76	; 0x4c
 8006b12:	4a15      	ldr	r2, [pc, #84]	; (8006b68 <vTaskStartScheduler+0xc4>)
 8006b14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b16:	4b15      	ldr	r3, [pc, #84]	; (8006b6c <vTaskStartScheduler+0xc8>)
 8006b18:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b1e:	4b14      	ldr	r3, [pc, #80]	; (8006b70 <vTaskStartScheduler+0xcc>)
 8006b20:	2201      	movs	r2, #1
 8006b22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006b24:	4b13      	ldr	r3, [pc, #76]	; (8006b74 <vTaskStartScheduler+0xd0>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b2a:	f001 f875 	bl	8007c18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b2e:	e00e      	b.n	8006b4e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b36:	d10a      	bne.n	8006b4e <vTaskStartScheduler+0xaa>
	__asm volatile
 8006b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	60fb      	str	r3, [r7, #12]
}
 8006b4a:	bf00      	nop
 8006b4c:	e7fe      	b.n	8006b4c <vTaskStartScheduler+0xa8>
}
 8006b4e:	bf00      	nop
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	08008528 	.word	0x08008528
 8006b5c:	08007121 	.word	0x08007121
 8006b60:	2000047c 	.word	0x2000047c
 8006b64:	20000358 	.word	0x20000358
 8006b68:	20000010 	.word	0x20000010
 8006b6c:	20000478 	.word	0x20000478
 8006b70:	20000464 	.word	0x20000464
 8006b74:	2000045c 	.word	0x2000045c

08006b78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006b7c:	4b04      	ldr	r3, [pc, #16]	; (8006b90 <vTaskSuspendAll+0x18>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3301      	adds	r3, #1
 8006b82:	4a03      	ldr	r2, [pc, #12]	; (8006b90 <vTaskSuspendAll+0x18>)
 8006b84:	6013      	str	r3, [r2, #0]
}
 8006b86:	bf00      	nop
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	20000480 	.word	0x20000480

08006b94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ba2:	4b41      	ldr	r3, [pc, #260]	; (8006ca8 <xTaskResumeAll+0x114>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10a      	bne.n	8006bc0 <xTaskResumeAll+0x2c>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	603b      	str	r3, [r7, #0]
}
 8006bbc:	bf00      	nop
 8006bbe:	e7fe      	b.n	8006bbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bc0:	f001 f89c 	bl	8007cfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bc4:	4b38      	ldr	r3, [pc, #224]	; (8006ca8 <xTaskResumeAll+0x114>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	4a37      	ldr	r2, [pc, #220]	; (8006ca8 <xTaskResumeAll+0x114>)
 8006bcc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bce:	4b36      	ldr	r3, [pc, #216]	; (8006ca8 <xTaskResumeAll+0x114>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d161      	bne.n	8006c9a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006bd6:	4b35      	ldr	r3, [pc, #212]	; (8006cac <xTaskResumeAll+0x118>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d05d      	beq.n	8006c9a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bde:	e02e      	b.n	8006c3e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006be0:	4b33      	ldr	r3, [pc, #204]	; (8006cb0 <xTaskResumeAll+0x11c>)
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3318      	adds	r3, #24
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7fe fff7 	bl	8005be0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fe fff2 	bl	8005be0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	2201      	movs	r2, #1
 8006c02:	409a      	lsls	r2, r3
 8006c04:	4b2b      	ldr	r3, [pc, #172]	; (8006cb4 <xTaskResumeAll+0x120>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	4a2a      	ldr	r2, [pc, #168]	; (8006cb4 <xTaskResumeAll+0x120>)
 8006c0c:	6013      	str	r3, [r2, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4a27      	ldr	r2, [pc, #156]	; (8006cb8 <xTaskResumeAll+0x124>)
 8006c1c:	441a      	add	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3304      	adds	r3, #4
 8006c22:	4619      	mov	r1, r3
 8006c24:	4610      	mov	r0, r2
 8006c26:	f7fe ff80 	bl	8005b2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c2e:	4b23      	ldr	r3, [pc, #140]	; (8006cbc <xTaskResumeAll+0x128>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d302      	bcc.n	8006c3e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006c38:	4b21      	ldr	r3, [pc, #132]	; (8006cc0 <xTaskResumeAll+0x12c>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c3e:	4b1c      	ldr	r3, [pc, #112]	; (8006cb0 <xTaskResumeAll+0x11c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1cc      	bne.n	8006be0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c4c:	f000 fb22 	bl	8007294 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006c50:	4b1c      	ldr	r3, [pc, #112]	; (8006cc4 <xTaskResumeAll+0x130>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d010      	beq.n	8006c7e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c5c:	f000 f836 	bl	8006ccc <xTaskIncrementTick>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006c66:	4b16      	ldr	r3, [pc, #88]	; (8006cc0 <xTaskResumeAll+0x12c>)
 8006c68:	2201      	movs	r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1f1      	bne.n	8006c5c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006c78:	4b12      	ldr	r3, [pc, #72]	; (8006cc4 <xTaskResumeAll+0x130>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c7e:	4b10      	ldr	r3, [pc, #64]	; (8006cc0 <xTaskResumeAll+0x12c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c86:	2301      	movs	r3, #1
 8006c88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c8a:	4b0f      	ldr	r3, [pc, #60]	; (8006cc8 <xTaskResumeAll+0x134>)
 8006c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c9a:	f001 f85f 	bl	8007d5c <vPortExitCritical>

	return xAlreadyYielded;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	20000480 	.word	0x20000480
 8006cac:	20000458 	.word	0x20000458
 8006cb0:	20000418 	.word	0x20000418
 8006cb4:	20000460 	.word	0x20000460
 8006cb8:	2000035c 	.word	0x2000035c
 8006cbc:	20000358 	.word	0x20000358
 8006cc0:	2000046c 	.word	0x2000046c
 8006cc4:	20000468 	.word	0x20000468
 8006cc8:	e000ed04 	.word	0xe000ed04

08006ccc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cd6:	4b51      	ldr	r3, [pc, #324]	; (8006e1c <xTaskIncrementTick+0x150>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f040 808d 	bne.w	8006dfa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ce0:	4b4f      	ldr	r3, [pc, #316]	; (8006e20 <xTaskIncrementTick+0x154>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ce8:	4a4d      	ldr	r2, [pc, #308]	; (8006e20 <xTaskIncrementTick+0x154>)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d120      	bne.n	8006d36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cf4:	4b4b      	ldr	r3, [pc, #300]	; (8006e24 <xTaskIncrementTick+0x158>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <xTaskIncrementTick+0x48>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	603b      	str	r3, [r7, #0]
}
 8006d10:	bf00      	nop
 8006d12:	e7fe      	b.n	8006d12 <xTaskIncrementTick+0x46>
 8006d14:	4b43      	ldr	r3, [pc, #268]	; (8006e24 <xTaskIncrementTick+0x158>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	4b43      	ldr	r3, [pc, #268]	; (8006e28 <xTaskIncrementTick+0x15c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a41      	ldr	r2, [pc, #260]	; (8006e24 <xTaskIncrementTick+0x158>)
 8006d20:	6013      	str	r3, [r2, #0]
 8006d22:	4a41      	ldr	r2, [pc, #260]	; (8006e28 <xTaskIncrementTick+0x15c>)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6013      	str	r3, [r2, #0]
 8006d28:	4b40      	ldr	r3, [pc, #256]	; (8006e2c <xTaskIncrementTick+0x160>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	4a3f      	ldr	r2, [pc, #252]	; (8006e2c <xTaskIncrementTick+0x160>)
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	f000 faaf 	bl	8007294 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d36:	4b3e      	ldr	r3, [pc, #248]	; (8006e30 <xTaskIncrementTick+0x164>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d34d      	bcc.n	8006ddc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d40:	4b38      	ldr	r3, [pc, #224]	; (8006e24 <xTaskIncrementTick+0x158>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <xTaskIncrementTick+0x82>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e000      	b.n	8006d50 <xTaskIncrementTick+0x84>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d004      	beq.n	8006d5e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d54:	4b36      	ldr	r3, [pc, #216]	; (8006e30 <xTaskIncrementTick+0x164>)
 8006d56:	f04f 32ff 	mov.w	r2, #4294967295
 8006d5a:	601a      	str	r2, [r3, #0]
					break;
 8006d5c:	e03e      	b.n	8006ddc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d5e:	4b31      	ldr	r3, [pc, #196]	; (8006e24 <xTaskIncrementTick+0x158>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d203      	bcs.n	8006d7e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d76:	4a2e      	ldr	r2, [pc, #184]	; (8006e30 <xTaskIncrementTick+0x164>)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6013      	str	r3, [r2, #0]
						break;
 8006d7c:	e02e      	b.n	8006ddc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	3304      	adds	r3, #4
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fe ff2c 	bl	8005be0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d004      	beq.n	8006d9a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	3318      	adds	r3, #24
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fe ff23 	bl	8005be0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	2201      	movs	r2, #1
 8006da0:	409a      	lsls	r2, r3
 8006da2:	4b24      	ldr	r3, [pc, #144]	; (8006e34 <xTaskIncrementTick+0x168>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	4a22      	ldr	r2, [pc, #136]	; (8006e34 <xTaskIncrementTick+0x168>)
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db0:	4613      	mov	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4a1f      	ldr	r2, [pc, #124]	; (8006e38 <xTaskIncrementTick+0x16c>)
 8006dba:	441a      	add	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	f7fe feb1 	bl	8005b2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dcc:	4b1b      	ldr	r3, [pc, #108]	; (8006e3c <xTaskIncrementTick+0x170>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d3b4      	bcc.n	8006d40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dda:	e7b1      	b.n	8006d40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ddc:	4b17      	ldr	r3, [pc, #92]	; (8006e3c <xTaskIncrementTick+0x170>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de2:	4915      	ldr	r1, [pc, #84]	; (8006e38 <xTaskIncrementTick+0x16c>)
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	440b      	add	r3, r1
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d907      	bls.n	8006e04 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006df4:	2301      	movs	r3, #1
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	e004      	b.n	8006e04 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006dfa:	4b11      	ldr	r3, [pc, #68]	; (8006e40 <xTaskIncrementTick+0x174>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	4a0f      	ldr	r2, [pc, #60]	; (8006e40 <xTaskIncrementTick+0x174>)
 8006e02:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006e04:	4b0f      	ldr	r3, [pc, #60]	; (8006e44 <xTaskIncrementTick+0x178>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006e10:	697b      	ldr	r3, [r7, #20]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20000480 	.word	0x20000480
 8006e20:	2000045c 	.word	0x2000045c
 8006e24:	20000410 	.word	0x20000410
 8006e28:	20000414 	.word	0x20000414
 8006e2c:	20000470 	.word	0x20000470
 8006e30:	20000478 	.word	0x20000478
 8006e34:	20000460 	.word	0x20000460
 8006e38:	2000035c 	.word	0x2000035c
 8006e3c:	20000358 	.word	0x20000358
 8006e40:	20000468 	.word	0x20000468
 8006e44:	2000046c 	.word	0x2000046c

08006e48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e4e:	4b29      	ldr	r3, [pc, #164]	; (8006ef4 <vTaskSwitchContext+0xac>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e56:	4b28      	ldr	r3, [pc, #160]	; (8006ef8 <vTaskSwitchContext+0xb0>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e5c:	e044      	b.n	8006ee8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006e5e:	4b26      	ldr	r3, [pc, #152]	; (8006ef8 <vTaskSwitchContext+0xb0>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006e64:	4b25      	ldr	r3, [pc, #148]	; (8006efc <vTaskSwitchContext+0xb4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	fab3 f383 	clz	r3, r3
 8006e70:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006e72:	7afb      	ldrb	r3, [r7, #11]
 8006e74:	f1c3 031f 	rsb	r3, r3, #31
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	4921      	ldr	r1, [pc, #132]	; (8006f00 <vTaskSwitchContext+0xb8>)
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	440b      	add	r3, r1
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	607b      	str	r3, [r7, #4]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <vTaskSwitchContext+0x5a>
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4a14      	ldr	r2, [pc, #80]	; (8006f00 <vTaskSwitchContext+0xb8>)
 8006eb0:	4413      	add	r3, r2
 8006eb2:	613b      	str	r3, [r7, #16]
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	605a      	str	r2, [r3, #4]
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	3308      	adds	r3, #8
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d104      	bne.n	8006ed4 <vTaskSwitchContext+0x8c>
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	605a      	str	r2, [r3, #4]
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	4a0a      	ldr	r2, [pc, #40]	; (8006f04 <vTaskSwitchContext+0xbc>)
 8006edc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ede:	4b09      	ldr	r3, [pc, #36]	; (8006f04 <vTaskSwitchContext+0xbc>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	334c      	adds	r3, #76	; 0x4c
 8006ee4:	4a08      	ldr	r2, [pc, #32]	; (8006f08 <vTaskSwitchContext+0xc0>)
 8006ee6:	6013      	str	r3, [r2, #0]
}
 8006ee8:	bf00      	nop
 8006eea:	371c      	adds	r7, #28
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bc80      	pop	{r7}
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	20000480 	.word	0x20000480
 8006ef8:	2000046c 	.word	0x2000046c
 8006efc:	20000460 	.word	0x20000460
 8006f00:	2000035c 	.word	0x2000035c
 8006f04:	20000358 	.word	0x20000358
 8006f08:	20000010 	.word	0x20000010

08006f0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10a      	bne.n	8006f32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	60fb      	str	r3, [r7, #12]
}
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f32:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <vTaskPlaceOnEventList+0x44>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3318      	adds	r3, #24
 8006f38:	4619      	mov	r1, r3
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7fe fe18 	bl	8005b70 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f40:	2101      	movs	r1, #1
 8006f42:	6838      	ldr	r0, [r7, #0]
 8006f44:	f000 fd82 	bl	8007a4c <prvAddCurrentTaskToDelayedList>
}
 8006f48:	bf00      	nop
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	20000358 	.word	0x20000358

08006f54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10a      	bne.n	8006f80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	60fb      	str	r3, [r7, #12]
}
 8006f7c:	bf00      	nop
 8006f7e:	e7fe      	b.n	8006f7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	3318      	adds	r3, #24
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7fe fe2b 	bl	8005be0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f8a:	4b1d      	ldr	r3, [pc, #116]	; (8007000 <xTaskRemoveFromEventList+0xac>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d11c      	bne.n	8006fcc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	3304      	adds	r3, #4
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fe fe22 	bl	8005be0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	409a      	lsls	r2, r3
 8006fa4:	4b17      	ldr	r3, [pc, #92]	; (8007004 <xTaskRemoveFromEventList+0xb0>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	4a16      	ldr	r2, [pc, #88]	; (8007004 <xTaskRemoveFromEventList+0xb0>)
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4a13      	ldr	r2, [pc, #76]	; (8007008 <xTaskRemoveFromEventList+0xb4>)
 8006fbc:	441a      	add	r2, r3
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	f7fe fdb0 	bl	8005b2a <vListInsertEnd>
 8006fca:	e005      	b.n	8006fd8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	3318      	adds	r3, #24
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	480e      	ldr	r0, [pc, #56]	; (800700c <xTaskRemoveFromEventList+0xb8>)
 8006fd4:	f7fe fda9 	bl	8005b2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fdc:	4b0c      	ldr	r3, [pc, #48]	; (8007010 <xTaskRemoveFromEventList+0xbc>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d905      	bls.n	8006ff2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fea:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <xTaskRemoveFromEventList+0xc0>)
 8006fec:	2201      	movs	r2, #1
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	e001      	b.n	8006ff6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006ff6:	697b      	ldr	r3, [r7, #20]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3718      	adds	r7, #24
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20000480 	.word	0x20000480
 8007004:	20000460 	.word	0x20000460
 8007008:	2000035c 	.word	0x2000035c
 800700c:	20000418 	.word	0x20000418
 8007010:	20000358 	.word	0x20000358
 8007014:	2000046c 	.word	0x2000046c

08007018 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007020:	4b06      	ldr	r3, [pc, #24]	; (800703c <vTaskInternalSetTimeOutState+0x24>)
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007028:	4b05      	ldr	r3, [pc, #20]	; (8007040 <vTaskInternalSetTimeOutState+0x28>)
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	605a      	str	r2, [r3, #4]
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	bc80      	pop	{r7}
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	20000470 	.word	0x20000470
 8007040:	2000045c 	.word	0x2000045c

08007044 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10a      	bne.n	800706a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	613b      	str	r3, [r7, #16]
}
 8007066:	bf00      	nop
 8007068:	e7fe      	b.n	8007068 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10a      	bne.n	8007086 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	60fb      	str	r3, [r7, #12]
}
 8007082:	bf00      	nop
 8007084:	e7fe      	b.n	8007084 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007086:	f000 fe39 	bl	8007cfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800708a:	4b1d      	ldr	r3, [pc, #116]	; (8007100 <xTaskCheckForTimeOut+0xbc>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a2:	d102      	bne.n	80070aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070a4:	2300      	movs	r3, #0
 80070a6:	61fb      	str	r3, [r7, #28]
 80070a8:	e023      	b.n	80070f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	4b15      	ldr	r3, [pc, #84]	; (8007104 <xTaskCheckForTimeOut+0xc0>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d007      	beq.n	80070c6 <xTaskCheckForTimeOut+0x82>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d302      	bcc.n	80070c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070c0:	2301      	movs	r3, #1
 80070c2:	61fb      	str	r3, [r7, #28]
 80070c4:	e015      	b.n	80070f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d20b      	bcs.n	80070e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	1ad2      	subs	r2, r2, r3
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff ff9b 	bl	8007018 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070e2:	2300      	movs	r3, #0
 80070e4:	61fb      	str	r3, [r7, #28]
 80070e6:	e004      	b.n	80070f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2200      	movs	r2, #0
 80070ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070ee:	2301      	movs	r3, #1
 80070f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070f2:	f000 fe33 	bl	8007d5c <vPortExitCritical>

	return xReturn;
 80070f6:	69fb      	ldr	r3, [r7, #28]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3720      	adds	r7, #32
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	2000045c 	.word	0x2000045c
 8007104:	20000470 	.word	0x20000470

08007108 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800710c:	4b03      	ldr	r3, [pc, #12]	; (800711c <vTaskMissedYield+0x14>)
 800710e:	2201      	movs	r2, #1
 8007110:	601a      	str	r2, [r3, #0]
}
 8007112:	bf00      	nop
 8007114:	46bd      	mov	sp, r7
 8007116:	bc80      	pop	{r7}
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	2000046c 	.word	0x2000046c

08007120 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007128:	f000 f852 	bl	80071d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800712c:	4b06      	ldr	r3, [pc, #24]	; (8007148 <prvIdleTask+0x28>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d9f9      	bls.n	8007128 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <prvIdleTask+0x2c>)
 8007136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007144:	e7f0      	b.n	8007128 <prvIdleTask+0x8>
 8007146:	bf00      	nop
 8007148:	2000035c 	.word	0x2000035c
 800714c:	e000ed04 	.word	0xe000ed04

08007150 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007156:	2300      	movs	r3, #0
 8007158:	607b      	str	r3, [r7, #4]
 800715a:	e00c      	b.n	8007176 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	4613      	mov	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4a12      	ldr	r2, [pc, #72]	; (80071b0 <prvInitialiseTaskLists+0x60>)
 8007168:	4413      	add	r3, r2
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe fcb2 	bl	8005ad4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3301      	adds	r3, #1
 8007174:	607b      	str	r3, [r7, #4]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b06      	cmp	r3, #6
 800717a:	d9ef      	bls.n	800715c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800717c:	480d      	ldr	r0, [pc, #52]	; (80071b4 <prvInitialiseTaskLists+0x64>)
 800717e:	f7fe fca9 	bl	8005ad4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007182:	480d      	ldr	r0, [pc, #52]	; (80071b8 <prvInitialiseTaskLists+0x68>)
 8007184:	f7fe fca6 	bl	8005ad4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007188:	480c      	ldr	r0, [pc, #48]	; (80071bc <prvInitialiseTaskLists+0x6c>)
 800718a:	f7fe fca3 	bl	8005ad4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800718e:	480c      	ldr	r0, [pc, #48]	; (80071c0 <prvInitialiseTaskLists+0x70>)
 8007190:	f7fe fca0 	bl	8005ad4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007194:	480b      	ldr	r0, [pc, #44]	; (80071c4 <prvInitialiseTaskLists+0x74>)
 8007196:	f7fe fc9d 	bl	8005ad4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800719a:	4b0b      	ldr	r3, [pc, #44]	; (80071c8 <prvInitialiseTaskLists+0x78>)
 800719c:	4a05      	ldr	r2, [pc, #20]	; (80071b4 <prvInitialiseTaskLists+0x64>)
 800719e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071a0:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <prvInitialiseTaskLists+0x7c>)
 80071a2:	4a05      	ldr	r2, [pc, #20]	; (80071b8 <prvInitialiseTaskLists+0x68>)
 80071a4:	601a      	str	r2, [r3, #0]
}
 80071a6:	bf00      	nop
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	2000035c 	.word	0x2000035c
 80071b4:	200003e8 	.word	0x200003e8
 80071b8:	200003fc 	.word	0x200003fc
 80071bc:	20000418 	.word	0x20000418
 80071c0:	2000042c 	.word	0x2000042c
 80071c4:	20000444 	.word	0x20000444
 80071c8:	20000410 	.word	0x20000410
 80071cc:	20000414 	.word	0x20000414

080071d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071d6:	e019      	b.n	800720c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071d8:	f000 fd90 	bl	8007cfc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80071dc:	4b10      	ldr	r3, [pc, #64]	; (8007220 <prvCheckTasksWaitingTermination+0x50>)
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3304      	adds	r3, #4
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fe fcf9 	bl	8005be0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071ee:	4b0d      	ldr	r3, [pc, #52]	; (8007224 <prvCheckTasksWaitingTermination+0x54>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	4a0b      	ldr	r2, [pc, #44]	; (8007224 <prvCheckTasksWaitingTermination+0x54>)
 80071f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071f8:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <prvCheckTasksWaitingTermination+0x58>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	4a0a      	ldr	r2, [pc, #40]	; (8007228 <prvCheckTasksWaitingTermination+0x58>)
 8007200:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007202:	f000 fdab 	bl	8007d5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f810 	bl	800722c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800720c:	4b06      	ldr	r3, [pc, #24]	; (8007228 <prvCheckTasksWaitingTermination+0x58>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e1      	bne.n	80071d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	2000042c 	.word	0x2000042c
 8007224:	20000458 	.word	0x20000458
 8007228:	20000440 	.word	0x20000440

0800722c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	334c      	adds	r3, #76	; 0x4c
 8007238:	4618      	mov	r0, r3
 800723a:	f001 f881 	bl	8008340 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007244:	2b00      	cmp	r3, #0
 8007246:	d108      	bne.n	800725a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724c:	4618      	mov	r0, r3
 800724e:	f000 ff19 	bl	8008084 <vPortFree>
				vPortFree( pxTCB );
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 ff16 	bl	8008084 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007258:	e018      	b.n	800728c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007260:	2b01      	cmp	r3, #1
 8007262:	d103      	bne.n	800726c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 ff0d 	bl	8008084 <vPortFree>
	}
 800726a:	e00f      	b.n	800728c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007272:	2b02      	cmp	r3, #2
 8007274:	d00a      	beq.n	800728c <prvDeleteTCB+0x60>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	60fb      	str	r3, [r7, #12]
}
 8007288:	bf00      	nop
 800728a:	e7fe      	b.n	800728a <prvDeleteTCB+0x5e>
	}
 800728c:	bf00      	nop
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800729a:	4b0e      	ldr	r3, [pc, #56]	; (80072d4 <prvResetNextTaskUnblockTime+0x40>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <prvResetNextTaskUnblockTime+0x14>
 80072a4:	2301      	movs	r3, #1
 80072a6:	e000      	b.n	80072aa <prvResetNextTaskUnblockTime+0x16>
 80072a8:	2300      	movs	r3, #0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d004      	beq.n	80072b8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072ae:	4b0a      	ldr	r3, [pc, #40]	; (80072d8 <prvResetNextTaskUnblockTime+0x44>)
 80072b0:	f04f 32ff 	mov.w	r2, #4294967295
 80072b4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072b6:	e008      	b.n	80072ca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80072b8:	4b06      	ldr	r3, [pc, #24]	; (80072d4 <prvResetNextTaskUnblockTime+0x40>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	4a04      	ldr	r2, [pc, #16]	; (80072d8 <prvResetNextTaskUnblockTime+0x44>)
 80072c8:	6013      	str	r3, [r2, #0]
}
 80072ca:	bf00      	nop
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bc80      	pop	{r7}
 80072d2:	4770      	bx	lr
 80072d4:	20000410 	.word	0x20000410
 80072d8:	20000478 	.word	0x20000478

080072dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072e2:	4b0b      	ldr	r3, [pc, #44]	; (8007310 <xTaskGetSchedulerState+0x34>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d102      	bne.n	80072f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072ea:	2301      	movs	r3, #1
 80072ec:	607b      	str	r3, [r7, #4]
 80072ee:	e008      	b.n	8007302 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072f0:	4b08      	ldr	r3, [pc, #32]	; (8007314 <xTaskGetSchedulerState+0x38>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d102      	bne.n	80072fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072f8:	2302      	movs	r3, #2
 80072fa:	607b      	str	r3, [r7, #4]
 80072fc:	e001      	b.n	8007302 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072fe:	2300      	movs	r3, #0
 8007300:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007302:	687b      	ldr	r3, [r7, #4]
	}
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	bc80      	pop	{r7}
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	20000464 	.word	0x20000464
 8007314:	20000480 	.word	0x20000480

08007318 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007324:	2300      	movs	r3, #0
 8007326:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d06e      	beq.n	800740c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007332:	4b39      	ldr	r3, [pc, #228]	; (8007418 <xTaskPriorityInherit+0x100>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	429a      	cmp	r2, r3
 800733a:	d25e      	bcs.n	80073fa <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	2b00      	cmp	r3, #0
 8007342:	db06      	blt.n	8007352 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007344:	4b34      	ldr	r3, [pc, #208]	; (8007418 <xTaskPriorityInherit+0x100>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734a:	f1c3 0207 	rsb	r2, r3, #7
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	6959      	ldr	r1, [r3, #20]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735a:	4613      	mov	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4a2e      	ldr	r2, [pc, #184]	; (800741c <xTaskPriorityInherit+0x104>)
 8007364:	4413      	add	r3, r2
 8007366:	4299      	cmp	r1, r3
 8007368:	d101      	bne.n	800736e <xTaskPriorityInherit+0x56>
 800736a:	2301      	movs	r3, #1
 800736c:	e000      	b.n	8007370 <xTaskPriorityInherit+0x58>
 800736e:	2300      	movs	r3, #0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d03a      	beq.n	80073ea <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	3304      	adds	r3, #4
 8007378:	4618      	mov	r0, r3
 800737a:	f7fe fc31 	bl	8005be0 <uxListRemove>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d115      	bne.n	80073b0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007388:	4924      	ldr	r1, [pc, #144]	; (800741c <xTaskPriorityInherit+0x104>)
 800738a:	4613      	mov	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	440b      	add	r3, r1
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10a      	bne.n	80073b0 <xTaskPriorityInherit+0x98>
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739e:	2201      	movs	r2, #1
 80073a0:	fa02 f303 	lsl.w	r3, r2, r3
 80073a4:	43da      	mvns	r2, r3
 80073a6:	4b1e      	ldr	r3, [pc, #120]	; (8007420 <xTaskPriorityInherit+0x108>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4013      	ands	r3, r2
 80073ac:	4a1c      	ldr	r2, [pc, #112]	; (8007420 <xTaskPriorityInherit+0x108>)
 80073ae:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073b0:	4b19      	ldr	r3, [pc, #100]	; (8007418 <xTaskPriorityInherit+0x100>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073be:	2201      	movs	r2, #1
 80073c0:	409a      	lsls	r2, r3
 80073c2:	4b17      	ldr	r3, [pc, #92]	; (8007420 <xTaskPriorityInherit+0x108>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	4a15      	ldr	r2, [pc, #84]	; (8007420 <xTaskPriorityInherit+0x108>)
 80073ca:	6013      	str	r3, [r2, #0]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d0:	4613      	mov	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4a10      	ldr	r2, [pc, #64]	; (800741c <xTaskPriorityInherit+0x104>)
 80073da:	441a      	add	r2, r3
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	3304      	adds	r3, #4
 80073e0:	4619      	mov	r1, r3
 80073e2:	4610      	mov	r0, r2
 80073e4:	f7fe fba1 	bl	8005b2a <vListInsertEnd>
 80073e8:	e004      	b.n	80073f4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073ea:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <xTaskPriorityInherit+0x100>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80073f4:	2301      	movs	r3, #1
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	e008      	b.n	800740c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073fe:	4b06      	ldr	r3, [pc, #24]	; (8007418 <xTaskPriorityInherit+0x100>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007404:	429a      	cmp	r2, r3
 8007406:	d201      	bcs.n	800740c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007408:	2301      	movs	r3, #1
 800740a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800740c:	68fb      	ldr	r3, [r7, #12]
	}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20000358 	.word	0x20000358
 800741c:	2000035c 	.word	0x2000035c
 8007420:	20000460 	.word	0x20000460

08007424 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007430:	2300      	movs	r3, #0
 8007432:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d06e      	beq.n	8007518 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800743a:	4b3a      	ldr	r3, [pc, #232]	; (8007524 <xTaskPriorityDisinherit+0x100>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	429a      	cmp	r2, r3
 8007442:	d00a      	beq.n	800745a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	60fb      	str	r3, [r7, #12]
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	60bb      	str	r3, [r7, #8]
}
 8007474:	bf00      	nop
 8007476:	e7fe      	b.n	8007476 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800747c:	1e5a      	subs	r2, r3, #1
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748a:	429a      	cmp	r2, r3
 800748c:	d044      	beq.n	8007518 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007492:	2b00      	cmp	r3, #0
 8007494:	d140      	bne.n	8007518 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	3304      	adds	r3, #4
 800749a:	4618      	mov	r0, r3
 800749c:	f7fe fba0 	bl	8005be0 <uxListRemove>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d115      	bne.n	80074d2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074aa:	491f      	ldr	r1, [pc, #124]	; (8007528 <xTaskPriorityDisinherit+0x104>)
 80074ac:	4613      	mov	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	440b      	add	r3, r1
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10a      	bne.n	80074d2 <xTaskPriorityDisinherit+0xae>
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c0:	2201      	movs	r2, #1
 80074c2:	fa02 f303 	lsl.w	r3, r2, r3
 80074c6:	43da      	mvns	r2, r3
 80074c8:	4b18      	ldr	r3, [pc, #96]	; (800752c <xTaskPriorityDisinherit+0x108>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4013      	ands	r3, r2
 80074ce:	4a17      	ldr	r2, [pc, #92]	; (800752c <xTaskPriorityDisinherit+0x108>)
 80074d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074de:	f1c3 0207 	rsb	r2, r3, #7
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ea:	2201      	movs	r2, #1
 80074ec:	409a      	lsls	r2, r3
 80074ee:	4b0f      	ldr	r3, [pc, #60]	; (800752c <xTaskPriorityDisinherit+0x108>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	4a0d      	ldr	r2, [pc, #52]	; (800752c <xTaskPriorityDisinherit+0x108>)
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fc:	4613      	mov	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	4413      	add	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4a08      	ldr	r2, [pc, #32]	; (8007528 <xTaskPriorityDisinherit+0x104>)
 8007506:	441a      	add	r2, r3
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	3304      	adds	r3, #4
 800750c:	4619      	mov	r1, r3
 800750e:	4610      	mov	r0, r2
 8007510:	f7fe fb0b 	bl	8005b2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007514:	2301      	movs	r3, #1
 8007516:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007518:	697b      	ldr	r3, [r7, #20]
	}
 800751a:	4618      	mov	r0, r3
 800751c:	3718      	adds	r7, #24
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20000358 	.word	0x20000358
 8007528:	2000035c 	.word	0x2000035c
 800752c:	20000460 	.word	0x20000460

08007530 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007530:	b580      	push	{r7, lr}
 8007532:	b088      	sub	sp, #32
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800753e:	2301      	movs	r3, #1
 8007540:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 8088 	beq.w	800765a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10a      	bne.n	8007568 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	60fb      	str	r3, [r7, #12]
}
 8007564:	bf00      	nop
 8007566:	e7fe      	b.n	8007566 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d902      	bls.n	8007578 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	e002      	b.n	800757e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	429a      	cmp	r2, r3
 8007586:	d068      	beq.n	800765a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	429a      	cmp	r2, r3
 8007590:	d163      	bne.n	800765a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007592:	4b34      	ldr	r3, [pc, #208]	; (8007664 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	429a      	cmp	r2, r3
 800759a:	d10a      	bne.n	80075b2 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	60bb      	str	r3, [r7, #8]
}
 80075ae:	bf00      	nop
 80075b0:	e7fe      	b.n	80075b0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	69fa      	ldr	r2, [r7, #28]
 80075bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	db04      	blt.n	80075d0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	f1c3 0207 	rsb	r2, r3, #7
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	6959      	ldr	r1, [r3, #20]
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	4613      	mov	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4413      	add	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4a22      	ldr	r2, [pc, #136]	; (8007668 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80075e0:	4413      	add	r3, r2
 80075e2:	4299      	cmp	r1, r3
 80075e4:	d101      	bne.n	80075ea <vTaskPriorityDisinheritAfterTimeout+0xba>
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80075ea:	2300      	movs	r3, #0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d034      	beq.n	800765a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fe faf3 	bl	8005be0 <uxListRemove>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d115      	bne.n	800762c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007604:	4918      	ldr	r1, [pc, #96]	; (8007668 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	440b      	add	r3, r1
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10a      	bne.n	800762c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761a:	2201      	movs	r2, #1
 800761c:	fa02 f303 	lsl.w	r3, r2, r3
 8007620:	43da      	mvns	r2, r3
 8007622:	4b12      	ldr	r3, [pc, #72]	; (800766c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4013      	ands	r3, r2
 8007628:	4a10      	ldr	r2, [pc, #64]	; (800766c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800762a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007630:	2201      	movs	r2, #1
 8007632:	409a      	lsls	r2, r3
 8007634:	4b0d      	ldr	r3, [pc, #52]	; (800766c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4313      	orrs	r3, r2
 800763a:	4a0c      	ldr	r2, [pc, #48]	; (800766c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007642:	4613      	mov	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4a07      	ldr	r2, [pc, #28]	; (8007668 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800764c:	441a      	add	r2, r3
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	3304      	adds	r3, #4
 8007652:	4619      	mov	r1, r3
 8007654:	4610      	mov	r0, r2
 8007656:	f7fe fa68 	bl	8005b2a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800765a:	bf00      	nop
 800765c:	3720      	adds	r7, #32
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000358 	.word	0x20000358
 8007668:	2000035c 	.word	0x2000035c
 800766c:	20000460 	.word	0x20000460

08007670 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007674:	4b07      	ldr	r3, [pc, #28]	; (8007694 <pvTaskIncrementMutexHeldCount+0x24>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d004      	beq.n	8007686 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800767c:	4b05      	ldr	r3, [pc, #20]	; (8007694 <pvTaskIncrementMutexHeldCount+0x24>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007682:	3201      	adds	r2, #1
 8007684:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007686:	4b03      	ldr	r3, [pc, #12]	; (8007694 <pvTaskIncrementMutexHeldCount+0x24>)
 8007688:	681b      	ldr	r3, [r3, #0]
	}
 800768a:	4618      	mov	r0, r3
 800768c:	46bd      	mov	sp, r7
 800768e:	bc80      	pop	{r7}
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	20000358 	.word	0x20000358

08007698 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
 80076a4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80076a6:	f000 fb29 	bl	8007cfc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80076aa:	4b29      	ldr	r3, [pc, #164]	; (8007750 <xTaskNotifyWait+0xb8>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d01c      	beq.n	80076f2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80076b8:	4b25      	ldr	r3, [pc, #148]	; (8007750 <xTaskNotifyWait+0xb8>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	43d2      	mvns	r2, r2
 80076c4:	400a      	ands	r2, r1
 80076c6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80076ca:	4b21      	ldr	r3, [pc, #132]	; (8007750 <xTaskNotifyWait+0xb8>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00b      	beq.n	80076f2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80076da:	2101      	movs	r1, #1
 80076dc:	6838      	ldr	r0, [r7, #0]
 80076de:	f000 f9b5 	bl	8007a4c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80076e2:	4b1c      	ldr	r3, [pc, #112]	; (8007754 <xTaskNotifyWait+0xbc>)
 80076e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80076f2:	f000 fb33 	bl	8007d5c <vPortExitCritical>

		taskENTER_CRITICAL();
 80076f6:	f000 fb01 	bl	8007cfc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d005      	beq.n	800770c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007700:	4b13      	ldr	r3, [pc, #76]	; (8007750 <xTaskNotifyWait+0xb8>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800770c:	4b10      	ldr	r3, [pc, #64]	; (8007750 <xTaskNotifyWait+0xb8>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b02      	cmp	r3, #2
 8007718:	d002      	beq.n	8007720 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800771a:	2300      	movs	r3, #0
 800771c:	617b      	str	r3, [r7, #20]
 800771e:	e00a      	b.n	8007736 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007720:	4b0b      	ldr	r3, [pc, #44]	; (8007750 <xTaskNotifyWait+0xb8>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	43d2      	mvns	r2, r2
 800772c:	400a      	ands	r2, r1
 800772e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 8007732:	2301      	movs	r3, #1
 8007734:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007736:	4b06      	ldr	r3, [pc, #24]	; (8007750 <xTaskNotifyWait+0xb8>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8007740:	f000 fb0c 	bl	8007d5c <vPortExitCritical>

		return xReturn;
 8007744:	697b      	ldr	r3, [r7, #20]
	}
 8007746:	4618      	mov	r0, r3
 8007748:	3718      	adds	r7, #24
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	20000358 	.word	0x20000358
 8007754:	e000ed04 	.word	0xe000ed04

08007758 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08a      	sub	sp, #40	; 0x28
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	4613      	mov	r3, r2
 8007766:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007768:	2301      	movs	r3, #1
 800776a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10a      	bne.n	8007788 <xTaskGenericNotify+0x30>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	61bb      	str	r3, [r7, #24]
}
 8007784:	bf00      	nop
 8007786:	e7fe      	b.n	8007786 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800778c:	f000 fab6 	bl	8007cfc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d004      	beq.n	80077a0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80077a0:	6a3b      	ldr	r3, [r7, #32]
 80077a2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80077a6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	2202      	movs	r2, #2
 80077ac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 80077b0:	79fb      	ldrb	r3, [r7, #7]
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d82d      	bhi.n	8007812 <xTaskGenericNotify+0xba>
 80077b6:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <xTaskGenericNotify+0x64>)
 80077b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077bc:	08007813 	.word	0x08007813
 80077c0:	080077d1 	.word	0x080077d1
 80077c4:	080077e3 	.word	0x080077e3
 80077c8:	080077f3 	.word	0x080077f3
 80077cc:	080077fd 	.word	0x080077fd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	431a      	orrs	r2, r3
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80077e0:	e017      	b.n	8007812 <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80077f0:	e00f      	b.n	8007812 <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80077fa:	e00a      	b.n	8007812 <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80077fc:	7ffb      	ldrb	r3, [r7, #31]
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d004      	beq.n	800780c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800780a:	e001      	b.n	8007810 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 800780c:	2300      	movs	r3, #0
 800780e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8007810:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007812:	7ffb      	ldrb	r3, [r7, #31]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d139      	bne.n	800788c <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	3304      	adds	r3, #4
 800781c:	4618      	mov	r0, r3
 800781e:	f7fe f9df 	bl	8005be0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007826:	2201      	movs	r2, #1
 8007828:	409a      	lsls	r2, r3
 800782a:	4b1c      	ldr	r3, [pc, #112]	; (800789c <xTaskGenericNotify+0x144>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4313      	orrs	r3, r2
 8007830:	4a1a      	ldr	r2, [pc, #104]	; (800789c <xTaskGenericNotify+0x144>)
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007838:	4613      	mov	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4413      	add	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4a17      	ldr	r2, [pc, #92]	; (80078a0 <xTaskGenericNotify+0x148>)
 8007842:	441a      	add	r2, r3
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	3304      	adds	r3, #4
 8007848:	4619      	mov	r1, r3
 800784a:	4610      	mov	r0, r2
 800784c:	f7fe f96d 	bl	8005b2a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00a      	beq.n	800786e <xTaskGenericNotify+0x116>
	__asm volatile
 8007858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	617b      	str	r3, [r7, #20]
}
 800786a:	bf00      	nop
 800786c:	e7fe      	b.n	800786c <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007872:	4b0c      	ldr	r3, [pc, #48]	; (80078a4 <xTaskGenericNotify+0x14c>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007878:	429a      	cmp	r2, r3
 800787a:	d907      	bls.n	800788c <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800787c:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <xTaskGenericNotify+0x150>)
 800787e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800788c:	f000 fa66 	bl	8007d5c <vPortExitCritical>

		return xReturn;
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007892:	4618      	mov	r0, r3
 8007894:	3728      	adds	r7, #40	; 0x28
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20000460 	.word	0x20000460
 80078a0:	2000035c 	.word	0x2000035c
 80078a4:	20000358 	.word	0x20000358
 80078a8:	e000ed04 	.word	0xe000ed04

080078ac <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b08e      	sub	sp, #56	; 0x38
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	603b      	str	r3, [r7, #0]
 80078b8:	4613      	mov	r3, r2
 80078ba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80078bc:	2301      	movs	r3, #1
 80078be:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10a      	bne.n	80078dc <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80078c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80078d8:	bf00      	nop
 80078da:	e7fe      	b.n	80078da <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078dc:	f000 fad0 	bl	8007e80 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80078e4:	f3ef 8211 	mrs	r2, BASEPRI
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	623a      	str	r2, [r7, #32]
 80078fa:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80078fc:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d004      	beq.n	8007910 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007908:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007912:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791c:	2202      	movs	r2, #2
 800791e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8007922:	79fb      	ldrb	r3, [r7, #7]
 8007924:	2b04      	cmp	r3, #4
 8007926:	d82f      	bhi.n	8007988 <xTaskGenericNotifyFromISR+0xdc>
 8007928:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <xTaskGenericNotifyFromISR+0x84>)
 800792a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792e:	bf00      	nop
 8007930:	08007989 	.word	0x08007989
 8007934:	08007945 	.word	0x08007945
 8007938:	08007957 	.word	0x08007957
 800793c:	08007967 	.word	0x08007967
 8007940:	08007971 	.word	0x08007971
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007946:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	431a      	orrs	r2, r3
 800794e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007950:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8007954:	e018      	b.n	8007988 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007958:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8007964:	e010      	b.n	8007988 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800796e:	e00b      	b.n	8007988 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007970:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007974:	2b02      	cmp	r3, #2
 8007976:	d004      	beq.n	8007982 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007980:	e001      	b.n	8007986 <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 8007982:	2300      	movs	r3, #0
 8007984:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8007986:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007988:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800798c:	2b01      	cmp	r3, #1
 800798e:	d146      	bne.n	8007a1e <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00a      	beq.n	80079ae <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8007998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	61bb      	str	r3, [r7, #24]
}
 80079aa:	bf00      	nop
 80079ac:	e7fe      	b.n	80079ac <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079ae:	4b21      	ldr	r3, [pc, #132]	; (8007a34 <xTaskGenericNotifyFromISR+0x188>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d11c      	bne.n	80079f0 <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b8:	3304      	adds	r3, #4
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe f910 	bl	8005be0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	2201      	movs	r2, #1
 80079c6:	409a      	lsls	r2, r3
 80079c8:	4b1b      	ldr	r3, [pc, #108]	; (8007a38 <xTaskGenericNotifyFromISR+0x18c>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	4a1a      	ldr	r2, [pc, #104]	; (8007a38 <xTaskGenericNotifyFromISR+0x18c>)
 80079d0:	6013      	str	r3, [r2, #0]
 80079d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d6:	4613      	mov	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4413      	add	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4a17      	ldr	r2, [pc, #92]	; (8007a3c <xTaskGenericNotifyFromISR+0x190>)
 80079e0:	441a      	add	r2, r3
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	3304      	adds	r3, #4
 80079e6:	4619      	mov	r1, r3
 80079e8:	4610      	mov	r0, r2
 80079ea:	f7fe f89e 	bl	8005b2a <vListInsertEnd>
 80079ee:	e005      	b.n	80079fc <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	3318      	adds	r3, #24
 80079f4:	4619      	mov	r1, r3
 80079f6:	4812      	ldr	r0, [pc, #72]	; (8007a40 <xTaskGenericNotifyFromISR+0x194>)
 80079f8:	f7fe f897 	bl	8005b2a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80079fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a00:	4b10      	ldr	r3, [pc, #64]	; (8007a44 <xTaskGenericNotifyFromISR+0x198>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d909      	bls.n	8007a1e <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a12:	2201      	movs	r2, #1
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	e002      	b.n	8007a1e <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8007a18:	4b0b      	ldr	r3, [pc, #44]	; (8007a48 <xTaskGenericNotifyFromISR+0x19c>)
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f383 8811 	msr	BASEPRI, r3
}
 8007a28:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3738      	adds	r7, #56	; 0x38
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	20000480 	.word	0x20000480
 8007a38:	20000460 	.word	0x20000460
 8007a3c:	2000035c 	.word	0x2000035c
 8007a40:	20000418 	.word	0x20000418
 8007a44:	20000358 	.word	0x20000358
 8007a48:	2000046c 	.word	0x2000046c

08007a4c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a56:	4b29      	ldr	r3, [pc, #164]	; (8007afc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a5c:	4b28      	ldr	r3, [pc, #160]	; (8007b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3304      	adds	r3, #4
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe f8bc 	bl	8005be0 <uxListRemove>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10b      	bne.n	8007a86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007a6e:	4b24      	ldr	r3, [pc, #144]	; (8007b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a74:	2201      	movs	r2, #1
 8007a76:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7a:	43da      	mvns	r2, r3
 8007a7c:	4b21      	ldr	r3, [pc, #132]	; (8007b04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4013      	ands	r3, r2
 8007a82:	4a20      	ldr	r2, [pc, #128]	; (8007b04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8c:	d10a      	bne.n	8007aa4 <prvAddCurrentTaskToDelayedList+0x58>
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d007      	beq.n	8007aa4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a94:	4b1a      	ldr	r3, [pc, #104]	; (8007b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3304      	adds	r3, #4
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	481a      	ldr	r0, [pc, #104]	; (8007b08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a9e:	f7fe f844 	bl	8005b2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007aa2:	e026      	b.n	8007af2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007aac:	4b14      	ldr	r3, [pc, #80]	; (8007b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d209      	bcs.n	8007ad0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007abc:	4b13      	ldr	r3, [pc, #76]	; (8007b0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4610      	mov	r0, r2
 8007aca:	f7fe f851 	bl	8005b70 <vListInsert>
}
 8007ace:	e010      	b.n	8007af2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ad0:	4b0f      	ldr	r3, [pc, #60]	; (8007b10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	4b0a      	ldr	r3, [pc, #40]	; (8007b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4619      	mov	r1, r3
 8007adc:	4610      	mov	r0, r2
 8007ade:	f7fe f847 	bl	8005b70 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ae2:	4b0c      	ldr	r3, [pc, #48]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d202      	bcs.n	8007af2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007aec:	4a09      	ldr	r2, [pc, #36]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	6013      	str	r3, [r2, #0]
}
 8007af2:	bf00      	nop
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	2000045c 	.word	0x2000045c
 8007b00:	20000358 	.word	0x20000358
 8007b04:	20000460 	.word	0x20000460
 8007b08:	20000444 	.word	0x20000444
 8007b0c:	20000414 	.word	0x20000414
 8007b10:	20000410 	.word	0x20000410
 8007b14:	20000478 	.word	0x20000478

08007b18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	3b04      	subs	r3, #4
 8007b28:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3b04      	subs	r3, #4
 8007b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f023 0201 	bic.w	r2, r3, #1
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3b04      	subs	r3, #4
 8007b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b48:	4a08      	ldr	r2, [pc, #32]	; (8007b6c <pxPortInitialiseStack+0x54>)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	3b14      	subs	r3, #20
 8007b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	3b20      	subs	r3, #32
 8007b5e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b60:	68fb      	ldr	r3, [r7, #12]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bc80      	pop	{r7}
 8007b6a:	4770      	bx	lr
 8007b6c:	08007b71 	.word	0x08007b71

08007b70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b7a:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <prvTaskExitError+0x54>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b82:	d00a      	beq.n	8007b9a <prvTaskExitError+0x2a>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	60fb      	str	r3, [r7, #12]
}
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <prvTaskExitError+0x28>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	60bb      	str	r3, [r7, #8]
}
 8007bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bae:	bf00      	nop
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0fc      	beq.n	8007bb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bb6:	bf00      	nop
 8007bb8:	bf00      	nop
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bc80      	pop	{r7}
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	2000000c 	.word	0x2000000c
	...

08007bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007bd0:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <pxCurrentTCBConst2>)
 8007bd2:	6819      	ldr	r1, [r3, #0]
 8007bd4:	6808      	ldr	r0, [r1, #0]
 8007bd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007bda:	f380 8809 	msr	PSP, r0
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f04f 0000 	mov.w	r0, #0
 8007be6:	f380 8811 	msr	BASEPRI, r0
 8007bea:	f04e 0e0d 	orr.w	lr, lr, #13
 8007bee:	4770      	bx	lr

08007bf0 <pxCurrentTCBConst2>:
 8007bf0:	20000358 	.word	0x20000358
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop

08007bf8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007bf8:	4806      	ldr	r0, [pc, #24]	; (8007c14 <prvPortStartFirstTask+0x1c>)
 8007bfa:	6800      	ldr	r0, [r0, #0]
 8007bfc:	6800      	ldr	r0, [r0, #0]
 8007bfe:	f380 8808 	msr	MSP, r0
 8007c02:	b662      	cpsie	i
 8007c04:	b661      	cpsie	f
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	df00      	svc	0
 8007c10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c12:	bf00      	nop
 8007c14:	e000ed08 	.word	0xe000ed08

08007c18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c1e:	4b32      	ldr	r3, [pc, #200]	; (8007ce8 <xPortStartScheduler+0xd0>)
 8007c20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	22ff      	movs	r2, #255	; 0xff
 8007c2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c38:	78fb      	ldrb	r3, [r7, #3]
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	4b2a      	ldr	r3, [pc, #168]	; (8007cec <xPortStartScheduler+0xd4>)
 8007c44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c46:	4b2a      	ldr	r3, [pc, #168]	; (8007cf0 <xPortStartScheduler+0xd8>)
 8007c48:	2207      	movs	r2, #7
 8007c4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c4c:	e009      	b.n	8007c62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007c4e:	4b28      	ldr	r3, [pc, #160]	; (8007cf0 <xPortStartScheduler+0xd8>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	4a26      	ldr	r2, [pc, #152]	; (8007cf0 <xPortStartScheduler+0xd8>)
 8007c56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c58:	78fb      	ldrb	r3, [r7, #3]
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c62:	78fb      	ldrb	r3, [r7, #3]
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6a:	2b80      	cmp	r3, #128	; 0x80
 8007c6c:	d0ef      	beq.n	8007c4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c6e:	4b20      	ldr	r3, [pc, #128]	; (8007cf0 <xPortStartScheduler+0xd8>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f1c3 0307 	rsb	r3, r3, #7
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	d00a      	beq.n	8007c90 <xPortStartScheduler+0x78>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	60bb      	str	r3, [r7, #8]
}
 8007c8c:	bf00      	nop
 8007c8e:	e7fe      	b.n	8007c8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c90:	4b17      	ldr	r3, [pc, #92]	; (8007cf0 <xPortStartScheduler+0xd8>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	021b      	lsls	r3, r3, #8
 8007c96:	4a16      	ldr	r2, [pc, #88]	; (8007cf0 <xPortStartScheduler+0xd8>)
 8007c98:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c9a:	4b15      	ldr	r3, [pc, #84]	; (8007cf0 <xPortStartScheduler+0xd8>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ca2:	4a13      	ldr	r2, [pc, #76]	; (8007cf0 <xPortStartScheduler+0xd8>)
 8007ca4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cae:	4b11      	ldr	r3, [pc, #68]	; (8007cf4 <xPortStartScheduler+0xdc>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a10      	ldr	r2, [pc, #64]	; (8007cf4 <xPortStartScheduler+0xdc>)
 8007cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cba:	4b0e      	ldr	r3, [pc, #56]	; (8007cf4 <xPortStartScheduler+0xdc>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a0d      	ldr	r2, [pc, #52]	; (8007cf4 <xPortStartScheduler+0xdc>)
 8007cc0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007cc4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cc6:	f000 f8b9 	bl	8007e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007cca:	4b0b      	ldr	r3, [pc, #44]	; (8007cf8 <xPortStartScheduler+0xe0>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cd0:	f7ff ff92 	bl	8007bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cd4:	f7ff f8b8 	bl	8006e48 <vTaskSwitchContext>
	prvTaskExitError();
 8007cd8:	f7ff ff4a 	bl	8007b70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	e000e400 	.word	0xe000e400
 8007cec:	20000484 	.word	0x20000484
 8007cf0:	20000488 	.word	0x20000488
 8007cf4:	e000ed20 	.word	0xe000ed20
 8007cf8:	2000000c 	.word	0x2000000c

08007cfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	607b      	str	r3, [r7, #4]
}
 8007d14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d16:	4b0f      	ldr	r3, [pc, #60]	; (8007d54 <vPortEnterCritical+0x58>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	4a0d      	ldr	r2, [pc, #52]	; (8007d54 <vPortEnterCritical+0x58>)
 8007d1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d20:	4b0c      	ldr	r3, [pc, #48]	; (8007d54 <vPortEnterCritical+0x58>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d10f      	bne.n	8007d48 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d28:	4b0b      	ldr	r3, [pc, #44]	; (8007d58 <vPortEnterCritical+0x5c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00a      	beq.n	8007d48 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	603b      	str	r3, [r7, #0]
}
 8007d44:	bf00      	nop
 8007d46:	e7fe      	b.n	8007d46 <vPortEnterCritical+0x4a>
	}
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bc80      	pop	{r7}
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	2000000c 	.word	0x2000000c
 8007d58:	e000ed04 	.word	0xe000ed04

08007d5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d62:	4b11      	ldr	r3, [pc, #68]	; (8007da8 <vPortExitCritical+0x4c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10a      	bne.n	8007d80 <vPortExitCritical+0x24>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	607b      	str	r3, [r7, #4]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d80:	4b09      	ldr	r3, [pc, #36]	; (8007da8 <vPortExitCritical+0x4c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3b01      	subs	r3, #1
 8007d86:	4a08      	ldr	r2, [pc, #32]	; (8007da8 <vPortExitCritical+0x4c>)
 8007d88:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d8a:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <vPortExitCritical+0x4c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d105      	bne.n	8007d9e <vPortExitCritical+0x42>
 8007d92:	2300      	movs	r3, #0
 8007d94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	f383 8811 	msr	BASEPRI, r3
}
 8007d9c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bc80      	pop	{r7}
 8007da6:	4770      	bx	lr
 8007da8:	2000000c 	.word	0x2000000c
 8007dac:	00000000 	.word	0x00000000

08007db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007db0:	f3ef 8009 	mrs	r0, PSP
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	4b0d      	ldr	r3, [pc, #52]	; (8007df0 <pxCurrentTCBConst>)
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007dc0:	6010      	str	r0, [r2, #0]
 8007dc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007dc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007dca:	f380 8811 	msr	BASEPRI, r0
 8007dce:	f7ff f83b 	bl	8006e48 <vTaskSwitchContext>
 8007dd2:	f04f 0000 	mov.w	r0, #0
 8007dd6:	f380 8811 	msr	BASEPRI, r0
 8007dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007dde:	6819      	ldr	r1, [r3, #0]
 8007de0:	6808      	ldr	r0, [r1, #0]
 8007de2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007de6:	f380 8809 	msr	PSP, r0
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	4770      	bx	lr

08007df0 <pxCurrentTCBConst>:
 8007df0:	20000358 	.word	0x20000358
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop

08007df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	607b      	str	r3, [r7, #4]
}
 8007e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e12:	f7fe ff5b 	bl	8006ccc <xTaskIncrementTick>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e1c:	4b06      	ldr	r3, [pc, #24]	; (8007e38 <SysTick_Handler+0x40>)
 8007e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	2300      	movs	r3, #0
 8007e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	f383 8811 	msr	BASEPRI, r3
}
 8007e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e30:	bf00      	nop
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	e000ed04 	.word	0xe000ed04

08007e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e40:	4b0a      	ldr	r3, [pc, #40]	; (8007e6c <vPortSetupTimerInterrupt+0x30>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e46:	4b0a      	ldr	r3, [pc, #40]	; (8007e70 <vPortSetupTimerInterrupt+0x34>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e4c:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <vPortSetupTimerInterrupt+0x38>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a09      	ldr	r2, [pc, #36]	; (8007e78 <vPortSetupTimerInterrupt+0x3c>)
 8007e52:	fba2 2303 	umull	r2, r3, r2, r3
 8007e56:	099b      	lsrs	r3, r3, #6
 8007e58:	4a08      	ldr	r2, [pc, #32]	; (8007e7c <vPortSetupTimerInterrupt+0x40>)
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e5e:	4b03      	ldr	r3, [pc, #12]	; (8007e6c <vPortSetupTimerInterrupt+0x30>)
 8007e60:	2207      	movs	r2, #7
 8007e62:	601a      	str	r2, [r3, #0]
}
 8007e64:	bf00      	nop
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bc80      	pop	{r7}
 8007e6a:	4770      	bx	lr
 8007e6c:	e000e010 	.word	0xe000e010
 8007e70:	e000e018 	.word	0xe000e018
 8007e74:	20000000 	.word	0x20000000
 8007e78:	10624dd3 	.word	0x10624dd3
 8007e7c:	e000e014 	.word	0xe000e014

08007e80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e86:	f3ef 8305 	mrs	r3, IPSR
 8007e8a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2b0f      	cmp	r3, #15
 8007e90:	d914      	bls.n	8007ebc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e92:	4a16      	ldr	r2, [pc, #88]	; (8007eec <vPortValidateInterruptPriority+0x6c>)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4413      	add	r3, r2
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e9c:	4b14      	ldr	r3, [pc, #80]	; (8007ef0 <vPortValidateInterruptPriority+0x70>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	7afa      	ldrb	r2, [r7, #11]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d20a      	bcs.n	8007ebc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	607b      	str	r3, [r7, #4]
}
 8007eb8:	bf00      	nop
 8007eba:	e7fe      	b.n	8007eba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ebc:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <vPortValidateInterruptPriority+0x74>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ec4:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <vPortValidateInterruptPriority+0x78>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d90a      	bls.n	8007ee2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	603b      	str	r3, [r7, #0]
}
 8007ede:	bf00      	nop
 8007ee0:	e7fe      	b.n	8007ee0 <vPortValidateInterruptPriority+0x60>
	}
 8007ee2:	bf00      	nop
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bc80      	pop	{r7}
 8007eea:	4770      	bx	lr
 8007eec:	e000e3f0 	.word	0xe000e3f0
 8007ef0:	20000484 	.word	0x20000484
 8007ef4:	e000ed0c 	.word	0xe000ed0c
 8007ef8:	20000488 	.word	0x20000488

08007efc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b08a      	sub	sp, #40	; 0x28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f04:	2300      	movs	r3, #0
 8007f06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f08:	f7fe fe36 	bl	8006b78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f0c:	4b58      	ldr	r3, [pc, #352]	; (8008070 <pvPortMalloc+0x174>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f14:	f000 f910 	bl	8008138 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f18:	4b56      	ldr	r3, [pc, #344]	; (8008074 <pvPortMalloc+0x178>)
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4013      	ands	r3, r2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f040 808e 	bne.w	8008042 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d01d      	beq.n	8007f68 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f2c:	2208      	movs	r2, #8
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4413      	add	r3, r2
 8007f32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d014      	beq.n	8007f68 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f023 0307 	bic.w	r3, r3, #7
 8007f44:	3308      	adds	r3, #8
 8007f46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f003 0307 	and.w	r3, r3, #7
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <pvPortMalloc+0x6c>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	617b      	str	r3, [r7, #20]
}
 8007f64:	bf00      	nop
 8007f66:	e7fe      	b.n	8007f66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d069      	beq.n	8008042 <pvPortMalloc+0x146>
 8007f6e:	4b42      	ldr	r3, [pc, #264]	; (8008078 <pvPortMalloc+0x17c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d864      	bhi.n	8008042 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f78:	4b40      	ldr	r3, [pc, #256]	; (800807c <pvPortMalloc+0x180>)
 8007f7a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f7c:	4b3f      	ldr	r3, [pc, #252]	; (800807c <pvPortMalloc+0x180>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f82:	e004      	b.n	8007f8e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d903      	bls.n	8007fa0 <pvPortMalloc+0xa4>
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1f1      	bne.n	8007f84 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fa0:	4b33      	ldr	r3, [pc, #204]	; (8008070 <pvPortMalloc+0x174>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d04b      	beq.n	8008042 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2208      	movs	r2, #8
 8007fb0:	4413      	add	r3, r2
 8007fb2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	1ad2      	subs	r2, r2, r3
 8007fc4:	2308      	movs	r3, #8
 8007fc6:	005b      	lsls	r3, r3, #1
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d91f      	bls.n	800800c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00a      	beq.n	8007ff4 <pvPortMalloc+0xf8>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	613b      	str	r3, [r7, #16]
}
 8007ff0:	bf00      	nop
 8007ff2:	e7fe      	b.n	8007ff2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	1ad2      	subs	r2, r2, r3
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008006:	69b8      	ldr	r0, [r7, #24]
 8008008:	f000 f8f8 	bl	80081fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800800c:	4b1a      	ldr	r3, [pc, #104]	; (8008078 <pvPortMalloc+0x17c>)
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	4a18      	ldr	r2, [pc, #96]	; (8008078 <pvPortMalloc+0x17c>)
 8008018:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800801a:	4b17      	ldr	r3, [pc, #92]	; (8008078 <pvPortMalloc+0x17c>)
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	4b18      	ldr	r3, [pc, #96]	; (8008080 <pvPortMalloc+0x184>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	429a      	cmp	r2, r3
 8008024:	d203      	bcs.n	800802e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008026:	4b14      	ldr	r3, [pc, #80]	; (8008078 <pvPortMalloc+0x17c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a15      	ldr	r2, [pc, #84]	; (8008080 <pvPortMalloc+0x184>)
 800802c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	4b10      	ldr	r3, [pc, #64]	; (8008074 <pvPortMalloc+0x178>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	431a      	orrs	r2, r3
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	2200      	movs	r2, #0
 8008040:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008042:	f7fe fda7 	bl	8006b94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	f003 0307 	and.w	r3, r3, #7
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00a      	beq.n	8008066 <pvPortMalloc+0x16a>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	60fb      	str	r3, [r7, #12]
}
 8008062:	bf00      	nop
 8008064:	e7fe      	b.n	8008064 <pvPortMalloc+0x168>
	return pvReturn;
 8008066:	69fb      	ldr	r3, [r7, #28]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3728      	adds	r7, #40	; 0x28
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	200040ac 	.word	0x200040ac
 8008074:	200040b8 	.word	0x200040b8
 8008078:	200040b0 	.word	0x200040b0
 800807c:	200040a4 	.word	0x200040a4
 8008080:	200040b4 	.word	0x200040b4

08008084 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d048      	beq.n	8008128 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008096:	2308      	movs	r3, #8
 8008098:	425b      	negs	r3, r3
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	4413      	add	r3, r2
 800809e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	685a      	ldr	r2, [r3, #4]
 80080a8:	4b21      	ldr	r3, [pc, #132]	; (8008130 <vPortFree+0xac>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4013      	ands	r3, r2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10a      	bne.n	80080c8 <vPortFree+0x44>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	60fb      	str	r3, [r7, #12]
}
 80080c4:	bf00      	nop
 80080c6:	e7fe      	b.n	80080c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00a      	beq.n	80080e6 <vPortFree+0x62>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	60bb      	str	r3, [r7, #8]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	4b11      	ldr	r3, [pc, #68]	; (8008130 <vPortFree+0xac>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4013      	ands	r3, r2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d019      	beq.n	8008128 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d115      	bne.n	8008128 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	685a      	ldr	r2, [r3, #4]
 8008100:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <vPortFree+0xac>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	43db      	mvns	r3, r3
 8008106:	401a      	ands	r2, r3
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800810c:	f7fe fd34 	bl	8006b78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	4b07      	ldr	r3, [pc, #28]	; (8008134 <vPortFree+0xb0>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4413      	add	r3, r2
 800811a:	4a06      	ldr	r2, [pc, #24]	; (8008134 <vPortFree+0xb0>)
 800811c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800811e:	6938      	ldr	r0, [r7, #16]
 8008120:	f000 f86c 	bl	80081fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008124:	f7fe fd36 	bl	8006b94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008128:	bf00      	nop
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	200040b8 	.word	0x200040b8
 8008134:	200040b0 	.word	0x200040b0

08008138 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800813e:	f643 4318 	movw	r3, #15384	; 0x3c18
 8008142:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008144:	4b27      	ldr	r3, [pc, #156]	; (80081e4 <prvHeapInit+0xac>)
 8008146:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f003 0307 	and.w	r3, r3, #7
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00c      	beq.n	800816c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	3307      	adds	r3, #7
 8008156:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0307 	bic.w	r3, r3, #7
 800815e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	4a1f      	ldr	r2, [pc, #124]	; (80081e4 <prvHeapInit+0xac>)
 8008168:	4413      	add	r3, r2
 800816a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008170:	4a1d      	ldr	r2, [pc, #116]	; (80081e8 <prvHeapInit+0xb0>)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008176:	4b1c      	ldr	r3, [pc, #112]	; (80081e8 <prvHeapInit+0xb0>)
 8008178:	2200      	movs	r2, #0
 800817a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	4413      	add	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008184:	2208      	movs	r2, #8
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	1a9b      	subs	r3, r3, r2
 800818a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f023 0307 	bic.w	r3, r3, #7
 8008192:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4a15      	ldr	r2, [pc, #84]	; (80081ec <prvHeapInit+0xb4>)
 8008198:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800819a:	4b14      	ldr	r3, [pc, #80]	; (80081ec <prvHeapInit+0xb4>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2200      	movs	r2, #0
 80081a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081a2:	4b12      	ldr	r3, [pc, #72]	; (80081ec <prvHeapInit+0xb4>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2200      	movs	r2, #0
 80081a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	1ad2      	subs	r2, r2, r3
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081b8:	4b0c      	ldr	r3, [pc, #48]	; (80081ec <prvHeapInit+0xb4>)
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	4a0a      	ldr	r2, [pc, #40]	; (80081f0 <prvHeapInit+0xb8>)
 80081c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	4a09      	ldr	r2, [pc, #36]	; (80081f4 <prvHeapInit+0xbc>)
 80081ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081d0:	4b09      	ldr	r3, [pc, #36]	; (80081f8 <prvHeapInit+0xc0>)
 80081d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081d6:	601a      	str	r2, [r3, #0]
}
 80081d8:	bf00      	nop
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	bc80      	pop	{r7}
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	2000048c 	.word	0x2000048c
 80081e8:	200040a4 	.word	0x200040a4
 80081ec:	200040ac 	.word	0x200040ac
 80081f0:	200040b4 	.word	0x200040b4
 80081f4:	200040b0 	.word	0x200040b0
 80081f8:	200040b8 	.word	0x200040b8

080081fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008204:	4b27      	ldr	r3, [pc, #156]	; (80082a4 <prvInsertBlockIntoFreeList+0xa8>)
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	e002      	b.n	8008210 <prvInsertBlockIntoFreeList+0x14>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	60fb      	str	r3, [r7, #12]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	429a      	cmp	r2, r3
 8008218:	d8f7      	bhi.n	800820a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	4413      	add	r3, r2
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	429a      	cmp	r2, r3
 800822a:	d108      	bne.n	800823e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	441a      	add	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	441a      	add	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	429a      	cmp	r2, r3
 8008250:	d118      	bne.n	8008284 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	4b14      	ldr	r3, [pc, #80]	; (80082a8 <prvInsertBlockIntoFreeList+0xac>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	429a      	cmp	r2, r3
 800825c:	d00d      	beq.n	800827a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	441a      	add	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	e008      	b.n	800828c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800827a:	4b0b      	ldr	r3, [pc, #44]	; (80082a8 <prvInsertBlockIntoFreeList+0xac>)
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	e003      	b.n	800828c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	429a      	cmp	r2, r3
 8008292:	d002      	beq.n	800829a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800829a:	bf00      	nop
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	bc80      	pop	{r7}
 80082a2:	4770      	bx	lr
 80082a4:	200040a4 	.word	0x200040a4
 80082a8:	200040ac 	.word	0x200040ac

080082ac <__libc_init_array>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	2600      	movs	r6, #0
 80082b0:	4d0c      	ldr	r5, [pc, #48]	; (80082e4 <__libc_init_array+0x38>)
 80082b2:	4c0d      	ldr	r4, [pc, #52]	; (80082e8 <__libc_init_array+0x3c>)
 80082b4:	1b64      	subs	r4, r4, r5
 80082b6:	10a4      	asrs	r4, r4, #2
 80082b8:	42a6      	cmp	r6, r4
 80082ba:	d109      	bne.n	80082d0 <__libc_init_array+0x24>
 80082bc:	f000 f8f4 	bl	80084a8 <_init>
 80082c0:	2600      	movs	r6, #0
 80082c2:	4d0a      	ldr	r5, [pc, #40]	; (80082ec <__libc_init_array+0x40>)
 80082c4:	4c0a      	ldr	r4, [pc, #40]	; (80082f0 <__libc_init_array+0x44>)
 80082c6:	1b64      	subs	r4, r4, r5
 80082c8:	10a4      	asrs	r4, r4, #2
 80082ca:	42a6      	cmp	r6, r4
 80082cc:	d105      	bne.n	80082da <__libc_init_array+0x2e>
 80082ce:	bd70      	pop	{r4, r5, r6, pc}
 80082d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80082d4:	4798      	blx	r3
 80082d6:	3601      	adds	r6, #1
 80082d8:	e7ee      	b.n	80082b8 <__libc_init_array+0xc>
 80082da:	f855 3b04 	ldr.w	r3, [r5], #4
 80082de:	4798      	blx	r3
 80082e0:	3601      	adds	r6, #1
 80082e2:	e7f2      	b.n	80082ca <__libc_init_array+0x1e>
 80082e4:	080085a8 	.word	0x080085a8
 80082e8:	080085a8 	.word	0x080085a8
 80082ec:	080085a8 	.word	0x080085a8
 80082f0:	080085ac 	.word	0x080085ac

080082f4 <__retarget_lock_acquire_recursive>:
 80082f4:	4770      	bx	lr

080082f6 <__retarget_lock_release_recursive>:
 80082f6:	4770      	bx	lr

080082f8 <memcpy>:
 80082f8:	440a      	add	r2, r1
 80082fa:	4291      	cmp	r1, r2
 80082fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008300:	d100      	bne.n	8008304 <memcpy+0xc>
 8008302:	4770      	bx	lr
 8008304:	b510      	push	{r4, lr}
 8008306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800830a:	4291      	cmp	r1, r2
 800830c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008310:	d1f9      	bne.n	8008306 <memcpy+0xe>
 8008312:	bd10      	pop	{r4, pc}

08008314 <memset>:
 8008314:	4603      	mov	r3, r0
 8008316:	4402      	add	r2, r0
 8008318:	4293      	cmp	r3, r2
 800831a:	d100      	bne.n	800831e <memset+0xa>
 800831c:	4770      	bx	lr
 800831e:	f803 1b01 	strb.w	r1, [r3], #1
 8008322:	e7f9      	b.n	8008318 <memset+0x4>

08008324 <cleanup_glue>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	460c      	mov	r4, r1
 8008328:	6809      	ldr	r1, [r1, #0]
 800832a:	4605      	mov	r5, r0
 800832c:	b109      	cbz	r1, 8008332 <cleanup_glue+0xe>
 800832e:	f7ff fff9 	bl	8008324 <cleanup_glue>
 8008332:	4621      	mov	r1, r4
 8008334:	4628      	mov	r0, r5
 8008336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800833a:	f000 b869 	b.w	8008410 <_free_r>
	...

08008340 <_reclaim_reent>:
 8008340:	4b2c      	ldr	r3, [pc, #176]	; (80083f4 <_reclaim_reent+0xb4>)
 8008342:	b570      	push	{r4, r5, r6, lr}
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4604      	mov	r4, r0
 8008348:	4283      	cmp	r3, r0
 800834a:	d051      	beq.n	80083f0 <_reclaim_reent+0xb0>
 800834c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800834e:	b143      	cbz	r3, 8008362 <_reclaim_reent+0x22>
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d14a      	bne.n	80083ec <_reclaim_reent+0xac>
 8008356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008358:	6819      	ldr	r1, [r3, #0]
 800835a:	b111      	cbz	r1, 8008362 <_reclaim_reent+0x22>
 800835c:	4620      	mov	r0, r4
 800835e:	f000 f857 	bl	8008410 <_free_r>
 8008362:	6961      	ldr	r1, [r4, #20]
 8008364:	b111      	cbz	r1, 800836c <_reclaim_reent+0x2c>
 8008366:	4620      	mov	r0, r4
 8008368:	f000 f852 	bl	8008410 <_free_r>
 800836c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800836e:	b111      	cbz	r1, 8008376 <_reclaim_reent+0x36>
 8008370:	4620      	mov	r0, r4
 8008372:	f000 f84d 	bl	8008410 <_free_r>
 8008376:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008378:	b111      	cbz	r1, 8008380 <_reclaim_reent+0x40>
 800837a:	4620      	mov	r0, r4
 800837c:	f000 f848 	bl	8008410 <_free_r>
 8008380:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008382:	b111      	cbz	r1, 800838a <_reclaim_reent+0x4a>
 8008384:	4620      	mov	r0, r4
 8008386:	f000 f843 	bl	8008410 <_free_r>
 800838a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800838c:	b111      	cbz	r1, 8008394 <_reclaim_reent+0x54>
 800838e:	4620      	mov	r0, r4
 8008390:	f000 f83e 	bl	8008410 <_free_r>
 8008394:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008396:	b111      	cbz	r1, 800839e <_reclaim_reent+0x5e>
 8008398:	4620      	mov	r0, r4
 800839a:	f000 f839 	bl	8008410 <_free_r>
 800839e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80083a0:	b111      	cbz	r1, 80083a8 <_reclaim_reent+0x68>
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 f834 	bl	8008410 <_free_r>
 80083a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083aa:	b111      	cbz	r1, 80083b2 <_reclaim_reent+0x72>
 80083ac:	4620      	mov	r0, r4
 80083ae:	f000 f82f 	bl	8008410 <_free_r>
 80083b2:	69a3      	ldr	r3, [r4, #24]
 80083b4:	b1e3      	cbz	r3, 80083f0 <_reclaim_reent+0xb0>
 80083b6:	4620      	mov	r0, r4
 80083b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80083ba:	4798      	blx	r3
 80083bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80083be:	b1b9      	cbz	r1, 80083f0 <_reclaim_reent+0xb0>
 80083c0:	4620      	mov	r0, r4
 80083c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083c6:	f7ff bfad 	b.w	8008324 <cleanup_glue>
 80083ca:	5949      	ldr	r1, [r1, r5]
 80083cc:	b941      	cbnz	r1, 80083e0 <_reclaim_reent+0xa0>
 80083ce:	3504      	adds	r5, #4
 80083d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083d2:	2d80      	cmp	r5, #128	; 0x80
 80083d4:	68d9      	ldr	r1, [r3, #12]
 80083d6:	d1f8      	bne.n	80083ca <_reclaim_reent+0x8a>
 80083d8:	4620      	mov	r0, r4
 80083da:	f000 f819 	bl	8008410 <_free_r>
 80083de:	e7ba      	b.n	8008356 <_reclaim_reent+0x16>
 80083e0:	680e      	ldr	r6, [r1, #0]
 80083e2:	4620      	mov	r0, r4
 80083e4:	f000 f814 	bl	8008410 <_free_r>
 80083e8:	4631      	mov	r1, r6
 80083ea:	e7ef      	b.n	80083cc <_reclaim_reent+0x8c>
 80083ec:	2500      	movs	r5, #0
 80083ee:	e7ef      	b.n	80083d0 <_reclaim_reent+0x90>
 80083f0:	bd70      	pop	{r4, r5, r6, pc}
 80083f2:	bf00      	nop
 80083f4:	20000010 	.word	0x20000010

080083f8 <__malloc_lock>:
 80083f8:	4801      	ldr	r0, [pc, #4]	; (8008400 <__malloc_lock+0x8>)
 80083fa:	f7ff bf7b 	b.w	80082f4 <__retarget_lock_acquire_recursive>
 80083fe:	bf00      	nop
 8008400:	200042f8 	.word	0x200042f8

08008404 <__malloc_unlock>:
 8008404:	4801      	ldr	r0, [pc, #4]	; (800840c <__malloc_unlock+0x8>)
 8008406:	f7ff bf76 	b.w	80082f6 <__retarget_lock_release_recursive>
 800840a:	bf00      	nop
 800840c:	200042f8 	.word	0x200042f8

08008410 <_free_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4605      	mov	r5, r0
 8008414:	2900      	cmp	r1, #0
 8008416:	d043      	beq.n	80084a0 <_free_r+0x90>
 8008418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800841c:	1f0c      	subs	r4, r1, #4
 800841e:	2b00      	cmp	r3, #0
 8008420:	bfb8      	it	lt
 8008422:	18e4      	addlt	r4, r4, r3
 8008424:	f7ff ffe8 	bl	80083f8 <__malloc_lock>
 8008428:	4a1e      	ldr	r2, [pc, #120]	; (80084a4 <_free_r+0x94>)
 800842a:	6813      	ldr	r3, [r2, #0]
 800842c:	4610      	mov	r0, r2
 800842e:	b933      	cbnz	r3, 800843e <_free_r+0x2e>
 8008430:	6063      	str	r3, [r4, #4]
 8008432:	6014      	str	r4, [r2, #0]
 8008434:	4628      	mov	r0, r5
 8008436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800843a:	f7ff bfe3 	b.w	8008404 <__malloc_unlock>
 800843e:	42a3      	cmp	r3, r4
 8008440:	d90a      	bls.n	8008458 <_free_r+0x48>
 8008442:	6821      	ldr	r1, [r4, #0]
 8008444:	1862      	adds	r2, r4, r1
 8008446:	4293      	cmp	r3, r2
 8008448:	bf01      	itttt	eq
 800844a:	681a      	ldreq	r2, [r3, #0]
 800844c:	685b      	ldreq	r3, [r3, #4]
 800844e:	1852      	addeq	r2, r2, r1
 8008450:	6022      	streq	r2, [r4, #0]
 8008452:	6063      	str	r3, [r4, #4]
 8008454:	6004      	str	r4, [r0, #0]
 8008456:	e7ed      	b.n	8008434 <_free_r+0x24>
 8008458:	461a      	mov	r2, r3
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	b10b      	cbz	r3, 8008462 <_free_r+0x52>
 800845e:	42a3      	cmp	r3, r4
 8008460:	d9fa      	bls.n	8008458 <_free_r+0x48>
 8008462:	6811      	ldr	r1, [r2, #0]
 8008464:	1850      	adds	r0, r2, r1
 8008466:	42a0      	cmp	r0, r4
 8008468:	d10b      	bne.n	8008482 <_free_r+0x72>
 800846a:	6820      	ldr	r0, [r4, #0]
 800846c:	4401      	add	r1, r0
 800846e:	1850      	adds	r0, r2, r1
 8008470:	4283      	cmp	r3, r0
 8008472:	6011      	str	r1, [r2, #0]
 8008474:	d1de      	bne.n	8008434 <_free_r+0x24>
 8008476:	6818      	ldr	r0, [r3, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	4401      	add	r1, r0
 800847c:	6011      	str	r1, [r2, #0]
 800847e:	6053      	str	r3, [r2, #4]
 8008480:	e7d8      	b.n	8008434 <_free_r+0x24>
 8008482:	d902      	bls.n	800848a <_free_r+0x7a>
 8008484:	230c      	movs	r3, #12
 8008486:	602b      	str	r3, [r5, #0]
 8008488:	e7d4      	b.n	8008434 <_free_r+0x24>
 800848a:	6820      	ldr	r0, [r4, #0]
 800848c:	1821      	adds	r1, r4, r0
 800848e:	428b      	cmp	r3, r1
 8008490:	bf01      	itttt	eq
 8008492:	6819      	ldreq	r1, [r3, #0]
 8008494:	685b      	ldreq	r3, [r3, #4]
 8008496:	1809      	addeq	r1, r1, r0
 8008498:	6021      	streq	r1, [r4, #0]
 800849a:	6063      	str	r3, [r4, #4]
 800849c:	6054      	str	r4, [r2, #4]
 800849e:	e7c9      	b.n	8008434 <_free_r+0x24>
 80084a0:	bd38      	pop	{r3, r4, r5, pc}
 80084a2:	bf00      	nop
 80084a4:	200040bc 	.word	0x200040bc

080084a8 <_init>:
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084aa:	bf00      	nop
 80084ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ae:	bc08      	pop	{r3}
 80084b0:	469e      	mov	lr, r3
 80084b2:	4770      	bx	lr

080084b4 <_fini>:
 80084b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b6:	bf00      	nop
 80084b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ba:	bc08      	pop	{r3}
 80084bc:	469e      	mov	lr, r3
 80084be:	4770      	bx	lr
