
Diplom_First_Step.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007940  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08007a50  08007a50  00017a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b38  08007b38  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007b38  08007b38  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b38  08007b38  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b38  08007b38  00017b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b3c  08007b3c  00017b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000428c  20000074  08007bb4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004300  08007bb4  00024300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea9a  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040d1  00000000  00000000  0003eb37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  00042c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001500  00000000  00000000  00044280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aac3  00000000  00000000  00045780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b4a  00000000  00000000  00060243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000966d2  00000000  00000000  00078d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010f45f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000600c  00000000  00000000  0010f4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a38 	.word	0x08007a38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08007a38 	.word	0x08007a38

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b088      	sub	sp, #32
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fc7d 	bl	8000a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f823 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8ed 	bl	800036c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000192:	f000 f89b 	bl	80002cc <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000196:	f000 f8c3 	bl	8000320 <MX_DMA_Init>
  MX_SPI2_Init();
 800019a:	f000 f861 	bl	8000260 <MX_SPI2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, ADXL345_Data_Collector_Task, osPriorityNormal, 0, 1536);
 800019e:	4b0b      	ldr	r3, [pc, #44]	; (80001cc <main+0x4c>)
 80001a0:	1d3c      	adds	r4, r7, #4
 80001a2:	461d      	mov	r5, r3
 80001a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	2100      	movs	r1, #0
 80001b4:	4618      	mov	r0, r3
 80001b6:	f004 ff0b 	bl	8004fd0 <osThreadCreate>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a04      	ldr	r2, [pc, #16]	; (80001d0 <main+0x50>)
 80001be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADXL345_Config();
 80001c0:	f000 f964 	bl	800048c <ADXL345_Config>
  //UART_Cobs_Config();
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001c4:	f004 fefd 	bl	8004fc2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c8:	e7fe      	b.n	80001c8 <main+0x48>
 80001ca:	bf00      	nop
 80001cc:	08007a5c 	.word	0x08007a5c
 80001d0:	200040c0 	.word	0x200040c0

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b090      	sub	sp, #64	; 0x40
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0318 	add.w	r3, r7, #24
 80001de:	2228      	movs	r2, #40	; 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f007 fb5e 	bl	80078a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]
 80001f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f6:	2301      	movs	r3, #1
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80001fa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80001fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000204:	2301      	movs	r3, #1
 8000206:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000208:	2302      	movs	r3, #2
 800020a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000210:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000212:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000216:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000218:	f107 0318 	add.w	r3, r7, #24
 800021c:	4618      	mov	r0, r3
 800021e:	f001 f995 	bl	800154c <HAL_RCC_OscConfig>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000228:	f000 fa26 	bl	8000678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022c:	230f      	movs	r3, #15
 800022e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000230:	2302      	movs	r3, #2
 8000232:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2102      	movs	r1, #2
 8000246:	4618      	mov	r0, r3
 8000248:	f001 fc00 	bl	8001a4c <HAL_RCC_ClockConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000252:	f000 fa11 	bl	8000678 <Error_Handler>
  }
}
 8000256:	bf00      	nop
 8000258:	3740      	adds	r7, #64	; 0x40
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <MX_SPI2_Init+0x64>)
 8000266:	4a18      	ldr	r2, [pc, #96]	; (80002c8 <MX_SPI2_Init+0x68>)
 8000268:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800026a:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <MX_SPI2_Init+0x64>)
 800026c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000270:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000272:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <MX_SPI2_Init+0x64>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000278:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <MX_SPI2_Init+0x64>)
 800027a:	2200      	movs	r2, #0
 800027c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800027e:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <MX_SPI2_Init+0x64>)
 8000280:	2202      	movs	r2, #2
 8000282:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <MX_SPI2_Init+0x64>)
 8000286:	2201      	movs	r2, #1
 8000288:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <MX_SPI2_Init+0x64>)
 800028c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000290:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000292:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <MX_SPI2_Init+0x64>)
 8000294:	2218      	movs	r2, #24
 8000296:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000298:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <MX_SPI2_Init+0x64>)
 800029a:	2200      	movs	r2, #0
 800029c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <MX_SPI2_Init+0x64>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <MX_SPI2_Init+0x64>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <MX_SPI2_Init+0x64>)
 80002ac:	220a      	movs	r2, #10
 80002ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002b0:	4804      	ldr	r0, [pc, #16]	; (80002c4 <MX_SPI2_Init+0x64>)
 80002b2:	f001 fd95 	bl	8001de0 <HAL_SPI_Init>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80002bc:	f000 f9dc 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	200040c4 	.word	0x200040c4
 80002c8:	40003800 	.word	0x40003800

080002cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002d0:	4b11      	ldr	r3, [pc, #68]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002d2:	4a12      	ldr	r2, [pc, #72]	; (800031c <MX_USART2_UART_Init+0x50>)
 80002d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002d6:	4b10      	ldr	r3, [pc, #64]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ea:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002f0:	4b09      	ldr	r3, [pc, #36]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002f2:	220c      	movs	r2, #12
 80002f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002f6:	4b08      	ldr	r3, [pc, #32]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 8000304:	f003 fa40 	bl	8003788 <HAL_UART_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800030e:	f000 f9b3 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	200041d8 	.word	0x200041d8
 800031c:	40004400 	.word	0x40004400

08000320 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <MX_DMA_Init+0x48>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a0f      	ldr	r2, [pc, #60]	; (8000368 <MX_DMA_Init+0x48>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6153      	str	r3, [r2, #20]
 8000332:	4b0d      	ldr	r3, [pc, #52]	; (8000368 <MX_DMA_Init+0x48>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800033e:	2200      	movs	r2, #0
 8000340:	2105      	movs	r1, #5
 8000342:	200e      	movs	r0, #14
 8000344:	f000 fc85 	bl	8000c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000348:	200e      	movs	r0, #14
 800034a:	f000 fc9e 	bl	8000c8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	2105      	movs	r1, #5
 8000352:	200f      	movs	r0, #15
 8000354:	f000 fc7d 	bl	8000c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000358:	200f      	movs	r0, #15
 800035a:	f000 fc96 	bl	8000c8a <HAL_NVIC_EnableIRQ>

}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	f107 0310 	add.w	r3, r7, #16
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000380:	4b3d      	ldr	r3, [pc, #244]	; (8000478 <MX_GPIO_Init+0x10c>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a3c      	ldr	r2, [pc, #240]	; (8000478 <MX_GPIO_Init+0x10c>)
 8000386:	f043 0310 	orr.w	r3, r3, #16
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b3a      	ldr	r3, [pc, #232]	; (8000478 <MX_GPIO_Init+0x10c>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0310 	and.w	r3, r3, #16
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000398:	4b37      	ldr	r3, [pc, #220]	; (8000478 <MX_GPIO_Init+0x10c>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a36      	ldr	r2, [pc, #216]	; (8000478 <MX_GPIO_Init+0x10c>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b34      	ldr	r3, [pc, #208]	; (8000478 <MX_GPIO_Init+0x10c>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0320 	and.w	r3, r3, #32
 80003ac:	60bb      	str	r3, [r7, #8]
 80003ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b0:	4b31      	ldr	r3, [pc, #196]	; (8000478 <MX_GPIO_Init+0x10c>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a30      	ldr	r2, [pc, #192]	; (8000478 <MX_GPIO_Init+0x10c>)
 80003b6:	f043 0304 	orr.w	r3, r3, #4
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b2e      	ldr	r3, [pc, #184]	; (8000478 <MX_GPIO_Init+0x10c>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0304 	and.w	r3, r3, #4
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c8:	4b2b      	ldr	r3, [pc, #172]	; (8000478 <MX_GPIO_Init+0x10c>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a2a      	ldr	r2, [pc, #168]	; (8000478 <MX_GPIO_Init+0x10c>)
 80003ce:	f043 0308 	orr.w	r3, r3, #8
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b28      	ldr	r3, [pc, #160]	; (8000478 <MX_GPIO_Init+0x10c>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0308 	and.w	r3, r3, #8
 80003dc:	603b      	str	r3, [r7, #0]
 80003de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2120      	movs	r1, #32
 80003e4:	4825      	ldr	r0, [pc, #148]	; (800047c <MX_GPIO_Init+0x110>)
 80003e6:	f001 f881 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2140      	movs	r1, #64	; 0x40
 80003ee:	4824      	ldr	r0, [pc, #144]	; (8000480 <MX_GPIO_Init+0x114>)
 80003f0:	f001 f87c 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003fa:	4b22      	ldr	r3, [pc, #136]	; (8000484 <MX_GPIO_Init+0x118>)
 80003fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000402:	f107 0310 	add.w	r3, r7, #16
 8000406:	4619      	mov	r1, r3
 8000408:	481f      	ldr	r0, [pc, #124]	; (8000488 <MX_GPIO_Init+0x11c>)
 800040a:	f000 feeb 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_Pin */
  GPIO_InitStruct.Pin = Green_Pin;
 800040e:	2320      	movs	r3, #32
 8000410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000412:	2301      	movs	r3, #1
 8000414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	2302      	movs	r3, #2
 800041c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Green_GPIO_Port, &GPIO_InitStruct);
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	4619      	mov	r1, r3
 8000424:	4815      	ldr	r0, [pc, #84]	; (800047c <MX_GPIO_Init+0x110>)
 8000426:	f000 fedd 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Int2_Accelerometer_Pin */
  GPIO_InitStruct.Pin = GPIO_Int2_Accelerometer_Pin;
 800042a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <MX_GPIO_Init+0x118>)
 8000432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_Int2_Accelerometer_GPIO_Port, &GPIO_InitStruct);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	4619      	mov	r1, r3
 800043e:	480f      	ldr	r0, [pc, #60]	; (800047c <MX_GPIO_Init+0x110>)
 8000440:	f000 fed0 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000444:	2340      	movs	r3, #64	; 0x40
 8000446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000448:	2301      	movs	r3, #1
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	2300      	movs	r3, #0
 800044e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000450:	2303      	movs	r3, #3
 8000452:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	4619      	mov	r1, r3
 800045a:	4809      	ldr	r0, [pc, #36]	; (8000480 <MX_GPIO_Init+0x114>)
 800045c:	f000 fec2 	bl	80011e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000460:	2200      	movs	r2, #0
 8000462:	2105      	movs	r1, #5
 8000464:	2028      	movs	r0, #40	; 0x28
 8000466:	f000 fbf4 	bl	8000c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800046a:	2028      	movs	r0, #40	; 0x28
 800046c:	f000 fc0d 	bl	8000c8a <HAL_NVIC_EnableIRQ>

}
 8000470:	bf00      	nop
 8000472:	3720      	adds	r7, #32
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40021000 	.word	0x40021000
 800047c:	40010800 	.word	0x40010800
 8000480:	40010c00 	.word	0x40010c00
 8000484:	10110000 	.word	0x10110000
 8000488:	40011000 	.word	0x40011000

0800048c <ADXL345_Config>:

/* USER CODE BEGIN 4 */
void ADXL345_Config()
{
 800048c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048e:	b083      	sub	sp, #12
 8000490:	af02      	add	r7, sp, #8

	ADXL.spi.spi_rtos							=	&spi_rtos;
 8000492:	4b5b      	ldr	r3, [pc, #364]	; (8000600 <ADXL345_Config+0x174>)
 8000494:	4a5b      	ldr	r2, [pc, #364]	; (8000604 <ADXL345_Config+0x178>)
 8000496:	601a      	str	r2, [r3, #0]
	ADXL.spi.spi_rtos->hspi 					=	&hspi2;
 8000498:	4b59      	ldr	r3, [pc, #356]	; (8000600 <ADXL345_Config+0x174>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a5a      	ldr	r2, [pc, #360]	; (8000608 <ADXL345_Config+0x17c>)
 800049e:	601a      	str	r2, [r3, #0]
	if(spi_freertos_init(ADXL.spi.spi_rtos) == SPI_FREERTOS_EXIST)
 80004a0:	4b57      	ldr	r3, [pc, #348]	; (8000600 <ADXL345_Config+0x174>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f004 fa1f 	bl	80048e8 <spi_freertos_init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b05      	cmp	r3, #5
 80004ae:	d101      	bne.n	80004b4 <ADXL345_Config+0x28>
	{
		Error_Handler();
 80004b0:	f000 f8e2 	bl	8000678 <Error_Handler>
	}
	ADXL.spi.nss.pin							=	SPI_CS_Pin;
 80004b4:	4b52      	ldr	r3, [pc, #328]	; (8000600 <ADXL345_Config+0x174>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80004bc:	721a      	strb	r2, [r3, #8]
 80004be:	2200      	movs	r2, #0
 80004c0:	725a      	strb	r2, [r3, #9]
	ADXL.spi.nss.port 							=	SPI_CS_GPIO_Port;
 80004c2:	4b4f      	ldr	r3, [pc, #316]	; (8000600 <ADXL345_Config+0x174>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	711a      	strb	r2, [r3, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	f042 020c 	orr.w	r2, r2, #12
 80004ce:	715a      	strb	r2, [r3, #5]
 80004d0:	2200      	movs	r2, #0
 80004d2:	f042 0201 	orr.w	r2, r2, #1
 80004d6:	719a      	strb	r2, [r3, #6]
 80004d8:	2200      	movs	r2, #0
 80004da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80004de:	71da      	strb	r2, [r3, #7]
	ADXL.settings.data_rate 					=	ADXL345_DATARATE_3200_HZ;
 80004e0:	4b47      	ldr	r3, [pc, #284]	; (8000600 <ADXL345_Config+0x174>)
 80004e2:	220f      	movs	r2, #15
 80004e4:	f883 2020 	strb.w	r2, [r3, #32]
	ADXL.settings.meas_range					=	ADXL345_RANGE_16_G;
 80004e8:	4b45      	ldr	r3, [pc, #276]	; (8000600 <ADXL345_Config+0x174>)
 80004ea:	2203      	movs	r2, #3
 80004ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ADXL.settings.align							=	ADXL345_ALIGN_LSB;
 80004f0:	4b43      	ldr	r3, [pc, #268]	; (8000600 <ADXL345_Config+0x174>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ADXL.settings.resolution 					=	ADXL345_RESOLUTION_FULL;
 80004f8:	4b41      	ldr	r3, [pc, #260]	; (8000600 <ADXL345_Config+0x174>)
 80004fa:	2208      	movs	r2, #8
 80004fc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	Offset Parameter
	ADXL.settings.offset.x 						=	0;
 8000500:	4b3f      	ldr	r3, [pc, #252]	; (8000600 <ADXL345_Config+0x174>)
 8000502:	2200      	movs	r2, #0
 8000504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ADXL.settings.offset.y 						=	0;
 8000508:	4b3d      	ldr	r3, [pc, #244]	; (8000600 <ADXL345_Config+0x174>)
 800050a:	2200      	movs	r2, #0
 800050c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	ADXL.settings.offset.z 						=	0;
 8000510:	4b3b      	ldr	r3, [pc, #236]	; (8000600 <ADXL345_Config+0x174>)
 8000512:	2200      	movs	r2, #0
 8000514:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	//	Interrupt Settings
	ADXL.settings.int_en 						=	/*ADXL345_INT_DATA_READY;//*/ADXL345_INT_WATERMARK;
 8000518:	4b39      	ldr	r3, [pc, #228]	; (8000600 <ADXL345_Config+0x174>)
 800051a:	2202      	movs	r2, #2
 800051c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	ADXL.settings.map_to_int2 					=	/*ADXL345_INT_DATA_READY;//*/ADXL345_INT_WATERMARK;
 8000520:	4b37      	ldr	r3, [pc, #220]	; (8000600 <ADXL345_Config+0x174>)
 8000522:	2202      	movs	r2, #2
 8000524:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	ADXL.int2.pin 								=	GPIO_Int2_Accelerometer_Pin;
 8000528:	4b35      	ldr	r3, [pc, #212]	; (8000600 <ADXL345_Config+0x174>)
 800052a:	2200      	movs	r2, #0
 800052c:	771a      	strb	r2, [r3, #28]
 800052e:	2200      	movs	r2, #0
 8000530:	f042 0204 	orr.w	r2, r2, #4
 8000534:	775a      	strb	r2, [r3, #29]
	ADXL.int2.port								=	GPIO_Int2_Accelerometer_GPIO_Port;
 8000536:	4b32      	ldr	r3, [pc, #200]	; (8000600 <ADXL345_Config+0x174>)
 8000538:	2200      	movs	r2, #0
 800053a:	761a      	strb	r2, [r3, #24]
 800053c:	2200      	movs	r2, #0
 800053e:	f042 0208 	orr.w	r2, r2, #8
 8000542:	765a      	strb	r2, [r3, #25]
 8000544:	2200      	movs	r2, #0
 8000546:	f042 0201 	orr.w	r2, r2, #1
 800054a:	769a      	strb	r2, [r3, #26]
 800054c:	2200      	movs	r2, #0
 800054e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000552:	76da      	strb	r2, [r3, #27]
	ADXL.settings.fifo_watermark 				=	/*0x00; //*/0x25;
 8000554:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <ADXL345_Config+0x174>)
 8000556:	2225      	movs	r2, #37	; 0x25
 8000558:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	ADXL.settings.fifo_mode 					=	/*ADXL345_FIFO_BYPASS; //*/ADXL345_FIFO_FIFO;
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <ADXL345_Config+0x174>)
 800055e:	2240      	movs	r2, #64	; 0x40
 8000560:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	ADXL.settings.fifo_trigger 					=	ADXL345_FIFO_TRIG_INT1;
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <ADXL345_Config+0x174>)
 8000566:	2200      	movs	r2, #0
 8000568:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	ADXL.mutex_timeout 							=	100;
 800056c:	4b24      	ldr	r3, [pc, #144]	; (8000600 <ADXL345_Config+0x174>)
 800056e:	2200      	movs	r2, #0
 8000570:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 8000574:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000578:	2200      	movs	r2, #0
 800057a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800057e:	2200      	movs	r2, #0
 8000580:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8000584:	2200      	movs	r2, #0
 8000586:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	ADXL.transfer_timeout 						=	100;
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <ADXL345_Config+0x174>)
 800058c:	2200      	movs	r2, #0
 800058e:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 8000592:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000596:	2200      	movs	r2, #0
 8000598:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800059c:	2200      	movs	r2, #0
 800059e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80005a2:	2200      	movs	r2, #0
 80005a4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	//	Configurate FREE RTOS AND ADXL345

	hadxl.hadxl 								=	ADXL;
 80005a8:	4a18      	ldr	r2, [pc, #96]	; (800060c <ADXL345_Config+0x180>)
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <ADXL345_Config+0x174>)
 80005ac:	4610      	mov	r0, r2
 80005ae:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80005b2:	4602      	mov	r2, r0
 80005b4:	4619      	mov	r1, r3
 80005b6:	f8d1 c000 	ldr.w	ip, [r1]
 80005ba:	684e      	ldr	r6, [r1, #4]
 80005bc:	688d      	ldr	r5, [r1, #8]
 80005be:	68c9      	ldr	r1, [r1, #12]
 80005c0:	f8c2 c000 	str.w	ip, [r2]
 80005c4:	6056      	str	r6, [r2, #4]
 80005c6:	6095      	str	r5, [r2, #8]
 80005c8:	60d1      	str	r1, [r2, #12]
 80005ca:	3310      	adds	r3, #16
 80005cc:	3010      	adds	r0, #16
 80005ce:	42a3      	cmp	r3, r4
 80005d0:	d1ef      	bne.n	80005b2 <ADXL345_Config+0x126>
 80005d2:	4602      	mov	r2, r0
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6013      	str	r3, [r2, #0]
	hadxl.fifo_frame_size 						=	128;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <ADXL345_Config+0x180>)
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadxl.fifo_frame_qty 						=	8;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <ADXL345_Config+0x180>)
 80005e2:	2208      	movs	r2, #8
 80005e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	adxl345_task_create(						"Task_ADXL345_RTOS",
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <ADXL345_Config+0x180>)
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	4807      	ldr	r0, [pc, #28]	; (8000610 <ADXL345_Config+0x184>)
 80005f4:	f004 f832 	bl	800465c <adxl345_task_create>
	/*while(adxl345_init(&ADXL) != ADXL345_OK)
	{
	}
#endif*/

}
 80005f8:	bf00      	nop
 80005fa:	3704      	adds	r7, #4
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000600:	20004260 	.word	0x20004260
 8000604:	20004188 	.word	0x20004188
 8000608:	200040c4 	.word	0x200040c4
 800060c:	20004198 	.word	0x20004198
 8000610:	08007a78 	.word	0x08007a78

08000614 <ADXL345_Data_Collector_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ADXL345_Data_Collector_Task */
void ADXL345_Data_Collector_Task(void const * argument)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b0e4      	sub	sp, #400	; 0x190
 8000618:	af00      	add	r7, sp, #0
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	6018      	str	r0, [r3, #0]

	adxl345_acc_offset_t	data[128];
	uint16_t Index_Count;
Start_Mesurments:

	Index_Count 					= 	0;
 800061e:	2300      	movs	r3, #0
 8000620:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
	//adxl345_start(&ADXL);

	/* Infinite loop */
	while(Index_Count <= Length_Realization)
 8000624:	e00e      	b.n	8000644 <ADXL345_Data_Collector_Task+0x30>
	{
		xQueueReceive(hadxl.fifo_frame_ptr_queue, &data, portMAX_DELAY);
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <ADXL345_Data_Collector_Task+0x3c>)
 8000628:	f8d3 3039 	ldr.w	r3, [r3, #57]	; 0x39
 800062c:	f107 010c 	add.w	r1, r7, #12
 8000630:	f04f 32ff 	mov.w	r2, #4294967295
 8000634:	4618      	mov	r0, r3
 8000636:	f005 f84b 	bl	80056d0 <xQueueReceive>
		Index_Count++;
 800063a:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 800063e:	3301      	adds	r3, #1
 8000640:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
	while(Index_Count <= Length_Realization)
 8000644:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8000648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800064c:	d9eb      	bls.n	8000626 <ADXL345_Data_Collector_Task+0x12>
	}

	//uart_cobs_send(&Cobs_UART, &Signal, Length_Realization, 10 * portTICK_PERIOD_MS);
	goto Start_Mesurments;
 800064e:	e7e6      	b.n	800061e <ADXL345_Data_Collector_Task+0xa>
 8000650:	20004198 	.word	0x20004198

08000654 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d101      	bne.n	800066a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000666:	f000 fa23 	bl	8000ab0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40000800 	.word	0x40000800

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000680:	e7fe      	b.n	8000680 <Error_Handler+0x8>
	...

08000684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <HAL_MspInit+0x68>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a17      	ldr	r2, [pc, #92]	; (80006ec <HAL_MspInit+0x68>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6193      	str	r3, [r2, #24]
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <HAL_MspInit+0x68>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_MspInit+0x68>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	4a11      	ldr	r2, [pc, #68]	; (80006ec <HAL_MspInit+0x68>)
 80006a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ac:	61d3      	str	r3, [r2, #28]
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_MspInit+0x68>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	210f      	movs	r1, #15
 80006be:	f06f 0001 	mvn.w	r0, #1
 80006c2:	f000 fac6 	bl	8000c52 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <HAL_MspInit+0x6c>)
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <HAL_MspInit+0x6c>)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40010000 	.word	0x40010000

080006f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a47      	ldr	r2, [pc, #284]	; (800082c <HAL_SPI_MspInit+0x138>)
 8000710:	4293      	cmp	r3, r2
 8000712:	f040 8086 	bne.w	8000822 <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000716:	4b46      	ldr	r3, [pc, #280]	; (8000830 <HAL_SPI_MspInit+0x13c>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a45      	ldr	r2, [pc, #276]	; (8000830 <HAL_SPI_MspInit+0x13c>)
 800071c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b43      	ldr	r3, [pc, #268]	; (8000830 <HAL_SPI_MspInit+0x13c>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	4b40      	ldr	r3, [pc, #256]	; (8000830 <HAL_SPI_MspInit+0x13c>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a3f      	ldr	r2, [pc, #252]	; (8000830 <HAL_SPI_MspInit+0x13c>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	6193      	str	r3, [r2, #24]
 800073a:	4b3d      	ldr	r3, [pc, #244]	; (8000830 <HAL_SPI_MspInit+0x13c>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000746:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800074a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	2302      	movs	r3, #2
 800074e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	4619      	mov	r1, r3
 800075a:	4836      	ldr	r0, [pc, #216]	; (8000834 <HAL_SPI_MspInit+0x140>)
 800075c:	f000 fd42 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000760:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000764:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4619      	mov	r1, r3
 8000774:	482f      	ldr	r0, [pc, #188]	; (8000834 <HAL_SPI_MspInit+0x140>)
 8000776:	f000 fd35 	bl	80011e4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800077a:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <HAL_SPI_MspInit+0x144>)
 800077c:	4a2f      	ldr	r2, [pc, #188]	; (800083c <HAL_SPI_MspInit+0x148>)
 800077e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000780:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <HAL_SPI_MspInit+0x144>)
 8000782:	2200      	movs	r2, #0
 8000784:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <HAL_SPI_MspInit+0x144>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800078c:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <HAL_SPI_MspInit+0x144>)
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000792:	4b29      	ldr	r3, [pc, #164]	; (8000838 <HAL_SPI_MspInit+0x144>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000798:	4b27      	ldr	r3, [pc, #156]	; (8000838 <HAL_SPI_MspInit+0x144>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800079e:	4b26      	ldr	r3, [pc, #152]	; (8000838 <HAL_SPI_MspInit+0x144>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007a4:	4b24      	ldr	r3, [pc, #144]	; (8000838 <HAL_SPI_MspInit+0x144>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80007aa:	4823      	ldr	r0, [pc, #140]	; (8000838 <HAL_SPI_MspInit+0x144>)
 80007ac:	f000 fa7c 	bl	8000ca8 <HAL_DMA_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 80007b6:	f7ff ff5f 	bl	8000678 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a1e      	ldr	r2, [pc, #120]	; (8000838 <HAL_SPI_MspInit+0x144>)
 80007be:	64da      	str	r2, [r3, #76]	; 0x4c
 80007c0:	4a1d      	ldr	r2, [pc, #116]	; (8000838 <HAL_SPI_MspInit+0x144>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <HAL_SPI_MspInit+0x14c>)
 80007c8:	4a1e      	ldr	r2, [pc, #120]	; (8000844 <HAL_SPI_MspInit+0x150>)
 80007ca:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <HAL_SPI_MspInit+0x14c>)
 80007ce:	2210      	movs	r2, #16
 80007d0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <HAL_SPI_MspInit+0x14c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <HAL_SPI_MspInit+0x14c>)
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <HAL_SPI_MspInit+0x14c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <HAL_SPI_MspInit+0x14c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <HAL_SPI_MspInit+0x14c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <HAL_SPI_MspInit+0x14c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80007f6:	4812      	ldr	r0, [pc, #72]	; (8000840 <HAL_SPI_MspInit+0x14c>)
 80007f8:	f000 fa56 	bl	8000ca8 <HAL_DMA_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8000802:	f7ff ff39 	bl	8000678 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a0d      	ldr	r2, [pc, #52]	; (8000840 <HAL_SPI_MspInit+0x14c>)
 800080a:	649a      	str	r2, [r3, #72]	; 0x48
 800080c:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <HAL_SPI_MspInit+0x14c>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2105      	movs	r1, #5
 8000816:	2024      	movs	r0, #36	; 0x24
 8000818:	f000 fa1b 	bl	8000c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800081c:	2024      	movs	r0, #36	; 0x24
 800081e:	f000 fa34 	bl	8000c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000822:	bf00      	nop
 8000824:	3720      	adds	r7, #32
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40003800 	.word	0x40003800
 8000830:	40021000 	.word	0x40021000
 8000834:	40010c00 	.word	0x40010c00
 8000838:	20004144 	.word	0x20004144
 800083c:	40020044 	.word	0x40020044
 8000840:	2000421c 	.word	0x2000421c
 8000844:	40020058 	.word	0x40020058

08000848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a19      	ldr	r2, [pc, #100]	; (80008c8 <HAL_UART_MspInit+0x80>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d12b      	bne.n	80008c0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000868:	4b18      	ldr	r3, [pc, #96]	; (80008cc <HAL_UART_MspInit+0x84>)
 800086a:	69db      	ldr	r3, [r3, #28]
 800086c:	4a17      	ldr	r2, [pc, #92]	; (80008cc <HAL_UART_MspInit+0x84>)
 800086e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000872:	61d3      	str	r3, [r2, #28]
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <HAL_UART_MspInit+0x84>)
 8000876:	69db      	ldr	r3, [r3, #28]
 8000878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_UART_MspInit+0x84>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a11      	ldr	r2, [pc, #68]	; (80008cc <HAL_UART_MspInit+0x84>)
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <HAL_UART_MspInit+0x84>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000898:	230c      	movs	r3, #12
 800089a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	4619      	mov	r1, r3
 80008aa:	4809      	ldr	r0, [pc, #36]	; (80008d0 <HAL_UART_MspInit+0x88>)
 80008ac:	f000 fc9a 	bl	80011e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2105      	movs	r1, #5
 80008b4:	2026      	movs	r0, #38	; 0x26
 80008b6:	f000 f9cc 	bl	8000c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008ba:	2026      	movs	r0, #38	; 0x26
 80008bc:	f000 f9e5 	bl	8000c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008c0:	bf00      	nop
 80008c2:	3720      	adds	r7, #32
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40004400 	.word	0x40004400
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40010800 	.word	0x40010800

080008d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	; 0x30
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	201e      	movs	r0, #30
 80008ea:	f000 f9b2 	bl	8000c52 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008ee:	201e      	movs	r0, #30
 80008f0:	f000 f9cb 	bl	8000c8a <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <HAL_InitTick+0xa0>)
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	4a1e      	ldr	r2, [pc, #120]	; (8000974 <HAL_InitTick+0xa0>)
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	61d3      	str	r3, [r2, #28]
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <HAL_InitTick+0xa0>)
 8000902:	69db      	ldr	r3, [r3, #28]
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800090c:	f107 0210 	add.w	r2, r7, #16
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4611      	mov	r1, r2
 8000916:	4618      	mov	r0, r3
 8000918:	f001 fa14 	bl	8001d44 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800091c:	f001 f9ea 	bl	8001cf4 <HAL_RCC_GetPCLK1Freq>
 8000920:	4603      	mov	r3, r0
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000928:	4a13      	ldr	r2, [pc, #76]	; (8000978 <HAL_InitTick+0xa4>)
 800092a:	fba2 2303 	umull	r2, r3, r2, r3
 800092e:	0c9b      	lsrs	r3, r3, #18
 8000930:	3b01      	subs	r3, #1
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_InitTick+0xa8>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <HAL_InitTick+0xac>)
 8000938:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <HAL_InitTick+0xa8>)
 800093c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000940:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000942:	4a0e      	ldr	r2, [pc, #56]	; (800097c <HAL_InitTick+0xa8>)
 8000944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000946:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <HAL_InitTick+0xa8>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <HAL_InitTick+0xa8>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000954:	4809      	ldr	r0, [pc, #36]	; (800097c <HAL_InitTick+0xa8>)
 8000956:	f002 fccd 	bl	80032f4 <HAL_TIM_Base_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d104      	bne.n	800096a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000960:	4806      	ldr	r0, [pc, #24]	; (800097c <HAL_InitTick+0xa8>)
 8000962:	f002 fd1f 	bl	80033a4 <HAL_TIM_Base_Start_IT>
 8000966:	4603      	mov	r3, r0
 8000968:	e000      	b.n	800096c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3730      	adds	r7, #48	; 0x30
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40021000 	.word	0x40021000
 8000978:	431bde83 	.word	0x431bde83
 800097c:	200042a8 	.word	0x200042a8
 8000980:	40000800 	.word	0x40000800

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
	...

080009b0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <DMA1_Channel4_IRQHandler+0x10>)
 80009b6:	f000 fae1 	bl	8000f7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20004144 	.word	0x20004144

080009c4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <DMA1_Channel5_IRQHandler+0x10>)
 80009ca:	f000 fad7 	bl	8000f7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000421c 	.word	0x2000421c

080009d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <TIM4_IRQHandler+0x10>)
 80009de:	f002 fd33 	bl	8003448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200042a8 	.word	0x200042a8

080009ec <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <SPI2_IRQHandler+0x10>)
 80009f2:	f002 f91b 	bl	8002c2c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200040c4 	.word	0x200040c4

08000a00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <USART2_IRQHandler+0x10>)
 8000a06:	f002 ff0d 	bl	8003824 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200041d8 	.word	0x200041d8

08000a14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000a18:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a1c:	f000 fd7e 	bl	800151c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a24:	f000 fd7a 	bl	800151c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a3a:	490d      	ldr	r1, [pc, #52]	; (8000a70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a50:	4c0a      	ldr	r4, [pc, #40]	; (8000a7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a5e:	f7ff ffe5 	bl	8000a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a62:	f006 feeb 	bl	800783c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a66:	f7ff fb8b 	bl	8000180 <main>
  bx lr
 8000a6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a74:	08007b40 	.word	0x08007b40
  ldr r2, =_sbss
 8000a78:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a7c:	20004300 	.word	0x20004300

08000a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_2_IRQHandler>
	...

08000a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_Init+0x28>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <HAL_Init+0x28>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f8d1 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9a:	200f      	movs	r0, #15
 8000a9c:	f7ff ff1a 	bl	80008d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa0:	f7ff fdf0 	bl	8000684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40022000 	.word	0x40022000

08000ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x1c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_IncTick+0x20>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a03      	ldr	r2, [pc, #12]	; (8000ad0 <HAL_IncTick+0x20>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	200042f0 	.word	0x200042f0

08000ad4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b02      	ldr	r3, [pc, #8]	; (8000ae4 <HAL_GetTick+0x10>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	200042f0 	.word	0x200042f0

08000ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b04:	4013      	ands	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1a:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	60d3      	str	r3, [r2, #12]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <__NVIC_GetPriorityGrouping+0x18>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	f003 0307 	and.w	r3, r3, #7
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db0b      	blt.n	8000b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	f003 021f 	and.w	r2, r3, #31
 8000b64:	4906      	ldr	r1, [pc, #24]	; (8000b80 <__NVIC_EnableIRQ+0x34>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	095b      	lsrs	r3, r3, #5
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100

08000b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	db0a      	blt.n	8000bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <__NVIC_SetPriority+0x4c>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	0112      	lsls	r2, r2, #4
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bac:	e00a      	b.n	8000bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4908      	ldr	r1, [pc, #32]	; (8000bd4 <__NVIC_SetPriority+0x50>)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	f003 030f 	and.w	r3, r3, #15
 8000bba:	3b04      	subs	r3, #4
 8000bbc:	0112      	lsls	r2, r2, #4
 8000bbe:	b2d2      	uxtb	r2, r2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	761a      	strb	r2, [r3, #24]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000e100 	.word	0xe000e100
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b089      	sub	sp, #36	; 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	f1c3 0307 	rsb	r3, r3, #7
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	bf28      	it	cs
 8000bf6:	2304      	movcs	r3, #4
 8000bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	2b06      	cmp	r3, #6
 8000c00:	d902      	bls.n	8000c08 <NVIC_EncodePriority+0x30>
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3b03      	subs	r3, #3
 8000c06:	e000      	b.n	8000c0a <NVIC_EncodePriority+0x32>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43da      	mvns	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	43d9      	mvns	r1, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	4313      	orrs	r3, r2
         );
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3724      	adds	r7, #36	; 0x24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff4f 	bl	8000ae8 <__NVIC_SetPriorityGrouping>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c64:	f7ff ff64 	bl	8000b30 <__NVIC_GetPriorityGrouping>
 8000c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	6978      	ldr	r0, [r7, #20]
 8000c70:	f7ff ffb2 	bl	8000bd8 <NVIC_EncodePriority>
 8000c74:	4602      	mov	r2, r0
 8000c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff81 	bl	8000b84 <__NVIC_SetPriority>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff57 	bl	8000b4c <__NVIC_EnableIRQ>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d101      	bne.n	8000cbe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e043      	b.n	8000d46 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <HAL_DMA_Init+0xa8>)
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a22      	ldr	r2, [pc, #136]	; (8000d54 <HAL_DMA_Init+0xac>)
 8000cca:	fba2 2303 	umull	r2, r3, r2, r3
 8000cce:	091b      	lsrs	r3, r3, #4
 8000cd0:	009a      	lsls	r2, r3, #2
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a1f      	ldr	r2, [pc, #124]	; (8000d58 <HAL_DMA_Init+0xb0>)
 8000cda:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2202      	movs	r2, #2
 8000ce0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000cf2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000cf6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2200      	movs	r2, #0
 8000d32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2201      	movs	r2, #1
 8000d38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	bffdfff8 	.word	0xbffdfff8
 8000d54:	cccccccd 	.word	0xcccccccd
 8000d58:	40020000 	.word	0x40020000

08000d5c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d101      	bne.n	8000d7c <HAL_DMA_Start_IT+0x20>
 8000d78:	2302      	movs	r3, #2
 8000d7a:	e04a      	b.n	8000e12 <HAL_DMA_Start_IT+0xb6>
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d13a      	bne.n	8000e04 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2202      	movs	r2, #2
 8000d92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f022 0201 	bic.w	r2, r2, #1
 8000daa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	68b9      	ldr	r1, [r7, #8]
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f000 f9e8 	bl	8001188 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d008      	beq.n	8000dd2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 020e 	orr.w	r2, r2, #14
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	e00f      	b.n	8000df2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f022 0204 	bic.w	r2, r2, #4
 8000de0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f042 020a 	orr.w	r2, r2, #10
 8000df0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f042 0201 	orr.w	r2, r2, #1
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	e005      	b.n	8000e10 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b085      	sub	sp, #20
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d008      	beq.n	8000e42 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2204      	movs	r2, #4
 8000e34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e020      	b.n	8000e84 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 020e 	bic.w	r2, r2, #14
 8000e50:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f022 0201 	bic.w	r2, r2, #1
 8000e60:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e70:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
	...

08000e90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d005      	beq.n	8000eb2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	e051      	b.n	8000f56 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 020e 	bic.w	r2, r2, #14
 8000ec0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f022 0201 	bic.w	r2, r2, #1
 8000ed0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a22      	ldr	r2, [pc, #136]	; (8000f60 <HAL_DMA_Abort_IT+0xd0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d029      	beq.n	8000f30 <HAL_DMA_Abort_IT+0xa0>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a20      	ldr	r2, [pc, #128]	; (8000f64 <HAL_DMA_Abort_IT+0xd4>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d022      	beq.n	8000f2c <HAL_DMA_Abort_IT+0x9c>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <HAL_DMA_Abort_IT+0xd8>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d01a      	beq.n	8000f26 <HAL_DMA_Abort_IT+0x96>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <HAL_DMA_Abort_IT+0xdc>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d012      	beq.n	8000f20 <HAL_DMA_Abort_IT+0x90>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a1c      	ldr	r2, [pc, #112]	; (8000f70 <HAL_DMA_Abort_IT+0xe0>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d00a      	beq.n	8000f1a <HAL_DMA_Abort_IT+0x8a>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1a      	ldr	r2, [pc, #104]	; (8000f74 <HAL_DMA_Abort_IT+0xe4>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d102      	bne.n	8000f14 <HAL_DMA_Abort_IT+0x84>
 8000f0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f12:	e00e      	b.n	8000f32 <HAL_DMA_Abort_IT+0xa2>
 8000f14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f18:	e00b      	b.n	8000f32 <HAL_DMA_Abort_IT+0xa2>
 8000f1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f1e:	e008      	b.n	8000f32 <HAL_DMA_Abort_IT+0xa2>
 8000f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f24:	e005      	b.n	8000f32 <HAL_DMA_Abort_IT+0xa2>
 8000f26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2a:	e002      	b.n	8000f32 <HAL_DMA_Abort_IT+0xa2>
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	e000      	b.n	8000f32 <HAL_DMA_Abort_IT+0xa2>
 8000f30:	2301      	movs	r3, #1
 8000f32:	4a11      	ldr	r2, [pc, #68]	; (8000f78 <HAL_DMA_Abort_IT+0xe8>)
 8000f34:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	4798      	blx	r3
    } 
  }
  return status;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40020008 	.word	0x40020008
 8000f64:	4002001c 	.word	0x4002001c
 8000f68:	40020030 	.word	0x40020030
 8000f6c:	40020044 	.word	0x40020044
 8000f70:	40020058 	.word	0x40020058
 8000f74:	4002006c 	.word	0x4002006c
 8000f78:	40020000 	.word	0x40020000

08000f7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	2204      	movs	r2, #4
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d04f      	beq.n	8001044 <HAL_DMA_IRQHandler+0xc8>
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d04a      	beq.n	8001044 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0320 	and.w	r3, r3, #32
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d107      	bne.n	8000fcc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0204 	bic.w	r2, r2, #4
 8000fca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a66      	ldr	r2, [pc, #408]	; (800116c <HAL_DMA_IRQHandler+0x1f0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d029      	beq.n	800102a <HAL_DMA_IRQHandler+0xae>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a65      	ldr	r2, [pc, #404]	; (8001170 <HAL_DMA_IRQHandler+0x1f4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d022      	beq.n	8001026 <HAL_DMA_IRQHandler+0xaa>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a63      	ldr	r2, [pc, #396]	; (8001174 <HAL_DMA_IRQHandler+0x1f8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d01a      	beq.n	8001020 <HAL_DMA_IRQHandler+0xa4>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a62      	ldr	r2, [pc, #392]	; (8001178 <HAL_DMA_IRQHandler+0x1fc>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d012      	beq.n	800101a <HAL_DMA_IRQHandler+0x9e>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a60      	ldr	r2, [pc, #384]	; (800117c <HAL_DMA_IRQHandler+0x200>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d00a      	beq.n	8001014 <HAL_DMA_IRQHandler+0x98>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a5f      	ldr	r2, [pc, #380]	; (8001180 <HAL_DMA_IRQHandler+0x204>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d102      	bne.n	800100e <HAL_DMA_IRQHandler+0x92>
 8001008:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800100c:	e00e      	b.n	800102c <HAL_DMA_IRQHandler+0xb0>
 800100e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001012:	e00b      	b.n	800102c <HAL_DMA_IRQHandler+0xb0>
 8001014:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001018:	e008      	b.n	800102c <HAL_DMA_IRQHandler+0xb0>
 800101a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800101e:	e005      	b.n	800102c <HAL_DMA_IRQHandler+0xb0>
 8001020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001024:	e002      	b.n	800102c <HAL_DMA_IRQHandler+0xb0>
 8001026:	2340      	movs	r3, #64	; 0x40
 8001028:	e000      	b.n	800102c <HAL_DMA_IRQHandler+0xb0>
 800102a:	2304      	movs	r3, #4
 800102c:	4a55      	ldr	r2, [pc, #340]	; (8001184 <HAL_DMA_IRQHandler+0x208>)
 800102e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 8094 	beq.w	8001162 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001042:	e08e      	b.n	8001162 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	2202      	movs	r2, #2
 800104a:	409a      	lsls	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4013      	ands	r3, r2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d056      	beq.n	8001102 <HAL_DMA_IRQHandler+0x186>
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d051      	beq.n	8001102 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0320 	and.w	r3, r3, #32
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10b      	bne.n	8001084 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 020a 	bic.w	r2, r2, #10
 800107a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a38      	ldr	r2, [pc, #224]	; (800116c <HAL_DMA_IRQHandler+0x1f0>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d029      	beq.n	80010e2 <HAL_DMA_IRQHandler+0x166>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a37      	ldr	r2, [pc, #220]	; (8001170 <HAL_DMA_IRQHandler+0x1f4>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d022      	beq.n	80010de <HAL_DMA_IRQHandler+0x162>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a35      	ldr	r2, [pc, #212]	; (8001174 <HAL_DMA_IRQHandler+0x1f8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d01a      	beq.n	80010d8 <HAL_DMA_IRQHandler+0x15c>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a34      	ldr	r2, [pc, #208]	; (8001178 <HAL_DMA_IRQHandler+0x1fc>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d012      	beq.n	80010d2 <HAL_DMA_IRQHandler+0x156>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a32      	ldr	r2, [pc, #200]	; (800117c <HAL_DMA_IRQHandler+0x200>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00a      	beq.n	80010cc <HAL_DMA_IRQHandler+0x150>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a31      	ldr	r2, [pc, #196]	; (8001180 <HAL_DMA_IRQHandler+0x204>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d102      	bne.n	80010c6 <HAL_DMA_IRQHandler+0x14a>
 80010c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010c4:	e00e      	b.n	80010e4 <HAL_DMA_IRQHandler+0x168>
 80010c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010ca:	e00b      	b.n	80010e4 <HAL_DMA_IRQHandler+0x168>
 80010cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010d0:	e008      	b.n	80010e4 <HAL_DMA_IRQHandler+0x168>
 80010d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d6:	e005      	b.n	80010e4 <HAL_DMA_IRQHandler+0x168>
 80010d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010dc:	e002      	b.n	80010e4 <HAL_DMA_IRQHandler+0x168>
 80010de:	2320      	movs	r3, #32
 80010e0:	e000      	b.n	80010e4 <HAL_DMA_IRQHandler+0x168>
 80010e2:	2302      	movs	r3, #2
 80010e4:	4a27      	ldr	r2, [pc, #156]	; (8001184 <HAL_DMA_IRQHandler+0x208>)
 80010e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d034      	beq.n	8001162 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001100:	e02f      	b.n	8001162 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	2208      	movs	r2, #8
 8001108:	409a      	lsls	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4013      	ands	r3, r2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d028      	beq.n	8001164 <HAL_DMA_IRQHandler+0x1e8>
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	f003 0308 	and.w	r3, r3, #8
 8001118:	2b00      	cmp	r3, #0
 800111a:	d023      	beq.n	8001164 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 020e 	bic.w	r2, r2, #14
 800112a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001134:	2101      	movs	r1, #1
 8001136:	fa01 f202 	lsl.w	r2, r1, r2
 800113a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	2b00      	cmp	r3, #0
 8001158:	d004      	beq.n	8001164 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	4798      	blx	r3
    }
  }
  return;
 8001162:	bf00      	nop
 8001164:	bf00      	nop
}
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40020008 	.word	0x40020008
 8001170:	4002001c 	.word	0x4002001c
 8001174:	40020030 	.word	0x40020030
 8001178:	40020044 	.word	0x40020044
 800117c:	40020058 	.word	0x40020058
 8001180:	4002006c 	.word	0x4002006c
 8001184:	40020000 	.word	0x40020000

08001188 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b10      	cmp	r3, #16
 80011b4:	d108      	bne.n	80011c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011c6:	e007      	b.n	80011d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	60da      	str	r2, [r3, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b08b      	sub	sp, #44	; 0x2c
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f6:	e169      	b.n	80014cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011f8:	2201      	movs	r2, #1
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	429a      	cmp	r2, r3
 8001212:	f040 8158 	bne.w	80014c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4a9a      	ldr	r2, [pc, #616]	; (8001484 <HAL_GPIO_Init+0x2a0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d05e      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 8001220:	4a98      	ldr	r2, [pc, #608]	; (8001484 <HAL_GPIO_Init+0x2a0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d875      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 8001226:	4a98      	ldr	r2, [pc, #608]	; (8001488 <HAL_GPIO_Init+0x2a4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d058      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 800122c:	4a96      	ldr	r2, [pc, #600]	; (8001488 <HAL_GPIO_Init+0x2a4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d86f      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 8001232:	4a96      	ldr	r2, [pc, #600]	; (800148c <HAL_GPIO_Init+0x2a8>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d052      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 8001238:	4a94      	ldr	r2, [pc, #592]	; (800148c <HAL_GPIO_Init+0x2a8>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d869      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 800123e:	4a94      	ldr	r2, [pc, #592]	; (8001490 <HAL_GPIO_Init+0x2ac>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d04c      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 8001244:	4a92      	ldr	r2, [pc, #584]	; (8001490 <HAL_GPIO_Init+0x2ac>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d863      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 800124a:	4a92      	ldr	r2, [pc, #584]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d046      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 8001250:	4a90      	ldr	r2, [pc, #576]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d85d      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 8001256:	2b12      	cmp	r3, #18
 8001258:	d82a      	bhi.n	80012b0 <HAL_GPIO_Init+0xcc>
 800125a:	2b12      	cmp	r3, #18
 800125c:	d859      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 800125e:	a201      	add	r2, pc, #4	; (adr r2, 8001264 <HAL_GPIO_Init+0x80>)
 8001260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001264:	080012df 	.word	0x080012df
 8001268:	080012b9 	.word	0x080012b9
 800126c:	080012cb 	.word	0x080012cb
 8001270:	0800130d 	.word	0x0800130d
 8001274:	08001313 	.word	0x08001313
 8001278:	08001313 	.word	0x08001313
 800127c:	08001313 	.word	0x08001313
 8001280:	08001313 	.word	0x08001313
 8001284:	08001313 	.word	0x08001313
 8001288:	08001313 	.word	0x08001313
 800128c:	08001313 	.word	0x08001313
 8001290:	08001313 	.word	0x08001313
 8001294:	08001313 	.word	0x08001313
 8001298:	08001313 	.word	0x08001313
 800129c:	08001313 	.word	0x08001313
 80012a0:	08001313 	.word	0x08001313
 80012a4:	08001313 	.word	0x08001313
 80012a8:	080012c1 	.word	0x080012c1
 80012ac:	080012d5 	.word	0x080012d5
 80012b0:	4a79      	ldr	r2, [pc, #484]	; (8001498 <HAL_GPIO_Init+0x2b4>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d013      	beq.n	80012de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012b6:	e02c      	b.n	8001312 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	623b      	str	r3, [r7, #32]
          break;
 80012be:	e029      	b.n	8001314 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	3304      	adds	r3, #4
 80012c6:	623b      	str	r3, [r7, #32]
          break;
 80012c8:	e024      	b.n	8001314 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	3308      	adds	r3, #8
 80012d0:	623b      	str	r3, [r7, #32]
          break;
 80012d2:	e01f      	b.n	8001314 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	330c      	adds	r3, #12
 80012da:	623b      	str	r3, [r7, #32]
          break;
 80012dc:	e01a      	b.n	8001314 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012e6:	2304      	movs	r3, #4
 80012e8:	623b      	str	r3, [r7, #32]
          break;
 80012ea:	e013      	b.n	8001314 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d105      	bne.n	8001300 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f4:	2308      	movs	r3, #8
 80012f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	611a      	str	r2, [r3, #16]
          break;
 80012fe:	e009      	b.n	8001314 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001300:	2308      	movs	r3, #8
 8001302:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69fa      	ldr	r2, [r7, #28]
 8001308:	615a      	str	r2, [r3, #20]
          break;
 800130a:	e003      	b.n	8001314 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e000      	b.n	8001314 <HAL_GPIO_Init+0x130>
          break;
 8001312:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	2bff      	cmp	r3, #255	; 0xff
 8001318:	d801      	bhi.n	800131e <HAL_GPIO_Init+0x13a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	e001      	b.n	8001322 <HAL_GPIO_Init+0x13e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3304      	adds	r3, #4
 8001322:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	2bff      	cmp	r3, #255	; 0xff
 8001328:	d802      	bhi.n	8001330 <HAL_GPIO_Init+0x14c>
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	e002      	b.n	8001336 <HAL_GPIO_Init+0x152>
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	3b08      	subs	r3, #8
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	210f      	movs	r1, #15
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	401a      	ands	r2, r3
 8001348:	6a39      	ldr	r1, [r7, #32]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	fa01 f303 	lsl.w	r3, r1, r3
 8001350:	431a      	orrs	r2, r3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 80b1 	beq.w	80014c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001364:	4b4d      	ldr	r3, [pc, #308]	; (800149c <HAL_GPIO_Init+0x2b8>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a4c      	ldr	r2, [pc, #304]	; (800149c <HAL_GPIO_Init+0x2b8>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b4a      	ldr	r3, [pc, #296]	; (800149c <HAL_GPIO_Init+0x2b8>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800137c:	4a48      	ldr	r2, [pc, #288]	; (80014a0 <HAL_GPIO_Init+0x2bc>)
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001388:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	4013      	ands	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a40      	ldr	r2, [pc, #256]	; (80014a4 <HAL_GPIO_Init+0x2c0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d013      	beq.n	80013d0 <HAL_GPIO_Init+0x1ec>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a3f      	ldr	r2, [pc, #252]	; (80014a8 <HAL_GPIO_Init+0x2c4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d00d      	beq.n	80013cc <HAL_GPIO_Init+0x1e8>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a3e      	ldr	r2, [pc, #248]	; (80014ac <HAL_GPIO_Init+0x2c8>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d007      	beq.n	80013c8 <HAL_GPIO_Init+0x1e4>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a3d      	ldr	r2, [pc, #244]	; (80014b0 <HAL_GPIO_Init+0x2cc>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d101      	bne.n	80013c4 <HAL_GPIO_Init+0x1e0>
 80013c0:	2303      	movs	r3, #3
 80013c2:	e006      	b.n	80013d2 <HAL_GPIO_Init+0x1ee>
 80013c4:	2304      	movs	r3, #4
 80013c6:	e004      	b.n	80013d2 <HAL_GPIO_Init+0x1ee>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e002      	b.n	80013d2 <HAL_GPIO_Init+0x1ee>
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <HAL_GPIO_Init+0x1ee>
 80013d0:	2300      	movs	r3, #0
 80013d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d4:	f002 0203 	and.w	r2, r2, #3
 80013d8:	0092      	lsls	r2, r2, #2
 80013da:	4093      	lsls	r3, r2
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013e2:	492f      	ldr	r1, [pc, #188]	; (80014a0 <HAL_GPIO_Init+0x2bc>)
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	3302      	adds	r3, #2
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013fc:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	492c      	ldr	r1, [pc, #176]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	600b      	str	r3, [r1, #0]
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800140a:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	43db      	mvns	r3, r3
 8001412:	4928      	ldr	r1, [pc, #160]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001414:	4013      	ands	r3, r2
 8001416:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	4922      	ldr	r1, [pc, #136]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	43db      	mvns	r3, r3
 800143a:	491e      	ldr	r1, [pc, #120]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 800143c:	4013      	ands	r3, r2
 800143e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d006      	beq.n	800145a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	4918      	ldr	r1, [pc, #96]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	608b      	str	r3, [r1, #8]
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	43db      	mvns	r3, r3
 8001462:	4914      	ldr	r1, [pc, #80]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001464:	4013      	ands	r3, r2
 8001466:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d021      	beq.n	80014b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	490e      	ldr	r1, [pc, #56]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	60cb      	str	r3, [r1, #12]
 8001480:	e021      	b.n	80014c6 <HAL_GPIO_Init+0x2e2>
 8001482:	bf00      	nop
 8001484:	10320000 	.word	0x10320000
 8001488:	10310000 	.word	0x10310000
 800148c:	10220000 	.word	0x10220000
 8001490:	10210000 	.word	0x10210000
 8001494:	10120000 	.word	0x10120000
 8001498:	10110000 	.word	0x10110000
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010000 	.word	0x40010000
 80014a4:	40010800 	.word	0x40010800
 80014a8:	40010c00 	.word	0x40010c00
 80014ac:	40011000 	.word	0x40011000
 80014b0:	40011400 	.word	0x40011400
 80014b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_GPIO_Init+0x304>)
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	43db      	mvns	r3, r3
 80014c0:	4909      	ldr	r1, [pc, #36]	; (80014e8 <HAL_GPIO_Init+0x304>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	3301      	adds	r3, #1
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	fa22 f303 	lsr.w	r3, r2, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f47f ae8e 	bne.w	80011f8 <HAL_GPIO_Init+0x14>
  }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	372c      	adds	r7, #44	; 0x2c
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	40010400 	.word	0x40010400

080014ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	807b      	strh	r3, [r7, #2]
 80014f8:	4613      	mov	r3, r2
 80014fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014fc:	787b      	ldrb	r3, [r7, #1]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001502:	887a      	ldrh	r2, [r7, #2]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001508:	e003      	b.n	8001512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800150a:	887b      	ldrh	r3, [r7, #2]
 800150c:	041a      	lsls	r2, r3, #16
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	611a      	str	r2, [r3, #16]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001532:	4a05      	ldr	r2, [pc, #20]	; (8001548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	4618      	mov	r0, r3
 800153c:	f003 f906 	bl	800474c <HAL_GPIO_EXTI_Callback>
  }
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40010400 	.word	0x40010400

0800154c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e26c      	b.n	8001a38 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 8087 	beq.w	800167a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800156c:	4b92      	ldr	r3, [pc, #584]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 030c 	and.w	r3, r3, #12
 8001574:	2b04      	cmp	r3, #4
 8001576:	d00c      	beq.n	8001592 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001578:	4b8f      	ldr	r3, [pc, #572]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 030c 	and.w	r3, r3, #12
 8001580:	2b08      	cmp	r3, #8
 8001582:	d112      	bne.n	80015aa <HAL_RCC_OscConfig+0x5e>
 8001584:	4b8c      	ldr	r3, [pc, #560]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001590:	d10b      	bne.n	80015aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001592:	4b89      	ldr	r3, [pc, #548]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d06c      	beq.n	8001678 <HAL_RCC_OscConfig+0x12c>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d168      	bne.n	8001678 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e246      	b.n	8001a38 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b2:	d106      	bne.n	80015c2 <HAL_RCC_OscConfig+0x76>
 80015b4:	4b80      	ldr	r3, [pc, #512]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a7f      	ldr	r2, [pc, #508]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	e02e      	b.n	8001620 <HAL_RCC_OscConfig+0xd4>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x98>
 80015ca:	4b7b      	ldr	r3, [pc, #492]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a7a      	ldr	r2, [pc, #488]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b78      	ldr	r3, [pc, #480]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a77      	ldr	r2, [pc, #476]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e01d      	b.n	8001620 <HAL_RCC_OscConfig+0xd4>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0xbc>
 80015ee:	4b72      	ldr	r3, [pc, #456]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a71      	ldr	r2, [pc, #452]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	4b6f      	ldr	r3, [pc, #444]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a6e      	ldr	r2, [pc, #440]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 8001600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e00b      	b.n	8001620 <HAL_RCC_OscConfig+0xd4>
 8001608:	4b6b      	ldr	r3, [pc, #428]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a6a      	ldr	r2, [pc, #424]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 800160e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b68      	ldr	r3, [pc, #416]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a67      	ldr	r2, [pc, #412]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 800161a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d013      	beq.n	8001650 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fa54 	bl	8000ad4 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fa50 	bl	8000ad4 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	; 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e1fa      	b.n	8001a38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	4b5d      	ldr	r3, [pc, #372]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0xe4>
 800164e:	e014      	b.n	800167a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fa40 	bl	8000ad4 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fa3c 	bl	8000ad4 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	; 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e1e6      	b.n	8001a38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166a:	4b53      	ldr	r3, [pc, #332]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x10c>
 8001676:	e000      	b.n	800167a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d063      	beq.n	800174e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001686:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00b      	beq.n	80016aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001692:	4b49      	ldr	r3, [pc, #292]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b08      	cmp	r3, #8
 800169c:	d11c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x18c>
 800169e:	4b46      	ldr	r3, [pc, #280]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d116      	bne.n	80016d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016aa:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <HAL_RCC_OscConfig+0x176>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e1ba      	b.n	8001a38 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c2:	4b3d      	ldr	r3, [pc, #244]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4939      	ldr	r1, [pc, #228]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d6:	e03a      	b.n	800174e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d020      	beq.n	8001722 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e0:	4b36      	ldr	r3, [pc, #216]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff f9f5 	bl	8000ad4 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ee:	f7ff f9f1 	bl	8000ad4 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e19b      	b.n	8001a38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170c:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4927      	ldr	r1, [pc, #156]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
 8001720:	e015      	b.n	800174e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001722:	4b26      	ldr	r3, [pc, #152]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff f9d4 	bl	8000ad4 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001730:	f7ff f9d0 	bl	8000ad4 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e17a      	b.n	8001a38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d03a      	beq.n	80017d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d019      	beq.n	8001796 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <HAL_RCC_OscConfig+0x274>)
 8001764:	2201      	movs	r2, #1
 8001766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001768:	f7ff f9b4 	bl	8000ad4 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff f9b0 	bl	8000ad4 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e15a      	b.n	8001a38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <HAL_RCC_OscConfig+0x26c>)
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800178e:	2001      	movs	r0, #1
 8001790:	f000 fb08 	bl	8001da4 <RCC_Delay>
 8001794:	e01c      	b.n	80017d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_RCC_OscConfig+0x274>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179c:	f7ff f99a 	bl	8000ad4 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a2:	e00f      	b.n	80017c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a4:	f7ff f996 	bl	8000ad4 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d908      	bls.n	80017c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e140      	b.n	8001a38 <HAL_RCC_OscConfig+0x4ec>
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000
 80017bc:	42420000 	.word	0x42420000
 80017c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c4:	4b9e      	ldr	r3, [pc, #632]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1e9      	bne.n	80017a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80a6 	beq.w	800192a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e2:	4b97      	ldr	r3, [pc, #604]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10d      	bne.n	800180a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	4b94      	ldr	r3, [pc, #592]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4a93      	ldr	r2, [pc, #588]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f8:	61d3      	str	r3, [r2, #28]
 80017fa:	4b91      	ldr	r3, [pc, #580]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001806:	2301      	movs	r3, #1
 8001808:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180a:	4b8e      	ldr	r3, [pc, #568]	; (8001a44 <HAL_RCC_OscConfig+0x4f8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001812:	2b00      	cmp	r3, #0
 8001814:	d118      	bne.n	8001848 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001816:	4b8b      	ldr	r3, [pc, #556]	; (8001a44 <HAL_RCC_OscConfig+0x4f8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a8a      	ldr	r2, [pc, #552]	; (8001a44 <HAL_RCC_OscConfig+0x4f8>)
 800181c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001822:	f7ff f957 	bl	8000ad4 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182a:	f7ff f953 	bl	8000ad4 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b64      	cmp	r3, #100	; 0x64
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e0fd      	b.n	8001a38 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183c:	4b81      	ldr	r3, [pc, #516]	; (8001a44 <HAL_RCC_OscConfig+0x4f8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d106      	bne.n	800185e <HAL_RCC_OscConfig+0x312>
 8001850:	4b7b      	ldr	r3, [pc, #492]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	4a7a      	ldr	r2, [pc, #488]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6213      	str	r3, [r2, #32]
 800185c:	e02d      	b.n	80018ba <HAL_RCC_OscConfig+0x36e>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10c      	bne.n	8001880 <HAL_RCC_OscConfig+0x334>
 8001866:	4b76      	ldr	r3, [pc, #472]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4a75      	ldr	r2, [pc, #468]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 800186c:	f023 0301 	bic.w	r3, r3, #1
 8001870:	6213      	str	r3, [r2, #32]
 8001872:	4b73      	ldr	r3, [pc, #460]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	4a72      	ldr	r2, [pc, #456]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 8001878:	f023 0304 	bic.w	r3, r3, #4
 800187c:	6213      	str	r3, [r2, #32]
 800187e:	e01c      	b.n	80018ba <HAL_RCC_OscConfig+0x36e>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b05      	cmp	r3, #5
 8001886:	d10c      	bne.n	80018a2 <HAL_RCC_OscConfig+0x356>
 8001888:	4b6d      	ldr	r3, [pc, #436]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4a6c      	ldr	r2, [pc, #432]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	6213      	str	r3, [r2, #32]
 8001894:	4b6a      	ldr	r3, [pc, #424]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	4a69      	ldr	r2, [pc, #420]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6213      	str	r3, [r2, #32]
 80018a0:	e00b      	b.n	80018ba <HAL_RCC_OscConfig+0x36e>
 80018a2:	4b67      	ldr	r3, [pc, #412]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4a66      	ldr	r2, [pc, #408]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	6213      	str	r3, [r2, #32]
 80018ae:	4b64      	ldr	r3, [pc, #400]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4a63      	ldr	r2, [pc, #396]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 80018b4:	f023 0304 	bic.w	r3, r3, #4
 80018b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d015      	beq.n	80018ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c2:	f7ff f907 	bl	8000ad4 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c8:	e00a      	b.n	80018e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ca:	f7ff f903 	bl	8000ad4 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d8:	4293      	cmp	r3, r2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e0ab      	b.n	8001a38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e0:	4b57      	ldr	r3, [pc, #348]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0ee      	beq.n	80018ca <HAL_RCC_OscConfig+0x37e>
 80018ec:	e014      	b.n	8001918 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ee:	f7ff f8f1 	bl	8000ad4 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f4:	e00a      	b.n	800190c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f6:	f7ff f8ed 	bl	8000ad4 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	f241 3288 	movw	r2, #5000	; 0x1388
 8001904:	4293      	cmp	r3, r2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e095      	b.n	8001a38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190c:	4b4c      	ldr	r3, [pc, #304]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1ee      	bne.n	80018f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001918:	7dfb      	ldrb	r3, [r7, #23]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d105      	bne.n	800192a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800191e:	4b48      	ldr	r3, [pc, #288]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	4a47      	ldr	r2, [pc, #284]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001928:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 8081 	beq.w	8001a36 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001934:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b08      	cmp	r3, #8
 800193e:	d061      	beq.n	8001a04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d146      	bne.n	80019d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001948:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <HAL_RCC_OscConfig+0x4fc>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194e:	f7ff f8c1 	bl	8000ad4 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001956:	f7ff f8bd 	bl	8000ad4 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e067      	b.n	8001a38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001968:	4b35      	ldr	r3, [pc, #212]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f0      	bne.n	8001956 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197c:	d108      	bne.n	8001990 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800197e:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	492d      	ldr	r1, [pc, #180]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001990:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a19      	ldr	r1, [r3, #32]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	430b      	orrs	r3, r1
 80019a2:	4927      	ldr	r1, [pc, #156]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <HAL_RCC_OscConfig+0x4fc>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7ff f891 	bl	8000ad4 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b6:	f7ff f88d 	bl	8000ad4 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e037      	b.n	8001a38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x46a>
 80019d4:	e02f      	b.n	8001a36 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_RCC_OscConfig+0x4fc>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff f87a 	bl	8000ad4 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e4:	f7ff f876 	bl	8000ad4 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e020      	b.n	8001a38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x498>
 8001a02:	e018      	b.n	8001a36 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e013      	b.n	8001a38 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_RCC_OscConfig+0x4f4>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d001      	beq.n	8001a36 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40007000 	.word	0x40007000
 8001a48:	42420060 	.word	0x42420060

08001a4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0d0      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a60:	4b6a      	ldr	r3, [pc, #424]	; (8001c0c <HAL_RCC_ClockConfig+0x1c0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d910      	bls.n	8001a90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b67      	ldr	r3, [pc, #412]	; (8001c0c <HAL_RCC_ClockConfig+0x1c0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 0207 	bic.w	r2, r3, #7
 8001a76:	4965      	ldr	r1, [pc, #404]	; (8001c0c <HAL_RCC_ClockConfig+0x1c0>)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	4b63      	ldr	r3, [pc, #396]	; (8001c0c <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0b8      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d020      	beq.n	8001ade <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa8:	4b59      	ldr	r3, [pc, #356]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	4a58      	ldr	r2, [pc, #352]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ab2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac0:	4b53      	ldr	r3, [pc, #332]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	4a52      	ldr	r2, [pc, #328]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001aca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	4b50      	ldr	r3, [pc, #320]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	494d      	ldr	r1, [pc, #308]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d040      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d115      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e07f      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0a:	4b41      	ldr	r3, [pc, #260]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d109      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e073      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e06b      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2a:	4b39      	ldr	r3, [pc, #228]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f023 0203 	bic.w	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4936      	ldr	r1, [pc, #216]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b3c:	f7fe ffca 	bl	8000ad4 <HAL_GetTick>
 8001b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b44:	f7fe ffc6 	bl	8000ad4 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e053      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 020c 	and.w	r2, r3, #12
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d1eb      	bne.n	8001b44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d210      	bcs.n	8001b9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 0207 	bic.w	r2, r3, #7
 8001b82:	4922      	ldr	r1, [pc, #136]	; (8001c0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e032      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba8:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4916      	ldr	r1, [pc, #88]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	490e      	ldr	r1, [pc, #56]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bda:	f000 f821 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001bde:	4602      	mov	r2, r0
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	490a      	ldr	r1, [pc, #40]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bec:	5ccb      	ldrb	r3, [r1, r3]
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <HAL_RCC_ClockConfig+0x1cc>)
 8001bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_RCC_ClockConfig+0x1d0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fe6a 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40022000 	.word	0x40022000
 8001c10:	40021000 	.word	0x40021000
 8001c14:	08007ac0 	.word	0x08007ac0
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c20:	b490      	push	{r4, r7}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c26:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c28:	1d3c      	adds	r4, r7, #4
 8001c2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c30:	f240 2301 	movw	r3, #513	; 0x201
 8001c34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c4a:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d002      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0x40>
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0x46>
 8001c5e:	e02d      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c62:	623b      	str	r3, [r7, #32]
      break;
 8001c64:	e02d      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	0c9b      	lsrs	r3, r3, #18
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c72:	4413      	add	r3, r2
 8001c74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c78:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d013      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	0c5b      	lsrs	r3, r3, #17
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c92:	4413      	add	r3, r2
 8001c94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c9e:	fb02 f203 	mul.w	r2, r2, r3
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8001caa:	e004      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cb0:	fb02 f303 	mul.w	r3, r2, r3
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	623b      	str	r3, [r7, #32]
      break;
 8001cba:	e002      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cbe:	623b      	str	r3, [r7, #32]
      break;
 8001cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3728      	adds	r7, #40	; 0x28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc90      	pop	{r4, r7}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	08007aa8 	.word	0x08007aa8
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	007a1200 	.word	0x007a1200
 8001cdc:	003d0900 	.word	0x003d0900

08001ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce4:	4b02      	ldr	r3, [pc, #8]	; (8001cf0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	20000000 	.word	0x20000000

08001cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cf8:	f7ff fff2 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	4903      	ldr	r1, [pc, #12]	; (8001d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021000 	.word	0x40021000
 8001d18:	08007ad0 	.word	0x08007ad0

08001d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d20:	f7ff ffde 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	0adb      	lsrs	r3, r3, #11
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	4903      	ldr	r1, [pc, #12]	; (8001d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08007ad0 	.word	0x08007ad0

08001d44 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	220f      	movs	r2, #15
 8001d52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_RCC_GetClockConfig+0x58>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0203 	and.w	r2, r3, #3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_RCC_GetClockConfig+0x58>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_RCC_GetClockConfig+0x58>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_RCC_GetClockConfig+0x58>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	08db      	lsrs	r3, r3, #3
 8001d7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0207 	and.w	r2, r3, #7
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40022000 	.word	0x40022000

08001da4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <RCC_Delay+0x34>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <RCC_Delay+0x38>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	0a5b      	lsrs	r3, r3, #9
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dc0:	bf00      	nop
  }
  while (Delay --);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1e5a      	subs	r2, r3, #1
 8001dc6:	60fa      	str	r2, [r7, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f9      	bne.n	8001dc0 <RCC_Delay+0x1c>
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	10624dd3 	.word	0x10624dd3

08001de0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e096      	b.n	8001f20 <HAL_SPI_Init+0x140>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d108      	bne.n	8001e0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e02:	d009      	beq.n	8001e18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]
 8001e0a:	e005      	b.n	8001e18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d126      	bne.n	8001e78 <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a3c      	ldr	r2, [pc, #240]	; (8001f28 <HAL_SPI_Init+0x148>)
 8001e36:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a3c      	ldr	r2, [pc, #240]	; (8001f2c <HAL_SPI_Init+0x14c>)
 8001e3c:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a3b      	ldr	r2, [pc, #236]	; (8001f30 <HAL_SPI_Init+0x150>)
 8001e42:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a3b      	ldr	r2, [pc, #236]	; (8001f34 <HAL_SPI_Init+0x154>)
 8001e48:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a3a      	ldr	r2, [pc, #232]	; (8001f38 <HAL_SPI_Init+0x158>)
 8001e4e:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a3a      	ldr	r2, [pc, #232]	; (8001f3c <HAL_SPI_Init+0x15c>)
 8001e54:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a39      	ldr	r2, [pc, #228]	; (8001f40 <HAL_SPI_Init+0x160>)
 8001e5a:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a39      	ldr	r2, [pc, #228]	; (8001f44 <HAL_SPI_Init+0x164>)
 8001e60:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a36      	ldr	r2, [pc, #216]	; (8001f48 <HAL_SPI_Init+0x168>)
 8001e6e:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001edc:	ea42 0103 	orr.w	r1, r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	0c1a      	lsrs	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f002 0204 	and.w	r2, r2, #4
 8001efe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	69da      	ldr	r2, [r3, #28]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	08004e19 	.word	0x08004e19
 8001f2c:	08004dc9 	.word	0x08004dc9
 8001f30:	08004e69 	.word	0x08004e69
 8001f34:	08002dfd 	.word	0x08002dfd
 8001f38:	08002e0f 	.word	0x08002e0f
 8001f3c:	08002e21 	.word	0x08002e21
 8001f40:	08002e33 	.word	0x08002e33
 8001f44:	08002e45 	.word	0x08002e45
 8001f48:	080006f5 	.word	0x080006f5

08001f4c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_SPI_Transmit+0x22>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e126      	b.n	80021bc <HAL_SPI_Transmit+0x270>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f76:	f7fe fdad 	bl	8000ad4 <HAL_GetTick>
 8001f7a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d002      	beq.n	8001f92 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f90:	e10b      	b.n	80021aa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <HAL_SPI_Transmit+0x52>
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fa2:	e102      	b.n	80021aa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fea:	d10f      	bne.n	800200c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ffa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800200a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002016:	2b40      	cmp	r3, #64	; 0x40
 8002018:	d007      	beq.n	800202a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002032:	d14b      	bne.n	80020cc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <HAL_SPI_Transmit+0xf6>
 800203c:	8afb      	ldrh	r3, [r7, #22]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d13e      	bne.n	80020c0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	881a      	ldrh	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	1c9a      	adds	r2, r3, #2
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800205c:	b29b      	uxth	r3, r3
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002066:	e02b      	b.n	80020c0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b02      	cmp	r3, #2
 8002074:	d112      	bne.n	800209c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	881a      	ldrh	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	1c9a      	adds	r2, r3, #2
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002090:	b29b      	uxth	r3, r3
 8002092:	3b01      	subs	r3, #1
 8002094:	b29a      	uxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	86da      	strh	r2, [r3, #54]	; 0x36
 800209a:	e011      	b.n	80020c0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800209c:	f7fe fd1a 	bl	8000ad4 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d803      	bhi.n	80020b4 <HAL_SPI_Transmit+0x168>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b2:	d102      	bne.n	80020ba <HAL_SPI_Transmit+0x16e>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d102      	bne.n	80020c0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020be:	e074      	b.n	80021aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1ce      	bne.n	8002068 <HAL_SPI_Transmit+0x11c>
 80020ca:	e04c      	b.n	8002166 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <HAL_SPI_Transmit+0x18e>
 80020d4:	8afb      	ldrh	r3, [r7, #22]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d140      	bne.n	800215c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	330c      	adds	r3, #12
 80020e4:	7812      	ldrb	r2, [r2, #0]
 80020e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002100:	e02c      	b.n	800215c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b02      	cmp	r3, #2
 800210e:	d113      	bne.n	8002138 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	330c      	adds	r3, #12
 800211a:	7812      	ldrb	r2, [r2, #0]
 800211c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800212c:	b29b      	uxth	r3, r3
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	86da      	strh	r2, [r3, #54]	; 0x36
 8002136:	e011      	b.n	800215c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002138:	f7fe fccc 	bl	8000ad4 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d803      	bhi.n	8002150 <HAL_SPI_Transmit+0x204>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214e:	d102      	bne.n	8002156 <HAL_SPI_Transmit+0x20a>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	77fb      	strb	r3, [r7, #31]
          goto error;
 800215a:	e026      	b.n	80021aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1cd      	bne.n	8002102 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	6839      	ldr	r1, [r7, #0]
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f001 f8a4 	bl	80032b8 <SPI_EndRxTxTransaction>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2220      	movs	r2, #32
 800217a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10a      	bne.n	800219a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002184:	2300      	movs	r3, #0
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	77fb      	strb	r3, [r7, #31]
 80021a6:	e000      	b.n	80021aa <HAL_SPI_Transmit+0x25e>
  }

error:
 80021a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021e0:	d112      	bne.n	8002208 <HAL_SPI_Receive+0x44>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10e      	bne.n	8002208 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2204      	movs	r2, #4
 80021ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80021f2:	88fa      	ldrh	r2, [r7, #6]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	4613      	mov	r3, r2
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f8f1 	bl	80023e6 <HAL_SPI_TransmitReceive>
 8002204:	4603      	mov	r3, r0
 8002206:	e0ea      	b.n	80023de <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_SPI_Receive+0x52>
 8002212:	2302      	movs	r3, #2
 8002214:	e0e3      	b.n	80023de <HAL_SPI_Receive+0x21a>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800221e:	f7fe fc59 	bl	8000ad4 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b01      	cmp	r3, #1
 800222e:	d002      	beq.n	8002236 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002230:	2302      	movs	r3, #2
 8002232:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002234:	e0ca      	b.n	80023cc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <HAL_SPI_Receive+0x7e>
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d102      	bne.n	8002248 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002246:	e0c1      	b.n	80023cc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2204      	movs	r2, #4
 800224c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	88fa      	ldrh	r2, [r7, #6]
 8002260:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	88fa      	ldrh	r2, [r7, #6]
 8002266:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800228e:	d10f      	bne.n	80022b0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800229e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022ae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ba:	2b40      	cmp	r3, #64	; 0x40
 80022bc:	d007      	beq.n	80022ce <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022cc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d162      	bne.n	800239c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80022d6:	e02e      	b.n	8002336 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d115      	bne.n	8002312 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f103 020c 	add.w	r2, r3, #12
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f2:	7812      	ldrb	r2, [r2, #0]
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002310:	e011      	b.n	8002336 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002312:	f7fe fbdf 	bl	8000ad4 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d803      	bhi.n	800232a <HAL_SPI_Receive+0x166>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d102      	bne.n	8002330 <HAL_SPI_Receive+0x16c>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002334:	e04a      	b.n	80023cc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1cb      	bne.n	80022d8 <HAL_SPI_Receive+0x114>
 8002340:	e031      	b.n	80023a6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d113      	bne.n	8002378 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235a:	b292      	uxth	r2, r2
 800235c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002362:	1c9a      	adds	r2, r3, #2
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002376:	e011      	b.n	800239c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002378:	f7fe fbac 	bl	8000ad4 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d803      	bhi.n	8002390 <HAL_SPI_Receive+0x1cc>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238e:	d102      	bne.n	8002396 <HAL_SPI_Receive+0x1d2>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d102      	bne.n	800239c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	75fb      	strb	r3, [r7, #23]
          goto error;
 800239a:	e017      	b.n	80023cc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1cd      	bne.n	8002342 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	6839      	ldr	r1, [r7, #0]
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 ff32 	bl	8003214 <SPI_EndRxTransaction>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2220      	movs	r2, #32
 80023ba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	75fb      	strb	r3, [r7, #23]
 80023c8:	e000      	b.n	80023cc <HAL_SPI_Receive+0x208>
  }

error :
 80023ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b08c      	sub	sp, #48	; 0x30
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023f4:	2301      	movs	r3, #1
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_SPI_TransmitReceive+0x26>
 8002408:	2302      	movs	r3, #2
 800240a:	e18a      	b.n	8002722 <HAL_SPI_TransmitReceive+0x33c>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002414:	f7fe fb5e 	bl	8000ad4 <HAL_GetTick>
 8002418:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800242a:	887b      	ldrh	r3, [r7, #2]
 800242c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800242e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002432:	2b01      	cmp	r3, #1
 8002434:	d00f      	beq.n	8002456 <HAL_SPI_TransmitReceive+0x70>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800243c:	d107      	bne.n	800244e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d103      	bne.n	800244e <HAL_SPI_TransmitReceive+0x68>
 8002446:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800244a:	2b04      	cmp	r3, #4
 800244c:	d003      	beq.n	8002456 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800244e:	2302      	movs	r3, #2
 8002450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002454:	e15b      	b.n	800270e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_SPI_TransmitReceive+0x82>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <HAL_SPI_TransmitReceive+0x82>
 8002462:	887b      	ldrh	r3, [r7, #2]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d103      	bne.n	8002470 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800246e:	e14e      	b.n	800270e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b04      	cmp	r3, #4
 800247a:	d003      	beq.n	8002484 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2205      	movs	r2, #5
 8002480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	887a      	ldrh	r2, [r7, #2]
 8002494:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	887a      	ldrh	r2, [r7, #2]
 800249a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	887a      	ldrh	r2, [r7, #2]
 80024a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c4:	2b40      	cmp	r3, #64	; 0x40
 80024c6:	d007      	beq.n	80024d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024e0:	d178      	bne.n	80025d4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_SPI_TransmitReceive+0x10a>
 80024ea:	8b7b      	ldrh	r3, [r7, #26]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d166      	bne.n	80025be <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	881a      	ldrh	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	1c9a      	adds	r2, r3, #2
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002514:	e053      	b.n	80025be <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b02      	cmp	r3, #2
 8002522:	d11b      	bne.n	800255c <HAL_SPI_TransmitReceive+0x176>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d016      	beq.n	800255c <HAL_SPI_TransmitReceive+0x176>
 800252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002530:	2b01      	cmp	r3, #1
 8002532:	d113      	bne.n	800255c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	881a      	ldrh	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	1c9a      	adds	r2, r3, #2
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b01      	cmp	r3, #1
 8002568:	d119      	bne.n	800259e <HAL_SPI_TransmitReceive+0x1b8>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800256e:	b29b      	uxth	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d014      	beq.n	800259e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257e:	b292      	uxth	r2, r2
 8002580:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002586:	1c9a      	adds	r2, r3, #2
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800259a:	2301      	movs	r3, #1
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800259e:	f7fe fa99 	bl	8000ad4 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d807      	bhi.n	80025be <HAL_SPI_TransmitReceive+0x1d8>
 80025ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d003      	beq.n	80025be <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025bc:	e0a7      	b.n	800270e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1a6      	bne.n	8002516 <HAL_SPI_TransmitReceive+0x130>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1a1      	bne.n	8002516 <HAL_SPI_TransmitReceive+0x130>
 80025d2:	e07c      	b.n	80026ce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <HAL_SPI_TransmitReceive+0x1fc>
 80025dc:	8b7b      	ldrh	r3, [r7, #26]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d16b      	bne.n	80026ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	330c      	adds	r3, #12
 80025ec:	7812      	ldrb	r2, [r2, #0]
 80025ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002608:	e057      	b.n	80026ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b02      	cmp	r3, #2
 8002616:	d11c      	bne.n	8002652 <HAL_SPI_TransmitReceive+0x26c>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d017      	beq.n	8002652 <HAL_SPI_TransmitReceive+0x26c>
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	2b01      	cmp	r3, #1
 8002626:	d114      	bne.n	8002652 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	330c      	adds	r3, #12
 8002632:	7812      	ldrb	r2, [r2, #0]
 8002634:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002644:	b29b      	uxth	r3, r3
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b01      	cmp	r3, #1
 800265e:	d119      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x2ae>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002664:	b29b      	uxth	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d014      	beq.n	8002694 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002690:	2301      	movs	r3, #1
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002694:	f7fe fa1e 	bl	8000ad4 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d803      	bhi.n	80026ac <HAL_SPI_TransmitReceive+0x2c6>
 80026a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026aa:	d102      	bne.n	80026b2 <HAL_SPI_TransmitReceive+0x2cc>
 80026ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026b8:	e029      	b.n	800270e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1a2      	bne.n	800260a <HAL_SPI_TransmitReceive+0x224>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d19d      	bne.n	800260a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 fdf0 	bl	80032b8 <SPI_EndRxTxTransaction>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80026ea:	e010      	b.n	800270e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10b      	bne.n	800270c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	e000      	b.n	800270e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800270c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800271e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002722:	4618      	mov	r0, r3
 8002724:	3730      	adds	r7, #48	; 0x30
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	4613      	mov	r3, r2
 8002738:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_SPI_Transmit_DMA+0x20>
 8002748:	2302      	movs	r3, #2
 800274a:	e09b      	b.n	8002884 <HAL_SPI_Transmit_DMA+0x158>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b01      	cmp	r3, #1
 800275e:	d002      	beq.n	8002766 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002760:	2302      	movs	r3, #2
 8002762:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002764:	e089      	b.n	800287a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <HAL_SPI_Transmit_DMA+0x46>
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d102      	bne.n	8002778 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002776:	e080      	b.n	800287a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2203      	movs	r2, #3
 800277c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	88fa      	ldrh	r2, [r7, #6]
 8002790:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	88fa      	ldrh	r2, [r7, #6]
 8002796:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027be:	d10f      	bne.n	80027e0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e4:	4a29      	ldr	r2, [pc, #164]	; (800288c <HAL_SPI_Transmit_DMA+0x160>)
 80027e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ec:	4a28      	ldr	r2, [pc, #160]	; (8002890 <HAL_SPI_Transmit_DMA+0x164>)
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	4a27      	ldr	r2, [pc, #156]	; (8002894 <HAL_SPI_Transmit_DMA+0x168>)
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fc:	2200      	movs	r2, #0
 80027fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	4619      	mov	r1, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	330c      	adds	r3, #12
 8002810:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002816:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002818:	f7fe faa0 	bl	8000d5c <HAL_DMA_Start_IT>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00c      	beq.n	800283c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002826:	f043 0210 	orr.w	r2, r3, #16
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800283a:	e01e      	b.n	800287a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002846:	2b40      	cmp	r3, #64	; 0x40
 8002848:	d007      	beq.n	800285a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002858:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0220 	orr.w	r2, r2, #32
 8002868:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0202 	orr.w	r2, r2, #2
 8002878:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002882:	7dfb      	ldrb	r3, [r7, #23]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	0800303d 	.word	0x0800303d
 8002890:	08002e57 	.word	0x08002e57
 8002894:	08003097 	.word	0x08003097

08002898 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	4613      	mov	r3, r2
 80028a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d110      	bne.n	80028d4 <HAL_SPI_Receive_DMA+0x3c>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ba:	d10b      	bne.n	80028d4 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2204      	movs	r2, #4
 80028c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f8ac 	bl	8002a28 <HAL_SPI_TransmitReceive_DMA>
 80028d0:	4603      	mov	r3, r0
 80028d2:	e09f      	b.n	8002a14 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_SPI_Receive_DMA+0x4a>
 80028de:	2302      	movs	r3, #2
 80028e0:	e098      	b.n	8002a14 <HAL_SPI_Receive_DMA+0x17c>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d002      	beq.n	80028fc <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80028f6:	2302      	movs	r3, #2
 80028f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028fa:	e086      	b.n	8002a0a <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_SPI_Receive_DMA+0x70>
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d102      	bne.n	800290e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800290c:	e07d      	b.n	8002a0a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2204      	movs	r2, #4
 8002912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	88fa      	ldrh	r2, [r7, #6]
 8002926:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	88fa      	ldrh	r2, [r7, #6]
 800292c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800294e:	d10f      	bne.n	8002970 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800295e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800296e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002974:	4a29      	ldr	r2, [pc, #164]	; (8002a1c <HAL_SPI_Receive_DMA+0x184>)
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297c:	4a28      	ldr	r2, [pc, #160]	; (8002a20 <HAL_SPI_Receive_DMA+0x188>)
 800297e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002984:	4a27      	ldr	r2, [pc, #156]	; (8002a24 <HAL_SPI_Receive_DMA+0x18c>)
 8002986:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298c:	2200      	movs	r2, #0
 800298e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	330c      	adds	r3, #12
 800299a:	4619      	mov	r1, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80029a8:	f7fe f9d8 	bl	8000d5c <HAL_DMA_Start_IT>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00c      	beq.n	80029cc <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	f043 0210 	orr.w	r2, r3, #16
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80029ca:	e01e      	b.n	8002a0a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	2b40      	cmp	r3, #64	; 0x40
 80029d8:	d007      	beq.n	80029ea <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029e8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0220 	orr.w	r2, r2, #32
 80029f8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	0800305b 	.word	0x0800305b
 8002a20:	08002f01 	.word	0x08002f01
 8002a24:	08003097 	.word	0x08003097

08002a28 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_SPI_TransmitReceive_DMA+0x20>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e0e3      	b.n	8002c10 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a56:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002a5e:	7dbb      	ldrb	r3, [r7, #22]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d00d      	beq.n	8002a80 <HAL_SPI_TransmitReceive_DMA+0x58>
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a6a:	d106      	bne.n	8002a7a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <HAL_SPI_TransmitReceive_DMA+0x52>
 8002a74:	7dbb      	ldrb	r3, [r7, #22]
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d002      	beq.n	8002a80 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a7e:	e0c2      	b.n	8002c06 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002a8c:	887b      	ldrh	r3, [r7, #2]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d102      	bne.n	8002a98 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a96:	e0b6      	b.n	8002c06 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d003      	beq.n	8002aac <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2205      	movs	r2, #5
 8002aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	887a      	ldrh	r2, [r7, #2]
 8002ac2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	887a      	ldrh	r2, [r7, #2]
 8002ace:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d108      	bne.n	8002b00 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af2:	4a49      	ldr	r2, [pc, #292]	; (8002c18 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002af4:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	4a48      	ldr	r2, [pc, #288]	; (8002c1c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
 8002afe:	e007      	b.n	8002b10 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b04:	4a46      	ldr	r2, [pc, #280]	; (8002c20 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0c:	4a45      	ldr	r2, [pc, #276]	; (8002c24 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b14:	4a44      	ldr	r2, [pc, #272]	; (8002c28 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	330c      	adds	r3, #12
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b36:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002b38:	f7fe f910 	bl	8000d5c <HAL_DMA_Start_IT>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00c      	beq.n	8002b5c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b46:	f043 0210 	orr.w	r2, r3, #16
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002b5a:	e054      	b.n	8002c06 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b70:	2200      	movs	r2, #0
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b78:	2200      	movs	r2, #0
 8002b7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b88:	2200      	movs	r2, #0
 8002b8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	4619      	mov	r1, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	330c      	adds	r3, #12
 8002b9c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002ba4:	f7fe f8da 	bl	8000d5c <HAL_DMA_Start_IT>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00c      	beq.n	8002bc8 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb2:	f043 0210 	orr.w	r2, r3, #16
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002bc6:	e01e      	b.n	8002c06 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b40      	cmp	r3, #64	; 0x40
 8002bd4:	d007      	beq.n	8002be6 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002be4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0220 	orr.w	r2, r2, #32
 8002bf4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0202 	orr.w	r2, r2, #2
 8002c04:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	0800305b 	.word	0x0800305b
 8002c1c:	08002f01 	.word	0x08002f01
 8002c20:	08003079 	.word	0x08003079
 8002c24:	08002fab 	.word	0x08002fab
 8002c28:	08003097 	.word	0x08003097

08002c2c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	099b      	lsrs	r3, r3, #6
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10f      	bne.n	8002c70 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	099b      	lsrs	r3, r3, #6
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d004      	beq.n	8002c70 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	4798      	blx	r3
    return;
 8002c6e:	e0bf      	b.n	8002df0 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_SPI_IRQHandler+0x66>
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	09db      	lsrs	r3, r3, #7
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	4798      	blx	r3
    return;
 8002c90:	e0ae      	b.n	8002df0 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_SPI_IRQHandler+0x80>
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	099b      	lsrs	r3, r3, #6
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 80a2 	beq.w	8002df0 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 809b 	beq.w	8002df0 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d023      	beq.n	8002d0e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d011      	beq.n	8002cf6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	f043 0204 	orr.w	r2, r3, #4
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	e00b      	b.n	8002d0e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	693b      	ldr	r3, [r7, #16]
        return;
 8002d0c:	e070      	b.n	8002df0 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d014      	beq.n	8002d44 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	f043 0201 	orr.w	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d050      	beq.n	8002dee <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d5a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d104      	bne.n	8002d78 <HAL_SPI_IRQHandler+0x14c>
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d034      	beq.n	8002de2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0203 	bic.w	r2, r2, #3
 8002d86:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d011      	beq.n	8002db4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d94:	4a18      	ldr	r2, [pc, #96]	; (8002df8 <HAL_SPI_IRQHandler+0x1cc>)
 8002d96:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe f877 	bl	8000e90 <HAL_DMA_Abort_IT>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d017      	beq.n	8002dec <HAL_SPI_IRQHandler+0x1c0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc0:	4a0d      	ldr	r2, [pc, #52]	; (8002df8 <HAL_SPI_IRQHandler+0x1cc>)
 8002dc2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fe f861 	bl	8000e90 <HAL_DMA_Abort_IT>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <HAL_SPI_IRQHandler+0x1c0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002de0:	e004      	b.n	8002dec <HAL_SPI_IRQHandler+0x1c0>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002dea:	e000      	b.n	8002dee <HAL_SPI_IRQHandler+0x1c2>
        if (hspi->hdmatx != NULL)
 8002dec:	bf00      	nop
    return;
 8002dee:	bf00      	nop
  }
}
 8002df0:	3720      	adds	r7, #32
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	080030d9 	.word	0x080030d9

08002dfc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b086      	sub	sp, #24
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e64:	f7fd fe36 	bl	8000ad4 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b20      	cmp	r3, #32
 8002e76:	d03c      	beq.n	8002ef2 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0220 	bic.w	r2, r2, #32
 8002e86:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0202 	bic.w	r2, r2, #2
 8002e96:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	2164      	movs	r1, #100	; 0x64
 8002e9c:	6978      	ldr	r0, [r7, #20]
 8002e9e:	f000 fa0b 	bl	80032b8 <SPI_EndRxTxTransaction>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eac:	f043 0220 	orr.w	r2, r3, #32
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10a      	bne.n	8002ed2 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d004      	beq.n	8002ef2 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	6978      	ldr	r0, [r7, #20]
 8002eee:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002ef0:	e003      	b.n	8002efa <SPI_DMATransmitCplt+0xa4>
    }
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	6978      	ldr	r0, [r7, #20]
 8002ef8:	4798      	blx	r3
#else
  HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f0e:	f7fd fde1 	bl	8000ad4 <HAL_GetTick>
 8002f12:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d03c      	beq.n	8002f9c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0220 	bic.w	r2, r2, #32
 8002f30:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10d      	bne.n	8002f56 <SPI_DMAReceiveCplt+0x56>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f42:	d108      	bne.n	8002f56 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0203 	bic.w	r2, r2, #3
 8002f52:	605a      	str	r2, [r3, #4]
 8002f54:	e007      	b.n	8002f66 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0201 	bic.w	r2, r2, #1
 8002f64:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	2164      	movs	r1, #100	; 0x64
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f952 	bl	8003214 <SPI_EndRxTransaction>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d004      	beq.n	8002f9c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002f9a:	e003      	b.n	8002fa4 <SPI_DMAReceiveCplt+0xa4>
    }
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	4798      	blx	r3
#else
  HAL_SPI_RxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fb8:	f7fd fd8c 	bl	8000ad4 <HAL_GetTick>
 8002fbc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d030      	beq.n	800302e <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0220 	bic.w	r2, r2, #32
 8002fda:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	2164      	movs	r1, #100	; 0x64
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f969 	bl	80032b8 <SPI_EndRxTxTransaction>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0203 	bic.w	r2, r2, #3
 8003006:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800302c:	e003      	b.n	8003036 <SPI_DMATransmitReceiveCplt+0x8c>
    }
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	4798      	blx	r3
#else
  HAL_SPI_TxRxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	4798      	blx	r3
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	4798      	blx	r3
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800308e:	bf00      	nop
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0203 	bic.w	r2, r2, #3
 80030b2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b8:	f043 0210 	orr.w	r2, r3, #16
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003114:	f7fd fcde 	bl	8000ad4 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	4413      	add	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003124:	f7fd fcd6 	bl	8000ad4 <HAL_GetTick>
 8003128:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800312a:	4b39      	ldr	r3, [pc, #228]	; (8003210 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	015b      	lsls	r3, r3, #5
 8003130:	0d1b      	lsrs	r3, r3, #20
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800313a:	e054      	b.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	d050      	beq.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003144:	f7fd fcc6 	bl	8000ad4 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	429a      	cmp	r2, r3
 8003152:	d902      	bls.n	800315a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d13d      	bne.n	80031d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003168:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003172:	d111      	bne.n	8003198 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800317c:	d004      	beq.n	8003188 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003186:	d107      	bne.n	8003198 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003196:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a0:	d10f      	bne.n	80031c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e017      	b.n	8003206 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4013      	ands	r3, r2
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	bf0c      	ite	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	2300      	movne	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	429a      	cmp	r2, r3
 8003202:	d19b      	bne.n	800313c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3720      	adds	r7, #32
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000000 	.word	0x20000000

08003214 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003228:	d111      	bne.n	800324e <SPI_EndRxTransaction+0x3a>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003232:	d004      	beq.n	800323e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323c:	d107      	bne.n	800324e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800324c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003256:	d117      	bne.n	8003288 <SPI_EndRxTransaction+0x74>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003260:	d112      	bne.n	8003288 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2200      	movs	r2, #0
 800326a:	2101      	movs	r1, #1
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff ff49 	bl	8003104 <SPI_WaitFlagStateUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01a      	beq.n	80032ae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	f043 0220 	orr.w	r2, r3, #32
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e013      	b.n	80032b0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2200      	movs	r2, #0
 8003290:	2180      	movs	r1, #128	; 0x80
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f7ff ff36 	bl	8003104 <SPI_WaitFlagStateUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a2:	f043 0220 	orr.w	r2, r3, #32
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e000      	b.n	80032b0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2200      	movs	r2, #0
 80032cc:	2180      	movs	r1, #128	; 0x80
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f7ff ff18 	bl	8003104 <SPI_WaitFlagStateUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d007      	beq.n	80032ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	f043 0220 	orr.w	r2, r3, #32
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e000      	b.n	80032ec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e041      	b.n	800338a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f839 	bl	8003392 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3304      	adds	r3, #4
 8003330:	4619      	mov	r1, r3
 8003332:	4610      	mov	r0, r2
 8003334:	f000 f9b4 	bl	80036a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d001      	beq.n	80033bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e03a      	b.n	8003432 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a18      	ldr	r2, [pc, #96]	; (800343c <HAL_TIM_Base_Start_IT+0x98>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00e      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x58>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e6:	d009      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x58>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a14      	ldr	r2, [pc, #80]	; (8003440 <HAL_TIM_Base_Start_IT+0x9c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d004      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x58>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a13      	ldr	r2, [pc, #76]	; (8003444 <HAL_TIM_Base_Start_IT+0xa0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d111      	bne.n	8003420 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b06      	cmp	r3, #6
 800340c:	d010      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0201 	orr.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341e:	e007      	b.n	8003430 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr
 800343c:	40012c00 	.word	0x40012c00
 8003440:	40000400 	.word	0x40000400
 8003444:	40000800 	.word	0x40000800

08003448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b02      	cmp	r3, #2
 800345c:	d122      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b02      	cmp	r3, #2
 800346a:	d11b      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0202 	mvn.w	r2, #2
 8003474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f8ed 	bl	800366a <HAL_TIM_IC_CaptureCallback>
 8003490:	e005      	b.n	800349e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f8e0 	bl	8003658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f8ef 	bl	800367c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d122      	bne.n	80034f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d11b      	bne.n	80034f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0204 	mvn.w	r2, #4
 80034c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2202      	movs	r2, #2
 80034ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f8c3 	bl	800366a <HAL_TIM_IC_CaptureCallback>
 80034e4:	e005      	b.n	80034f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f8b6 	bl	8003658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f8c5 	bl	800367c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b08      	cmp	r3, #8
 8003504:	d122      	bne.n	800354c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b08      	cmp	r3, #8
 8003512:	d11b      	bne.n	800354c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0208 	mvn.w	r2, #8
 800351c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2204      	movs	r2, #4
 8003522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f899 	bl	800366a <HAL_TIM_IC_CaptureCallback>
 8003538:	e005      	b.n	8003546 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f88c 	bl	8003658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f89b 	bl	800367c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	2b10      	cmp	r3, #16
 8003558:	d122      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b10      	cmp	r3, #16
 8003566:	d11b      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0210 	mvn.w	r2, #16
 8003570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2208      	movs	r2, #8
 8003576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f86f 	bl	800366a <HAL_TIM_IC_CaptureCallback>
 800358c:	e005      	b.n	800359a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f862 	bl	8003658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f871 	bl	800367c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d10e      	bne.n	80035cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d107      	bne.n	80035cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0201 	mvn.w	r2, #1
 80035c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fd f844 	bl	8000654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d6:	2b80      	cmp	r3, #128	; 0x80
 80035d8:	d10e      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e4:	2b80      	cmp	r3, #128	; 0x80
 80035e6:	d107      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f8bf 	bl	8003776 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003602:	2b40      	cmp	r3, #64	; 0x40
 8003604:	d10e      	bne.n	8003624 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003610:	2b40      	cmp	r3, #64	; 0x40
 8003612:	d107      	bne.n	8003624 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800361c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f835 	bl	800368e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b20      	cmp	r3, #32
 8003630:	d10e      	bne.n	8003650 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b20      	cmp	r3, #32
 800363e:	d107      	bne.n	8003650 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0220 	mvn.w	r2, #32
 8003648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f88a 	bl	8003764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr

0800366a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr

0800368e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a29      	ldr	r2, [pc, #164]	; (8003758 <TIM_Base_SetConfig+0xb8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00b      	beq.n	80036d0 <TIM_Base_SetConfig+0x30>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036be:	d007      	beq.n	80036d0 <TIM_Base_SetConfig+0x30>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a26      	ldr	r2, [pc, #152]	; (800375c <TIM_Base_SetConfig+0xbc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d003      	beq.n	80036d0 <TIM_Base_SetConfig+0x30>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a25      	ldr	r2, [pc, #148]	; (8003760 <TIM_Base_SetConfig+0xc0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d108      	bne.n	80036e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <TIM_Base_SetConfig+0xb8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00b      	beq.n	8003702 <TIM_Base_SetConfig+0x62>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f0:	d007      	beq.n	8003702 <TIM_Base_SetConfig+0x62>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a19      	ldr	r2, [pc, #100]	; (800375c <TIM_Base_SetConfig+0xbc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d003      	beq.n	8003702 <TIM_Base_SetConfig+0x62>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a18      	ldr	r2, [pc, #96]	; (8003760 <TIM_Base_SetConfig+0xc0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d108      	bne.n	8003714 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a07      	ldr	r2, [pc, #28]	; (8003758 <TIM_Base_SetConfig+0xb8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d103      	bne.n	8003748 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	615a      	str	r2, [r3, #20]
}
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	40012c00 	.word	0x40012c00
 800375c:	40000400 	.word	0x40000400
 8003760:	40000800 	.word	0x40000800

08003764 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr

08003776 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr

08003788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e03f      	b.n	800381a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd f84a 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	; 0x24
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fb37 	bl	8003e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	; 0x28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003844:	2300      	movs	r3, #0
 8003846:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10d      	bne.n	8003876 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_UART_IRQHandler+0x52>
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fa3d 	bl	8003cee <UART_Receive_IT>
      return;
 8003874:	e17b      	b.n	8003b6e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80b1 	beq.w	80039e0 <HAL_UART_IRQHandler+0x1bc>
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d105      	bne.n	8003894 <HAL_UART_IRQHandler+0x70>
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 80a6 	beq.w	80039e0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <HAL_UART_IRQHandler+0x90>
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	f043 0201 	orr.w	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_UART_IRQHandler+0xb0>
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f043 0202 	orr.w	r2, r3, #2
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_UART_IRQHandler+0xd0>
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	f043 0204 	orr.w	r2, r3, #4
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00f      	beq.n	800391e <HAL_UART_IRQHandler+0xfa>
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d104      	bne.n	8003912 <HAL_UART_IRQHandler+0xee>
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f043 0208 	orr.w	r2, r3, #8
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 811e 	beq.w	8003b64 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <HAL_UART_IRQHandler+0x11e>
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f9d6 	bl	8003cee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394c:	2b00      	cmp	r3, #0
 800394e:	bf14      	ite	ne
 8003950:	2301      	movne	r3, #1
 8003952:	2300      	moveq	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d102      	bne.n	800396a <HAL_UART_IRQHandler+0x146>
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d031      	beq.n	80039ce <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f918 	bl	8003ba0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	d023      	beq.n	80039c6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800398c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	2b00      	cmp	r3, #0
 8003994:	d013      	beq.n	80039be <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	4a76      	ldr	r2, [pc, #472]	; (8003b74 <HAL_UART_IRQHandler+0x350>)
 800399c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fd fa74 	bl	8000e90 <HAL_DMA_Abort_IT>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d016      	beq.n	80039dc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039b8:	4610      	mov	r0, r2
 80039ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039bc:	e00e      	b.n	80039dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f8da 	bl	8003b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c4:	e00a      	b.n	80039dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f8d6 	bl	8003b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039cc:	e006      	b.n	80039dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8d2 	bl	8003b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80039da:	e0c3      	b.n	8003b64 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039dc:	bf00      	nop
    return;
 80039de:	e0c1      	b.n	8003b64 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	f040 80a1 	bne.w	8003b2c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	f003 0310 	and.w	r3, r3, #16
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 809b 	beq.w	8003b2c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8095 	beq.w	8003b2c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d04e      	beq.n	8003ac4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003a30:	8a3b      	ldrh	r3, [r7, #16]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8098 	beq.w	8003b68 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a3c:	8a3a      	ldrh	r2, [r7, #16]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	f080 8092 	bcs.w	8003b68 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8a3a      	ldrh	r2, [r7, #16]
 8003a48:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d02b      	beq.n	8003aac <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a62:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a82:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0210 	bic.w	r2, r2, #16
 8003aa0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fd f9b7 	bl	8000e1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	4619      	mov	r1, r3
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f864 	bl	8003b8a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ac2:	e051      	b.n	8003b68 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d047      	beq.n	8003b6c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003adc:	8a7b      	ldrh	r3, [r7, #18]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d044      	beq.n	8003b6c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003af0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0201 	bic.w	r2, r2, #1
 8003b00:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0210 	bic.w	r2, r2, #16
 8003b1e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b20:	8a7b      	ldrh	r3, [r7, #18]
 8003b22:	4619      	mov	r1, r3
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f830 	bl	8003b8a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b2a:	e01f      	b.n	8003b6c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d008      	beq.n	8003b48 <HAL_UART_IRQHandler+0x324>
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f86d 	bl	8003c20 <UART_Transmit_IT>
    return;
 8003b46:	e012      	b.n	8003b6e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00d      	beq.n	8003b6e <HAL_UART_IRQHandler+0x34a>
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f8ae 	bl	8003cbe <UART_EndTransmit_IT>
    return;
 8003b62:	e004      	b.n	8003b6e <HAL_UART_IRQHandler+0x34a>
    return;
 8003b64:	bf00      	nop
 8003b66:	e002      	b.n	8003b6e <HAL_UART_IRQHandler+0x34a>
      return;
 8003b68:	bf00      	nop
 8003b6a:	e000      	b.n	8003b6e <HAL_UART_IRQHandler+0x34a>
      return;
 8003b6c:	bf00      	nop
  }
}
 8003b6e:	3728      	adds	r7, #40	; 0x28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	08003bf9 	.word	0x08003bf9

08003b78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr

08003b8a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	460b      	mov	r3, r1
 8003b94:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr

08003ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bb6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695a      	ldr	r2, [r3, #20]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0201 	bic.w	r2, r2, #1
 8003bc6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d107      	bne.n	8003be0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0210 	bic.w	r2, r2, #16
 8003bde:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff ffb0 	bl	8003b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c18:	bf00      	nop
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b21      	cmp	r3, #33	; 0x21
 8003c32:	d13e      	bne.n	8003cb2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3c:	d114      	bne.n	8003c68 <UART_Transmit_IT+0x48>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d110      	bne.n	8003c68 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c5a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	1c9a      	adds	r2, r3, #2
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	621a      	str	r2, [r3, #32]
 8003c66:	e008      	b.n	8003c7a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	1c59      	adds	r1, r3, #1
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6211      	str	r1, [r2, #32]
 8003c72:	781a      	ldrb	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	4619      	mov	r1, r3
 8003c88:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10f      	bne.n	8003cae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e000      	b.n	8003cb4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cb2:	2302      	movs	r3, #2
  }
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr

08003cbe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f001 f930 	bl	8004f44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b086      	sub	sp, #24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b22      	cmp	r3, #34	; 0x22
 8003d00:	f040 8099 	bne.w	8003e36 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0c:	d117      	bne.n	8003d3e <UART_Receive_IT+0x50>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d113      	bne.n	8003d3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d36:	1c9a      	adds	r2, r3, #2
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d3c:	e026      	b.n	8003d8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d50:	d007      	beq.n	8003d62 <UART_Receive_IT+0x74>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10a      	bne.n	8003d70 <UART_Receive_IT+0x82>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	e008      	b.n	8003d82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d148      	bne.n	8003e32 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0220 	bic.w	r2, r2, #32
 8003dae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0201 	bic.w	r2, r2, #1
 8003dce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d123      	bne.n	8003e28 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0210 	bic.w	r2, r2, #16
 8003df4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b10      	cmp	r3, #16
 8003e02:	d10a      	bne.n	8003e1a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e1e:	4619      	mov	r1, r3
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff feb2 	bl	8003b8a <HAL_UARTEx_RxEventCallback>
 8003e26:	e002      	b.n	8003e2e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f001 f863 	bl	8004ef4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e002      	b.n	8003e38 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e000      	b.n	8003e38 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003e36:	2302      	movs	r3, #2
  }
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e7a:	f023 030c 	bic.w	r3, r3, #12
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6812      	ldr	r2, [r2, #0]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	430b      	orrs	r3, r1
 8003e86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2c      	ldr	r2, [pc, #176]	; (8003f54 <UART_SetConfig+0x114>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d103      	bne.n	8003eb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ea8:	f7fd ff38 	bl	8001d1c <HAL_RCC_GetPCLK2Freq>
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	e002      	b.n	8003eb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003eb0:	f7fd ff20 	bl	8001cf4 <HAL_RCC_GetPCLK1Freq>
 8003eb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009a      	lsls	r2, r3, #2
 8003ec0:	441a      	add	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ecc:	4a22      	ldr	r2, [pc, #136]	; (8003f58 <UART_SetConfig+0x118>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	0119      	lsls	r1, r3, #4
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	009a      	lsls	r2, r3, #2
 8003ee0:	441a      	add	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eec:	4b1a      	ldr	r3, [pc, #104]	; (8003f58 <UART_SetConfig+0x118>)
 8003eee:	fba3 0302 	umull	r0, r3, r3, r2
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	2064      	movs	r0, #100	; 0x64
 8003ef6:	fb00 f303 	mul.w	r3, r0, r3
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	3332      	adds	r3, #50	; 0x32
 8003f00:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <UART_SetConfig+0x118>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f0c:	4419      	add	r1, r3
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4613      	mov	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	009a      	lsls	r2, r3, #2
 8003f18:	441a      	add	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f24:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <UART_SetConfig+0x118>)
 8003f26:	fba3 0302 	umull	r0, r3, r3, r2
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	2064      	movs	r0, #100	; 0x64
 8003f2e:	fb00 f303 	mul.w	r3, r0, r3
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	3332      	adds	r3, #50	; 0x32
 8003f38:	4a07      	ldr	r2, [pc, #28]	; (8003f58 <UART_SetConfig+0x118>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	f003 020f 	and.w	r2, r3, #15
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	440a      	add	r2, r1
 8003f4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f4c:	bf00      	nop
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40013800 	.word	0x40013800
 8003f58:	51eb851f 	.word	0x51eb851f

08003f5c <adxl345_init>:
  High-level functions
----------------------------------------------------------------------*/

/* Init the device*/
adxl345_status adxl345_init(adxl345_handle_t* hadxl)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
	/* register callback for check SPI configuration */
	spi_freertos_set_check_config_callback(&(hadxl->spi),
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	495e      	ldr	r1, [pc, #376]	; (80040e0 <adxl345_init+0x184>)
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fce9 	bl	8004940 <spi_freertos_set_check_config_callback>
		adxl345_spi_check_config);
	
	uint8_t reg;
	adxl345_status ret = ADXL345_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	73fb      	strb	r3, [r7, #15]
	/* set up NSS into inactive state */
	spi_freertos_nss_high(&(hadxl->spi));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fefc 	bl	8004d72 <spi_freertos_nss_high>
	
	/* Read Device ID */
	ret = adxl345_read_spi(hadxl, ADXL345_REG_DEVID,
 8003f7a:	f107 020e 	add.w	r2, r7, #14
 8003f7e:	2301      	movs	r3, #1
 8003f80:	2100      	movs	r1, #0
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f962 	bl	800424c <adxl345_read_spi>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <adxl345_init+0x3a>
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	e09f      	b.n	80040d6 <adxl345_init+0x17a>
	if(reg != ADXL345_ID) return ADXL345_NODEV;
 8003f96:	7bbb      	ldrb	r3, [r7, #14]
 8003f98:	2be5      	cmp	r3, #229	; 0xe5
 8003f9a:	d001      	beq.n	8003fa0 <adxl345_init+0x44>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e09a      	b.n	80040d6 <adxl345_init+0x17a>
	
	/* Disable device operation */
	reg = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi(hadxl, ADXL345_REG_POWER_CTL,
 8003fa4:	f107 020e 	add.w	r2, r7, #14
 8003fa8:	2301      	movs	r3, #1
 8003faa:	212d      	movs	r1, #45	; 0x2d
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f927 	bl	8004200 <adxl345_write_spi>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <adxl345_init+0x64>
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	e08a      	b.n	80040d6 <adxl345_init+0x17a>
	
	/* Clear interrupts */
	reg = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_ENABLE,
 8003fc4:	f107 020e 	add.w	r2, r7, #14
 8003fc8:	2301      	movs	r3, #1
 8003fca:	212e      	movs	r1, #46	; 0x2e
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f917 	bl	8004200 <adxl345_write_spi>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <adxl345_init+0x84>
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	e07a      	b.n	80040d6 <adxl345_init+0x17a>

	/* Write device settings */
	/* Data rate */
	ret = adxl345_write_spi(hadxl, ADXL345_REG_BW_RATE,
		(void *) &(hadxl->settings.data_rate),
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f103 0220 	add.w	r2, r3, #32
	ret = adxl345_write_spi(hadxl, ADXL345_REG_BW_RATE,
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	212c      	movs	r1, #44	; 0x2c
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f908 	bl	8004200 <adxl345_write_spi>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	73fb      	strb	r3, [r7, #15]
		sizeof(hadxl->settings.data_rate));
	if(ret != ADXL345_OK) return ret;
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <adxl345_init+0xa2>
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	e06b      	b.n	80040d6 <adxl345_init+0x17a>
	
	/* Data format */
	reg = 	hadxl->settings.meas_range | hadxl->settings.align |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800400a:	4313      	orrs	r3, r2
 800400c:	b2da      	uxtb	r2, r3
			hadxl->settings.resolution;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
	reg = 	hadxl->settings.meas_range | hadxl->settings.align |
 8004014:	4313      	orrs	r3, r2
 8004016:	b2db      	uxtb	r3, r3
 8004018:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi(hadxl, ADXL345_REG_DATA_FORMAT,
 800401a:	f107 020e 	add.w	r2, r7, #14
 800401e:	2301      	movs	r3, #1
 8004020:	2131      	movs	r1, #49	; 0x31
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f8ec 	bl	8004200 <adxl345_write_spi>
 8004028:	4603      	mov	r3, r0
 800402a:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <adxl345_init+0xda>
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	e04f      	b.n	80040d6 <adxl345_init+0x17a>
	
	/* Acc offset */
	ret = adxl345_write_spi(hadxl, ADXL345_REG_OFSX,
		(void *) &(hadxl->settings.offset),
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f103 0224 	add.w	r2, r3, #36	; 0x24
	ret = adxl345_write_spi(hadxl, ADXL345_REG_OFSX,
 800403c:	2303      	movs	r3, #3
 800403e:	211e      	movs	r1, #30
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f8dd 	bl	8004200 <adxl345_write_spi>
 8004046:	4603      	mov	r3, r0
 8004048:	73fb      	strb	r3, [r7, #15]
		sizeof(hadxl->settings.offset));
	if(ret != ADXL345_OK) return ret;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <adxl345_init+0xf8>
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	e040      	b.n	80040d6 <adxl345_init+0x17a>
	
	/* FIFO */
	reg = 	hadxl->settings.fifo_mode | hadxl->settings.fifo_trigger |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004060:	4313      	orrs	r3, r2
 8004062:	b2db      	uxtb	r3, r3
 8004064:	b25a      	sxtb	r2, r3
		(hadxl->settings.fifo_watermark&ADXL345_FIFO_CTL_SAMPLES_MASK);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800406c:	b25b      	sxtb	r3, r3
 800406e:	f003 031f 	and.w	r3, r3, #31
 8004072:	b25b      	sxtb	r3, r3
	reg = 	hadxl->settings.fifo_mode | hadxl->settings.fifo_trigger |
 8004074:	4313      	orrs	r3, r2
 8004076:	b25b      	sxtb	r3, r3
 8004078:	b2db      	uxtb	r3, r3
 800407a:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi(hadxl, ADXL345_REG_FIFO_CTL,
 800407c:	f107 020e 	add.w	r2, r7, #14
 8004080:	2301      	movs	r3, #1
 8004082:	2138      	movs	r1, #56	; 0x38
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f8bb 	bl	8004200 <adxl345_write_spi>
 800408a:	4603      	mov	r3, r0
 800408c:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 800408e:	7bfb      	ldrb	r3, [r7, #15]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <adxl345_init+0x13c>
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	e01e      	b.n	80040d6 <adxl345_init+0x17a>
	
	/* Interrupts */
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_MAP,
		(void *) &(hadxl->settings.map_to_int2),
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_MAP,
 800409e:	2301      	movs	r3, #1
 80040a0:	212f      	movs	r1, #47	; 0x2f
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f8ac 	bl	8004200 <adxl345_write_spi>
 80040a8:	4603      	mov	r3, r0
 80040aa:	73fb      	strb	r3, [r7, #15]
		sizeof(hadxl->settings.map_to_int2));
	if(ret != ADXL345_OK) return ret;
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <adxl345_init+0x15a>
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	e00f      	b.n	80040d6 <adxl345_init+0x17a>
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_ENABLE,
		(void *) &(hadxl->settings.int_en),
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f103 0227 	add.w	r2, r3, #39	; 0x27
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_ENABLE,
 80040bc:	2301      	movs	r3, #1
 80040be:	212e      	movs	r1, #46	; 0x2e
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f89d 	bl	8004200 <adxl345_write_spi>
 80040c6:	4603      	mov	r3, r0
 80040c8:	73fb      	strb	r3, [r7, #15]
		sizeof(hadxl->settings.int_en));
	if(ret != ADXL345_OK) return ret;
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <adxl345_init+0x178>
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	e000      	b.n	80040d6 <adxl345_init+0x17a>
	
	return ret;
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	0800431d 	.word	0x0800431d

080040e4 <adxl345_start>:
		offset, sizeof(adxl345_acc_offset_t));
}

/* Start acceleration measurements */
adxl345_status adxl345_start(adxl345_handle_t* hadxl)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
	uint8_t data;
	adxl345_status ret = ADXL345_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	73fb      	strb	r3, [r7, #15]
	ret = adxl345_read_spi_dma(hadxl, ADXL345_REG_POWER_CTL,
 80040f0:	f107 020e 	add.w	r2, r7, #14
 80040f4:	2301      	movs	r3, #1
 80040f6:	212d      	movs	r1, #45	; 0x2d
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f8ee 	bl	80042da <adxl345_read_spi_dma>
 80040fe:	4603      	mov	r3, r0
 8004100:	73fb      	strb	r3, [r7, #15]
							&data, sizeof(data));
	if(ret != ADXL345_OK) return ret;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <adxl345_start+0x28>
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	e00e      	b.n	800412a <adxl345_start+0x46>
	data |= ADXL345_MEASURE;
 800410c:	7bbb      	ldrb	r3, [r7, #14]
 800410e:	f043 0308 	orr.w	r3, r3, #8
 8004112:	b2db      	uxtb	r3, r3
 8004114:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi_dma(hadxl, ADXL345_REG_POWER_CTL,
 8004116:	f107 020e 	add.w	r2, r7, #14
 800411a:	2301      	movs	r3, #1
 800411c:	212d      	movs	r1, #45	; 0x2d
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f8b5 	bl	800428e <adxl345_write_spi_dma>
 8004124:	4603      	mov	r3, r0
 8004126:	73fb      	strb	r3, [r7, #15]
							&data, sizeof(data));
	return ret;
 8004128:	7bfb      	ldrb	r3, [r7, #15]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <adxl345_stop>:

/* Stop acceleration measurements */
adxl345_status adxl345_stop(adxl345_handle_t* hadxl)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
	uint8_t data;
	adxl345_status ret = ADXL345_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	73fb      	strb	r3, [r7, #15]
	ret = adxl345_read_spi_dma(hadxl, ADXL345_REG_POWER_CTL,
 800413e:	f107 020e 	add.w	r2, r7, #14
 8004142:	2301      	movs	r3, #1
 8004144:	212d      	movs	r1, #45	; 0x2d
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f8c7 	bl	80042da <adxl345_read_spi_dma>
 800414c:	4603      	mov	r3, r0
 800414e:	73fb      	strb	r3, [r7, #15]
							&data, sizeof(data));
	if(ret != ADXL345_OK) return ret;
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <adxl345_stop+0x28>
 8004156:	7bfb      	ldrb	r3, [r7, #15]
 8004158:	e00e      	b.n	8004178 <adxl345_stop+0x46>
	data &= (~ADXL345_MEASURE);
 800415a:	7bbb      	ldrb	r3, [r7, #14]
 800415c:	f023 0308 	bic.w	r3, r3, #8
 8004160:	b2db      	uxtb	r3, r3
 8004162:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi_dma(hadxl, ADXL345_REG_POWER_CTL,
 8004164:	f107 020e 	add.w	r2, r7, #14
 8004168:	2301      	movs	r3, #1
 800416a:	212d      	movs	r1, #45	; 0x2d
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f88e 	bl	800428e <adxl345_write_spi_dma>
 8004172:	4603      	mov	r3, r0
 8004174:	73fb      	strb	r3, [r7, #15]
							&data, sizeof(data));
	return ret;
 8004176:	7bfb      	ldrb	r3, [r7, #15]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <adxl345_get_data>:

/* Get the acceleration data for all axes */
adxl345_status adxl345_get_data(adxl345_handle_t* hadxl,
	adxl345_acc_data_t* data)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
	return adxl345_read_spi_dma(hadxl, ADXL345_REG_DATAX0,
 800418a:	2306      	movs	r3, #6
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	2132      	movs	r1, #50	; 0x32
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f8a2 	bl	80042da <adxl345_read_spi_dma>
 8004196:	4603      	mov	r3, r0
		data, sizeof(adxl345_acc_data_t));
}
 8004198:	4618      	mov	r0, r3
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <adxl345_fifo_flush>:

/* Flush internal FIFO */
adxl345_status adxl345_fifo_flush(adxl345_handle_t* hadxl)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	adxl345_acc_data_t tmp;
	uint8_t sample_cnt = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	73fb      	strb	r3, [r7, #15]
	while(adxl345_get_int_src(hadxl) & ADXL345_INT_DATA_READY)
 80041ac:	e00c      	b.n	80041c8 <adxl345_fifo_flush+0x28>
	{
		if(sample_cnt++ > ADXL345_FLUSH_THESHOLD)
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	73fa      	strb	r2, [r7, #15]
 80041b4:	2b40      	cmp	r3, #64	; 0x40
 80041b6:	d901      	bls.n	80041bc <adxl345_fifo_flush+0x1c>
			return ADXL345_ERR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e00d      	b.n	80041d8 <adxl345_fifo_flush+0x38>
		adxl345_get_data(hadxl, &tmp);
 80041bc:	f107 0308 	add.w	r3, r7, #8
 80041c0:	4619      	mov	r1, r3
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff ffdc 	bl	8004180 <adxl345_get_data>
	while(adxl345_get_int_src(hadxl) & ADXL345_INT_DATA_READY)
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f809 	bl	80041e0 <adxl345_get_int_src>
 80041ce:	4603      	mov	r3, r0
 80041d0:	b25b      	sxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	dbeb      	blt.n	80041ae <adxl345_fifo_flush+0xe>
	}
	return ADXL345_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <adxl345_get_int_src>:
	return id;
}

/* Read the INT_SOURCE register */
uint8_t adxl345_get_int_src(adxl345_handle_t* hadxl)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	adxl345_read_spi(hadxl, ADXL345_REG_INT_SOURCE,
 80041e8:	f107 020f 	add.w	r2, r7, #15
 80041ec:	2301      	movs	r3, #1
 80041ee:	2130      	movs	r1, #48	; 0x30
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f82b 	bl	800424c <adxl345_read_spi>
		(void *) &reg, sizeof(reg));
	return reg;
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <adxl345_write_spi>:
----------------------------------------------------------------------*/

/* Write registers through SPI */
adxl345_status adxl345_write_spi(adxl345_handle_t* hadxl,
	uint8_t addr, void* buf, size_t size)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	; 0x28
 8004204:	af04      	add	r7, sp, #16
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	460b      	mov	r3, r1
 800420e:	72fb      	strb	r3, [r7, #11]
	/* Command - write multiple bytes */
	uint8_t cmd = ADXL345_SPI_MB | (addr & ADXL345_SPI_ADDR_MASK);
 8004210:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004218:	b25b      	sxtb	r3, r3
 800421a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800421e:	b25b      	sxtb	r3, r3
 8004220:	b2db      	uxtb	r3, r3
 8004222:	75fb      	strb	r3, [r7, #23]
	
	return (adxl345_status) spi_freertos_write(&(hadxl->spi), &cmd, sizeof(cmd),
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		buf, size, hadxl->mutex_timeout, (uint32_t) hadxl->transfer_timeout);
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	6b12      	ldr	r2, [r2, #48]	; 0x30
	return (adxl345_status) spi_freertos_write(&(hadxl->spi), &cmd, sizeof(cmd),
 800422e:	f107 0117 	add.w	r1, r7, #23
 8004232:	9202      	str	r2, [sp, #8]
 8004234:	9301      	str	r3, [sp, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f000 fb8c 	bl	800495a <spi_freertos_write>
 8004242:	4603      	mov	r3, r0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <adxl345_read_spi>:

/* Read registers through SPI */
adxl345_status adxl345_read_spi(adxl345_handle_t* hadxl,
	uint8_t addr, void* buf, size_t size)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08a      	sub	sp, #40	; 0x28
 8004250:	af04      	add	r7, sp, #16
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	607a      	str	r2, [r7, #4]
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	460b      	mov	r3, r1
 800425a:	72fb      	strb	r3, [r7, #11]
	/* Command - read multiple bytes */
	uint8_t cmd = ADXL345_SPI_READ |
				ADXL345_SPI_MB | (addr&ADXL345_SPI_ADDR_MASK);
 800425c:	7afb      	ldrb	r3, [r7, #11]
 800425e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004262:	b2db      	uxtb	r3, r3
	uint8_t cmd = ADXL345_SPI_READ |
 8004264:	75fb      	strb	r3, [r7, #23]
	
	return (adxl345_status) spi_freertos_read(&(hadxl->spi), &cmd, sizeof(cmd),
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		buf, size, hadxl->mutex_timeout, (uint32_t) hadxl->transfer_timeout);
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	6b12      	ldr	r2, [r2, #48]	; 0x30
	return (adxl345_status) spi_freertos_read(&(hadxl->spi), &cmd, sizeof(cmd),
 8004270:	f107 0117 	add.w	r1, r7, #23
 8004274:	9202      	str	r2, [sp, #8]
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f000 fbe7 	bl	8004a52 <spi_freertos_read>
 8004284:	4603      	mov	r3, r0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <adxl345_write_spi_dma>:

/* Write registers through SPI using DMA */
adxl345_status adxl345_write_spi_dma(adxl345_handle_t* hadxl,
	uint8_t addr, void* buf, size_t size)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b08a      	sub	sp, #40	; 0x28
 8004292:	af04      	add	r7, sp, #16
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	460b      	mov	r3, r1
 800429c:	72fb      	strb	r3, [r7, #11]
	/* Command - write multiple bytes */
	uint8_t cmd = ADXL345_SPI_MB | (addr & ADXL345_SPI_ADDR_MASK);
 800429e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80042a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042a6:	b25b      	sxtb	r3, r3
 80042a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ac:	b25b      	sxtb	r3, r3
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	75fb      	strb	r3, [r7, #23]
	
	return (adxl345_status) spi_freertos_write_dma(&(hadxl->spi),
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042bc:	f107 0117 	add.w	r1, r7, #23
 80042c0:	9202      	str	r2, [sp, #8]
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f000 fc3d 	bl	8004b4a <spi_freertos_write_dma>
 80042d0:	4603      	mov	r3, r0
		&cmd, sizeof(cmd), buf, size,
		hadxl->mutex_timeout, hadxl->transfer_timeout);
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <adxl345_read_spi_dma>:

/* Read registers through SPI using DMA */
adxl345_status adxl345_read_spi_dma(adxl345_handle_t* hadxl,
	uint8_t addr, void* buf, size_t size)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b08a      	sub	sp, #40	; 0x28
 80042de:	af04      	add	r7, sp, #16
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	603b      	str	r3, [r7, #0]
 80042e6:	460b      	mov	r3, r1
 80042e8:	72fb      	strb	r3, [r7, #11]
	uint8_t cmd = ADXL345_SPI_READ |
				ADXL345_SPI_MB | (addr&ADXL345_SPI_ADDR_MASK);
 80042ea:	7afb      	ldrb	r3, [r7, #11]
 80042ec:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80042f0:	b2db      	uxtb	r3, r3
	uint8_t cmd = ADXL345_SPI_READ |
 80042f2:	75fb      	strb	r3, [r7, #23]
	
	return (adxl345_status) spi_freertos_read_dma(&(hadxl->spi),
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042fe:	f107 0117 	add.w	r1, r7, #23
 8004302:	9202      	str	r2, [sp, #8]
 8004304:	9301      	str	r3, [sp, #4]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f000 fca6 	bl	8004c5e <spi_freertos_read_dma>
 8004312:	4603      	mov	r3, r0
		&cmd, sizeof(cmd), buf, size,
		hadxl->mutex_timeout, hadxl->transfer_timeout);
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <adxl345_spi_check_config>:

/* Check and change SPI configuration */
void adxl345_spi_check_config(SPI_HandleTypeDef* hspi)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
	/* Check configuration */
	if( (hspi->Init.CLKPhase    != ADXL345_SPI_CPHA)       ||
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d10f      	bne.n	800434c <adxl345_spi_check_config+0x30>
		(hspi->Init.CLKPolarity != ADXL345_SPI_CPOL)       ||
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
	if( (hspi->Init.CLKPhase    != ADXL345_SPI_CPHA)       ||
 8004330:	2b02      	cmp	r3, #2
 8004332:	d10b      	bne.n	800434c <adxl345_spi_check_config+0x30>
		(hspi->Init.DataSize    != ADXL345_SPI_DATASIZE)   ||
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
		(hspi->Init.CLKPolarity != ADXL345_SPI_CPOL)       ||
 8004338:	2b00      	cmp	r3, #0
 800433a:	d107      	bne.n	800434c <adxl345_spi_check_config+0x30>
		(hspi->Init.Direction   != ADXL345_SPI_DIRECTION)  ||
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
		(hspi->Init.DataSize    != ADXL345_SPI_DATASIZE)   ||
 8004340:	2b00      	cmp	r3, #0
 8004342:	d103      	bne.n	800434c <adxl345_spi_check_config+0x30>
		(hspi->Init.FirstBit    != ADXL345_SPI_BIT_ORDER))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
		(hspi->Init.Direction   != ADXL345_SPI_DIRECTION)  ||
 8004348:	2b00      	cmp	r3, #0
 800434a:	d016      	beq.n	800437a <adxl345_spi_check_config+0x5e>
	{
		hspi->Init.CLKPhase     = ADXL345_SPI_CPHA;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	615a      	str	r2, [r3, #20]
		hspi->Init.CLKPolarity  = ADXL345_SPI_CPOL;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2202      	movs	r2, #2
 8004356:	611a      	str	r2, [r3, #16]
		hspi->Init.DataSize     = ADXL345_SPI_DATASIZE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	60da      	str	r2, [r3, #12]
		hspi->Init.Direction    = ADXL345_SPI_DIRECTION;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	609a      	str	r2, [r3, #8]
		hspi->Init.FirstBit     = ADXL345_SPI_BIT_ORDER;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	621a      	str	r2, [r3, #32]
		if (HAL_SPI_Init(hspi) != HAL_OK)
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fd fd38 	bl	8001de0 <HAL_SPI_Init>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <adxl345_spi_check_config+0x5e>
		{
			Error_Handler();
 8004376:	f7fc f97f 	bl	8000678 <Error_Handler>
		}
	}
}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <adxl345_task>:
static void adxl345_int2(uint16_t pin, BaseType_t* pxHigherPriorityTaskWoken);
static osThreadId adxl345_task_id;
static adxl345_task_handle_t* htask;

void adxl345_task(void const * argument)
{	
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
	htask = (adxl345_task_handle_t *) argument;
 800438c:	4ab0      	ldr	r2, [pc, #704]	; (8004650 <adxl345_task+0x2cc>)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6013      	str	r3, [r2, #0]
	adxl345_power_state_t state = ADXL345_STANDBY;
 8004392:	2301      	movs	r3, #1
 8004394:	75fb      	strb	r3, [r7, #23]

	uint32_t event;
	uint8_t sample_idx = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	75bb      	strb	r3, [r7, #22]
	uint8_t frame_idx = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	757b      	strb	r3, [r7, #21]
	uint8_t i = 0;
 800439e:	2300      	movs	r3, #0
 80043a0:	753b      	strb	r3, [r7, #20]
	
	/* Initializing ADXL345 */
	if(adxl345_init(&(htask->hadxl)) != ADXL345_OK)
 80043a2:	4bab      	ldr	r3, [pc, #684]	; (8004650 <adxl345_task+0x2cc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fdd8 	bl	8003f5c <adxl345_init>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <adxl345_task+0x32>
		Error_Handler();
 80043b2:	f7fc f961 	bl	8000678 <Error_Handler>

	/* Allocating FIFO memory  */
	adxl345_acc_data_t *fifo = pvPortMalloc(htask->fifo_frame_size*
 80043b6:	4ba6      	ldr	r3, [pc, #664]	; (8004650 <adxl345_task+0x2cc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043be:	461a      	mov	r2, r3
		htask->fifo_frame_qty*sizeof(adxl345_acc_data_t));
 80043c0:	4ba3      	ldr	r3, [pc, #652]	; (8004650 <adxl345_task+0x2cc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
	adxl345_acc_data_t *fifo = pvPortMalloc(htask->fifo_frame_size*
 80043c8:	fb03 f302 	mul.w	r3, r3, r2
 80043cc:	461a      	mov	r2, r3
 80043ce:	4613      	mov	r3, r2
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	4413      	add	r3, r2
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	4618      	mov	r0, r3
 80043d8:	f003 f858 	bl	800748c <pvPortMalloc>
 80043dc:	6138      	str	r0, [r7, #16]
	if(fifo == NULL)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <adxl345_task+0x64>
		Error_Handler();
 80043e4:	f7fc f948 	bl	8000678 <Error_Handler>
	adxl345_acc_data_t *ptr_to_send = NULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60bb      	str	r3, [r7, #8]
	
	/* Flush ADXL345 internal FIFO */
	if(adxl345_fifo_flush(&(htask->hadxl)) != ADXL345_OK)
 80043ec:	4b98      	ldr	r3, [pc, #608]	; (8004650 <adxl345_task+0x2cc>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff fed5 	bl	80041a0 <adxl345_fifo_flush>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <adxl345_task+0x7c>
		Error_Handler();
 80043fc:	f7fc f93c 	bl	8000678 <Error_Handler>
	/* Suspend acc */
	if(adxl345_stop(&(htask->hadxl)) != ADXL345_OK)
 8004400:	4b93      	ldr	r3, [pc, #588]	; (8004650 <adxl345_task+0x2cc>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fe94 	bl	8004132 <adxl345_stop>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <adxl345_task+0x90>
						Error_Handler();
 8004410:	f7fc f932 	bl	8000678 <Error_Handler>
	
	/* Registering interrupt handlers */
	/*if(exti_freertos_register(htask->hadxl.int1.pin, adxl345_int1) != pdTRUE)
		Error_Handler();*/
	if(exti_freertos_register(htask->hadxl.int2.pin, adxl345_int2) != pdTRUE)
 8004414:	4b8e      	ldr	r3, [pc, #568]	; (8004650 <adxl345_task+0x2cc>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	8b9b      	ldrh	r3, [r3, #28]
 800441a:	b29b      	uxth	r3, r3
 800441c:	498d      	ldr	r1, [pc, #564]	; (8004654 <adxl345_task+0x2d0>)
 800441e:	4618      	mov	r0, r3
 8004420:	f000 f976 	bl	8004710 <exti_freertos_register>
 8004424:	4603      	mov	r3, r0
 8004426:	2b01      	cmp	r3, #1
 8004428:	d001      	beq.n	800442e <adxl345_task+0xaa>
		Error_Handler();
 800442a:	f7fc f925 	bl	8000678 <Error_Handler>

	/* Notify than init complete */
	xSemaphoreGive(htask->suspend_notify);
 800442e:	4b88      	ldr	r3, [pc, #544]	; (8004650 <adxl345_task+0x2cc>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004434:	2300      	movs	r3, #0
 8004436:	2200      	movs	r2, #0
 8004438:	2100      	movs	r1, #0
 800443a:	f000 ffbd 	bl	80053b8 <xQueueGenericSend>

	/* Event loop */
	while(1)
	{
		xTaskNotifyWait(pdFALSE, UINT32_MAX, &event, portMAX_DELAY);
 800443e:	f107 020c 	add.w	r2, r7, #12
 8004442:	f04f 33ff 	mov.w	r3, #4294967295
 8004446:	f04f 31ff 	mov.w	r1, #4294967295
 800444a:	2000      	movs	r0, #0
 800444c:	f002 fbee 	bl	8006c2c <xTaskNotifyWait>

		switch(state)
 8004450:	7dfb      	ldrb	r3, [r7, #23]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <adxl345_task+0xda>
 8004456:	2b01      	cmp	r3, #1
 8004458:	f000 80df 	beq.w	800461a <adxl345_task+0x296>
 800445c:	e0f6      	b.n	800464c <adxl345_task+0x2c8>
		{
		case ADXL345_RUN:
			/* Suspend request */
			if(event & ADXL345_SUSPEND)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01e      	beq.n	80044a6 <adxl345_task+0x122>
			{
				/* Stop ADXL345 */
				if(adxl345_stop(&(htask->hadxl)) != ADXL345_OK)
 8004468:	4b79      	ldr	r3, [pc, #484]	; (8004650 <adxl345_task+0x2cc>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff fe60 	bl	8004132 <adxl345_stop>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <adxl345_task+0xf8>
					Error_Handler();
 8004478:	f7fc f8fe 	bl	8000678 <Error_Handler>
				/* Flush ADXL345 internal FIFO */
				if(adxl345_fifo_flush(&(htask->hadxl)) != ADXL345_OK)
 800447c:	4b74      	ldr	r3, [pc, #464]	; (8004650 <adxl345_task+0x2cc>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff fe8d 	bl	80041a0 <adxl345_fifo_flush>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <adxl345_task+0x10c>
					Error_Handler();
 800448c:	f7fc f8f4 	bl	8000678 <Error_Handler>
				xSemaphoreGive(htask->suspend_notify);
 8004490:	4b6f      	ldr	r3, [pc, #444]	; (8004650 <adxl345_task+0x2cc>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004496:	2300      	movs	r3, #0
 8004498:	2200      	movs	r2, #0
 800449a:	2100      	movs	r1, #0
 800449c:	f000 ff8c 	bl	80053b8 <xQueueGenericSend>
				state = ADXL345_STANDBY;
 80044a0:	2301      	movs	r3, #1
 80044a2:	75fb      	strb	r3, [r7, #23]
				break;
 80044a4:	e0d2      	b.n	800464c <adxl345_task+0x2c8>
			}
			/* ADXL345 internal FIFO overflow */
			if(event & ADXL345_EXTI2)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d048      	beq.n	8004542 <adxl345_task+0x1be>
			{
				if(!adxl345_get_int_src(&(htask->hadxl)) & ADXL345_INT_OVERRUN)
 80044b0:	4b67      	ldr	r3, [pc, #412]	; (8004650 <adxl345_task+0x2cc>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff fe93 	bl	80041e0 <adxl345_get_int_src>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 80be 	beq.w	800463e <adxl345_task+0x2ba>
					break;
				/* Stop ADXL345 */
				if(adxl345_stop(&(htask->hadxl)) != ADXL345_OK)
 80044c2:	4b63      	ldr	r3, [pc, #396]	; (8004650 <adxl345_task+0x2cc>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fe33 	bl	8004132 <adxl345_stop>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <adxl345_task+0x152>
					Error_Handler();
 80044d2:	f7fc f8d1 	bl	8000678 <Error_Handler>
				/* Flush ADXL345 internal FIFO */
				if(adxl345_fifo_flush(&(htask->hadxl)) != ADXL345_OK)
 80044d6:	4b5e      	ldr	r3, [pc, #376]	; (8004650 <adxl345_task+0x2cc>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fe60 	bl	80041a0 <adxl345_fifo_flush>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <adxl345_task+0x166>
					Error_Handler();
 80044e6:	f7fc f8c7 	bl	8000678 <Error_Handler>
				/* ADXL345 hard fault */
				if(!(event & ADXL345_EXTI1))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <adxl345_task+0x184>
					if(adxl345_init(&(htask->hadxl)) != ADXL345_OK)
 80044f4:	4b56      	ldr	r3, [pc, #344]	; (8004650 <adxl345_task+0x2cc>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff fd2f 	bl	8003f5c <adxl345_init>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <adxl345_task+0x184>
						Error_Handler();
 8004504:	f7fc f8b8 	bl	8000678 <Error_Handler>
				/* Start ADXL345 again */
				if(adxl345_start(&(htask->hadxl)) != ADXL345_OK)
 8004508:	4b51      	ldr	r3, [pc, #324]	; (8004650 <adxl345_task+0x2cc>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fde9 	bl	80040e4 <adxl345_start>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <adxl345_task+0x198>
					Error_Handler();
 8004518:	f7fc f8ae 	bl	8000678 <Error_Handler>
				if(adxl345_get_int_src(&(htask->hadxl)) & ADXL345_INT_OVERRUN)
 800451c:	4b4c      	ldr	r3, [pc, #304]	; (8004650 <adxl345_task+0x2cc>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fe5d 	bl	80041e0 <adxl345_get_int_src>
 8004526:	4603      	mov	r3, r0
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 8088 	beq.w	8004642 <adxl345_task+0x2be>
					xTaskNotify(adxl345_task_id, ADXL345_EXTI2, eSetBits);
 8004532:	4b49      	ldr	r3, [pc, #292]	; (8004658 <adxl345_task+0x2d4>)
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	2300      	movs	r3, #0
 8004538:	2201      	movs	r2, #1
 800453a:	2102      	movs	r1, #2
 800453c:	f002 fbd6 	bl	8006cec <xTaskGenericNotify>
				break;
 8004540:	e07f      	b.n	8004642 <adxl345_task+0x2be>
			}
			/* ADXL345 internal FIFO watermark is exceeded */
			if(event & ADXL345_EXTI1)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d07c      	beq.n	8004646 <adxl345_task+0x2c2>
			{
				/* Get burst of data from ADXL345 internal FIFO */
				for(i = 0; i < htask->hadxl.settings.fifo_watermark; i++)
 800454c:	2300      	movs	r3, #0
 800454e:	753b      	strb	r3, [r7, #20]
 8004550:	e01b      	b.n	800458a <adxl345_task+0x206>
					adxl345_get_data(&(htask->hadxl),
 8004552:	4b3f      	ldr	r3, [pc, #252]	; (8004650 <adxl345_task+0x2cc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
						&(fifo[frame_idx*htask->hadxl.settings.fifo_watermark +
 8004558:	7d7b      	ldrb	r3, [r7, #21]
 800455a:	4a3d      	ldr	r2, [pc, #244]	; (8004650 <adxl345_task+0x2cc>)
 800455c:	6812      	ldr	r2, [r2, #0]
 800455e:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8004562:	fb02 f203 	mul.w	r2, r2, r3
							sample_idx++]));
 8004566:	7dbb      	ldrb	r3, [r7, #22]
 8004568:	1c59      	adds	r1, r3, #1
 800456a:	75b9      	strb	r1, [r7, #22]
						&(fifo[frame_idx*htask->hadxl.settings.fifo_watermark +
 800456c:	4413      	add	r3, r2
 800456e:	461a      	mov	r2, r3
 8004570:	4613      	mov	r3, r2
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	4413      	add	r3, r2
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	461a      	mov	r2, r3
					adxl345_get_data(&(htask->hadxl),
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4413      	add	r3, r2
 800457e:	4619      	mov	r1, r3
 8004580:	f7ff fdfe 	bl	8004180 <adxl345_get_data>
				for(i = 0; i < htask->hadxl.settings.fifo_watermark; i++)
 8004584:	7d3b      	ldrb	r3, [r7, #20]
 8004586:	3301      	adds	r3, #1
 8004588:	753b      	strb	r3, [r7, #20]
 800458a:	4b31      	ldr	r3, [pc, #196]	; (8004650 <adxl345_task+0x2cc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004592:	7d3a      	ldrb	r2, [r7, #20]
 8004594:	429a      	cmp	r2, r3
 8004596:	d3dc      	bcc.n	8004552 <adxl345_task+0x1ce>
				/* Generate interrupt event if FIFO watermark is still exceeded */
				if(adxl345_get_int_src(&(htask->hadxl)) & ADXL345_INT_WATERMARK)
 8004598:	4b2d      	ldr	r3, [pc, #180]	; (8004650 <adxl345_task+0x2cc>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff fe1f 	bl	80041e0 <adxl345_get_int_src>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d006      	beq.n	80045ba <adxl345_task+0x236>
					xTaskNotify(adxl345_task_id, ADXL345_EXTI1, eSetBits);
 80045ac:	4b2a      	ldr	r3, [pc, #168]	; (8004658 <adxl345_task+0x2d4>)
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	2300      	movs	r3, #0
 80045b2:	2201      	movs	r2, #1
 80045b4:	2101      	movs	r1, #1
 80045b6:	f002 fb99 	bl	8006cec <xTaskGenericNotify>
				/* Send frame pointer to queue if frame is full, switch to next */
				if(sample_idx >= htask->fifo_frame_size)
 80045ba:	4b25      	ldr	r3, [pc, #148]	; (8004650 <adxl345_task+0x2cc>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045c2:	7dba      	ldrb	r2, [r7, #22]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d33e      	bcc.n	8004646 <adxl345_task+0x2c2>
				{
					sample_idx = 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	75bb      	strb	r3, [r7, #22]
					ptr_to_send = &(fifo[frame_idx*htask->hadxl.settings.fifo_watermark]);
 80045cc:	7d7b      	ldrb	r3, [r7, #21]
 80045ce:	4a20      	ldr	r2, [pc, #128]	; (8004650 <adxl345_task+0x2cc>)
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	461a      	mov	r2, r3
 80045dc:	4613      	mov	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4413      	add	r3, r2
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	461a      	mov	r2, r3
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4413      	add	r3, r2
 80045ea:	60bb      	str	r3, [r7, #8]
					xQueueSend(htask->fifo_frame_ptr_queue, &ptr_to_send, 0);
 80045ec:	4b18      	ldr	r3, [pc, #96]	; (8004650 <adxl345_task+0x2cc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f8d3 0039 	ldr.w	r0, [r3, #57]	; 0x39
 80045f4:	f107 0108 	add.w	r1, r7, #8
 80045f8:	2300      	movs	r3, #0
 80045fa:	2200      	movs	r2, #0
 80045fc:	f000 fedc 	bl	80053b8 <xQueueGenericSend>
					if(++frame_idx >= htask->fifo_frame_qty)
 8004600:	7d7b      	ldrb	r3, [r7, #21]
 8004602:	3301      	adds	r3, #1
 8004604:	757b      	strb	r3, [r7, #21]
 8004606:	4b12      	ldr	r3, [pc, #72]	; (8004650 <adxl345_task+0x2cc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460e:	7d7a      	ldrb	r2, [r7, #21]
 8004610:	429a      	cmp	r2, r3
 8004612:	d318      	bcc.n	8004646 <adxl345_task+0x2c2>
						frame_idx = 0;
 8004614:	2300      	movs	r3, #0
 8004616:	757b      	strb	r3, [r7, #21]
				}
			}
			break;
 8004618:	e015      	b.n	8004646 <adxl345_task+0x2c2>
		case ADXL345_STANDBY:
			/* Resume request */
			if(event & ADXL345_RESUME)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d012      	beq.n	800464a <adxl345_task+0x2c6>
			{
				/* Start ADXL345 */
				if(adxl345_start(&(htask->hadxl)) != ADXL345_OK)
 8004624:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <adxl345_task+0x2cc>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff fd5b 	bl	80040e4 <adxl345_start>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <adxl345_task+0x2b4>
					Error_Handler();
 8004634:	f7fc f820 	bl	8000678 <Error_Handler>
				state = ADXL345_RUN;
 8004638:	2300      	movs	r3, #0
 800463a:	75fb      	strb	r3, [r7, #23]
			}
			break;
 800463c:	e005      	b.n	800464a <adxl345_task+0x2c6>
					break;
 800463e:	bf00      	nop
 8004640:	e6fd      	b.n	800443e <adxl345_task+0xba>
				break;
 8004642:	bf00      	nop
 8004644:	e6fb      	b.n	800443e <adxl345_task+0xba>
			break;
 8004646:	bf00      	nop
 8004648:	e6f9      	b.n	800443e <adxl345_task+0xba>
			break;
 800464a:	bf00      	nop
		xTaskNotifyWait(pdFALSE, UINT32_MAX, &event, portMAX_DELAY);
 800464c:	e6f7      	b.n	800443e <adxl345_task+0xba>
 800464e:	bf00      	nop
 8004650:	20000348 	.word	0x20000348
 8004654:	080046e5 	.word	0x080046e5
 8004658:	20000344 	.word	0x20000344

0800465c <adxl345_task_create>:
}

osThreadId adxl345_task_create(char *name, osPriority priority,
	uint32_t instances, uint32_t stack_size,
	adxl345_task_handle_t* htask)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08c      	sub	sp, #48	; 0x30
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	607a      	str	r2, [r7, #4]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	460b      	mov	r3, r1
 800466a:	817b      	strh	r3, [r7, #10]
	/* create semaphores, mutexes and queues */
	htask->fifo_frame_ptr_queue = xQueueCreate(htask->fifo_frame_qty,
 800466c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004672:	2200      	movs	r2, #0
 8004674:	2104      	movs	r1, #4
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fe0e 	bl	8005298 <xQueueGenericCreate>
 800467c:	4602      	mov	r2, r0
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	f8c3 2039 	str.w	r2, [r3, #57]	; 0x39
		sizeof(adxl345_acc_data_t*));
	htask->suspend_notify = xSemaphoreCreateBinary();
 8004684:	2203      	movs	r2, #3
 8004686:	2100      	movs	r1, #0
 8004688:	2001      	movs	r0, #1
 800468a:	f000 fe05 	bl	8005298 <xQueueGenericCreate>
 800468e:	4602      	mov	r2, r0
 8004690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004692:	635a      	str	r2, [r3, #52]	; 0x34
	
	/* create tread */
	osThreadDef_t thread = {
 8004694:	f107 0314 	add.w	r3, r7, #20
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	605a      	str	r2, [r3, #4]
 800469e:	609a      	str	r2, [r3, #8]
 80046a0:	60da      	str	r2, [r3, #12]
 80046a2:	611a      	str	r2, [r3, #16]
 80046a4:	615a      	str	r2, [r3, #20]
 80046a6:	619a      	str	r2, [r3, #24]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <adxl345_task_create+0x80>)
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	897b      	ldrh	r3, [r7, #10]
 80046b2:	83bb      	strh	r3, [r7, #28]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	623b      	str	r3, [r7, #32]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
		.tpriority	= priority,
		.instances	= instances,
		.stacksize	= stack_size
	};

	adxl345_task_id = osThreadCreate(&thread, (void *) htask);
 80046bc:	f107 0314 	add.w	r3, r7, #20
 80046c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fc84 	bl	8004fd0 <osThreadCreate>
 80046c8:	4603      	mov	r3, r0
 80046ca:	4a05      	ldr	r2, [pc, #20]	; (80046e0 <adxl345_task_create+0x84>)
 80046cc:	6013      	str	r3, [r2, #0]
	return adxl345_task_id;
 80046ce:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <adxl345_task_create+0x84>)
 80046d0:	681b      	ldr	r3, [r3, #0]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3730      	adds	r7, #48	; 0x30
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	08004385 	.word	0x08004385
 80046e0:	20000344 	.word	0x20000344

080046e4 <adxl345_int2>:
		pxHigherPriorityTaskWoken);
}


static void adxl345_int2(uint16_t pin, BaseType_t* pxHigherPriorityTaskWoken)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	4603      	mov	r3, r0
 80046ec:	6039      	str	r1, [r7, #0]
 80046ee:	80fb      	strh	r3, [r7, #6]
	xTaskNotifyFromISR(adxl345_task_id, ADXL345_EXTI2, eSetBits,
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <adxl345_int2+0x28>)
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	2300      	movs	r3, #0
 80046fa:	2201      	movs	r2, #1
 80046fc:	2102      	movs	r1, #2
 80046fe:	f002 fb9f 	bl	8006e40 <xTaskGenericNotifyFromISR>
		pxHigherPriorityTaskWoken);
}
 8004702:	bf00      	nop
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20000344 	.word	0x20000344

08004710 <exti_freertos_register>:


/* register handler on EXTI GPIO pin */
BaseType_t exti_freertos_register(uint16_t pin,
	void (*handler)(uint16_t pin, BaseType_t* pxHigherPriorityTaskWoken))
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	6039      	str	r1, [r7, #0]
 800471a:	80fb      	strh	r3, [r7, #6]
	if(exti_freertos_find_item(pin) != NULL)
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f86c 	bl	80047fc <exti_freertos_find_item>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <exti_freertos_register+0x1e>
		return pdFALSE;
 800472a:	2300      	movs	r3, #0
 800472c:	e009      	b.n	8004742 <exti_freertos_register+0x32>
	taskENTER_CRITICAL();
 800472e:	f002 fdad 	bl	800728c <vPortEnterCritical>
	exti_freertos_list_append(pin, handler);
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	6839      	ldr	r1, [r7, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f000 f830 	bl	800479c <exti_freertos_list_append>
	taskEXIT_CRITICAL();
 800473c:	f002 fdd6 	bl	80072ec <vPortExitCritical>
	return pdTRUE;
 8004740:	2301      	movs	r3, #1
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <HAL_GPIO_EXTI_Callback>:
	taskEXIT_CRITICAL();
}

/* EXTI ISR */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004756:	2300      	movs	r3, #0
 8004758:	60bb      	str	r3, [r7, #8]
	exti_freertos_list_t *service = exti_freertos_find_item(GPIO_Pin);
 800475a:	88fb      	ldrh	r3, [r7, #6]
 800475c:	4618      	mov	r0, r3
 800475e:	f000 f84d 	bl	80047fc <exti_freertos_find_item>
 8004762:	60f8      	str	r0, [r7, #12]
	if(service == NULL) return;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d012      	beq.n	8004790 <HAL_GPIO_EXTI_Callback+0x44>
	service->handler(GPIO_Pin, &xHigherPriorityTaskWoken);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f107 0108 	add.w	r1, r7, #8
 8004772:	88fa      	ldrh	r2, [r7, #6]
 8004774:	4610      	mov	r0, r2
 8004776:	4798      	blx	r3
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <HAL_GPIO_EXTI_Callback+0x46>
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	e000      	b.n	8004792 <HAL_GPIO_EXTI_Callback+0x46>
	if(service == NULL) return;
 8004790:	bf00      	nop
}
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	e000ed04 	.word	0xe000ed04

0800479c <exti_freertos_list_append>:
static exti_freertos_list_t* exti_freertos_list_begin = NULL;

/* Append the item at the end of list */
static exti_freertos_list_t* exti_freertos_list_append(uint16_t pin,
	void (*handler)(uint16_t pin, BaseType_t* pxHigherPriorityTaskWoken))
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	6039      	str	r1, [r7, #0]
 80047a6:	80fb      	strh	r3, [r7, #6]
	/* creating item */
	exti_freertos_list_t* new_item = (exti_freertos_list_t*)
		pvPortMalloc(sizeof(exti_freertos_list_t));
 80047a8:	200c      	movs	r0, #12
 80047aa:	f002 fe6f 	bl	800748c <pvPortMalloc>
 80047ae:	60b8      	str	r0, [r7, #8]
	new_item->pin = pin;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	88fa      	ldrh	r2, [r7, #6]
 80047b4:	801a      	strh	r2, [r3, #0]
	new_item->handler = handler;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	605a      	str	r2, [r3, #4]
	new_item->next = NULL;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2200      	movs	r2, #0
 80047c0:	609a      	str	r2, [r3, #8]
	/* if list is empty, create and return the begin of list */
	if(exti_freertos_list_begin == NULL)
 80047c2:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <exti_freertos_list_append+0x5c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d103      	bne.n	80047d2 <exti_freertos_list_append+0x36>
		exti_freertos_list_begin = new_item;
 80047ca:	4a0b      	ldr	r2, [pc, #44]	; (80047f8 <exti_freertos_list_append+0x5c>)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	e00d      	b.n	80047ee <exti_freertos_list_append+0x52>
	/* else find end of list and append item at the end of list */
	else
	{
		exti_freertos_list_t *item = exti_freertos_list_begin;
 80047d2:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <exti_freertos_list_append+0x5c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]
		while(item->next != NULL)
 80047d8:	e002      	b.n	80047e0 <exti_freertos_list_append+0x44>
			item = item->next;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	60fb      	str	r3, [r7, #12]
		while(item->next != NULL)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1f8      	bne.n	80047da <exti_freertos_list_append+0x3e>
		item->next = new_item;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	609a      	str	r2, [r3, #8]
	}
	return new_item;
 80047ee:	68bb      	ldr	r3, [r7, #8]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	2000034c 	.word	0x2000034c

080047fc <exti_freertos_find_item>:
	return item;
}

/* Find item in list with mached pin */
exti_freertos_list_t* exti_freertos_find_item(uint16_t pin)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	80fb      	strh	r3, [r7, #6]
	exti_freertos_list_t *item = exti_freertos_list_begin;
 8004806:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <exti_freertos_find_item+0x38>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 800480c:	e007      	b.n	800481e <exti_freertos_find_item+0x22>
	{
		if(item->pin == pin)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	88fa      	ldrh	r2, [r7, #6]
 8004814:	429a      	cmp	r2, r3
 8004816:	d006      	beq.n	8004826 <exti_freertos_find_item+0x2a>
			break;
		item = item->next;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1f4      	bne.n	800480e <exti_freertos_find_item+0x12>
 8004824:	e000      	b.n	8004828 <exti_freertos_find_item+0x2c>
			break;
 8004826:	bf00      	nop
	}
	return item;
 8004828:	68fb      	ldr	r3, [r7, #12]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr
 8004834:	2000034c 	.word	0x2000034c

08004838 <spi_rtos_list_append>:
/* Root of SPI FreeRTOS list */
static struct spi_rtos_list *spi_rtos_list_begin = NULL;

/* Append the item at the end of SPI FreeRTOS list */
static struct spi_rtos_list* spi_rtos_list_append(spi_freertos_t *spi_rtos)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	/* if list is empty, create and return the begin of list */
	if(spi_rtos_list_begin == NULL)
 8004840:	4b19      	ldr	r3, [pc, #100]	; (80048a8 <spi_rtos_list_append+0x70>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d110      	bne.n	800486a <spi_rtos_list_append+0x32>
	{
		spi_rtos_list_begin = (struct spi_rtos_list*)
			pvPortMalloc(sizeof(struct spi_rtos_list));
 8004848:	2008      	movs	r0, #8
 800484a:	f002 fe1f 	bl	800748c <pvPortMalloc>
 800484e:	4603      	mov	r3, r0
		spi_rtos_list_begin = (struct spi_rtos_list*)
 8004850:	4a15      	ldr	r2, [pc, #84]	; (80048a8 <spi_rtos_list_append+0x70>)
 8004852:	6013      	str	r3, [r2, #0]
		spi_rtos_list_begin->spi_rtos = spi_rtos;
 8004854:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <spi_rtos_list_append+0x70>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	601a      	str	r2, [r3, #0]
		spi_rtos_list_begin->next = NULL;
 800485c:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <spi_rtos_list_append+0x70>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2200      	movs	r2, #0
 8004862:	605a      	str	r2, [r3, #4]
		return spi_rtos_list_begin;
 8004864:	4b10      	ldr	r3, [pc, #64]	; (80048a8 <spi_rtos_list_append+0x70>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	e01a      	b.n	80048a0 <spi_rtos_list_append+0x68>
	}
	/* else find end of list */
	struct spi_rtos_list *item = spi_rtos_list_begin;
 800486a:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <spi_rtos_list_append+0x70>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]
	while(item->next != NULL)
 8004870:	e002      	b.n	8004878 <spi_rtos_list_append+0x40>
		item = item->next;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	60fb      	str	r3, [r7, #12]
	while(item->next != NULL)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1f8      	bne.n	8004872 <spi_rtos_list_append+0x3a>
	/* and create and append item at the end of list */
	item->next = (struct spi_rtos_list*)
		pvPortMalloc(sizeof(struct spi_rtos_list));
 8004880:	2008      	movs	r0, #8
 8004882:	f002 fe03 	bl	800748c <pvPortMalloc>
 8004886:	4602      	mov	r2, r0
	item->next = (struct spi_rtos_list*)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	605a      	str	r2, [r3, #4]
	item->next->spi_rtos = spi_rtos;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	601a      	str	r2, [r3, #0]
	item->next->next = NULL;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	605a      	str	r2, [r3, #4]
	return item->next;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	685b      	ldr	r3, [r3, #4]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20000350 	.word	0x20000350

080048ac <spi_rtos_list_find_item>:
}

/* Find item in SPI FreeRTOS list with mached SPI_HandleTypeDef */
static struct spi_rtos_list* spi_rtos_list_find_item
	(SPI_HandleTypeDef* hspi)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	struct spi_rtos_list *item = spi_rtos_list_begin;
 80048b4:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <spi_rtos_list_find_item+0x38>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 80048ba:	e008      	b.n	80048ce <spi_rtos_list_find_item+0x22>
	{
		if(item->spi_rtos->hspi == hspi)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d006      	beq.n	80048d6 <spi_rtos_list_find_item+0x2a>
			break;
		else
			item = item->next;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1f3      	bne.n	80048bc <spi_rtos_list_find_item+0x10>
 80048d4:	e000      	b.n	80048d8 <spi_rtos_list_find_item+0x2c>
			break;
 80048d6:	bf00      	nop
	}
	return item;
 80048d8:	68fb      	ldr	r3, [r7, #12]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr
 80048e4:	20000350 	.word	0x20000350

080048e8 <spi_freertos_init>:

/* Initialize SPI with FreeRTOS mutexes and semaphores */
spi_freertos_status spi_freertos_init(spi_freertos_t* spi_rtos)
{	
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	/* find hspi into list */
	if(spi_rtos_list_find_item(spi_rtos->hspi) != NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff ffd9 	bl	80048ac <spi_rtos_list_find_item>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <spi_freertos_init+0x1c>
		return SPI_FREERTOS_EXIST;
 8004900:	2305      	movs	r3, #5
 8004902:	e019      	b.n	8004938 <spi_freertos_init+0x50>
	
	/* if hspi not found, create semaphores and mutexes */
	spi_rtos->mutex = xSemaphoreCreateMutex();
 8004904:	2001      	movs	r0, #1
 8004906:	f000 fd3e 	bl	8005386 <xQueueCreateMutex>
 800490a:	4602      	mov	r2, r0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	605a      	str	r2, [r3, #4]
	spi_rtos->tx_complete = xSemaphoreCreateBinary();
 8004910:	2203      	movs	r2, #3
 8004912:	2100      	movs	r1, #0
 8004914:	2001      	movs	r0, #1
 8004916:	f000 fcbf 	bl	8005298 <xQueueGenericCreate>
 800491a:	4602      	mov	r2, r0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	60da      	str	r2, [r3, #12]
	spi_rtos->rx_complete = xSemaphoreCreateBinary();
 8004920:	2203      	movs	r2, #3
 8004922:	2100      	movs	r1, #0
 8004924:	2001      	movs	r0, #1
 8004926:	f000 fcb7 	bl	8005298 <xQueueGenericCreate>
 800492a:	4602      	mov	r2, r0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	609a      	str	r2, [r3, #8]
	
	/* register spi_freertos_base into list */
	spi_rtos_list_append(spi_rtos);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7ff ff81 	bl	8004838 <spi_rtos_list_append>
	return SPI_FREERTOS_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <spi_freertos_set_check_config_callback>:

/* Set callback for check SPI configuration (CPHA, CPOL, rate, etc.)
 * before transaction */
void spi_freertos_set_check_config_callback(spi_freertos_nss_t* spi,
	void (*check_spi_conf_callback)(SPI_HandleTypeDef *hspi))
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
	spi->check_spi_conf_callback = check_spi_conf_callback;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	60da      	str	r2, [r3, #12]
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr

0800495a <spi_freertos_write>:
/* Write registers through SPI */
spi_freertos_status spi_freertos_write(spi_freertos_nss_t* spi,
	const void* cmd,  size_t cmd_size,
	const void* data, size_t data_size,
	TickType_t mutex_timeout, uint32_t transfer_timeout)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b086      	sub	sp, #24
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	607a      	str	r2, [r7, #4]
 8004966:	603b      	str	r3, [r7, #0]
	spi_freertos_status ret = SPI_FREERTOS_OK;
 8004968:	2300      	movs	r3, #0
 800496a:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef hal_ret;
	/* Take SPI mutex */
	if(xSemaphoreTake(spi->spi_rtos->mutex, mutex_timeout) == pdFALSE)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004974:	4618      	mov	r0, r3
 8004976:	f000 ff8b 	bl	8005890 <xQueueSemaphoreTake>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <spi_freertos_write+0x2c>
	{
		ret = SPI_FREERTOS_BUSY;
 8004980:	2303      	movs	r3, #3
 8004982:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8004984:	e060      	b.n	8004a48 <spi_freertos_write+0xee>
	}
	
	/* Check and change SPI configuration if nessessary */
	if(spi->check_spi_conf_callback != NULL)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d006      	beq.n	800499c <spi_freertos_write+0x42>
		spi->check_spi_conf_callback(spi->spi_rtos->hspi);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	4610      	mov	r0, r2
 800499a:	4798      	blx	r3
	
	/* NSS to low - start of transaction */
	spi_freertos_nss_low(spi);
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f9fd 	bl	8004d9c <spi_freertos_nss_low>
	
	/* Command data write from buffer */
	if(cmd_size == 0) goto data_stage;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01d      	beq.n	80049e4 <spi_freertos_write+0x8a>
	hal_ret = HAL_SPI_Transmit(spi->spi_rtos->hspi,
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	f7fd fac9 	bl	8001f4c <HAL_SPI_Transmit>
 80049ba:	4603      	mov	r3, r0
 80049bc:	75bb      	strb	r3, [r7, #22]
		(void *) cmd, cmd_size, transfer_timeout);
	switch(hal_ret)
 80049be:	7dbb      	ldrb	r3, [r7, #22]
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d00c      	beq.n	80049de <spi_freertos_write+0x84>
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	dc0f      	bgt.n	80049e8 <spi_freertos_write+0x8e>
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d002      	beq.n	80049d2 <spi_freertos_write+0x78>
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d003      	beq.n	80049d8 <spi_freertos_write+0x7e>
			goto end_of_transaction;
		case HAL_TIMEOUT:
			ret = SPI_FREERTOS_TIMEOUT;
			goto end_of_transaction;
		default:
			break;
 80049d0:	e00a      	b.n	80049e8 <spi_freertos_write+0x8e>
			ret = SPI_FREERTOS_ERR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 80049d6:	e02c      	b.n	8004a32 <spi_freertos_write+0xd8>
			ret = SPI_FREERTOS_BUSY;
 80049d8:	2303      	movs	r3, #3
 80049da:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 80049dc:	e029      	b.n	8004a32 <spi_freertos_write+0xd8>
			ret = SPI_FREERTOS_TIMEOUT;
 80049de:	2304      	movs	r3, #4
 80049e0:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 80049e2:	e026      	b.n	8004a32 <spi_freertos_write+0xd8>
	if(cmd_size == 0) goto data_stage;
 80049e4:	bf00      	nop
 80049e6:	e000      	b.n	80049ea <spi_freertos_write+0x90>
			break;
 80049e8:	bf00      	nop
	}
	
	data_stage:
	if(data_size == 0) goto end_of_transaction;
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01d      	beq.n	8004a2c <spi_freertos_write+0xd2>
	
	/* Data write from buffer */
	hal_ret = HAL_SPI_Transmit(spi->spi_rtos->hspi,
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	6839      	ldr	r1, [r7, #0]
 80049fe:	f7fd faa5 	bl	8001f4c <HAL_SPI_Transmit>
 8004a02:	4603      	mov	r3, r0
 8004a04:	75bb      	strb	r3, [r7, #22]
		(void *) data, data_size, transfer_timeout);
	switch(hal_ret)
 8004a06:	7dbb      	ldrb	r3, [r7, #22]
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d00c      	beq.n	8004a26 <spi_freertos_write+0xcc>
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	dc0f      	bgt.n	8004a30 <spi_freertos_write+0xd6>
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d002      	beq.n	8004a1a <spi_freertos_write+0xc0>
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d003      	beq.n	8004a20 <spi_freertos_write+0xc6>
			goto end_of_transaction;
		case HAL_TIMEOUT:
			ret = SPI_FREERTOS_TIMEOUT;
			goto end_of_transaction;
		default:
			break;
 8004a18:	e00a      	b.n	8004a30 <spi_freertos_write+0xd6>
			ret = SPI_FREERTOS_ERR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 8004a1e:	e008      	b.n	8004a32 <spi_freertos_write+0xd8>
			ret = SPI_FREERTOS_BUSY;
 8004a20:	2303      	movs	r3, #3
 8004a22:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 8004a24:	e005      	b.n	8004a32 <spi_freertos_write+0xd8>
			ret = SPI_FREERTOS_TIMEOUT;
 8004a26:	2304      	movs	r3, #4
 8004a28:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 8004a2a:	e002      	b.n	8004a32 <spi_freertos_write+0xd8>
	if(data_size == 0) goto end_of_transaction;
 8004a2c:	bf00      	nop
 8004a2e:	e000      	b.n	8004a32 <spi_freertos_write+0xd8>
			break;
 8004a30:	bf00      	nop
	}

	end_of_transaction:
	/* NSS to high - end of transaction */
	spi_freertos_nss_high(spi);
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 f99d 	bl	8004d72 <spi_freertos_nss_high>
	
	/* Give back SPI mutex */
	xSemaphoreGive(spi->spi_rtos->mutex);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6858      	ldr	r0, [r3, #4]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	2200      	movs	r2, #0
 8004a42:	2100      	movs	r1, #0
 8004a44:	f000 fcb8 	bl	80053b8 <xQueueGenericSend>
	
	exit:
	return ret;
 8004a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <spi_freertos_read>:
/* Read registers through SPI */
spi_freertos_status spi_freertos_read(spi_freertos_nss_t* spi,
	const void* cmd,  size_t cmd_size,
	const void* data, size_t data_size,
	TickType_t mutex_timeout, uint32_t transfer_timeout)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b086      	sub	sp, #24
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
 8004a5e:	603b      	str	r3, [r7, #0]
	spi_freertos_status ret = SPI_FREERTOS_OK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef hal_ret;
	/* Take SPI mutex */
	if(xSemaphoreTake(spi->spi_rtos->mutex, mutex_timeout) == pdFALSE)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 ff0f 	bl	8005890 <xQueueSemaphoreTake>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d102      	bne.n	8004a7e <spi_freertos_read+0x2c>
	{
		ret = SPI_FREERTOS_BUSY;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8004a7c:	e060      	b.n	8004b40 <spi_freertos_read+0xee>
	}
	
	/* Check and change SPI configuration if nessessary */
	if(spi->check_spi_conf_callback != NULL)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d006      	beq.n	8004a94 <spi_freertos_read+0x42>
		spi->check_spi_conf_callback(spi->spi_rtos->hspi);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	6812      	ldr	r2, [r2, #0]
 8004a90:	4610      	mov	r0, r2
 8004a92:	4798      	blx	r3
	
	/* NSS to low - start of transaction */
	spi_freertos_nss_low(spi);
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f981 	bl	8004d9c <spi_freertos_nss_low>
	
	/* Command data write from buffer */
	if(cmd_size == 0) goto data_stage;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01d      	beq.n	8004adc <spi_freertos_read+0x8a>
	hal_ret = HAL_SPI_Transmit(spi->spi_rtos->hspi,
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	f7fd fa4d 	bl	8001f4c <HAL_SPI_Transmit>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	75bb      	strb	r3, [r7, #22]
		(void *) cmd, cmd_size, transfer_timeout);
	switch(hal_ret)
 8004ab6:	7dbb      	ldrb	r3, [r7, #22]
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d00c      	beq.n	8004ad6 <spi_freertos_read+0x84>
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	dc0f      	bgt.n	8004ae0 <spi_freertos_read+0x8e>
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d002      	beq.n	8004aca <spi_freertos_read+0x78>
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d003      	beq.n	8004ad0 <spi_freertos_read+0x7e>
		goto end_of_transaction;
	case HAL_TIMEOUT:
		ret = SPI_FREERTOS_TIMEOUT;
		goto end_of_transaction;
	default:
		break;
 8004ac8:	e00a      	b.n	8004ae0 <spi_freertos_read+0x8e>
		ret = SPI_FREERTOS_ERR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004ace:	e02c      	b.n	8004b2a <spi_freertos_read+0xd8>
		ret = SPI_FREERTOS_BUSY;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004ad4:	e029      	b.n	8004b2a <spi_freertos_read+0xd8>
		ret = SPI_FREERTOS_TIMEOUT;
 8004ad6:	2304      	movs	r3, #4
 8004ad8:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004ada:	e026      	b.n	8004b2a <spi_freertos_read+0xd8>
	if(cmd_size == 0) goto data_stage;
 8004adc:	bf00      	nop
 8004ade:	e000      	b.n	8004ae2 <spi_freertos_read+0x90>
		break;
 8004ae0:	bf00      	nop
	}
	
	data_stage:
	if(data_size == 0) goto end_of_transaction;
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d01d      	beq.n	8004b24 <spi_freertos_read+0xd2>
	
	/* Data read to buffer */
	hal_ret = HAL_SPI_Receive(spi->spi_rtos->hspi,
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	6839      	ldr	r1, [r7, #0]
 8004af6:	f7fd fb65 	bl	80021c4 <HAL_SPI_Receive>
 8004afa:	4603      	mov	r3, r0
 8004afc:	75bb      	strb	r3, [r7, #22]
		(void *) data, data_size, transfer_timeout);
	switch(hal_ret)
 8004afe:	7dbb      	ldrb	r3, [r7, #22]
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d00c      	beq.n	8004b1e <spi_freertos_read+0xcc>
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	dc0f      	bgt.n	8004b28 <spi_freertos_read+0xd6>
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d002      	beq.n	8004b12 <spi_freertos_read+0xc0>
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d003      	beq.n	8004b18 <spi_freertos_read+0xc6>
		goto end_of_transaction;
	case HAL_TIMEOUT:
		ret = SPI_FREERTOS_TIMEOUT;
		goto end_of_transaction;
	default:
		break;
 8004b10:	e00a      	b.n	8004b28 <spi_freertos_read+0xd6>
		ret = SPI_FREERTOS_ERR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004b16:	e008      	b.n	8004b2a <spi_freertos_read+0xd8>
		ret = SPI_FREERTOS_BUSY;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004b1c:	e005      	b.n	8004b2a <spi_freertos_read+0xd8>
		ret = SPI_FREERTOS_TIMEOUT;
 8004b1e:	2304      	movs	r3, #4
 8004b20:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004b22:	e002      	b.n	8004b2a <spi_freertos_read+0xd8>
	if(data_size == 0) goto end_of_transaction;
 8004b24:	bf00      	nop
 8004b26:	e000      	b.n	8004b2a <spi_freertos_read+0xd8>
		break;
 8004b28:	bf00      	nop
	}

	end_of_transaction:
	/* NSS to high - end of transaction */
	spi_freertos_nss_high(spi);
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 f921 	bl	8004d72 <spi_freertos_nss_high>
	
	/* Give back SPI mutex */
	xSemaphoreGive(spi->spi_rtos->mutex);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6858      	ldr	r0, [r3, #4]
 8004b36:	2300      	movs	r3, #0
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	f000 fc3c 	bl	80053b8 <xQueueGenericSend>
	
	exit:
	return ret;
 8004b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <spi_freertos_write_dma>:
/* Write registers through SPI using DMA */
spi_freertos_status spi_freertos_write_dma(spi_freertos_nss_t* spi,
	const void* cmd,  size_t cmd_size,
	const void* data, size_t data_size,
	TickType_t mutex_timeout, TickType_t transfer_timeout)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b086      	sub	sp, #24
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
 8004b56:	603b      	str	r3, [r7, #0]
	spi_freertos_status ret = SPI_FREERTOS_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef hal_ret;
	/* Take SPI mutex */
	if(xSemaphoreTake(spi->spi_rtos->mutex, mutex_timeout) == pdFALSE)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fe93 	bl	8005890 <xQueueSemaphoreTake>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d102      	bne.n	8004b76 <spi_freertos_write_dma+0x2c>
	{
		ret = SPI_FREERTOS_BUSY;
 8004b70:	2303      	movs	r3, #3
 8004b72:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8004b74:	e06e      	b.n	8004c54 <spi_freertos_write_dma+0x10a>
	}
	
	/* Check and change SPI configuration if nessessary */
	if(spi->check_spi_conf_callback != NULL)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d006      	beq.n	8004b8c <spi_freertos_write_dma+0x42>
		spi->check_spi_conf_callback(spi->spi_rtos->hspi);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	6812      	ldr	r2, [r2, #0]
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	4610      	mov	r0, r2
 8004b8a:	4798      	blx	r3
	
	/* NSS to low - start of transaction */
	spi_freertos_nss_low(spi);
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f905 	bl	8004d9c <spi_freertos_nss_low>
	
	/* Command data DMA write from buffer */
	if(cmd_size == 0) goto data_stage;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d024      	beq.n	8004be2 <spi_freertos_write_dma+0x98>
	hal_ret = HAL_SPI_Transmit_DMA(spi->spi_rtos->hspi,
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	b292      	uxth	r2, r2
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fd fdc1 	bl	800272c <HAL_SPI_Transmit_DMA>
 8004baa:	4603      	mov	r3, r0
 8004bac:	75bb      	strb	r3, [r7, #22]
		(void *) cmd, cmd_size);
	switch(hal_ret)
 8004bae:	7dbb      	ldrb	r3, [r7, #22]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d00d      	beq.n	8004bd0 <spi_freertos_write_dma+0x86>
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d00e      	beq.n	8004bd6 <spi_freertos_write_dma+0x8c>
		goto end_of_transaction;
	case HAL_BUSY:
		ret = SPI_FREERTOS_BUSY;
		goto end_of_transaction;
	default:
		break;
 8004bb8:	bf00      	nop
	}
	
	/* Waiting for transfer complete */
	if(xSemaphoreTake(spi->spi_rtos->tx_complete, transfer_timeout)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fe64 	bl	8005890 <xQueueSemaphoreTake>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10b      	bne.n	8004be6 <spi_freertos_write_dma+0x9c>
 8004bce:	e005      	b.n	8004bdc <spi_freertos_write_dma+0x92>
		ret = SPI_FREERTOS_ERR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004bd4:	e033      	b.n	8004c3e <spi_freertos_write_dma+0xf4>
		ret = SPI_FREERTOS_BUSY;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004bda:	e030      	b.n	8004c3e <spi_freertos_write_dma+0xf4>
		== pdFALSE)
	{
		ret = SPI_FREERTOS_TIMEOUT;
 8004bdc:	2304      	movs	r3, #4
 8004bde:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004be0:	e02d      	b.n	8004c3e <spi_freertos_write_dma+0xf4>
	if(cmd_size == 0) goto data_stage;
 8004be2:	bf00      	nop
 8004be4:	e000      	b.n	8004be8 <spi_freertos_write_dma+0x9e>
	}
	
	data_stage:
 8004be6:	bf00      	nop
	if(data_size == 0) goto end_of_transaction;
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d024      	beq.n	8004c38 <spi_freertos_write_dma+0xee>
	
	/* Data DMA write from buffer */
	hal_ret = HAL_SPI_Transmit_DMA(spi->spi_rtos->hspi,
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6a3a      	ldr	r2, [r7, #32]
 8004bf6:	b292      	uxth	r2, r2
 8004bf8:	6839      	ldr	r1, [r7, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fd fd96 	bl	800272c <HAL_SPI_Transmit_DMA>
 8004c00:	4603      	mov	r3, r0
 8004c02:	75bb      	strb	r3, [r7, #22]
		(void *) data, data_size);
	switch(hal_ret)
 8004c04:	7dbb      	ldrb	r3, [r7, #22]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d00d      	beq.n	8004c26 <spi_freertos_write_dma+0xdc>
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d00e      	beq.n	8004c2c <spi_freertos_write_dma+0xe2>
		goto end_of_transaction;
	case HAL_BUSY:
		ret = SPI_FREERTOS_BUSY;
		goto end_of_transaction;
	default:
		break;
 8004c0e:	bf00      	nop
	}
	
	/* Waiting for transfer complete */
	if(xSemaphoreTake(spi->spi_rtos->tx_complete, transfer_timeout)	== pdFALSE)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fe39 	bl	8005890 <xQueueSemaphoreTake>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10b      	bne.n	8004c3c <spi_freertos_write_dma+0xf2>
 8004c24:	e005      	b.n	8004c32 <spi_freertos_write_dma+0xe8>
		ret = SPI_FREERTOS_ERR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004c2a:	e008      	b.n	8004c3e <spi_freertos_write_dma+0xf4>
		ret = SPI_FREERTOS_BUSY;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004c30:	e005      	b.n	8004c3e <spi_freertos_write_dma+0xf4>
	{
		ret = SPI_FREERTOS_TIMEOUT;
 8004c32:	2304      	movs	r3, #4
 8004c34:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004c36:	e002      	b.n	8004c3e <spi_freertos_write_dma+0xf4>
	if(data_size == 0) goto end_of_transaction;
 8004c38:	bf00      	nop
 8004c3a:	e000      	b.n	8004c3e <spi_freertos_write_dma+0xf4>
	}
	
	end_of_transaction:
 8004c3c:	bf00      	nop
	/* NSS to high - end of transaction */
	spi_freertos_nss_high(spi);
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 f897 	bl	8004d72 <spi_freertos_nss_high>
	
	/* Give back SPI mutex */
	xSemaphoreGive(spi->spi_rtos->mutex);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6858      	ldr	r0, [r3, #4]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2100      	movs	r1, #0
 8004c50:	f000 fbb2 	bl	80053b8 <xQueueGenericSend>
	
	exit:
	return ret;
 8004c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <spi_freertos_read_dma>:
/* Read registers through SPI using DMA */
spi_freertos_status spi_freertos_read_dma(spi_freertos_nss_t* spi,
	const void* cmd,  size_t cmd_size,
	const void* data, size_t data_size,
	TickType_t mutex_timeout, TickType_t transfer_timeout)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b086      	sub	sp, #24
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	607a      	str	r2, [r7, #4]
 8004c6a:	603b      	str	r3, [r7, #0]
	spi_freertos_status ret = SPI_FREERTOS_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef hal_ret;
	/* Take SPI mutex */
	if(xSemaphoreTake(spi->spi_rtos->mutex, mutex_timeout) == pdFALSE)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 fe09 	bl	8005890 <xQueueSemaphoreTake>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d102      	bne.n	8004c8a <spi_freertos_read_dma+0x2c>
	{
		ret = SPI_FREERTOS_BUSY;
 8004c84:	2303      	movs	r3, #3
 8004c86:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8004c88:	e06e      	b.n	8004d68 <spi_freertos_read_dma+0x10a>
	}
	
	/* Check and change SPI configuration if nessessary */
	if(spi->check_spi_conf_callback != NULL)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d006      	beq.n	8004ca0 <spi_freertos_read_dma+0x42>
		spi->check_spi_conf_callback(spi->spi_rtos->hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	6812      	ldr	r2, [r2, #0]
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4798      	blx	r3
	
	/* NSS to low - start of transaction */
	spi_freertos_nss_low(spi);
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 f87b 	bl	8004d9c <spi_freertos_nss_low>
	
	/* Command data DMA write from buffer */
	if(cmd_size == 0) goto data_stage;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d024      	beq.n	8004cf6 <spi_freertos_read_dma+0x98>
	hal_ret = HAL_SPI_Transmit_DMA(spi->spi_rtos->hspi,
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	b292      	uxth	r2, r2
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fd fd37 	bl	800272c <HAL_SPI_Transmit_DMA>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	75bb      	strb	r3, [r7, #22]
		(void *) cmd, cmd_size);
	switch(hal_ret)
 8004cc2:	7dbb      	ldrb	r3, [r7, #22]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d00d      	beq.n	8004ce4 <spi_freertos_read_dma+0x86>
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d00e      	beq.n	8004cea <spi_freertos_read_dma+0x8c>
		goto end_of_transaction;
	case HAL_BUSY:
		ret = SPI_FREERTOS_BUSY;
		goto end_of_transaction;
	default:
		break;
 8004ccc:	bf00      	nop
	}
	
	/* Waiting for transfer complete */
	if(xSemaphoreTake(spi->spi_rtos->tx_complete, transfer_timeout)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fdda 	bl	8005890 <xQueueSemaphoreTake>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10b      	bne.n	8004cfa <spi_freertos_read_dma+0x9c>
 8004ce2:	e005      	b.n	8004cf0 <spi_freertos_read_dma+0x92>
		ret = SPI_FREERTOS_ERR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004ce8:	e033      	b.n	8004d52 <spi_freertos_read_dma+0xf4>
		ret = SPI_FREERTOS_BUSY;
 8004cea:	2303      	movs	r3, #3
 8004cec:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004cee:	e030      	b.n	8004d52 <spi_freertos_read_dma+0xf4>
		== pdFALSE)
	{
		ret = SPI_FREERTOS_TIMEOUT;
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004cf4:	e02d      	b.n	8004d52 <spi_freertos_read_dma+0xf4>
	if(cmd_size == 0) goto data_stage;
 8004cf6:	bf00      	nop
 8004cf8:	e000      	b.n	8004cfc <spi_freertos_read_dma+0x9e>
	}
	
	data_stage:
 8004cfa:	bf00      	nop
	if(data_size == 0) goto end_of_transaction;
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d024      	beq.n	8004d4c <spi_freertos_read_dma+0xee>
	
	/* Data DMA read to buffer */
	hal_ret = HAL_SPI_Receive_DMA(spi->spi_rtos->hspi,
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6a3a      	ldr	r2, [r7, #32]
 8004d0a:	b292      	uxth	r2, r2
 8004d0c:	6839      	ldr	r1, [r7, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fd fdc2 	bl	8002898 <HAL_SPI_Receive_DMA>
 8004d14:	4603      	mov	r3, r0
 8004d16:	75bb      	strb	r3, [r7, #22]
		(void *) data, data_size);
	switch(hal_ret)
 8004d18:	7dbb      	ldrb	r3, [r7, #22]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d00d      	beq.n	8004d3a <spi_freertos_read_dma+0xdc>
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d00e      	beq.n	8004d40 <spi_freertos_read_dma+0xe2>
		goto end_of_transaction;
	case HAL_BUSY:
		ret = SPI_FREERTOS_BUSY;
		goto end_of_transaction;
	default:
		break;
 8004d22:	bf00      	nop
	}
	
	/* Waiting for transfer complete */
	if(xSemaphoreTake(spi->spi_rtos->rx_complete, transfer_timeout)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fdaf 	bl	8005890 <xQueueSemaphoreTake>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10b      	bne.n	8004d50 <spi_freertos_read_dma+0xf2>
 8004d38:	e005      	b.n	8004d46 <spi_freertos_read_dma+0xe8>
		ret = SPI_FREERTOS_ERR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004d3e:	e008      	b.n	8004d52 <spi_freertos_read_dma+0xf4>
		ret = SPI_FREERTOS_BUSY;
 8004d40:	2303      	movs	r3, #3
 8004d42:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004d44:	e005      	b.n	8004d52 <spi_freertos_read_dma+0xf4>
		== pdFALSE)
	{
		ret = SPI_FREERTOS_TIMEOUT;
 8004d46:	2304      	movs	r3, #4
 8004d48:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004d4a:	e002      	b.n	8004d52 <spi_freertos_read_dma+0xf4>
	if(data_size == 0) goto end_of_transaction;
 8004d4c:	bf00      	nop
 8004d4e:	e000      	b.n	8004d52 <spi_freertos_read_dma+0xf4>
	}
	
	end_of_transaction:
 8004d50:	bf00      	nop
	/* NSS to high - end of transaction */
	spi_freertos_nss_high(spi);
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f80d 	bl	8004d72 <spi_freertos_nss_high>
	
	/* Give back SPI mutex */
	xSemaphoreGive(spi->spi_rtos->mutex);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6858      	ldr	r0, [r3, #4]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	2200      	movs	r2, #0
 8004d62:	2100      	movs	r1, #0
 8004d64:	f000 fb28 	bl	80053b8 <xQueueGenericSend>
	
	exit:
	return ret;
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <spi_freertos_nss_high>:
	return ret;
}

/* Set NSS pin to high */
inline void spi_freertos_nss_high(spi_freertos_nss_t* spi)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
	if(spi->nss.port != NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d008      	beq.n	8004d94 <spi_freertos_nss_high+0x22>
		HAL_GPIO_WritePin(spi->nss.port, spi->nss.pin, GPIO_PIN_SET);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6858      	ldr	r0, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	891b      	ldrh	r3, [r3, #8]
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	4619      	mov	r1, r3
 8004d90:	f7fc fbac 	bl	80014ec <HAL_GPIO_WritePin>
}
 8004d94:	bf00      	nop
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <spi_freertos_nss_low>:

/* Set NSS pin to low */
inline void spi_freertos_nss_low(spi_freertos_nss_t* spi)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	if(spi->nss.port != NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d008      	beq.n	8004dbe <spi_freertos_nss_low+0x22>
		HAL_GPIO_WritePin(spi->nss.port, spi->nss.pin, GPIO_PIN_RESET);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6858      	ldr	r0, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	891b      	ldrh	r3, [r3, #8]
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2200      	movs	r2, #0
 8004db8:	4619      	mov	r1, r3
 8004dba:	f7fc fb97 	bl	80014ec <HAL_GPIO_WritePin>
}
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi);
*/

/* RX complete */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60bb      	str	r3, [r7, #8]
	struct spi_rtos_list *item = spi_rtos_list_find_item(hspi);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff fd69 	bl	80048ac <spi_rtos_list_find_item>
 8004dda:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d014      	beq.n	8004e0c <HAL_SPI_RxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->spi_rtos->rx_complete,
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f107 0208 	add.w	r2, r7, #8
 8004dec:	4611      	mov	r1, r2
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fbe0 	bl	80055b4 <xQueueGiveFromISR>
		&xHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d009      	beq.n	8004e0e <HAL_SPI_RxCpltCallback+0x46>
 8004dfa:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <HAL_SPI_RxCpltCallback+0x4c>)
 8004dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	e000      	b.n	8004e0e <HAL_SPI_RxCpltCallback+0x46>
	if(item == NULL) return;
 8004e0c:	bf00      	nop
}
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	e000ed04 	.word	0xe000ed04

08004e18 <HAL_SPI_TxCpltCallback>:

/* TX complete */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60bb      	str	r3, [r7, #8]
	struct spi_rtos_list *item = spi_rtos_list_find_item(hspi);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff fd41 	bl	80048ac <spi_rtos_list_find_item>
 8004e2a:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d014      	beq.n	8004e5c <HAL_SPI_TxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->spi_rtos->tx_complete,
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f107 0208 	add.w	r2, r7, #8
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fbb8 	bl	80055b4 <xQueueGiveFromISR>
		&xHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d009      	beq.n	8004e5e <HAL_SPI_TxCpltCallback+0x46>
 8004e4a:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <HAL_SPI_TxCpltCallback+0x4c>)
 8004e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	e000      	b.n	8004e5e <HAL_SPI_TxCpltCallback+0x46>
	if(item == NULL) return;
 8004e5c:	bf00      	nop
}
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	e000ed04 	.word	0xe000ed04

08004e68 <HAL_SPI_TxRxCpltCallback>:

/* Full-duplex complete - rx_complete semaphore is used*/
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60bb      	str	r3, [r7, #8]
	struct spi_rtos_list *item = spi_rtos_list_find_item(hspi);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff fd19 	bl	80048ac <spi_rtos_list_find_item>
 8004e7a:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d014      	beq.n	8004eac <HAL_SPI_TxRxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->spi_rtos->rx_complete,
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f107 0208 	add.w	r2, r7, #8
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fb90 	bl	80055b4 <xQueueGiveFromISR>
		&xHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <HAL_SPI_TxRxCpltCallback+0x46>
 8004e9a:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <HAL_SPI_TxRxCpltCallback+0x4c>)
 8004e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	e000      	b.n	8004eae <HAL_SPI_TxRxCpltCallback+0x46>
	if(item == NULL) return;
 8004eac:	bf00      	nop
}
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	e000ed04 	.word	0xe000ed04

08004eb8 <uart_rtos_list_find_item>:
}

/* Find item in SPI FreeRTOS list with mached SPI_HandleTypeDef */
static struct uart_rtos_list* uart_rtos_list_find_item
	(UART_HandleTypeDef* huart)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]

	struct uart_rtos_list *item = uart_rtos_list_begin;
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <uart_rtos_list_find_item+0x38>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 8004ec6:	e008      	b.n	8004eda <uart_rtos_list_find_item+0x22>
	{
		if(item->uart_rtos->huart == huart)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d006      	beq.n	8004ee2 <uart_rtos_list_find_item+0x2a>
			break;
		else
			item = item->next;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f3      	bne.n	8004ec8 <uart_rtos_list_find_item+0x10>
 8004ee0:	e000      	b.n	8004ee4 <uart_rtos_list_find_item+0x2c>
			break;
 8004ee2:	bf00      	nop
	}
	return item;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr
 8004ef0:	20000354 	.word	0x20000354

08004ef4 <HAL_UART_RxCpltCallback>:
	return rtn;
}

/* USART RX complete inperrupt */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60bb      	str	r3, [r7, #8]
	struct uart_rtos_list *item = uart_rtos_list_find_item(huart);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ffd9 	bl	8004eb8 <uart_rtos_list_find_item>
 8004f06:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d014      	beq.n	8004f38 <HAL_UART_RxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->uart_rtos->rx_complete,	&xHigherPriorityTaskWoken);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f107 0208 	add.w	r2, r7, #8
 8004f18:	4611      	mov	r1, r2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fb4a 	bl	80055b4 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d009      	beq.n	8004f3a <HAL_UART_RxCpltCallback+0x46>
 8004f26:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <HAL_UART_RxCpltCallback+0x4c>)
 8004f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	e000      	b.n	8004f3a <HAL_UART_RxCpltCallback+0x46>
	if(item == NULL) return;
 8004f38:	bf00      	nop
}
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	e000ed04 	.word	0xe000ed04

08004f44 <HAL_UART_TxCpltCallback>:

/* USART TX complete inperrupt */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60bb      	str	r3, [r7, #8]
	struct uart_rtos_list *item = uart_rtos_list_find_item(huart);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff ffb1 	bl	8004eb8 <uart_rtos_list_find_item>
 8004f56:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d014      	beq.n	8004f88 <HAL_UART_TxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->uart_rtos->tx_complete,	&xHigherPriorityTaskWoken);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f107 0208 	add.w	r2, r7, #8
 8004f68:	4611      	mov	r1, r2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fb22 	bl	80055b4 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <HAL_UART_TxCpltCallback+0x46>
 8004f76:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <HAL_UART_TxCpltCallback+0x4c>)
 8004f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	e000      	b.n	8004f8a <HAL_UART_TxCpltCallback+0x46>
	if(item == NULL) return;
 8004f88:	bf00      	nop
}
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	e000ed04 	.word	0xe000ed04

08004f94 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fa6:	2b84      	cmp	r3, #132	; 0x84
 8004fa8:	d005      	beq.n	8004fb6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004faa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3303      	adds	r3, #3
 8004fb4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr

08004fc2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004fc6:	f001 f837 	bl	8006038 <vTaskStartScheduler>
  
  return osOK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd2:	b089      	sub	sp, #36	; 0x24
 8004fd4:	af04      	add	r7, sp, #16
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d020      	beq.n	8005024 <osThreadCreate+0x54>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01c      	beq.n	8005024 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685c      	ldr	r4, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681d      	ldr	r5, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691e      	ldr	r6, [r3, #16]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff ffc9 	bl	8004f94 <makeFreeRtosPriority>
 8005002:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800500c:	9202      	str	r2, [sp, #8]
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	9100      	str	r1, [sp, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	4632      	mov	r2, r6
 8005016:	4629      	mov	r1, r5
 8005018:	4620      	mov	r0, r4
 800501a:	f000 fe6c 	bl	8005cf6 <xTaskCreateStatic>
 800501e:	4603      	mov	r3, r0
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	e01c      	b.n	800505e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685c      	ldr	r4, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005030:	b29e      	uxth	r6, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff ffab 	bl	8004f94 <makeFreeRtosPriority>
 800503e:	4602      	mov	r2, r0
 8005040:	f107 030c 	add.w	r3, r7, #12
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	9200      	str	r2, [sp, #0]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	4632      	mov	r2, r6
 800504c:	4629      	mov	r1, r5
 800504e:	4620      	mov	r0, r4
 8005050:	f000 fead 	bl	8005dae <xTaskCreate>
 8005054:	4603      	mov	r3, r0
 8005056:	2b01      	cmp	r3, #1
 8005058:	d001      	beq.n	800505e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800505a:	2300      	movs	r3, #0
 800505c:	e000      	b.n	8005060 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800505e:	68fb      	ldr	r3, [r7, #12]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005068 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f103 0208 	add.w	r2, r3, #8
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f04f 32ff 	mov.w	r2, #4294967295
 8005080:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f103 0208 	add.w	r2, r3, #8
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f103 0208 	add.w	r2, r3, #8
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr

080050a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr

080050be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050be:	b480      	push	{r7}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	601a      	str	r2, [r3, #0]
}
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr

08005104 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511a:	d103      	bne.n	8005124 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	e00c      	b.n	800513e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3308      	adds	r3, #8
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	e002      	b.n	8005132 <vListInsert+0x2e>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	429a      	cmp	r2, r3
 800513c:	d2f6      	bcs.n	800512c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	601a      	str	r2, [r3, #0]
}
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr

08005174 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6892      	ldr	r2, [r2, #8]
 800518a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6852      	ldr	r2, [r2, #4]
 8005194:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	429a      	cmp	r2, r3
 800519e:	d103      	bne.n	80051a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	1e5a      	subs	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bc80      	pop	{r7}
 80051c4:	4770      	bx	lr
	...

080051c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80051f2:	f002 f84b 	bl	800728c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	68f9      	ldr	r1, [r7, #12]
 8005200:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005202:	fb01 f303 	mul.w	r3, r1, r3
 8005206:	441a      	add	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005222:	3b01      	subs	r3, #1
 8005224:	68f9      	ldr	r1, [r7, #12]
 8005226:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005228:	fb01 f303 	mul.w	r3, r1, r3
 800522c:	441a      	add	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	22ff      	movs	r2, #255	; 0xff
 8005236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	22ff      	movs	r2, #255	; 0xff
 800523e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d114      	bne.n	8005272 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01a      	beq.n	8005286 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3310      	adds	r3, #16
 8005254:	4618      	mov	r0, r3
 8005256:	f001 f947 	bl	80064e8 <xTaskRemoveFromEventList>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d012      	beq.n	8005286 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005260:	4b0c      	ldr	r3, [pc, #48]	; (8005294 <xQueueGenericReset+0xcc>)
 8005262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	e009      	b.n	8005286 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3310      	adds	r3, #16
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff fef6 	bl	8005068 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3324      	adds	r3, #36	; 0x24
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fef1 	bl	8005068 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005286:	f002 f831 	bl	80072ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800528a:	2301      	movs	r3, #1
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	e000ed04 	.word	0xe000ed04

08005298 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08a      	sub	sp, #40	; 0x28
 800529c:	af02      	add	r7, sp, #8
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	613b      	str	r3, [r7, #16]
}
 80052be:	bf00      	nop
 80052c0:	e7fe      	b.n	80052c0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d102      	bne.n	80052ce <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80052c8:	2300      	movs	r3, #0
 80052ca:	61fb      	str	r3, [r7, #28]
 80052cc:	e004      	b.n	80052d8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	fb02 f303 	mul.w	r3, r2, r3
 80052d6:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	3348      	adds	r3, #72	; 0x48
 80052dc:	4618      	mov	r0, r3
 80052de:	f002 f8d5 	bl	800748c <pvPortMalloc>
 80052e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00f      	beq.n	800530a <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	3348      	adds	r3, #72	; 0x48
 80052ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052f8:	79fa      	ldrb	r2, [r7, #7]
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	4613      	mov	r3, r2
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f805 	bl	8005314 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800530a:	69bb      	ldr	r3, [r7, #24]
	}
 800530c:	4618      	mov	r0, r3
 800530e:	3720      	adds	r7, #32
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d103      	bne.n	8005330 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e002      	b.n	8005336 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005342:	2101      	movs	r1, #1
 8005344:	69b8      	ldr	r0, [r7, #24]
 8005346:	f7ff ff3f 	bl	80051c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800534a:	bf00      	nop
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005352:	b580      	push	{r7, lr}
 8005354:	b082      	sub	sp, #8
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00e      	beq.n	800537e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005372:	2300      	movs	r3, #0
 8005374:	2200      	movs	r2, #0
 8005376:	2100      	movs	r1, #0
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f81d 	bl	80053b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005386:	b580      	push	{r7, lr}
 8005388:	b086      	sub	sp, #24
 800538a:	af00      	add	r7, sp, #0
 800538c:	4603      	mov	r3, r0
 800538e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005390:	2301      	movs	r3, #1
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	2300      	movs	r3, #0
 8005396:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	461a      	mov	r2, r3
 800539c:	6939      	ldr	r1, [r7, #16]
 800539e:	6978      	ldr	r0, [r7, #20]
 80053a0:	f7ff ff7a 	bl	8005298 <xQueueGenericCreate>
 80053a4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7ff ffd3 	bl	8005352 <prvInitialiseMutex>

		return pxNewQueue;
 80053ac:	68fb      	ldr	r3, [r7, #12]
	}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08e      	sub	sp, #56	; 0x38
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053c6:	2300      	movs	r3, #0
 80053c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <xQueueGenericSend+0x32>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d103      	bne.n	80053f8 <xQueueGenericSend+0x40>
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <xQueueGenericSend+0x44>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <xQueueGenericSend+0x46>
 80053fc:	2300      	movs	r3, #0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <xQueueGenericSend+0x60>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b02      	cmp	r3, #2
 800541c:	d103      	bne.n	8005426 <xQueueGenericSend+0x6e>
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <xQueueGenericSend+0x72>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <xQueueGenericSend+0x74>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <xQueueGenericSend+0x8e>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	623b      	str	r3, [r7, #32]
}
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005446:	f001 fa13 	bl	8006870 <xTaskGetSchedulerState>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d102      	bne.n	8005456 <xQueueGenericSend+0x9e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <xQueueGenericSend+0xa2>
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <xQueueGenericSend+0xa4>
 800545a:	2300      	movs	r3, #0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <xQueueGenericSend+0xbe>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	61fb      	str	r3, [r7, #28]
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005476:	f001 ff09 	bl	800728c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005482:	429a      	cmp	r2, r3
 8005484:	d302      	bcc.n	800548c <xQueueGenericSend+0xd4>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b02      	cmp	r3, #2
 800548a:	d129      	bne.n	80054e0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005492:	f000 fb20 	bl	8005ad6 <prvCopyDataToQueue>
 8005496:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	2b00      	cmp	r3, #0
 800549e:	d010      	beq.n	80054c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	3324      	adds	r3, #36	; 0x24
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 f81f 	bl	80064e8 <xTaskRemoveFromEventList>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d013      	beq.n	80054d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054b0:	4b3f      	ldr	r3, [pc, #252]	; (80055b0 <xQueueGenericSend+0x1f8>)
 80054b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	e00a      	b.n	80054d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d007      	beq.n	80054d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80054c8:	4b39      	ldr	r3, [pc, #228]	; (80055b0 <xQueueGenericSend+0x1f8>)
 80054ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054d8:	f001 ff08 	bl	80072ec <vPortExitCritical>
				return pdPASS;
 80054dc:	2301      	movs	r3, #1
 80054de:	e063      	b.n	80055a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d103      	bne.n	80054ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054e6:	f001 ff01 	bl	80072ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	e05c      	b.n	80055a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d106      	bne.n	8005502 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054f4:	f107 0314 	add.w	r3, r7, #20
 80054f8:	4618      	mov	r0, r3
 80054fa:	f001 f857 	bl	80065ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054fe:	2301      	movs	r3, #1
 8005500:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005502:	f001 fef3 	bl	80072ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005506:	f000 fe01 	bl	800610c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800550a:	f001 febf 	bl	800728c <vPortEnterCritical>
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005514:	b25b      	sxtb	r3, r3
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551a:	d103      	bne.n	8005524 <xQueueGenericSend+0x16c>
 800551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005526:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800552a:	b25b      	sxtb	r3, r3
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d103      	bne.n	800553a <xQueueGenericSend+0x182>
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800553a:	f001 fed7 	bl	80072ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800553e:	1d3a      	adds	r2, r7, #4
 8005540:	f107 0314 	add.w	r3, r7, #20
 8005544:	4611      	mov	r1, r2
 8005546:	4618      	mov	r0, r3
 8005548:	f001 f846 	bl	80065d8 <xTaskCheckForTimeOut>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d124      	bne.n	800559c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005552:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005554:	f000 fbb7 	bl	8005cc6 <prvIsQueueFull>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d018      	beq.n	8005590 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	3310      	adds	r3, #16
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	4611      	mov	r1, r2
 8005566:	4618      	mov	r0, r3
 8005568:	f000 ff9a 	bl	80064a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800556c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800556e:	f000 fb42 	bl	8005bf6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005572:	f000 fdd9 	bl	8006128 <xTaskResumeAll>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	f47f af7c 	bne.w	8005476 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800557e:	4b0c      	ldr	r3, [pc, #48]	; (80055b0 <xQueueGenericSend+0x1f8>)
 8005580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	e772      	b.n	8005476 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005592:	f000 fb30 	bl	8005bf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005596:	f000 fdc7 	bl	8006128 <xTaskResumeAll>
 800559a:	e76c      	b.n	8005476 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800559c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800559e:	f000 fb2a 	bl	8005bf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055a2:	f000 fdc1 	bl	8006128 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055a6:	2300      	movs	r3, #0
		}
	}
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3738      	adds	r7, #56	; 0x38
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	e000ed04 	.word	0xe000ed04

080055b4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08e      	sub	sp, #56	; 0x38
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <xQueueGiveFromISR+0x2a>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	623b      	str	r3, [r7, #32]
}
 80055da:	bf00      	nop
 80055dc:	e7fe      	b.n	80055dc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <xQueueGiveFromISR+0x48>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	61fb      	str	r3, [r7, #28]
}
 80055f8:	bf00      	nop
 80055fa:	e7fe      	b.n	80055fa <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d103      	bne.n	800560c <xQueueGiveFromISR+0x58>
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <xQueueGiveFromISR+0x5c>
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <xQueueGiveFromISR+0x5e>
 8005610:	2300      	movs	r3, #0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10a      	bne.n	800562c <xQueueGiveFromISR+0x78>
	__asm volatile
 8005616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	61bb      	str	r3, [r7, #24]
}
 8005628:	bf00      	nop
 800562a:	e7fe      	b.n	800562a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800562c:	f001 fef0 	bl	8007410 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005630:	f3ef 8211 	mrs	r2, BASEPRI
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	617a      	str	r2, [r7, #20]
 8005646:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005648:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800564a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005658:	429a      	cmp	r2, r3
 800565a:	d22b      	bcs.n	80056b4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800566e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005676:	d112      	bne.n	800569e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	2b00      	cmp	r3, #0
 800567e:	d016      	beq.n	80056ae <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005682:	3324      	adds	r3, #36	; 0x24
 8005684:	4618      	mov	r0, r3
 8005686:	f000 ff2f 	bl	80064e8 <xTaskRemoveFromEventList>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00e      	beq.n	80056ae <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2201      	movs	r2, #1
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	e007      	b.n	80056ae <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800569e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056a2:	3301      	adds	r3, #1
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	b25a      	sxtb	r2, r3
 80056a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80056ae:	2301      	movs	r3, #1
 80056b0:	637b      	str	r3, [r7, #52]	; 0x34
 80056b2:	e001      	b.n	80056b8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056b4:	2300      	movs	r3, #0
 80056b6:	637b      	str	r3, [r7, #52]	; 0x34
 80056b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ba:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3738      	adds	r7, #56	; 0x38
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08c      	sub	sp, #48	; 0x30
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056dc:	2300      	movs	r3, #0
 80056de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <xQueueReceive+0x30>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	623b      	str	r3, [r7, #32]
}
 80056fc:	bf00      	nop
 80056fe:	e7fe      	b.n	80056fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d103      	bne.n	800570e <xQueueReceive+0x3e>
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <xQueueReceive+0x42>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <xQueueReceive+0x44>
 8005712:	2300      	movs	r3, #0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <xQueueReceive+0x5e>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	61fb      	str	r3, [r7, #28]
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800572e:	f001 f89f 	bl	8006870 <xTaskGetSchedulerState>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <xQueueReceive+0x6e>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <xQueueReceive+0x72>
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <xQueueReceive+0x74>
 8005742:	2300      	movs	r3, #0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10a      	bne.n	800575e <xQueueReceive+0x8e>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	61bb      	str	r3, [r7, #24]
}
 800575a:	bf00      	nop
 800575c:	e7fe      	b.n	800575c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800575e:	f001 fd95 	bl	800728c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01f      	beq.n	80057ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800576e:	68b9      	ldr	r1, [r7, #8]
 8005770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005772:	f000 fa1a 	bl	8005baa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	1e5a      	subs	r2, r3, #1
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800577e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00f      	beq.n	80057a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	3310      	adds	r3, #16
 800578a:	4618      	mov	r0, r3
 800578c:	f000 feac 	bl	80064e8 <xTaskRemoveFromEventList>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d007      	beq.n	80057a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005796:	4b3d      	ldr	r3, [pc, #244]	; (800588c <xQueueReceive+0x1bc>)
 8005798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057a6:	f001 fda1 	bl	80072ec <vPortExitCritical>
				return pdPASS;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e069      	b.n	8005882 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d103      	bne.n	80057bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057b4:	f001 fd9a 	bl	80072ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057b8:	2300      	movs	r3, #0
 80057ba:	e062      	b.n	8005882 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057c2:	f107 0310 	add.w	r3, r7, #16
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fef0 	bl	80065ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057cc:	2301      	movs	r3, #1
 80057ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057d0:	f001 fd8c 	bl	80072ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057d4:	f000 fc9a 	bl	800610c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057d8:	f001 fd58 	bl	800728c <vPortEnterCritical>
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057e2:	b25b      	sxtb	r3, r3
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d103      	bne.n	80057f2 <xQueueReceive+0x122>
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057f8:	b25b      	sxtb	r3, r3
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fe:	d103      	bne.n	8005808 <xQueueReceive+0x138>
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005808:	f001 fd70 	bl	80072ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800580c:	1d3a      	adds	r2, r7, #4
 800580e:	f107 0310 	add.w	r3, r7, #16
 8005812:	4611      	mov	r1, r2
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fedf 	bl	80065d8 <xTaskCheckForTimeOut>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d123      	bne.n	8005868 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005822:	f000 fa3a 	bl	8005c9a <prvIsQueueEmpty>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d017      	beq.n	800585c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	3324      	adds	r3, #36	; 0x24
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	4611      	mov	r1, r2
 8005834:	4618      	mov	r0, r3
 8005836:	f000 fe33 	bl	80064a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800583a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800583c:	f000 f9db 	bl	8005bf6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005840:	f000 fc72 	bl	8006128 <xTaskResumeAll>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d189      	bne.n	800575e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800584a:	4b10      	ldr	r3, [pc, #64]	; (800588c <xQueueReceive+0x1bc>)
 800584c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	e780      	b.n	800575e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800585c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800585e:	f000 f9ca 	bl	8005bf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005862:	f000 fc61 	bl	8006128 <xTaskResumeAll>
 8005866:	e77a      	b.n	800575e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800586a:	f000 f9c4 	bl	8005bf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800586e:	f000 fc5b 	bl	8006128 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005874:	f000 fa11 	bl	8005c9a <prvIsQueueEmpty>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	f43f af6f 	beq.w	800575e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005880:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005882:	4618      	mov	r0, r3
 8005884:	3730      	adds	r7, #48	; 0x30
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	e000ed04 	.word	0xe000ed04

08005890 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08e      	sub	sp, #56	; 0x38
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800589a:	2300      	movs	r3, #0
 800589c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80058a2:	2300      	movs	r3, #0
 80058a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10a      	bne.n	80058c2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	623b      	str	r3, [r7, #32]
}
 80058be:	bf00      	nop
 80058c0:	e7fe      	b.n	80058c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80058c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	61fb      	str	r3, [r7, #28]
}
 80058dc:	bf00      	nop
 80058de:	e7fe      	b.n	80058de <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058e0:	f000 ffc6 	bl	8006870 <xTaskGetSchedulerState>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d102      	bne.n	80058f0 <xQueueSemaphoreTake+0x60>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <xQueueSemaphoreTake+0x64>
 80058f0:	2301      	movs	r3, #1
 80058f2:	e000      	b.n	80058f6 <xQueueSemaphoreTake+0x66>
 80058f4:	2300      	movs	r3, #0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10a      	bne.n	8005910 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80058fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	61bb      	str	r3, [r7, #24]
}
 800590c:	bf00      	nop
 800590e:	e7fe      	b.n	800590e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005910:	f001 fcbc 	bl	800728c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	2b00      	cmp	r3, #0
 800591e:	d024      	beq.n	800596a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	1e5a      	subs	r2, r3, #1
 8005924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005926:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d104      	bne.n	800593a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005930:	f001 f968 	bl	8006c04 <pvTaskIncrementMutexHeldCount>
 8005934:	4602      	mov	r2, r0
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005938:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00f      	beq.n	8005962 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005944:	3310      	adds	r3, #16
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fdce 	bl	80064e8 <xTaskRemoveFromEventList>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d007      	beq.n	8005962 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005952:	4b54      	ldr	r3, [pc, #336]	; (8005aa4 <xQueueSemaphoreTake+0x214>)
 8005954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005962:	f001 fcc3 	bl	80072ec <vPortExitCritical>
				return pdPASS;
 8005966:	2301      	movs	r3, #1
 8005968:	e097      	b.n	8005a9a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d111      	bne.n	8005994 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	617b      	str	r3, [r7, #20]
}
 8005988:	bf00      	nop
 800598a:	e7fe      	b.n	800598a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800598c:	f001 fcae 	bl	80072ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005990:	2300      	movs	r3, #0
 8005992:	e082      	b.n	8005a9a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005996:	2b00      	cmp	r3, #0
 8005998:	d106      	bne.n	80059a8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800599a:	f107 030c 	add.w	r3, r7, #12
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fe04 	bl	80065ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059a4:	2301      	movs	r3, #1
 80059a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059a8:	f001 fca0 	bl	80072ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059ac:	f000 fbae 	bl	800610c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059b0:	f001 fc6c 	bl	800728c <vPortEnterCritical>
 80059b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059ba:	b25b      	sxtb	r3, r3
 80059bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c0:	d103      	bne.n	80059ca <xQueueSemaphoreTake+0x13a>
 80059c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059d0:	b25b      	sxtb	r3, r3
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d6:	d103      	bne.n	80059e0 <xQueueSemaphoreTake+0x150>
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059e0:	f001 fc84 	bl	80072ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059e4:	463a      	mov	r2, r7
 80059e6:	f107 030c 	add.w	r3, r7, #12
 80059ea:	4611      	mov	r1, r2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fdf3 	bl	80065d8 <xTaskCheckForTimeOut>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d132      	bne.n	8005a5e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059fa:	f000 f94e 	bl	8005c9a <prvIsQueueEmpty>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d026      	beq.n	8005a52 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d109      	bne.n	8005a20 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005a0c:	f001 fc3e 	bl	800728c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 ff49 	bl	80068ac <xTaskPriorityInherit>
 8005a1a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005a1c:	f001 fc66 	bl	80072ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a22:	3324      	adds	r3, #36	; 0x24
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	4611      	mov	r1, r2
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 fd39 	bl	80064a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a30:	f000 f8e1 	bl	8005bf6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a34:	f000 fb78 	bl	8006128 <xTaskResumeAll>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f47f af68 	bne.w	8005910 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005a40:	4b18      	ldr	r3, [pc, #96]	; (8005aa4 <xQueueSemaphoreTake+0x214>)
 8005a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	e75e      	b.n	8005910 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005a52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a54:	f000 f8cf 	bl	8005bf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a58:	f000 fb66 	bl	8006128 <xTaskResumeAll>
 8005a5c:	e758      	b.n	8005910 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005a5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a60:	f000 f8c9 	bl	8005bf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a64:	f000 fb60 	bl	8006128 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a6a:	f000 f916 	bl	8005c9a <prvIsQueueEmpty>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f43f af4d 	beq.w	8005910 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00d      	beq.n	8005a98 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005a7c:	f001 fc06 	bl	800728c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005a80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a82:	f000 f811 	bl	8005aa8 <prvGetDisinheritPriorityAfterTimeout>
 8005a86:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f001 f818 	bl	8006ac4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005a94:	f001 fc2a 	bl	80072ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3738      	adds	r7, #56	; 0x38
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	e000ed04 	.word	0xe000ed04

08005aa8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d006      	beq.n	8005ac6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f1c3 0307 	rsb	r3, r3, #7
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	e001      	b.n	8005aca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005aca:	68fb      	ldr	r3, [r7, #12]
	}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bc80      	pop	{r7}
 8005ad4:	4770      	bx	lr

08005ad6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b086      	sub	sp, #24
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10d      	bne.n	8005b10 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d14d      	bne.n	8005b98 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 ff59 	bl	80069b8 <xTaskPriorityDisinherit>
 8005b06:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	605a      	str	r2, [r3, #4]
 8005b0e:	e043      	b.n	8005b98 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d119      	bne.n	8005b4a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6898      	ldr	r0, [r3, #8]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	461a      	mov	r2, r3
 8005b20:	68b9      	ldr	r1, [r7, #8]
 8005b22:	f001 feb1 	bl	8007888 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	441a      	add	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d32b      	bcc.n	8005b98 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	609a      	str	r2, [r3, #8]
 8005b48:	e026      	b.n	8005b98 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	68d8      	ldr	r0, [r3, #12]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	461a      	mov	r2, r3
 8005b54:	68b9      	ldr	r1, [r7, #8]
 8005b56:	f001 fe97 	bl	8007888 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	425b      	negs	r3, r3
 8005b64:	441a      	add	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d207      	bcs.n	8005b86 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	425b      	negs	r3, r3
 8005b80:	441a      	add	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d105      	bne.n	8005b98 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005ba0:	697b      	ldr	r3, [r7, #20]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b082      	sub	sp, #8
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d018      	beq.n	8005bee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	441a      	add	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d303      	bcc.n	8005bde <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68d9      	ldr	r1, [r3, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	461a      	mov	r2, r3
 8005be8:	6838      	ldr	r0, [r7, #0]
 8005bea:	f001 fe4d 	bl	8007888 <memcpy>
	}
}
 8005bee:	bf00      	nop
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005bfe:	f001 fb45 	bl	800728c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c08:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c0a:	e011      	b.n	8005c30 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d012      	beq.n	8005c3a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	3324      	adds	r3, #36	; 0x24
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fc65 	bl	80064e8 <xTaskRemoveFromEventList>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c24:	f000 fd3a 	bl	800669c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	dce9      	bgt.n	8005c0c <prvUnlockQueue+0x16>
 8005c38:	e000      	b.n	8005c3c <prvUnlockQueue+0x46>
					break;
 8005c3a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	22ff      	movs	r2, #255	; 0xff
 8005c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c44:	f001 fb52 	bl	80072ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c48:	f001 fb20 	bl	800728c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c52:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c54:	e011      	b.n	8005c7a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d012      	beq.n	8005c84 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3310      	adds	r3, #16
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fc40 	bl	80064e8 <xTaskRemoveFromEventList>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c6e:	f000 fd15 	bl	800669c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c72:	7bbb      	ldrb	r3, [r7, #14]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	dce9      	bgt.n	8005c56 <prvUnlockQueue+0x60>
 8005c82:	e000      	b.n	8005c86 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c84:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	22ff      	movs	r2, #255	; 0xff
 8005c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c8e:	f001 fb2d 	bl	80072ec <vPortExitCritical>
}
 8005c92:	bf00      	nop
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ca2:	f001 faf3 	bl	800728c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d102      	bne.n	8005cb4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	e001      	b.n	8005cb8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cb8:	f001 fb18 	bl	80072ec <vPortExitCritical>

	return xReturn;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cce:	f001 fadd 	bl	800728c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d102      	bne.n	8005ce4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	e001      	b.n	8005ce8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ce8:	f001 fb00 	bl	80072ec <vPortExitCritical>

	return xReturn;
 8005cec:	68fb      	ldr	r3, [r7, #12]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b08e      	sub	sp, #56	; 0x38
 8005cfa:	af04      	add	r7, sp, #16
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	607a      	str	r2, [r7, #4]
 8005d02:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10a      	bne.n	8005d20 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	623b      	str	r3, [r7, #32]
}
 8005d1c:	bf00      	nop
 8005d1e:	e7fe      	b.n	8005d1e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10a      	bne.n	8005d3c <xTaskCreateStatic+0x46>
	__asm volatile
 8005d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2a:	f383 8811 	msr	BASEPRI, r3
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	61fb      	str	r3, [r7, #28]
}
 8005d38:	bf00      	nop
 8005d3a:	e7fe      	b.n	8005d3a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d3c:	23b4      	movs	r3, #180	; 0xb4
 8005d3e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2bb4      	cmp	r3, #180	; 0xb4
 8005d44:	d00a      	beq.n	8005d5c <xTaskCreateStatic+0x66>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	61bb      	str	r3, [r7, #24]
}
 8005d58:	bf00      	nop
 8005d5a:	e7fe      	b.n	8005d5a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d01e      	beq.n	8005da0 <xTaskCreateStatic+0xaa>
 8005d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d01b      	beq.n	8005da0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	2202      	movs	r2, #2
 8005d76:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	9303      	str	r3, [sp, #12]
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	9302      	str	r3, [sp, #8]
 8005d82:	f107 0314 	add.w	r3, r7, #20
 8005d86:	9301      	str	r3, [sp, #4]
 8005d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	68b9      	ldr	r1, [r7, #8]
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 f850 	bl	8005e38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d9a:	f000 f8e3 	bl	8005f64 <prvAddNewTaskToReadyList>
 8005d9e:	e001      	b.n	8005da4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005da4:	697b      	ldr	r3, [r7, #20]
	}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3728      	adds	r7, #40	; 0x28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b08c      	sub	sp, #48	; 0x30
 8005db2:	af04      	add	r7, sp, #16
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	603b      	str	r3, [r7, #0]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f001 fb62 	bl	800748c <pvPortMalloc>
 8005dc8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00e      	beq.n	8005dee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005dd0:	20b4      	movs	r0, #180	; 0xb4
 8005dd2:	f001 fb5b 	bl	800748c <pvPortMalloc>
 8005dd6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	631a      	str	r2, [r3, #48]	; 0x30
 8005de4:	e005      	b.n	8005df2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005de6:	6978      	ldr	r0, [r7, #20]
 8005de8:	f001 fc14 	bl	8007614 <vPortFree>
 8005dec:	e001      	b.n	8005df2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d017      	beq.n	8005e28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e00:	88fa      	ldrh	r2, [r7, #6]
 8005e02:	2300      	movs	r3, #0
 8005e04:	9303      	str	r3, [sp, #12]
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	9302      	str	r3, [sp, #8]
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	9301      	str	r3, [sp, #4]
 8005e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68b9      	ldr	r1, [r7, #8]
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 f80e 	bl	8005e38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e1c:	69f8      	ldr	r0, [r7, #28]
 8005e1e:	f000 f8a1 	bl	8005f64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e22:	2301      	movs	r3, #1
 8005e24:	61bb      	str	r3, [r7, #24]
 8005e26:	e002      	b.n	8005e2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e28:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e2e:	69bb      	ldr	r3, [r7, #24]
	}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b088      	sub	sp, #32
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e50:	3b01      	subs	r3, #1
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	f023 0307 	bic.w	r3, r3, #7
 8005e5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	617b      	str	r3, [r7, #20]
}
 8005e7c:	bf00      	nop
 8005e7e:	e7fe      	b.n	8005e7e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e80:	2300      	movs	r3, #0
 8005e82:	61fb      	str	r3, [r7, #28]
 8005e84:	e012      	b.n	8005eac <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	7819      	ldrb	r1, [r3, #0]
 8005e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	4413      	add	r3, r2
 8005e94:	3334      	adds	r3, #52	; 0x34
 8005e96:	460a      	mov	r2, r1
 8005e98:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d006      	beq.n	8005eb4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	61fb      	str	r3, [r7, #28]
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	2b0f      	cmp	r3, #15
 8005eb0:	d9e9      	bls.n	8005e86 <prvInitialiseNewTask+0x4e>
 8005eb2:	e000      	b.n	8005eb6 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005eb4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	2b06      	cmp	r3, #6
 8005ec2:	d901      	bls.n	8005ec8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ec4:	2306      	movs	r3, #6
 8005ec6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ecc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ed2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	3304      	adds	r3, #4
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff f8e1 	bl	80050a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee6:	3318      	adds	r3, #24
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff f8dc 	bl	80050a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ef2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	f1c3 0207 	rsb	r2, r3, #7
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	334c      	adds	r3, #76	; 0x4c
 8005f18:	2260      	movs	r2, #96	; 0x60
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f001 fcc1 	bl	80078a4 <memset>
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	4a0c      	ldr	r2, [pc, #48]	; (8005f58 <prvInitialiseNewTask+0x120>)
 8005f26:	651a      	str	r2, [r3, #80]	; 0x50
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	4a0c      	ldr	r2, [pc, #48]	; (8005f5c <prvInitialiseNewTask+0x124>)
 8005f2c:	655a      	str	r2, [r3, #84]	; 0x54
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	4a0b      	ldr	r2, [pc, #44]	; (8005f60 <prvInitialiseNewTask+0x128>)
 8005f32:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	68f9      	ldr	r1, [r7, #12]
 8005f38:	69b8      	ldr	r0, [r7, #24]
 8005f3a:	f001 f8b7 	bl	80070ac <pxPortInitialiseStack>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f42:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f50:	bf00      	nop
 8005f52:	3720      	adds	r7, #32
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	08007af8 	.word	0x08007af8
 8005f5c:	08007b18 	.word	0x08007b18
 8005f60:	08007ad8 	.word	0x08007ad8

08005f64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f6c:	f001 f98e 	bl	800728c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f70:	4b2a      	ldr	r3, [pc, #168]	; (800601c <prvAddNewTaskToReadyList+0xb8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3301      	adds	r3, #1
 8005f76:	4a29      	ldr	r2, [pc, #164]	; (800601c <prvAddNewTaskToReadyList+0xb8>)
 8005f78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f7a:	4b29      	ldr	r3, [pc, #164]	; (8006020 <prvAddNewTaskToReadyList+0xbc>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d109      	bne.n	8005f96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f82:	4a27      	ldr	r2, [pc, #156]	; (8006020 <prvAddNewTaskToReadyList+0xbc>)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f88:	4b24      	ldr	r3, [pc, #144]	; (800601c <prvAddNewTaskToReadyList+0xb8>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d110      	bne.n	8005fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f90:	f000 fba8 	bl	80066e4 <prvInitialiseTaskLists>
 8005f94:	e00d      	b.n	8005fb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f96:	4b23      	ldr	r3, [pc, #140]	; (8006024 <prvAddNewTaskToReadyList+0xc0>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d109      	bne.n	8005fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f9e:	4b20      	ldr	r3, [pc, #128]	; (8006020 <prvAddNewTaskToReadyList+0xbc>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d802      	bhi.n	8005fb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fac:	4a1c      	ldr	r2, [pc, #112]	; (8006020 <prvAddNewTaskToReadyList+0xbc>)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fb2:	4b1d      	ldr	r3, [pc, #116]	; (8006028 <prvAddNewTaskToReadyList+0xc4>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	4a1b      	ldr	r2, [pc, #108]	; (8006028 <prvAddNewTaskToReadyList+0xc4>)
 8005fba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	409a      	lsls	r2, r3
 8005fc4:	4b19      	ldr	r3, [pc, #100]	; (800602c <prvAddNewTaskToReadyList+0xc8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	4a18      	ldr	r2, [pc, #96]	; (800602c <prvAddNewTaskToReadyList+0xc8>)
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4a15      	ldr	r2, [pc, #84]	; (8006030 <prvAddNewTaskToReadyList+0xcc>)
 8005fdc:	441a      	add	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	f7ff f86a 	bl	80050be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fea:	f001 f97f 	bl	80072ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fee:	4b0d      	ldr	r3, [pc, #52]	; (8006024 <prvAddNewTaskToReadyList+0xc0>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00e      	beq.n	8006014 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ff6:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <prvAddNewTaskToReadyList+0xbc>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	429a      	cmp	r2, r3
 8006002:	d207      	bcs.n	8006014 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006004:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <prvAddNewTaskToReadyList+0xd0>)
 8006006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006014:	bf00      	nop
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	20000458 	.word	0x20000458
 8006020:	20000358 	.word	0x20000358
 8006024:	20000464 	.word	0x20000464
 8006028:	20000474 	.word	0x20000474
 800602c:	20000460 	.word	0x20000460
 8006030:	2000035c 	.word	0x2000035c
 8006034:	e000ed04 	.word	0xe000ed04

08006038 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08a      	sub	sp, #40	; 0x28
 800603c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800603e:	2300      	movs	r3, #0
 8006040:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006042:	2300      	movs	r3, #0
 8006044:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006046:	463a      	mov	r2, r7
 8006048:	1d39      	adds	r1, r7, #4
 800604a:	f107 0308 	add.w	r3, r7, #8
 800604e:	4618      	mov	r0, r3
 8006050:	f7fa f87e 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	9202      	str	r2, [sp, #8]
 800605c:	9301      	str	r3, [sp, #4]
 800605e:	2300      	movs	r3, #0
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	2300      	movs	r3, #0
 8006064:	460a      	mov	r2, r1
 8006066:	4921      	ldr	r1, [pc, #132]	; (80060ec <vTaskStartScheduler+0xb4>)
 8006068:	4821      	ldr	r0, [pc, #132]	; (80060f0 <vTaskStartScheduler+0xb8>)
 800606a:	f7ff fe44 	bl	8005cf6 <xTaskCreateStatic>
 800606e:	4603      	mov	r3, r0
 8006070:	4a20      	ldr	r2, [pc, #128]	; (80060f4 <vTaskStartScheduler+0xbc>)
 8006072:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006074:	4b1f      	ldr	r3, [pc, #124]	; (80060f4 <vTaskStartScheduler+0xbc>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800607c:	2301      	movs	r3, #1
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	e001      	b.n	8006086 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d11b      	bne.n	80060c4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	613b      	str	r3, [r7, #16]
}
 800609e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060a0:	4b15      	ldr	r3, [pc, #84]	; (80060f8 <vTaskStartScheduler+0xc0>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	334c      	adds	r3, #76	; 0x4c
 80060a6:	4a15      	ldr	r2, [pc, #84]	; (80060fc <vTaskStartScheduler+0xc4>)
 80060a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060aa:	4b15      	ldr	r3, [pc, #84]	; (8006100 <vTaskStartScheduler+0xc8>)
 80060ac:	f04f 32ff 	mov.w	r2, #4294967295
 80060b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060b2:	4b14      	ldr	r3, [pc, #80]	; (8006104 <vTaskStartScheduler+0xcc>)
 80060b4:	2201      	movs	r2, #1
 80060b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80060b8:	4b13      	ldr	r3, [pc, #76]	; (8006108 <vTaskStartScheduler+0xd0>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80060be:	f001 f873 	bl	80071a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80060c2:	e00e      	b.n	80060e2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ca:	d10a      	bne.n	80060e2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	60fb      	str	r3, [r7, #12]
}
 80060de:	bf00      	nop
 80060e0:	e7fe      	b.n	80060e0 <vTaskStartScheduler+0xa8>
}
 80060e2:	bf00      	nop
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	08007ab8 	.word	0x08007ab8
 80060f0:	080066b5 	.word	0x080066b5
 80060f4:	2000047c 	.word	0x2000047c
 80060f8:	20000358 	.word	0x20000358
 80060fc:	20000010 	.word	0x20000010
 8006100:	20000478 	.word	0x20000478
 8006104:	20000464 	.word	0x20000464
 8006108:	2000045c 	.word	0x2000045c

0800610c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006110:	4b04      	ldr	r3, [pc, #16]	; (8006124 <vTaskSuspendAll+0x18>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3301      	adds	r3, #1
 8006116:	4a03      	ldr	r2, [pc, #12]	; (8006124 <vTaskSuspendAll+0x18>)
 8006118:	6013      	str	r3, [r2, #0]
}
 800611a:	bf00      	nop
 800611c:	46bd      	mov	sp, r7
 800611e:	bc80      	pop	{r7}
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	20000480 	.word	0x20000480

08006128 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006132:	2300      	movs	r3, #0
 8006134:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006136:	4b41      	ldr	r3, [pc, #260]	; (800623c <xTaskResumeAll+0x114>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <xTaskResumeAll+0x2c>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	603b      	str	r3, [r7, #0]
}
 8006150:	bf00      	nop
 8006152:	e7fe      	b.n	8006152 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006154:	f001 f89a 	bl	800728c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006158:	4b38      	ldr	r3, [pc, #224]	; (800623c <xTaskResumeAll+0x114>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3b01      	subs	r3, #1
 800615e:	4a37      	ldr	r2, [pc, #220]	; (800623c <xTaskResumeAll+0x114>)
 8006160:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006162:	4b36      	ldr	r3, [pc, #216]	; (800623c <xTaskResumeAll+0x114>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d161      	bne.n	800622e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800616a:	4b35      	ldr	r3, [pc, #212]	; (8006240 <xTaskResumeAll+0x118>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d05d      	beq.n	800622e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006172:	e02e      	b.n	80061d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006174:	4b33      	ldr	r3, [pc, #204]	; (8006244 <xTaskResumeAll+0x11c>)
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	3318      	adds	r3, #24
 8006180:	4618      	mov	r0, r3
 8006182:	f7fe fff7 	bl	8005174 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3304      	adds	r3, #4
 800618a:	4618      	mov	r0, r3
 800618c:	f7fe fff2 	bl	8005174 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	2201      	movs	r2, #1
 8006196:	409a      	lsls	r2, r3
 8006198:	4b2b      	ldr	r3, [pc, #172]	; (8006248 <xTaskResumeAll+0x120>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4313      	orrs	r3, r2
 800619e:	4a2a      	ldr	r2, [pc, #168]	; (8006248 <xTaskResumeAll+0x120>)
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4a27      	ldr	r2, [pc, #156]	; (800624c <xTaskResumeAll+0x124>)
 80061b0:	441a      	add	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3304      	adds	r3, #4
 80061b6:	4619      	mov	r1, r3
 80061b8:	4610      	mov	r0, r2
 80061ba:	f7fe ff80 	bl	80050be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c2:	4b23      	ldr	r3, [pc, #140]	; (8006250 <xTaskResumeAll+0x128>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d302      	bcc.n	80061d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80061cc:	4b21      	ldr	r3, [pc, #132]	; (8006254 <xTaskResumeAll+0x12c>)
 80061ce:	2201      	movs	r2, #1
 80061d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061d2:	4b1c      	ldr	r3, [pc, #112]	; (8006244 <xTaskResumeAll+0x11c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1cc      	bne.n	8006174 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80061e0:	f000 fb22 	bl	8006828 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80061e4:	4b1c      	ldr	r3, [pc, #112]	; (8006258 <xTaskResumeAll+0x130>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d010      	beq.n	8006212 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061f0:	f000 f836 	bl	8006260 <xTaskIncrementTick>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80061fa:	4b16      	ldr	r3, [pc, #88]	; (8006254 <xTaskResumeAll+0x12c>)
 80061fc:	2201      	movs	r2, #1
 80061fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3b01      	subs	r3, #1
 8006204:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1f1      	bne.n	80061f0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800620c:	4b12      	ldr	r3, [pc, #72]	; (8006258 <xTaskResumeAll+0x130>)
 800620e:	2200      	movs	r2, #0
 8006210:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006212:	4b10      	ldr	r3, [pc, #64]	; (8006254 <xTaskResumeAll+0x12c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d009      	beq.n	800622e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800621a:	2301      	movs	r3, #1
 800621c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800621e:	4b0f      	ldr	r3, [pc, #60]	; (800625c <xTaskResumeAll+0x134>)
 8006220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800622e:	f001 f85d 	bl	80072ec <vPortExitCritical>

	return xAlreadyYielded;
 8006232:	68bb      	ldr	r3, [r7, #8]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	20000480 	.word	0x20000480
 8006240:	20000458 	.word	0x20000458
 8006244:	20000418 	.word	0x20000418
 8006248:	20000460 	.word	0x20000460
 800624c:	2000035c 	.word	0x2000035c
 8006250:	20000358 	.word	0x20000358
 8006254:	2000046c 	.word	0x2000046c
 8006258:	20000468 	.word	0x20000468
 800625c:	e000ed04 	.word	0xe000ed04

08006260 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006266:	2300      	movs	r3, #0
 8006268:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800626a:	4b51      	ldr	r3, [pc, #324]	; (80063b0 <xTaskIncrementTick+0x150>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	f040 808d 	bne.w	800638e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006274:	4b4f      	ldr	r3, [pc, #316]	; (80063b4 <xTaskIncrementTick+0x154>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3301      	adds	r3, #1
 800627a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800627c:	4a4d      	ldr	r2, [pc, #308]	; (80063b4 <xTaskIncrementTick+0x154>)
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d120      	bne.n	80062ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006288:	4b4b      	ldr	r3, [pc, #300]	; (80063b8 <xTaskIncrementTick+0x158>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	603b      	str	r3, [r7, #0]
}
 80062a4:	bf00      	nop
 80062a6:	e7fe      	b.n	80062a6 <xTaskIncrementTick+0x46>
 80062a8:	4b43      	ldr	r3, [pc, #268]	; (80063b8 <xTaskIncrementTick+0x158>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	4b43      	ldr	r3, [pc, #268]	; (80063bc <xTaskIncrementTick+0x15c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a41      	ldr	r2, [pc, #260]	; (80063b8 <xTaskIncrementTick+0x158>)
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	4a41      	ldr	r2, [pc, #260]	; (80063bc <xTaskIncrementTick+0x15c>)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	4b40      	ldr	r3, [pc, #256]	; (80063c0 <xTaskIncrementTick+0x160>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3301      	adds	r3, #1
 80062c2:	4a3f      	ldr	r2, [pc, #252]	; (80063c0 <xTaskIncrementTick+0x160>)
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	f000 faaf 	bl	8006828 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062ca:	4b3e      	ldr	r3, [pc, #248]	; (80063c4 <xTaskIncrementTick+0x164>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d34d      	bcc.n	8006370 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062d4:	4b38      	ldr	r3, [pc, #224]	; (80063b8 <xTaskIncrementTick+0x158>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <xTaskIncrementTick+0x82>
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <xTaskIncrementTick+0x84>
 80062e2:	2300      	movs	r3, #0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d004      	beq.n	80062f2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062e8:	4b36      	ldr	r3, [pc, #216]	; (80063c4 <xTaskIncrementTick+0x164>)
 80062ea:	f04f 32ff 	mov.w	r2, #4294967295
 80062ee:	601a      	str	r2, [r3, #0]
					break;
 80062f0:	e03e      	b.n	8006370 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80062f2:	4b31      	ldr	r3, [pc, #196]	; (80063b8 <xTaskIncrementTick+0x158>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	429a      	cmp	r2, r3
 8006308:	d203      	bcs.n	8006312 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800630a:	4a2e      	ldr	r2, [pc, #184]	; (80063c4 <xTaskIncrementTick+0x164>)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6013      	str	r3, [r2, #0]
						break;
 8006310:	e02e      	b.n	8006370 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	3304      	adds	r3, #4
 8006316:	4618      	mov	r0, r3
 8006318:	f7fe ff2c 	bl	8005174 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006320:	2b00      	cmp	r3, #0
 8006322:	d004      	beq.n	800632e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	3318      	adds	r3, #24
 8006328:	4618      	mov	r0, r3
 800632a:	f7fe ff23 	bl	8005174 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006332:	2201      	movs	r2, #1
 8006334:	409a      	lsls	r2, r3
 8006336:	4b24      	ldr	r3, [pc, #144]	; (80063c8 <xTaskIncrementTick+0x168>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4313      	orrs	r3, r2
 800633c:	4a22      	ldr	r2, [pc, #136]	; (80063c8 <xTaskIncrementTick+0x168>)
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4a1f      	ldr	r2, [pc, #124]	; (80063cc <xTaskIncrementTick+0x16c>)
 800634e:	441a      	add	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	3304      	adds	r3, #4
 8006354:	4619      	mov	r1, r3
 8006356:	4610      	mov	r0, r2
 8006358:	f7fe feb1 	bl	80050be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006360:	4b1b      	ldr	r3, [pc, #108]	; (80063d0 <xTaskIncrementTick+0x170>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006366:	429a      	cmp	r2, r3
 8006368:	d3b4      	bcc.n	80062d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800636a:	2301      	movs	r3, #1
 800636c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800636e:	e7b1      	b.n	80062d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006370:	4b17      	ldr	r3, [pc, #92]	; (80063d0 <xTaskIncrementTick+0x170>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006376:	4915      	ldr	r1, [pc, #84]	; (80063cc <xTaskIncrementTick+0x16c>)
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	440b      	add	r3, r1
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d907      	bls.n	8006398 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006388:	2301      	movs	r3, #1
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	e004      	b.n	8006398 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800638e:	4b11      	ldr	r3, [pc, #68]	; (80063d4 <xTaskIncrementTick+0x174>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3301      	adds	r3, #1
 8006394:	4a0f      	ldr	r2, [pc, #60]	; (80063d4 <xTaskIncrementTick+0x174>)
 8006396:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006398:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <xTaskIncrementTick+0x178>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80063a0:	2301      	movs	r3, #1
 80063a2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80063a4:	697b      	ldr	r3, [r7, #20]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000480 	.word	0x20000480
 80063b4:	2000045c 	.word	0x2000045c
 80063b8:	20000410 	.word	0x20000410
 80063bc:	20000414 	.word	0x20000414
 80063c0:	20000470 	.word	0x20000470
 80063c4:	20000478 	.word	0x20000478
 80063c8:	20000460 	.word	0x20000460
 80063cc:	2000035c 	.word	0x2000035c
 80063d0:	20000358 	.word	0x20000358
 80063d4:	20000468 	.word	0x20000468
 80063d8:	2000046c 	.word	0x2000046c

080063dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063e2:	4b29      	ldr	r3, [pc, #164]	; (8006488 <vTaskSwitchContext+0xac>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063ea:	4b28      	ldr	r3, [pc, #160]	; (800648c <vTaskSwitchContext+0xb0>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063f0:	e044      	b.n	800647c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80063f2:	4b26      	ldr	r3, [pc, #152]	; (800648c <vTaskSwitchContext+0xb0>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80063f8:	4b25      	ldr	r3, [pc, #148]	; (8006490 <vTaskSwitchContext+0xb4>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	fab3 f383 	clz	r3, r3
 8006404:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006406:	7afb      	ldrb	r3, [r7, #11]
 8006408:	f1c3 031f 	rsb	r3, r3, #31
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	4921      	ldr	r1, [pc, #132]	; (8006494 <vTaskSwitchContext+0xb8>)
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	4613      	mov	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	440b      	add	r3, r1
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10a      	bne.n	8006438 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	607b      	str	r3, [r7, #4]
}
 8006434:	bf00      	nop
 8006436:	e7fe      	b.n	8006436 <vTaskSwitchContext+0x5a>
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4a14      	ldr	r2, [pc, #80]	; (8006494 <vTaskSwitchContext+0xb8>)
 8006444:	4413      	add	r3, r2
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	605a      	str	r2, [r3, #4]
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	3308      	adds	r3, #8
 800645a:	429a      	cmp	r2, r3
 800645c:	d104      	bne.n	8006468 <vTaskSwitchContext+0x8c>
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	605a      	str	r2, [r3, #4]
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	4a0a      	ldr	r2, [pc, #40]	; (8006498 <vTaskSwitchContext+0xbc>)
 8006470:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006472:	4b09      	ldr	r3, [pc, #36]	; (8006498 <vTaskSwitchContext+0xbc>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	334c      	adds	r3, #76	; 0x4c
 8006478:	4a08      	ldr	r2, [pc, #32]	; (800649c <vTaskSwitchContext+0xc0>)
 800647a:	6013      	str	r3, [r2, #0]
}
 800647c:	bf00      	nop
 800647e:	371c      	adds	r7, #28
 8006480:	46bd      	mov	sp, r7
 8006482:	bc80      	pop	{r7}
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	20000480 	.word	0x20000480
 800648c:	2000046c 	.word	0x2000046c
 8006490:	20000460 	.word	0x20000460
 8006494:	2000035c 	.word	0x2000035c
 8006498:	20000358 	.word	0x20000358
 800649c:	20000010 	.word	0x20000010

080064a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10a      	bne.n	80064c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	60fb      	str	r3, [r7, #12]
}
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064c6:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <vTaskPlaceOnEventList+0x44>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3318      	adds	r3, #24
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7fe fe18 	bl	8005104 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064d4:	2101      	movs	r1, #1
 80064d6:	6838      	ldr	r0, [r7, #0]
 80064d8:	f000 fd82 	bl	8006fe0 <prvAddCurrentTaskToDelayedList>
}
 80064dc:	bf00      	nop
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20000358 	.word	0x20000358

080064e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10a      	bne.n	8006514 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	60fb      	str	r3, [r7, #12]
}
 8006510:	bf00      	nop
 8006512:	e7fe      	b.n	8006512 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	3318      	adds	r3, #24
 8006518:	4618      	mov	r0, r3
 800651a:	f7fe fe2b 	bl	8005174 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800651e:	4b1d      	ldr	r3, [pc, #116]	; (8006594 <xTaskRemoveFromEventList+0xac>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d11c      	bne.n	8006560 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	3304      	adds	r3, #4
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe fe22 	bl	8005174 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	2201      	movs	r2, #1
 8006536:	409a      	lsls	r2, r3
 8006538:	4b17      	ldr	r3, [pc, #92]	; (8006598 <xTaskRemoveFromEventList+0xb0>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4313      	orrs	r3, r2
 800653e:	4a16      	ldr	r2, [pc, #88]	; (8006598 <xTaskRemoveFromEventList+0xb0>)
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4a13      	ldr	r2, [pc, #76]	; (800659c <xTaskRemoveFromEventList+0xb4>)
 8006550:	441a      	add	r2, r3
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	3304      	adds	r3, #4
 8006556:	4619      	mov	r1, r3
 8006558:	4610      	mov	r0, r2
 800655a:	f7fe fdb0 	bl	80050be <vListInsertEnd>
 800655e:	e005      	b.n	800656c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	3318      	adds	r3, #24
 8006564:	4619      	mov	r1, r3
 8006566:	480e      	ldr	r0, [pc, #56]	; (80065a0 <xTaskRemoveFromEventList+0xb8>)
 8006568:	f7fe fda9 	bl	80050be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006570:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <xTaskRemoveFromEventList+0xbc>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006576:	429a      	cmp	r2, r3
 8006578:	d905      	bls.n	8006586 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800657a:	2301      	movs	r3, #1
 800657c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800657e:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <xTaskRemoveFromEventList+0xc0>)
 8006580:	2201      	movs	r2, #1
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	e001      	b.n	800658a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006586:	2300      	movs	r3, #0
 8006588:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800658a:	697b      	ldr	r3, [r7, #20]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3718      	adds	r7, #24
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	20000480 	.word	0x20000480
 8006598:	20000460 	.word	0x20000460
 800659c:	2000035c 	.word	0x2000035c
 80065a0:	20000418 	.word	0x20000418
 80065a4:	20000358 	.word	0x20000358
 80065a8:	2000046c 	.word	0x2000046c

080065ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065b4:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <vTaskInternalSetTimeOutState+0x24>)
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065bc:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <vTaskInternalSetTimeOutState+0x28>)
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	605a      	str	r2, [r3, #4]
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bc80      	pop	{r7}
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	20000470 	.word	0x20000470
 80065d4:	2000045c 	.word	0x2000045c

080065d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b088      	sub	sp, #32
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10a      	bne.n	80065fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	613b      	str	r3, [r7, #16]
}
 80065fa:	bf00      	nop
 80065fc:	e7fe      	b.n	80065fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10a      	bne.n	800661a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	60fb      	str	r3, [r7, #12]
}
 8006616:	bf00      	nop
 8006618:	e7fe      	b.n	8006618 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800661a:	f000 fe37 	bl	800728c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800661e:	4b1d      	ldr	r3, [pc, #116]	; (8006694 <xTaskCheckForTimeOut+0xbc>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006636:	d102      	bne.n	800663e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006638:	2300      	movs	r3, #0
 800663a:	61fb      	str	r3, [r7, #28]
 800663c:	e023      	b.n	8006686 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	4b15      	ldr	r3, [pc, #84]	; (8006698 <xTaskCheckForTimeOut+0xc0>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	429a      	cmp	r2, r3
 8006648:	d007      	beq.n	800665a <xTaskCheckForTimeOut+0x82>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	429a      	cmp	r2, r3
 8006652:	d302      	bcc.n	800665a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006654:	2301      	movs	r3, #1
 8006656:	61fb      	str	r3, [r7, #28]
 8006658:	e015      	b.n	8006686 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	429a      	cmp	r2, r3
 8006662:	d20b      	bcs.n	800667c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	1ad2      	subs	r2, r2, r3
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff ff9b 	bl	80065ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006676:	2300      	movs	r3, #0
 8006678:	61fb      	str	r3, [r7, #28]
 800667a:	e004      	b.n	8006686 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2200      	movs	r2, #0
 8006680:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006682:	2301      	movs	r3, #1
 8006684:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006686:	f000 fe31 	bl	80072ec <vPortExitCritical>

	return xReturn;
 800668a:	69fb      	ldr	r3, [r7, #28]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3720      	adds	r7, #32
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	2000045c 	.word	0x2000045c
 8006698:	20000470 	.word	0x20000470

0800669c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066a0:	4b03      	ldr	r3, [pc, #12]	; (80066b0 <vTaskMissedYield+0x14>)
 80066a2:	2201      	movs	r2, #1
 80066a4:	601a      	str	r2, [r3, #0]
}
 80066a6:	bf00      	nop
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bc80      	pop	{r7}
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	2000046c 	.word	0x2000046c

080066b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066bc:	f000 f852 	bl	8006764 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066c0:	4b06      	ldr	r3, [pc, #24]	; (80066dc <prvIdleTask+0x28>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d9f9      	bls.n	80066bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80066c8:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <prvIdleTask+0x2c>)
 80066ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066d8:	e7f0      	b.n	80066bc <prvIdleTask+0x8>
 80066da:	bf00      	nop
 80066dc:	2000035c 	.word	0x2000035c
 80066e0:	e000ed04 	.word	0xe000ed04

080066e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066ea:	2300      	movs	r3, #0
 80066ec:	607b      	str	r3, [r7, #4]
 80066ee:	e00c      	b.n	800670a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	4613      	mov	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4a12      	ldr	r2, [pc, #72]	; (8006744 <prvInitialiseTaskLists+0x60>)
 80066fc:	4413      	add	r3, r2
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fe fcb2 	bl	8005068 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3301      	adds	r3, #1
 8006708:	607b      	str	r3, [r7, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b06      	cmp	r3, #6
 800670e:	d9ef      	bls.n	80066f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006710:	480d      	ldr	r0, [pc, #52]	; (8006748 <prvInitialiseTaskLists+0x64>)
 8006712:	f7fe fca9 	bl	8005068 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006716:	480d      	ldr	r0, [pc, #52]	; (800674c <prvInitialiseTaskLists+0x68>)
 8006718:	f7fe fca6 	bl	8005068 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800671c:	480c      	ldr	r0, [pc, #48]	; (8006750 <prvInitialiseTaskLists+0x6c>)
 800671e:	f7fe fca3 	bl	8005068 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006722:	480c      	ldr	r0, [pc, #48]	; (8006754 <prvInitialiseTaskLists+0x70>)
 8006724:	f7fe fca0 	bl	8005068 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006728:	480b      	ldr	r0, [pc, #44]	; (8006758 <prvInitialiseTaskLists+0x74>)
 800672a:	f7fe fc9d 	bl	8005068 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800672e:	4b0b      	ldr	r3, [pc, #44]	; (800675c <prvInitialiseTaskLists+0x78>)
 8006730:	4a05      	ldr	r2, [pc, #20]	; (8006748 <prvInitialiseTaskLists+0x64>)
 8006732:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006734:	4b0a      	ldr	r3, [pc, #40]	; (8006760 <prvInitialiseTaskLists+0x7c>)
 8006736:	4a05      	ldr	r2, [pc, #20]	; (800674c <prvInitialiseTaskLists+0x68>)
 8006738:	601a      	str	r2, [r3, #0]
}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	2000035c 	.word	0x2000035c
 8006748:	200003e8 	.word	0x200003e8
 800674c:	200003fc 	.word	0x200003fc
 8006750:	20000418 	.word	0x20000418
 8006754:	2000042c 	.word	0x2000042c
 8006758:	20000444 	.word	0x20000444
 800675c:	20000410 	.word	0x20000410
 8006760:	20000414 	.word	0x20000414

08006764 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800676a:	e019      	b.n	80067a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800676c:	f000 fd8e 	bl	800728c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006770:	4b10      	ldr	r3, [pc, #64]	; (80067b4 <prvCheckTasksWaitingTermination+0x50>)
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3304      	adds	r3, #4
 800677c:	4618      	mov	r0, r3
 800677e:	f7fe fcf9 	bl	8005174 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006782:	4b0d      	ldr	r3, [pc, #52]	; (80067b8 <prvCheckTasksWaitingTermination+0x54>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3b01      	subs	r3, #1
 8006788:	4a0b      	ldr	r2, [pc, #44]	; (80067b8 <prvCheckTasksWaitingTermination+0x54>)
 800678a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800678c:	4b0b      	ldr	r3, [pc, #44]	; (80067bc <prvCheckTasksWaitingTermination+0x58>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3b01      	subs	r3, #1
 8006792:	4a0a      	ldr	r2, [pc, #40]	; (80067bc <prvCheckTasksWaitingTermination+0x58>)
 8006794:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006796:	f000 fda9 	bl	80072ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f810 	bl	80067c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067a0:	4b06      	ldr	r3, [pc, #24]	; (80067bc <prvCheckTasksWaitingTermination+0x58>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e1      	bne.n	800676c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067a8:	bf00      	nop
 80067aa:	bf00      	nop
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	2000042c 	.word	0x2000042c
 80067b8:	20000458 	.word	0x20000458
 80067bc:	20000440 	.word	0x20000440

080067c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	334c      	adds	r3, #76	; 0x4c
 80067cc:	4618      	mov	r0, r3
 80067ce:	f001 f87f 	bl	80078d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d108      	bne.n	80067ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 ff17 	bl	8007614 <vPortFree>
				vPortFree( pxTCB );
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 ff14 	bl	8007614 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067ec:	e018      	b.n	8006820 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d103      	bne.n	8006800 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 ff0b 	bl	8007614 <vPortFree>
	}
 80067fe:	e00f      	b.n	8006820 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006806:	2b02      	cmp	r3, #2
 8006808:	d00a      	beq.n	8006820 <prvDeleteTCB+0x60>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	60fb      	str	r3, [r7, #12]
}
 800681c:	bf00      	nop
 800681e:	e7fe      	b.n	800681e <prvDeleteTCB+0x5e>
	}
 8006820:	bf00      	nop
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800682e:	4b0e      	ldr	r3, [pc, #56]	; (8006868 <prvResetNextTaskUnblockTime+0x40>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <prvResetNextTaskUnblockTime+0x14>
 8006838:	2301      	movs	r3, #1
 800683a:	e000      	b.n	800683e <prvResetNextTaskUnblockTime+0x16>
 800683c:	2300      	movs	r3, #0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d004      	beq.n	800684c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006842:	4b0a      	ldr	r3, [pc, #40]	; (800686c <prvResetNextTaskUnblockTime+0x44>)
 8006844:	f04f 32ff 	mov.w	r2, #4294967295
 8006848:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800684a:	e008      	b.n	800685e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800684c:	4b06      	ldr	r3, [pc, #24]	; (8006868 <prvResetNextTaskUnblockTime+0x40>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	4a04      	ldr	r2, [pc, #16]	; (800686c <prvResetNextTaskUnblockTime+0x44>)
 800685c:	6013      	str	r3, [r2, #0]
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	bc80      	pop	{r7}
 8006866:	4770      	bx	lr
 8006868:	20000410 	.word	0x20000410
 800686c:	20000478 	.word	0x20000478

08006870 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006876:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <xTaskGetSchedulerState+0x34>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d102      	bne.n	8006884 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800687e:	2301      	movs	r3, #1
 8006880:	607b      	str	r3, [r7, #4]
 8006882:	e008      	b.n	8006896 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006884:	4b08      	ldr	r3, [pc, #32]	; (80068a8 <xTaskGetSchedulerState+0x38>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d102      	bne.n	8006892 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800688c:	2302      	movs	r3, #2
 800688e:	607b      	str	r3, [r7, #4]
 8006890:	e001      	b.n	8006896 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006892:	2300      	movs	r3, #0
 8006894:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006896:	687b      	ldr	r3, [r7, #4]
	}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	bc80      	pop	{r7}
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	20000464 	.word	0x20000464
 80068a8:	20000480 	.word	0x20000480

080068ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80068b8:	2300      	movs	r3, #0
 80068ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d06e      	beq.n	80069a0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c6:	4b39      	ldr	r3, [pc, #228]	; (80069ac <xTaskPriorityInherit+0x100>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d25e      	bcs.n	800698e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	db06      	blt.n	80068e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068d8:	4b34      	ldr	r3, [pc, #208]	; (80069ac <xTaskPriorityInherit+0x100>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068de:	f1c3 0207 	rsb	r2, r3, #7
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	6959      	ldr	r1, [r3, #20]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ee:	4613      	mov	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4a2e      	ldr	r2, [pc, #184]	; (80069b0 <xTaskPriorityInherit+0x104>)
 80068f8:	4413      	add	r3, r2
 80068fa:	4299      	cmp	r1, r3
 80068fc:	d101      	bne.n	8006902 <xTaskPriorityInherit+0x56>
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <xTaskPriorityInherit+0x58>
 8006902:	2300      	movs	r3, #0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d03a      	beq.n	800697e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	3304      	adds	r3, #4
 800690c:	4618      	mov	r0, r3
 800690e:	f7fe fc31 	bl	8005174 <uxListRemove>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d115      	bne.n	8006944 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691c:	4924      	ldr	r1, [pc, #144]	; (80069b0 <xTaskPriorityInherit+0x104>)
 800691e:	4613      	mov	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	440b      	add	r3, r1
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10a      	bne.n	8006944 <xTaskPriorityInherit+0x98>
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006932:	2201      	movs	r2, #1
 8006934:	fa02 f303 	lsl.w	r3, r2, r3
 8006938:	43da      	mvns	r2, r3
 800693a:	4b1e      	ldr	r3, [pc, #120]	; (80069b4 <xTaskPriorityInherit+0x108>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4013      	ands	r3, r2
 8006940:	4a1c      	ldr	r2, [pc, #112]	; (80069b4 <xTaskPriorityInherit+0x108>)
 8006942:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006944:	4b19      	ldr	r3, [pc, #100]	; (80069ac <xTaskPriorityInherit+0x100>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006952:	2201      	movs	r2, #1
 8006954:	409a      	lsls	r2, r3
 8006956:	4b17      	ldr	r3, [pc, #92]	; (80069b4 <xTaskPriorityInherit+0x108>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4313      	orrs	r3, r2
 800695c:	4a15      	ldr	r2, [pc, #84]	; (80069b4 <xTaskPriorityInherit+0x108>)
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4a10      	ldr	r2, [pc, #64]	; (80069b0 <xTaskPriorityInherit+0x104>)
 800696e:	441a      	add	r2, r3
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	3304      	adds	r3, #4
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f7fe fba1 	bl	80050be <vListInsertEnd>
 800697c:	e004      	b.n	8006988 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800697e:	4b0b      	ldr	r3, [pc, #44]	; (80069ac <xTaskPriorityInherit+0x100>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006988:	2301      	movs	r3, #1
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	e008      	b.n	80069a0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006992:	4b06      	ldr	r3, [pc, #24]	; (80069ac <xTaskPriorityInherit+0x100>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006998:	429a      	cmp	r2, r3
 800699a:	d201      	bcs.n	80069a0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800699c:	2301      	movs	r3, #1
 800699e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069a0:	68fb      	ldr	r3, [r7, #12]
	}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	20000358 	.word	0x20000358
 80069b0:	2000035c 	.word	0x2000035c
 80069b4:	20000460 	.word	0x20000460

080069b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80069c4:	2300      	movs	r3, #0
 80069c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d06e      	beq.n	8006aac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80069ce:	4b3a      	ldr	r3, [pc, #232]	; (8006ab8 <xTaskPriorityDisinherit+0x100>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d00a      	beq.n	80069ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	60fb      	str	r3, [r7, #12]
}
 80069ea:	bf00      	nop
 80069ec:	e7fe      	b.n	80069ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10a      	bne.n	8006a0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	60bb      	str	r3, [r7, #8]
}
 8006a08:	bf00      	nop
 8006a0a:	e7fe      	b.n	8006a0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a10:	1e5a      	subs	r2, r3, #1
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d044      	beq.n	8006aac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d140      	bne.n	8006aac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe fba0 	bl	8005174 <uxListRemove>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d115      	bne.n	8006a66 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3e:	491f      	ldr	r1, [pc, #124]	; (8006abc <xTaskPriorityDisinherit+0x104>)
 8006a40:	4613      	mov	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	440b      	add	r3, r1
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10a      	bne.n	8006a66 <xTaskPriorityDisinherit+0xae>
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	2201      	movs	r2, #1
 8006a56:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5a:	43da      	mvns	r2, r3
 8006a5c:	4b18      	ldr	r3, [pc, #96]	; (8006ac0 <xTaskPriorityDisinherit+0x108>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4013      	ands	r3, r2
 8006a62:	4a17      	ldr	r2, [pc, #92]	; (8006ac0 <xTaskPriorityDisinherit+0x108>)
 8006a64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a72:	f1c3 0207 	rsb	r2, r3, #7
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	2201      	movs	r2, #1
 8006a80:	409a      	lsls	r2, r3
 8006a82:	4b0f      	ldr	r3, [pc, #60]	; (8006ac0 <xTaskPriorityDisinherit+0x108>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	4a0d      	ldr	r2, [pc, #52]	; (8006ac0 <xTaskPriorityDisinherit+0x108>)
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a90:	4613      	mov	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4a08      	ldr	r2, [pc, #32]	; (8006abc <xTaskPriorityDisinherit+0x104>)
 8006a9a:	441a      	add	r2, r3
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	f7fe fb0b 	bl	80050be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006aac:	697b      	ldr	r3, [r7, #20]
	}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20000358 	.word	0x20000358
 8006abc:	2000035c 	.word	0x2000035c
 8006ac0:	20000460 	.word	0x20000460

08006ac4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b088      	sub	sp, #32
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 8088 	beq.w	8006bee <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10a      	bne.n	8006afc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	60fb      	str	r3, [r7, #12]
}
 8006af8:	bf00      	nop
 8006afa:	e7fe      	b.n	8006afa <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d902      	bls.n	8006b0c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	61fb      	str	r3, [r7, #28]
 8006b0a:	e002      	b.n	8006b12 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b10:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b16:	69fa      	ldr	r2, [r7, #28]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d068      	beq.n	8006bee <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d163      	bne.n	8006bee <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006b26:	4b34      	ldr	r3, [pc, #208]	; (8006bf8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d10a      	bne.n	8006b46 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	60bb      	str	r3, [r7, #8]
}
 8006b42:	bf00      	nop
 8006b44:	e7fe      	b.n	8006b44 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	69fa      	ldr	r2, [r7, #28]
 8006b50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	db04      	blt.n	8006b64 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	f1c3 0207 	rsb	r2, r3, #7
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	6959      	ldr	r1, [r3, #20]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4a22      	ldr	r2, [pc, #136]	; (8006bfc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006b74:	4413      	add	r3, r2
 8006b76:	4299      	cmp	r1, r3
 8006b78:	d101      	bne.n	8006b7e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e000      	b.n	8006b80 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d034      	beq.n	8006bee <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	3304      	adds	r3, #4
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fe faf3 	bl	8005174 <uxListRemove>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d115      	bne.n	8006bc0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b98:	4918      	ldr	r1, [pc, #96]	; (8006bfc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	440b      	add	r3, r1
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10a      	bne.n	8006bc0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bae:	2201      	movs	r2, #1
 8006bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb4:	43da      	mvns	r2, r3
 8006bb6:	4b12      	ldr	r3, [pc, #72]	; (8006c00 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	4a10      	ldr	r2, [pc, #64]	; (8006c00 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006bbe:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	409a      	lsls	r2, r3
 8006bc8:	4b0d      	ldr	r3, [pc, #52]	; (8006c00 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	4a0c      	ldr	r2, [pc, #48]	; (8006c00 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4a07      	ldr	r2, [pc, #28]	; (8006bfc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006be0:	441a      	add	r2, r3
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	3304      	adds	r3, #4
 8006be6:	4619      	mov	r1, r3
 8006be8:	4610      	mov	r0, r2
 8006bea:	f7fe fa68 	bl	80050be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bee:	bf00      	nop
 8006bf0:	3720      	adds	r7, #32
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000358 	.word	0x20000358
 8006bfc:	2000035c 	.word	0x2000035c
 8006c00:	20000460 	.word	0x20000460

08006c04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006c04:	b480      	push	{r7}
 8006c06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006c08:	4b07      	ldr	r3, [pc, #28]	; (8006c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d004      	beq.n	8006c1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006c10:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c16:	3201      	adds	r2, #1
 8006c18:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006c1a:	4b03      	ldr	r3, [pc, #12]	; (8006c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
	}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bc80      	pop	{r7}
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	20000358 	.word	0x20000358

08006c2c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006c3a:	f000 fb27 	bl	800728c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006c3e:	4b29      	ldr	r3, [pc, #164]	; (8006ce4 <xTaskNotifyWait+0xb8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d01c      	beq.n	8006c86 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006c4c:	4b25      	ldr	r3, [pc, #148]	; (8006ce4 <xTaskNotifyWait+0xb8>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	43d2      	mvns	r2, r2
 8006c58:	400a      	ands	r2, r1
 8006c5a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006c5e:	4b21      	ldr	r3, [pc, #132]	; (8006ce4 <xTaskNotifyWait+0xb8>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00b      	beq.n	8006c86 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c6e:	2101      	movs	r1, #1
 8006c70:	6838      	ldr	r0, [r7, #0]
 8006c72:	f000 f9b5 	bl	8006fe0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006c76:	4b1c      	ldr	r3, [pc, #112]	; (8006ce8 <xTaskNotifyWait+0xbc>)
 8006c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006c86:	f000 fb31 	bl	80072ec <vPortExitCritical>

		taskENTER_CRITICAL();
 8006c8a:	f000 faff 	bl	800728c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006c94:	4b13      	ldr	r3, [pc, #76]	; (8006ce4 <xTaskNotifyWait+0xb8>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006ca0:	4b10      	ldr	r3, [pc, #64]	; (8006ce4 <xTaskNotifyWait+0xb8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d002      	beq.n	8006cb4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	e00a      	b.n	8006cca <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006cb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ce4 <xTaskNotifyWait+0xb8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	43d2      	mvns	r2, r2
 8006cc0:	400a      	ands	r2, r1
 8006cc2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cca:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <xTaskNotifyWait+0xb8>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8006cd4:	f000 fb0a 	bl	80072ec <vPortExitCritical>

		return xReturn;
 8006cd8:	697b      	ldr	r3, [r7, #20]
	}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20000358 	.word	0x20000358
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08a      	sub	sp, #40	; 0x28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	603b      	str	r3, [r7, #0]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10a      	bne.n	8006d1c <xTaskGenericNotify+0x30>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	61bb      	str	r3, [r7, #24]
}
 8006d18:	bf00      	nop
 8006d1a:	e7fe      	b.n	8006d1a <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006d20:	f000 fab4 	bl	800728c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d004      	beq.n	8006d34 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006d3a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d82d      	bhi.n	8006da6 <xTaskGenericNotify+0xba>
 8006d4a:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <xTaskGenericNotify+0x64>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006da7 	.word	0x08006da7
 8006d54:	08006d65 	.word	0x08006d65
 8006d58:	08006d77 	.word	0x08006d77
 8006d5c:	08006d87 	.word	0x08006d87
 8006d60:	08006d91 	.word	0x08006d91
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006d74:	e017      	b.n	8006da6 <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006d84:	e00f      	b.n	8006da6 <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006d8e:	e00a      	b.n	8006da6 <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006d90:	7ffb      	ldrb	r3, [r7, #31]
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d004      	beq.n	8006da0 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006d9e:	e001      	b.n	8006da4 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 8006da0:	2300      	movs	r3, #0
 8006da2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8006da4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006da6:	7ffb      	ldrb	r3, [r7, #31]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d139      	bne.n	8006e20 <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	3304      	adds	r3, #4
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7fe f9df 	bl	8005174 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dba:	2201      	movs	r2, #1
 8006dbc:	409a      	lsls	r2, r3
 8006dbe:	4b1c      	ldr	r3, [pc, #112]	; (8006e30 <xTaskGenericNotify+0x144>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	4a1a      	ldr	r2, [pc, #104]	; (8006e30 <xTaskGenericNotify+0x144>)
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dcc:	4613      	mov	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4a17      	ldr	r2, [pc, #92]	; (8006e34 <xTaskGenericNotify+0x148>)
 8006dd6:	441a      	add	r2, r3
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	4619      	mov	r1, r3
 8006dde:	4610      	mov	r0, r2
 8006de0:	f7fe f96d 	bl	80050be <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00a      	beq.n	8006e02 <xTaskGenericNotify+0x116>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	617b      	str	r3, [r7, #20]
}
 8006dfe:	bf00      	nop
 8006e00:	e7fe      	b.n	8006e00 <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e06:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <xTaskGenericNotify+0x14c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d907      	bls.n	8006e20 <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006e10:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <xTaskGenericNotify+0x150>)
 8006e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006e20:	f000 fa64 	bl	80072ec <vPortExitCritical>

		return xReturn;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3728      	adds	r7, #40	; 0x28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20000460 	.word	0x20000460
 8006e34:	2000035c 	.word	0x2000035c
 8006e38:	20000358 	.word	0x20000358
 8006e3c:	e000ed04 	.word	0xe000ed04

08006e40 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08e      	sub	sp, #56	; 0x38
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006e50:	2301      	movs	r3, #1
 8006e52:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10a      	bne.n	8006e70 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8006e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e6c:	bf00      	nop
 8006e6e:	e7fe      	b.n	8006e6e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e70:	f000 face 	bl	8007410 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8006e78:	f3ef 8211 	mrs	r2, BASEPRI
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	623a      	str	r2, [r7, #32]
 8006e8e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8006e90:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e92:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d004      	beq.n	8006ea4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8006eb6:	79fb      	ldrb	r3, [r7, #7]
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	d82f      	bhi.n	8006f1c <xTaskGenericNotifyFromISR+0xdc>
 8006ebc:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <xTaskGenericNotifyFromISR+0x84>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006f1d 	.word	0x08006f1d
 8006ec8:	08006ed9 	.word	0x08006ed9
 8006ecc:	08006eeb 	.word	0x08006eeb
 8006ed0:	08006efb 	.word	0x08006efb
 8006ed4:	08006f05 	.word	0x08006f05
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eda:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	431a      	orrs	r2, r3
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006ee8:	e018      	b.n	8006f1c <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006ef8:	e010      	b.n	8006f1c <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006f02:	e00b      	b.n	8006f1c <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006f04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d004      	beq.n	8006f16 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006f14:	e001      	b.n	8006f1a <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8006f1a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006f1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d146      	bne.n	8006fb2 <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00a      	beq.n	8006f42 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	61bb      	str	r3, [r7, #24]
}
 8006f3e:	bf00      	nop
 8006f40:	e7fe      	b.n	8006f40 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f42:	4b21      	ldr	r3, [pc, #132]	; (8006fc8 <xTaskGenericNotifyFromISR+0x188>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d11c      	bne.n	8006f84 <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fe f910 	bl	8005174 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	2201      	movs	r2, #1
 8006f5a:	409a      	lsls	r2, r3
 8006f5c:	4b1b      	ldr	r3, [pc, #108]	; (8006fcc <xTaskGenericNotifyFromISR+0x18c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	4a1a      	ldr	r2, [pc, #104]	; (8006fcc <xTaskGenericNotifyFromISR+0x18c>)
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4a17      	ldr	r2, [pc, #92]	; (8006fd0 <xTaskGenericNotifyFromISR+0x190>)
 8006f74:	441a      	add	r2, r3
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	3304      	adds	r3, #4
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	f7fe f89e 	bl	80050be <vListInsertEnd>
 8006f82:	e005      	b.n	8006f90 <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	3318      	adds	r3, #24
 8006f88:	4619      	mov	r1, r3
 8006f8a:	4812      	ldr	r0, [pc, #72]	; (8006fd4 <xTaskGenericNotifyFromISR+0x194>)
 8006f8c:	f7fe f897 	bl	80050be <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f94:	4b10      	ldr	r3, [pc, #64]	; (8006fd8 <xTaskGenericNotifyFromISR+0x198>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d909      	bls.n	8006fb2 <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	e002      	b.n	8006fb2 <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8006fac:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <xTaskGenericNotifyFromISR+0x19c>)
 8006fae:	2201      	movs	r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb4:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f383 8811 	msr	BASEPRI, r3
}
 8006fbc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3738      	adds	r7, #56	; 0x38
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000480 	.word	0x20000480
 8006fcc:	20000460 	.word	0x20000460
 8006fd0:	2000035c 	.word	0x2000035c
 8006fd4:	20000418 	.word	0x20000418
 8006fd8:	20000358 	.word	0x20000358
 8006fdc:	2000046c 	.word	0x2000046c

08006fe0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fea:	4b29      	ldr	r3, [pc, #164]	; (8007090 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ff0:	4b28      	ldr	r3, [pc, #160]	; (8007094 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe f8bc 	bl	8005174 <uxListRemove>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10b      	bne.n	800701a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007002:	4b24      	ldr	r3, [pc, #144]	; (8007094 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	2201      	movs	r2, #1
 800700a:	fa02 f303 	lsl.w	r3, r2, r3
 800700e:	43da      	mvns	r2, r3
 8007010:	4b21      	ldr	r3, [pc, #132]	; (8007098 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4013      	ands	r3, r2
 8007016:	4a20      	ldr	r2, [pc, #128]	; (8007098 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007018:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007020:	d10a      	bne.n	8007038 <prvAddCurrentTaskToDelayedList+0x58>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d007      	beq.n	8007038 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007028:	4b1a      	ldr	r3, [pc, #104]	; (8007094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3304      	adds	r3, #4
 800702e:	4619      	mov	r1, r3
 8007030:	481a      	ldr	r0, [pc, #104]	; (800709c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007032:	f7fe f844 	bl	80050be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007036:	e026      	b.n	8007086 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4413      	add	r3, r2
 800703e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007040:	4b14      	ldr	r3, [pc, #80]	; (8007094 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	429a      	cmp	r2, r3
 800704e:	d209      	bcs.n	8007064 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007050:	4b13      	ldr	r3, [pc, #76]	; (80070a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	4b0f      	ldr	r3, [pc, #60]	; (8007094 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3304      	adds	r3, #4
 800705a:	4619      	mov	r1, r3
 800705c:	4610      	mov	r0, r2
 800705e:	f7fe f851 	bl	8005104 <vListInsert>
}
 8007062:	e010      	b.n	8007086 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007064:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3304      	adds	r3, #4
 800706e:	4619      	mov	r1, r3
 8007070:	4610      	mov	r0, r2
 8007072:	f7fe f847 	bl	8005104 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007076:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	429a      	cmp	r2, r3
 800707e:	d202      	bcs.n	8007086 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007080:	4a09      	ldr	r2, [pc, #36]	; (80070a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	6013      	str	r3, [r2, #0]
}
 8007086:	bf00      	nop
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	2000045c 	.word	0x2000045c
 8007094:	20000358 	.word	0x20000358
 8007098:	20000460 	.word	0x20000460
 800709c:	20000444 	.word	0x20000444
 80070a0:	20000414 	.word	0x20000414
 80070a4:	20000410 	.word	0x20000410
 80070a8:	20000478 	.word	0x20000478

080070ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	3b04      	subs	r3, #4
 80070bc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80070c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3b04      	subs	r3, #4
 80070ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f023 0201 	bic.w	r2, r3, #1
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3b04      	subs	r3, #4
 80070da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070dc:	4a08      	ldr	r2, [pc, #32]	; (8007100 <pxPortInitialiseStack+0x54>)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	3b14      	subs	r3, #20
 80070e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3b20      	subs	r3, #32
 80070f2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070f4:	68fb      	ldr	r3, [r7, #12]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bc80      	pop	{r7}
 80070fe:	4770      	bx	lr
 8007100:	08007105 	.word	0x08007105

08007104 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800710a:	2300      	movs	r3, #0
 800710c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800710e:	4b12      	ldr	r3, [pc, #72]	; (8007158 <prvTaskExitError+0x54>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007116:	d00a      	beq.n	800712e <prvTaskExitError+0x2a>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	60fb      	str	r3, [r7, #12]
}
 800712a:	bf00      	nop
 800712c:	e7fe      	b.n	800712c <prvTaskExitError+0x28>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	60bb      	str	r3, [r7, #8]
}
 8007140:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007142:	bf00      	nop
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0fc      	beq.n	8007144 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800714a:	bf00      	nop
 800714c:	bf00      	nop
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	bc80      	pop	{r7}
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	2000000c 	.word	0x2000000c
 800715c:	00000000 	.word	0x00000000

08007160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007160:	4b07      	ldr	r3, [pc, #28]	; (8007180 <pxCurrentTCBConst2>)
 8007162:	6819      	ldr	r1, [r3, #0]
 8007164:	6808      	ldr	r0, [r1, #0]
 8007166:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800716a:	f380 8809 	msr	PSP, r0
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f04f 0000 	mov.w	r0, #0
 8007176:	f380 8811 	msr	BASEPRI, r0
 800717a:	f04e 0e0d 	orr.w	lr, lr, #13
 800717e:	4770      	bx	lr

08007180 <pxCurrentTCBConst2>:
 8007180:	20000358 	.word	0x20000358
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop

08007188 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007188:	4806      	ldr	r0, [pc, #24]	; (80071a4 <prvPortStartFirstTask+0x1c>)
 800718a:	6800      	ldr	r0, [r0, #0]
 800718c:	6800      	ldr	r0, [r0, #0]
 800718e:	f380 8808 	msr	MSP, r0
 8007192:	b662      	cpsie	i
 8007194:	b661      	cpsie	f
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	df00      	svc	0
 80071a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071a2:	bf00      	nop
 80071a4:	e000ed08 	.word	0xe000ed08

080071a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80071ae:	4b32      	ldr	r3, [pc, #200]	; (8007278 <xPortStartScheduler+0xd0>)
 80071b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	22ff      	movs	r2, #255	; 0xff
 80071be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80071c8:	78fb      	ldrb	r3, [r7, #3]
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	4b2a      	ldr	r3, [pc, #168]	; (800727c <xPortStartScheduler+0xd4>)
 80071d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80071d6:	4b2a      	ldr	r3, [pc, #168]	; (8007280 <xPortStartScheduler+0xd8>)
 80071d8:	2207      	movs	r2, #7
 80071da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071dc:	e009      	b.n	80071f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80071de:	4b28      	ldr	r3, [pc, #160]	; (8007280 <xPortStartScheduler+0xd8>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	4a26      	ldr	r2, [pc, #152]	; (8007280 <xPortStartScheduler+0xd8>)
 80071e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071f2:	78fb      	ldrb	r3, [r7, #3]
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071fa:	2b80      	cmp	r3, #128	; 0x80
 80071fc:	d0ef      	beq.n	80071de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80071fe:	4b20      	ldr	r3, [pc, #128]	; (8007280 <xPortStartScheduler+0xd8>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f1c3 0307 	rsb	r3, r3, #7
 8007206:	2b04      	cmp	r3, #4
 8007208:	d00a      	beq.n	8007220 <xPortStartScheduler+0x78>
	__asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	60bb      	str	r3, [r7, #8]
}
 800721c:	bf00      	nop
 800721e:	e7fe      	b.n	800721e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007220:	4b17      	ldr	r3, [pc, #92]	; (8007280 <xPortStartScheduler+0xd8>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	021b      	lsls	r3, r3, #8
 8007226:	4a16      	ldr	r2, [pc, #88]	; (8007280 <xPortStartScheduler+0xd8>)
 8007228:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800722a:	4b15      	ldr	r3, [pc, #84]	; (8007280 <xPortStartScheduler+0xd8>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007232:	4a13      	ldr	r2, [pc, #76]	; (8007280 <xPortStartScheduler+0xd8>)
 8007234:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	b2da      	uxtb	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800723e:	4b11      	ldr	r3, [pc, #68]	; (8007284 <xPortStartScheduler+0xdc>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a10      	ldr	r2, [pc, #64]	; (8007284 <xPortStartScheduler+0xdc>)
 8007244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007248:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800724a:	4b0e      	ldr	r3, [pc, #56]	; (8007284 <xPortStartScheduler+0xdc>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a0d      	ldr	r2, [pc, #52]	; (8007284 <xPortStartScheduler+0xdc>)
 8007250:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007254:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007256:	f000 f8b9 	bl	80073cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800725a:	4b0b      	ldr	r3, [pc, #44]	; (8007288 <xPortStartScheduler+0xe0>)
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007260:	f7ff ff92 	bl	8007188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007264:	f7ff f8ba 	bl	80063dc <vTaskSwitchContext>
	prvTaskExitError();
 8007268:	f7ff ff4c 	bl	8007104 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	e000e400 	.word	0xe000e400
 800727c:	20000484 	.word	0x20000484
 8007280:	20000488 	.word	0x20000488
 8007284:	e000ed20 	.word	0xe000ed20
 8007288:	2000000c 	.word	0x2000000c

0800728c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
	__asm volatile
 8007292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	607b      	str	r3, [r7, #4]
}
 80072a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80072a6:	4b0f      	ldr	r3, [pc, #60]	; (80072e4 <vPortEnterCritical+0x58>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3301      	adds	r3, #1
 80072ac:	4a0d      	ldr	r2, [pc, #52]	; (80072e4 <vPortEnterCritical+0x58>)
 80072ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80072b0:	4b0c      	ldr	r3, [pc, #48]	; (80072e4 <vPortEnterCritical+0x58>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d10f      	bne.n	80072d8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80072b8:	4b0b      	ldr	r3, [pc, #44]	; (80072e8 <vPortEnterCritical+0x5c>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00a      	beq.n	80072d8 <vPortEnterCritical+0x4c>
	__asm volatile
 80072c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c6:	f383 8811 	msr	BASEPRI, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	603b      	str	r3, [r7, #0]
}
 80072d4:	bf00      	nop
 80072d6:	e7fe      	b.n	80072d6 <vPortEnterCritical+0x4a>
	}
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	bc80      	pop	{r7}
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	2000000c 	.word	0x2000000c
 80072e8:	e000ed04 	.word	0xe000ed04

080072ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072f2:	4b11      	ldr	r3, [pc, #68]	; (8007338 <vPortExitCritical+0x4c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10a      	bne.n	8007310 <vPortExitCritical+0x24>
	__asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	607b      	str	r3, [r7, #4]
}
 800730c:	bf00      	nop
 800730e:	e7fe      	b.n	800730e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007310:	4b09      	ldr	r3, [pc, #36]	; (8007338 <vPortExitCritical+0x4c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3b01      	subs	r3, #1
 8007316:	4a08      	ldr	r2, [pc, #32]	; (8007338 <vPortExitCritical+0x4c>)
 8007318:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800731a:	4b07      	ldr	r3, [pc, #28]	; (8007338 <vPortExitCritical+0x4c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d105      	bne.n	800732e <vPortExitCritical+0x42>
 8007322:	2300      	movs	r3, #0
 8007324:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	f383 8811 	msr	BASEPRI, r3
}
 800732c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800732e:	bf00      	nop
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	bc80      	pop	{r7}
 8007336:	4770      	bx	lr
 8007338:	2000000c 	.word	0x2000000c
 800733c:	00000000 	.word	0x00000000

08007340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007340:	f3ef 8009 	mrs	r0, PSP
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	4b0d      	ldr	r3, [pc, #52]	; (8007380 <pxCurrentTCBConst>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007350:	6010      	str	r0, [r2, #0]
 8007352:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007356:	f04f 0050 	mov.w	r0, #80	; 0x50
 800735a:	f380 8811 	msr	BASEPRI, r0
 800735e:	f7ff f83d 	bl	80063dc <vTaskSwitchContext>
 8007362:	f04f 0000 	mov.w	r0, #0
 8007366:	f380 8811 	msr	BASEPRI, r0
 800736a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800736e:	6819      	ldr	r1, [r3, #0]
 8007370:	6808      	ldr	r0, [r1, #0]
 8007372:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007376:	f380 8809 	msr	PSP, r0
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	4770      	bx	lr

08007380 <pxCurrentTCBConst>:
 8007380:	20000358 	.word	0x20000358
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop

08007388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	607b      	str	r3, [r7, #4]
}
 80073a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073a2:	f7fe ff5d 	bl	8006260 <xTaskIncrementTick>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073ac:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <SysTick_Handler+0x40>)
 80073ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	2300      	movs	r3, #0
 80073b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	f383 8811 	msr	BASEPRI, r3
}
 80073be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	e000ed04 	.word	0xe000ed04

080073cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073d0:	4b0a      	ldr	r3, [pc, #40]	; (80073fc <vPortSetupTimerInterrupt+0x30>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073d6:	4b0a      	ldr	r3, [pc, #40]	; (8007400 <vPortSetupTimerInterrupt+0x34>)
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073dc:	4b09      	ldr	r3, [pc, #36]	; (8007404 <vPortSetupTimerInterrupt+0x38>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a09      	ldr	r2, [pc, #36]	; (8007408 <vPortSetupTimerInterrupt+0x3c>)
 80073e2:	fba2 2303 	umull	r2, r3, r2, r3
 80073e6:	099b      	lsrs	r3, r3, #6
 80073e8:	4a08      	ldr	r2, [pc, #32]	; (800740c <vPortSetupTimerInterrupt+0x40>)
 80073ea:	3b01      	subs	r3, #1
 80073ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073ee:	4b03      	ldr	r3, [pc, #12]	; (80073fc <vPortSetupTimerInterrupt+0x30>)
 80073f0:	2207      	movs	r2, #7
 80073f2:	601a      	str	r2, [r3, #0]
}
 80073f4:	bf00      	nop
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bc80      	pop	{r7}
 80073fa:	4770      	bx	lr
 80073fc:	e000e010 	.word	0xe000e010
 8007400:	e000e018 	.word	0xe000e018
 8007404:	20000000 	.word	0x20000000
 8007408:	10624dd3 	.word	0x10624dd3
 800740c:	e000e014 	.word	0xe000e014

08007410 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007416:	f3ef 8305 	mrs	r3, IPSR
 800741a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b0f      	cmp	r3, #15
 8007420:	d914      	bls.n	800744c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007422:	4a16      	ldr	r2, [pc, #88]	; (800747c <vPortValidateInterruptPriority+0x6c>)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4413      	add	r3, r2
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800742c:	4b14      	ldr	r3, [pc, #80]	; (8007480 <vPortValidateInterruptPriority+0x70>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	7afa      	ldrb	r2, [r7, #11]
 8007432:	429a      	cmp	r2, r3
 8007434:	d20a      	bcs.n	800744c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	607b      	str	r3, [r7, #4]
}
 8007448:	bf00      	nop
 800744a:	e7fe      	b.n	800744a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800744c:	4b0d      	ldr	r3, [pc, #52]	; (8007484 <vPortValidateInterruptPriority+0x74>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007454:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <vPortValidateInterruptPriority+0x78>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	429a      	cmp	r2, r3
 800745a:	d90a      	bls.n	8007472 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	603b      	str	r3, [r7, #0]
}
 800746e:	bf00      	nop
 8007470:	e7fe      	b.n	8007470 <vPortValidateInterruptPriority+0x60>
	}
 8007472:	bf00      	nop
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	bc80      	pop	{r7}
 800747a:	4770      	bx	lr
 800747c:	e000e3f0 	.word	0xe000e3f0
 8007480:	20000484 	.word	0x20000484
 8007484:	e000ed0c 	.word	0xe000ed0c
 8007488:	20000488 	.word	0x20000488

0800748c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08a      	sub	sp, #40	; 0x28
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007494:	2300      	movs	r3, #0
 8007496:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007498:	f7fe fe38 	bl	800610c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800749c:	4b58      	ldr	r3, [pc, #352]	; (8007600 <pvPortMalloc+0x174>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074a4:	f000 f910 	bl	80076c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074a8:	4b56      	ldr	r3, [pc, #344]	; (8007604 <pvPortMalloc+0x178>)
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4013      	ands	r3, r2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f040 808e 	bne.w	80075d2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d01d      	beq.n	80074f8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80074bc:	2208      	movs	r2, #8
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4413      	add	r3, r2
 80074c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d014      	beq.n	80074f8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f023 0307 	bic.w	r3, r3, #7
 80074d4:	3308      	adds	r3, #8
 80074d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f003 0307 	and.w	r3, r3, #7
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <pvPortMalloc+0x6c>
	__asm volatile
 80074e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	617b      	str	r3, [r7, #20]
}
 80074f4:	bf00      	nop
 80074f6:	e7fe      	b.n	80074f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d069      	beq.n	80075d2 <pvPortMalloc+0x146>
 80074fe:	4b42      	ldr	r3, [pc, #264]	; (8007608 <pvPortMalloc+0x17c>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	429a      	cmp	r2, r3
 8007506:	d864      	bhi.n	80075d2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007508:	4b40      	ldr	r3, [pc, #256]	; (800760c <pvPortMalloc+0x180>)
 800750a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800750c:	4b3f      	ldr	r3, [pc, #252]	; (800760c <pvPortMalloc+0x180>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007512:	e004      	b.n	800751e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	429a      	cmp	r2, r3
 8007526:	d903      	bls.n	8007530 <pvPortMalloc+0xa4>
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1f1      	bne.n	8007514 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007530:	4b33      	ldr	r3, [pc, #204]	; (8007600 <pvPortMalloc+0x174>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007536:	429a      	cmp	r2, r3
 8007538:	d04b      	beq.n	80075d2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2208      	movs	r2, #8
 8007540:	4413      	add	r3, r2
 8007542:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	1ad2      	subs	r2, r2, r3
 8007554:	2308      	movs	r3, #8
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	429a      	cmp	r2, r3
 800755a:	d91f      	bls.n	800759c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800755c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4413      	add	r3, r2
 8007562:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00a      	beq.n	8007584 <pvPortMalloc+0xf8>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	613b      	str	r3, [r7, #16]
}
 8007580:	bf00      	nop
 8007582:	e7fe      	b.n	8007582 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	1ad2      	subs	r2, r2, r3
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007596:	69b8      	ldr	r0, [r7, #24]
 8007598:	f000 f8f8 	bl	800778c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800759c:	4b1a      	ldr	r3, [pc, #104]	; (8007608 <pvPortMalloc+0x17c>)
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	4a18      	ldr	r2, [pc, #96]	; (8007608 <pvPortMalloc+0x17c>)
 80075a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075aa:	4b17      	ldr	r3, [pc, #92]	; (8007608 <pvPortMalloc+0x17c>)
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	4b18      	ldr	r3, [pc, #96]	; (8007610 <pvPortMalloc+0x184>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d203      	bcs.n	80075be <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075b6:	4b14      	ldr	r3, [pc, #80]	; (8007608 <pvPortMalloc+0x17c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a15      	ldr	r2, [pc, #84]	; (8007610 <pvPortMalloc+0x184>)
 80075bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	4b10      	ldr	r3, [pc, #64]	; (8007604 <pvPortMalloc+0x178>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	431a      	orrs	r2, r3
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	2200      	movs	r2, #0
 80075d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075d2:	f7fe fda9 	bl	8006128 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	f003 0307 	and.w	r3, r3, #7
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00a      	beq.n	80075f6 <pvPortMalloc+0x16a>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	60fb      	str	r3, [r7, #12]
}
 80075f2:	bf00      	nop
 80075f4:	e7fe      	b.n	80075f4 <pvPortMalloc+0x168>
	return pvReturn;
 80075f6:	69fb      	ldr	r3, [r7, #28]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3728      	adds	r7, #40	; 0x28
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	200040ac 	.word	0x200040ac
 8007604:	200040b8 	.word	0x200040b8
 8007608:	200040b0 	.word	0x200040b0
 800760c:	200040a4 	.word	0x200040a4
 8007610:	200040b4 	.word	0x200040b4

08007614 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d048      	beq.n	80076b8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007626:	2308      	movs	r3, #8
 8007628:	425b      	negs	r3, r3
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	4413      	add	r3, r2
 800762e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	4b21      	ldr	r3, [pc, #132]	; (80076c0 <vPortFree+0xac>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4013      	ands	r3, r2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10a      	bne.n	8007658 <vPortFree+0x44>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	60fb      	str	r3, [r7, #12]
}
 8007654:	bf00      	nop
 8007656:	e7fe      	b.n	8007656 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00a      	beq.n	8007676 <vPortFree+0x62>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	60bb      	str	r3, [r7, #8]
}
 8007672:	bf00      	nop
 8007674:	e7fe      	b.n	8007674 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	4b11      	ldr	r3, [pc, #68]	; (80076c0 <vPortFree+0xac>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4013      	ands	r3, r2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d019      	beq.n	80076b8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d115      	bne.n	80076b8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <vPortFree+0xac>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	43db      	mvns	r3, r3
 8007696:	401a      	ands	r2, r3
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800769c:	f7fe fd36 	bl	800610c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	4b07      	ldr	r3, [pc, #28]	; (80076c4 <vPortFree+0xb0>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4413      	add	r3, r2
 80076aa:	4a06      	ldr	r2, [pc, #24]	; (80076c4 <vPortFree+0xb0>)
 80076ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076ae:	6938      	ldr	r0, [r7, #16]
 80076b0:	f000 f86c 	bl	800778c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80076b4:	f7fe fd38 	bl	8006128 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80076b8:	bf00      	nop
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	200040b8 	.word	0x200040b8
 80076c4:	200040b0 	.word	0x200040b0

080076c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076ce:	f643 4318 	movw	r3, #15384	; 0x3c18
 80076d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80076d4:	4b27      	ldr	r3, [pc, #156]	; (8007774 <prvHeapInit+0xac>)
 80076d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f003 0307 	and.w	r3, r3, #7
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00c      	beq.n	80076fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3307      	adds	r3, #7
 80076e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 0307 	bic.w	r3, r3, #7
 80076ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	4a1f      	ldr	r2, [pc, #124]	; (8007774 <prvHeapInit+0xac>)
 80076f8:	4413      	add	r3, r2
 80076fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007700:	4a1d      	ldr	r2, [pc, #116]	; (8007778 <prvHeapInit+0xb0>)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007706:	4b1c      	ldr	r3, [pc, #112]	; (8007778 <prvHeapInit+0xb0>)
 8007708:	2200      	movs	r2, #0
 800770a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	4413      	add	r3, r2
 8007712:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007714:	2208      	movs	r2, #8
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	1a9b      	subs	r3, r3, r2
 800771a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f023 0307 	bic.w	r3, r3, #7
 8007722:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4a15      	ldr	r2, [pc, #84]	; (800777c <prvHeapInit+0xb4>)
 8007728:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800772a:	4b14      	ldr	r3, [pc, #80]	; (800777c <prvHeapInit+0xb4>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2200      	movs	r2, #0
 8007730:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007732:	4b12      	ldr	r3, [pc, #72]	; (800777c <prvHeapInit+0xb4>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	1ad2      	subs	r2, r2, r3
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007748:	4b0c      	ldr	r3, [pc, #48]	; (800777c <prvHeapInit+0xb4>)
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	4a0a      	ldr	r2, [pc, #40]	; (8007780 <prvHeapInit+0xb8>)
 8007756:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	4a09      	ldr	r2, [pc, #36]	; (8007784 <prvHeapInit+0xbc>)
 800775e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007760:	4b09      	ldr	r3, [pc, #36]	; (8007788 <prvHeapInit+0xc0>)
 8007762:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007766:	601a      	str	r2, [r3, #0]
}
 8007768:	bf00      	nop
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	bc80      	pop	{r7}
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	2000048c 	.word	0x2000048c
 8007778:	200040a4 	.word	0x200040a4
 800777c:	200040ac 	.word	0x200040ac
 8007780:	200040b4 	.word	0x200040b4
 8007784:	200040b0 	.word	0x200040b0
 8007788:	200040b8 	.word	0x200040b8

0800778c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007794:	4b27      	ldr	r3, [pc, #156]	; (8007834 <prvInsertBlockIntoFreeList+0xa8>)
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	e002      	b.n	80077a0 <prvInsertBlockIntoFreeList+0x14>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d8f7      	bhi.n	800779a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	4413      	add	r3, r2
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d108      	bne.n	80077ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	441a      	add	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	441a      	add	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d118      	bne.n	8007814 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	4b14      	ldr	r3, [pc, #80]	; (8007838 <prvInsertBlockIntoFreeList+0xac>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d00d      	beq.n	800780a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	441a      	add	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	e008      	b.n	800781c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800780a:	4b0b      	ldr	r3, [pc, #44]	; (8007838 <prvInsertBlockIntoFreeList+0xac>)
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	e003      	b.n	800781c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	429a      	cmp	r2, r3
 8007822:	d002      	beq.n	800782a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800782a:	bf00      	nop
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	bc80      	pop	{r7}
 8007832:	4770      	bx	lr
 8007834:	200040a4 	.word	0x200040a4
 8007838:	200040ac 	.word	0x200040ac

0800783c <__libc_init_array>:
 800783c:	b570      	push	{r4, r5, r6, lr}
 800783e:	2600      	movs	r6, #0
 8007840:	4d0c      	ldr	r5, [pc, #48]	; (8007874 <__libc_init_array+0x38>)
 8007842:	4c0d      	ldr	r4, [pc, #52]	; (8007878 <__libc_init_array+0x3c>)
 8007844:	1b64      	subs	r4, r4, r5
 8007846:	10a4      	asrs	r4, r4, #2
 8007848:	42a6      	cmp	r6, r4
 800784a:	d109      	bne.n	8007860 <__libc_init_array+0x24>
 800784c:	f000 f8f4 	bl	8007a38 <_init>
 8007850:	2600      	movs	r6, #0
 8007852:	4d0a      	ldr	r5, [pc, #40]	; (800787c <__libc_init_array+0x40>)
 8007854:	4c0a      	ldr	r4, [pc, #40]	; (8007880 <__libc_init_array+0x44>)
 8007856:	1b64      	subs	r4, r4, r5
 8007858:	10a4      	asrs	r4, r4, #2
 800785a:	42a6      	cmp	r6, r4
 800785c:	d105      	bne.n	800786a <__libc_init_array+0x2e>
 800785e:	bd70      	pop	{r4, r5, r6, pc}
 8007860:	f855 3b04 	ldr.w	r3, [r5], #4
 8007864:	4798      	blx	r3
 8007866:	3601      	adds	r6, #1
 8007868:	e7ee      	b.n	8007848 <__libc_init_array+0xc>
 800786a:	f855 3b04 	ldr.w	r3, [r5], #4
 800786e:	4798      	blx	r3
 8007870:	3601      	adds	r6, #1
 8007872:	e7f2      	b.n	800785a <__libc_init_array+0x1e>
 8007874:	08007b38 	.word	0x08007b38
 8007878:	08007b38 	.word	0x08007b38
 800787c:	08007b38 	.word	0x08007b38
 8007880:	08007b3c 	.word	0x08007b3c

08007884 <__retarget_lock_acquire_recursive>:
 8007884:	4770      	bx	lr

08007886 <__retarget_lock_release_recursive>:
 8007886:	4770      	bx	lr

08007888 <memcpy>:
 8007888:	440a      	add	r2, r1
 800788a:	4291      	cmp	r1, r2
 800788c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007890:	d100      	bne.n	8007894 <memcpy+0xc>
 8007892:	4770      	bx	lr
 8007894:	b510      	push	{r4, lr}
 8007896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800789a:	4291      	cmp	r1, r2
 800789c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078a0:	d1f9      	bne.n	8007896 <memcpy+0xe>
 80078a2:	bd10      	pop	{r4, pc}

080078a4 <memset>:
 80078a4:	4603      	mov	r3, r0
 80078a6:	4402      	add	r2, r0
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d100      	bne.n	80078ae <memset+0xa>
 80078ac:	4770      	bx	lr
 80078ae:	f803 1b01 	strb.w	r1, [r3], #1
 80078b2:	e7f9      	b.n	80078a8 <memset+0x4>

080078b4 <cleanup_glue>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	460c      	mov	r4, r1
 80078b8:	6809      	ldr	r1, [r1, #0]
 80078ba:	4605      	mov	r5, r0
 80078bc:	b109      	cbz	r1, 80078c2 <cleanup_glue+0xe>
 80078be:	f7ff fff9 	bl	80078b4 <cleanup_glue>
 80078c2:	4621      	mov	r1, r4
 80078c4:	4628      	mov	r0, r5
 80078c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078ca:	f000 b869 	b.w	80079a0 <_free_r>
	...

080078d0 <_reclaim_reent>:
 80078d0:	4b2c      	ldr	r3, [pc, #176]	; (8007984 <_reclaim_reent+0xb4>)
 80078d2:	b570      	push	{r4, r5, r6, lr}
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4604      	mov	r4, r0
 80078d8:	4283      	cmp	r3, r0
 80078da:	d051      	beq.n	8007980 <_reclaim_reent+0xb0>
 80078dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80078de:	b143      	cbz	r3, 80078f2 <_reclaim_reent+0x22>
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d14a      	bne.n	800797c <_reclaim_reent+0xac>
 80078e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078e8:	6819      	ldr	r1, [r3, #0]
 80078ea:	b111      	cbz	r1, 80078f2 <_reclaim_reent+0x22>
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 f857 	bl	80079a0 <_free_r>
 80078f2:	6961      	ldr	r1, [r4, #20]
 80078f4:	b111      	cbz	r1, 80078fc <_reclaim_reent+0x2c>
 80078f6:	4620      	mov	r0, r4
 80078f8:	f000 f852 	bl	80079a0 <_free_r>
 80078fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80078fe:	b111      	cbz	r1, 8007906 <_reclaim_reent+0x36>
 8007900:	4620      	mov	r0, r4
 8007902:	f000 f84d 	bl	80079a0 <_free_r>
 8007906:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007908:	b111      	cbz	r1, 8007910 <_reclaim_reent+0x40>
 800790a:	4620      	mov	r0, r4
 800790c:	f000 f848 	bl	80079a0 <_free_r>
 8007910:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007912:	b111      	cbz	r1, 800791a <_reclaim_reent+0x4a>
 8007914:	4620      	mov	r0, r4
 8007916:	f000 f843 	bl	80079a0 <_free_r>
 800791a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800791c:	b111      	cbz	r1, 8007924 <_reclaim_reent+0x54>
 800791e:	4620      	mov	r0, r4
 8007920:	f000 f83e 	bl	80079a0 <_free_r>
 8007924:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007926:	b111      	cbz	r1, 800792e <_reclaim_reent+0x5e>
 8007928:	4620      	mov	r0, r4
 800792a:	f000 f839 	bl	80079a0 <_free_r>
 800792e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007930:	b111      	cbz	r1, 8007938 <_reclaim_reent+0x68>
 8007932:	4620      	mov	r0, r4
 8007934:	f000 f834 	bl	80079a0 <_free_r>
 8007938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800793a:	b111      	cbz	r1, 8007942 <_reclaim_reent+0x72>
 800793c:	4620      	mov	r0, r4
 800793e:	f000 f82f 	bl	80079a0 <_free_r>
 8007942:	69a3      	ldr	r3, [r4, #24]
 8007944:	b1e3      	cbz	r3, 8007980 <_reclaim_reent+0xb0>
 8007946:	4620      	mov	r0, r4
 8007948:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800794a:	4798      	blx	r3
 800794c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800794e:	b1b9      	cbz	r1, 8007980 <_reclaim_reent+0xb0>
 8007950:	4620      	mov	r0, r4
 8007952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007956:	f7ff bfad 	b.w	80078b4 <cleanup_glue>
 800795a:	5949      	ldr	r1, [r1, r5]
 800795c:	b941      	cbnz	r1, 8007970 <_reclaim_reent+0xa0>
 800795e:	3504      	adds	r5, #4
 8007960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007962:	2d80      	cmp	r5, #128	; 0x80
 8007964:	68d9      	ldr	r1, [r3, #12]
 8007966:	d1f8      	bne.n	800795a <_reclaim_reent+0x8a>
 8007968:	4620      	mov	r0, r4
 800796a:	f000 f819 	bl	80079a0 <_free_r>
 800796e:	e7ba      	b.n	80078e6 <_reclaim_reent+0x16>
 8007970:	680e      	ldr	r6, [r1, #0]
 8007972:	4620      	mov	r0, r4
 8007974:	f000 f814 	bl	80079a0 <_free_r>
 8007978:	4631      	mov	r1, r6
 800797a:	e7ef      	b.n	800795c <_reclaim_reent+0x8c>
 800797c:	2500      	movs	r5, #0
 800797e:	e7ef      	b.n	8007960 <_reclaim_reent+0x90>
 8007980:	bd70      	pop	{r4, r5, r6, pc}
 8007982:	bf00      	nop
 8007984:	20000010 	.word	0x20000010

08007988 <__malloc_lock>:
 8007988:	4801      	ldr	r0, [pc, #4]	; (8007990 <__malloc_lock+0x8>)
 800798a:	f7ff bf7b 	b.w	8007884 <__retarget_lock_acquire_recursive>
 800798e:	bf00      	nop
 8007990:	200042f8 	.word	0x200042f8

08007994 <__malloc_unlock>:
 8007994:	4801      	ldr	r0, [pc, #4]	; (800799c <__malloc_unlock+0x8>)
 8007996:	f7ff bf76 	b.w	8007886 <__retarget_lock_release_recursive>
 800799a:	bf00      	nop
 800799c:	200042f8 	.word	0x200042f8

080079a0 <_free_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	4605      	mov	r5, r0
 80079a4:	2900      	cmp	r1, #0
 80079a6:	d043      	beq.n	8007a30 <_free_r+0x90>
 80079a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ac:	1f0c      	subs	r4, r1, #4
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	bfb8      	it	lt
 80079b2:	18e4      	addlt	r4, r4, r3
 80079b4:	f7ff ffe8 	bl	8007988 <__malloc_lock>
 80079b8:	4a1e      	ldr	r2, [pc, #120]	; (8007a34 <_free_r+0x94>)
 80079ba:	6813      	ldr	r3, [r2, #0]
 80079bc:	4610      	mov	r0, r2
 80079be:	b933      	cbnz	r3, 80079ce <_free_r+0x2e>
 80079c0:	6063      	str	r3, [r4, #4]
 80079c2:	6014      	str	r4, [r2, #0]
 80079c4:	4628      	mov	r0, r5
 80079c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079ca:	f7ff bfe3 	b.w	8007994 <__malloc_unlock>
 80079ce:	42a3      	cmp	r3, r4
 80079d0:	d90a      	bls.n	80079e8 <_free_r+0x48>
 80079d2:	6821      	ldr	r1, [r4, #0]
 80079d4:	1862      	adds	r2, r4, r1
 80079d6:	4293      	cmp	r3, r2
 80079d8:	bf01      	itttt	eq
 80079da:	681a      	ldreq	r2, [r3, #0]
 80079dc:	685b      	ldreq	r3, [r3, #4]
 80079de:	1852      	addeq	r2, r2, r1
 80079e0:	6022      	streq	r2, [r4, #0]
 80079e2:	6063      	str	r3, [r4, #4]
 80079e4:	6004      	str	r4, [r0, #0]
 80079e6:	e7ed      	b.n	80079c4 <_free_r+0x24>
 80079e8:	461a      	mov	r2, r3
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	b10b      	cbz	r3, 80079f2 <_free_r+0x52>
 80079ee:	42a3      	cmp	r3, r4
 80079f0:	d9fa      	bls.n	80079e8 <_free_r+0x48>
 80079f2:	6811      	ldr	r1, [r2, #0]
 80079f4:	1850      	adds	r0, r2, r1
 80079f6:	42a0      	cmp	r0, r4
 80079f8:	d10b      	bne.n	8007a12 <_free_r+0x72>
 80079fa:	6820      	ldr	r0, [r4, #0]
 80079fc:	4401      	add	r1, r0
 80079fe:	1850      	adds	r0, r2, r1
 8007a00:	4283      	cmp	r3, r0
 8007a02:	6011      	str	r1, [r2, #0]
 8007a04:	d1de      	bne.n	80079c4 <_free_r+0x24>
 8007a06:	6818      	ldr	r0, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	4401      	add	r1, r0
 8007a0c:	6011      	str	r1, [r2, #0]
 8007a0e:	6053      	str	r3, [r2, #4]
 8007a10:	e7d8      	b.n	80079c4 <_free_r+0x24>
 8007a12:	d902      	bls.n	8007a1a <_free_r+0x7a>
 8007a14:	230c      	movs	r3, #12
 8007a16:	602b      	str	r3, [r5, #0]
 8007a18:	e7d4      	b.n	80079c4 <_free_r+0x24>
 8007a1a:	6820      	ldr	r0, [r4, #0]
 8007a1c:	1821      	adds	r1, r4, r0
 8007a1e:	428b      	cmp	r3, r1
 8007a20:	bf01      	itttt	eq
 8007a22:	6819      	ldreq	r1, [r3, #0]
 8007a24:	685b      	ldreq	r3, [r3, #4]
 8007a26:	1809      	addeq	r1, r1, r0
 8007a28:	6021      	streq	r1, [r4, #0]
 8007a2a:	6063      	str	r3, [r4, #4]
 8007a2c:	6054      	str	r4, [r2, #4]
 8007a2e:	e7c9      	b.n	80079c4 <_free_r+0x24>
 8007a30:	bd38      	pop	{r3, r4, r5, pc}
 8007a32:	bf00      	nop
 8007a34:	200040bc 	.word	0x200040bc

08007a38 <_init>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	bf00      	nop
 8007a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3e:	bc08      	pop	{r3}
 8007a40:	469e      	mov	lr, r3
 8007a42:	4770      	bx	lr

08007a44 <_fini>:
 8007a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a46:	bf00      	nop
 8007a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4a:	bc08      	pop	{r3}
 8007a4c:	469e      	mov	lr, r3
 8007a4e:	4770      	bx	lr
