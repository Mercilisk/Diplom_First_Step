
Diplom_First_Step.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007770  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08007880  08007880  00017880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007968  08007968  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007968  08007968  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007968  08007968  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007968  08007968  00017968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800796c  0800796c  0001796c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000427c  20000074  080079e4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200042f0  080079e4  000242f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eab6  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040da  00000000  00000000  0003eb53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  00042c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001500  00000000  00000000  000442a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aab9  00000000  00000000  000457a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c56  00000000  00000000  00060261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000966b9  00000000  00000000  00079eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00110570  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006010  00000000  00000000  001105c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08007868 	.word	0x08007868

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08007868 	.word	0x08007868

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b088      	sub	sp, #32
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fc9b 	bl	8000ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f823 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8ed 	bl	800036c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000192:	f000 f89b 	bl	80002cc <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000196:	f000 f8c3 	bl	8000320 <MX_DMA_Init>
  MX_SPI2_Init();
 800019a:	f000 f861 	bl	8000260 <MX_SPI2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, ADXL345_Data_Collector_Task, osPriorityNormal, 0, 1536);
 800019e:	4b0b      	ldr	r3, [pc, #44]	; (80001cc <main+0x4c>)
 80001a0:	1d3c      	adds	r4, r7, #4
 80001a2:	461d      	mov	r5, r3
 80001a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	2100      	movs	r1, #0
 80001b4:	4618      	mov	r0, r3
 80001b6:	f004 ff29 	bl	800500c <osThreadCreate>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a04      	ldr	r2, [pc, #16]	; (80001d0 <main+0x50>)
 80001be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADXL345_Config();
 80001c0:	f000 f964 	bl	800048c <ADXL345_Config>
  //UART_Cobs_Config();
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001c4:	f004 ff1b 	bl	8004ffe <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c8:	e7fe      	b.n	80001c8 <main+0x48>
 80001ca:	bf00      	nop
 80001cc:	0800788c 	.word	0x0800788c
 80001d0:	200040c0 	.word	0x200040c0

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b090      	sub	sp, #64	; 0x40
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0318 	add.w	r3, r7, #24
 80001de:	2228      	movs	r2, #40	; 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f007 fa76 	bl	80076d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]
 80001f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f6:	2301      	movs	r3, #1
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80001fa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80001fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000204:	2301      	movs	r3, #1
 8000206:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000208:	2302      	movs	r3, #2
 800020a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000210:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000212:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000216:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000218:	f107 0318 	add.w	r3, r7, #24
 800021c:	4618      	mov	r0, r3
 800021e:	f001 f9b3 	bl	8001588 <HAL_RCC_OscConfig>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000228:	f000 fa44 	bl	80006b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022c:	230f      	movs	r3, #15
 800022e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000230:	2302      	movs	r3, #2
 8000232:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2102      	movs	r1, #2
 8000246:	4618      	mov	r0, r3
 8000248:	f001 fc1e 	bl	8001a88 <HAL_RCC_ClockConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000252:	f000 fa2f 	bl	80006b4 <Error_Handler>
  }
}
 8000256:	bf00      	nop
 8000258:	3740      	adds	r7, #64	; 0x40
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <MX_SPI2_Init+0x64>)
 8000266:	4a18      	ldr	r2, [pc, #96]	; (80002c8 <MX_SPI2_Init+0x68>)
 8000268:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800026a:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <MX_SPI2_Init+0x64>)
 800026c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000270:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000272:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <MX_SPI2_Init+0x64>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000278:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <MX_SPI2_Init+0x64>)
 800027a:	2200      	movs	r2, #0
 800027c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800027e:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <MX_SPI2_Init+0x64>)
 8000280:	2202      	movs	r2, #2
 8000282:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <MX_SPI2_Init+0x64>)
 8000286:	2201      	movs	r2, #1
 8000288:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <MX_SPI2_Init+0x64>)
 800028c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000290:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000292:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <MX_SPI2_Init+0x64>)
 8000294:	2218      	movs	r2, #24
 8000296:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000298:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <MX_SPI2_Init+0x64>)
 800029a:	2200      	movs	r2, #0
 800029c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <MX_SPI2_Init+0x64>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <MX_SPI2_Init+0x64>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <MX_SPI2_Init+0x64>)
 80002ac:	220a      	movs	r2, #10
 80002ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002b0:	4804      	ldr	r0, [pc, #16]	; (80002c4 <MX_SPI2_Init+0x64>)
 80002b2:	f001 fdb3 	bl	8001e1c <HAL_SPI_Init>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80002bc:	f000 f9fa 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	200040c4 	.word	0x200040c4
 80002c8:	40003800 	.word	0x40003800

080002cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002d0:	4b11      	ldr	r3, [pc, #68]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002d2:	4a12      	ldr	r2, [pc, #72]	; (800031c <MX_USART2_UART_Init+0x50>)
 80002d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002d6:	4b10      	ldr	r3, [pc, #64]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ea:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002f0:	4b09      	ldr	r3, [pc, #36]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002f2:	220c      	movs	r2, #12
 80002f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002f6:	4b08      	ldr	r3, [pc, #32]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 8000304:	f003 fa5e 	bl	80037c4 <HAL_UART_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800030e:	f000 f9d1 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	200041c8 	.word	0x200041c8
 800031c:	40004400 	.word	0x40004400

08000320 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <MX_DMA_Init+0x48>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a0f      	ldr	r2, [pc, #60]	; (8000368 <MX_DMA_Init+0x48>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6153      	str	r3, [r2, #20]
 8000332:	4b0d      	ldr	r3, [pc, #52]	; (8000368 <MX_DMA_Init+0x48>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800033e:	2200      	movs	r2, #0
 8000340:	2105      	movs	r1, #5
 8000342:	200e      	movs	r0, #14
 8000344:	f000 fca3 	bl	8000c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000348:	200e      	movs	r0, #14
 800034a:	f000 fcbc 	bl	8000cc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	2105      	movs	r1, #5
 8000352:	200f      	movs	r0, #15
 8000354:	f000 fc9b 	bl	8000c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000358:	200f      	movs	r0, #15
 800035a:	f000 fcb4 	bl	8000cc6 <HAL_NVIC_EnableIRQ>

}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	f107 0310 	add.w	r3, r7, #16
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000380:	4b3d      	ldr	r3, [pc, #244]	; (8000478 <MX_GPIO_Init+0x10c>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a3c      	ldr	r2, [pc, #240]	; (8000478 <MX_GPIO_Init+0x10c>)
 8000386:	f043 0310 	orr.w	r3, r3, #16
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b3a      	ldr	r3, [pc, #232]	; (8000478 <MX_GPIO_Init+0x10c>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0310 	and.w	r3, r3, #16
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000398:	4b37      	ldr	r3, [pc, #220]	; (8000478 <MX_GPIO_Init+0x10c>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a36      	ldr	r2, [pc, #216]	; (8000478 <MX_GPIO_Init+0x10c>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b34      	ldr	r3, [pc, #208]	; (8000478 <MX_GPIO_Init+0x10c>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0320 	and.w	r3, r3, #32
 80003ac:	60bb      	str	r3, [r7, #8]
 80003ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b0:	4b31      	ldr	r3, [pc, #196]	; (8000478 <MX_GPIO_Init+0x10c>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a30      	ldr	r2, [pc, #192]	; (8000478 <MX_GPIO_Init+0x10c>)
 80003b6:	f043 0304 	orr.w	r3, r3, #4
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b2e      	ldr	r3, [pc, #184]	; (8000478 <MX_GPIO_Init+0x10c>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0304 	and.w	r3, r3, #4
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c8:	4b2b      	ldr	r3, [pc, #172]	; (8000478 <MX_GPIO_Init+0x10c>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a2a      	ldr	r2, [pc, #168]	; (8000478 <MX_GPIO_Init+0x10c>)
 80003ce:	f043 0308 	orr.w	r3, r3, #8
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b28      	ldr	r3, [pc, #160]	; (8000478 <MX_GPIO_Init+0x10c>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0308 	and.w	r3, r3, #8
 80003dc:	603b      	str	r3, [r7, #0]
 80003de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2120      	movs	r1, #32
 80003e4:	4825      	ldr	r0, [pc, #148]	; (800047c <MX_GPIO_Init+0x110>)
 80003e6:	f001 f89f 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2140      	movs	r1, #64	; 0x40
 80003ee:	4824      	ldr	r0, [pc, #144]	; (8000480 <MX_GPIO_Init+0x114>)
 80003f0:	f001 f89a 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003fa:	4b22      	ldr	r3, [pc, #136]	; (8000484 <MX_GPIO_Init+0x118>)
 80003fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000402:	f107 0310 	add.w	r3, r7, #16
 8000406:	4619      	mov	r1, r3
 8000408:	481f      	ldr	r0, [pc, #124]	; (8000488 <MX_GPIO_Init+0x11c>)
 800040a:	f000 ff09 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_Pin */
  GPIO_InitStruct.Pin = Green_Pin;
 800040e:	2320      	movs	r3, #32
 8000410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000412:	2301      	movs	r3, #1
 8000414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	2302      	movs	r3, #2
 800041c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Green_GPIO_Port, &GPIO_InitStruct);
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	4619      	mov	r1, r3
 8000424:	4815      	ldr	r0, [pc, #84]	; (800047c <MX_GPIO_Init+0x110>)
 8000426:	f000 fefb 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Int1_Accelerometer_Pin */
  GPIO_InitStruct.Pin = GPIO_Int1_Accelerometer_Pin;
 800042a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <MX_GPIO_Init+0x118>)
 8000432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_Int1_Accelerometer_GPIO_Port, &GPIO_InitStruct);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	4619      	mov	r1, r3
 800043e:	480f      	ldr	r0, [pc, #60]	; (800047c <MX_GPIO_Init+0x110>)
 8000440:	f000 feee 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000444:	2340      	movs	r3, #64	; 0x40
 8000446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000448:	2301      	movs	r3, #1
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	2300      	movs	r3, #0
 800044e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000450:	2303      	movs	r3, #3
 8000452:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	4619      	mov	r1, r3
 800045a:	4809      	ldr	r0, [pc, #36]	; (8000480 <MX_GPIO_Init+0x114>)
 800045c:	f000 fee0 	bl	8001220 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000460:	2200      	movs	r2, #0
 8000462:	2105      	movs	r1, #5
 8000464:	2028      	movs	r0, #40	; 0x28
 8000466:	f000 fc12 	bl	8000c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800046a:	2028      	movs	r0, #40	; 0x28
 800046c:	f000 fc2b 	bl	8000cc6 <HAL_NVIC_EnableIRQ>

}
 8000470:	bf00      	nop
 8000472:	3720      	adds	r7, #32
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40021000 	.word	0x40021000
 800047c:	40010800 	.word	0x40010800
 8000480:	40010c00 	.word	0x40010c00
 8000484:	10110000 	.word	0x10110000
 8000488:	40011000 	.word	0x40011000

0800048c <ADXL345_Config>:

/* USER CODE BEGIN 4 */
void ADXL345_Config()
{
 800048c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048e:	b087      	sub	sp, #28
 8000490:	af02      	add	r7, sp, #8

	spi_freertos_t	spi_rtos;
	ADXL.spi.spi_rtos							=	&spi_rtos;
 8000492:	4a5c      	ldr	r2, [pc, #368]	; (8000604 <ADXL345_Config+0x178>)
 8000494:	463b      	mov	r3, r7
 8000496:	6013      	str	r3, [r2, #0]
	ADXL.spi.spi_rtos->hspi 					=	&hspi2;
 8000498:	4b5a      	ldr	r3, [pc, #360]	; (8000604 <ADXL345_Config+0x178>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a5a      	ldr	r2, [pc, #360]	; (8000608 <ADXL345_Config+0x17c>)
 800049e:	601a      	str	r2, [r3, #0]
	if(spi_freertos_init(ADXL.spi.spi_rtos) == SPI_FREERTOS_EXIST)
 80004a0:	4b58      	ldr	r3, [pc, #352]	; (8000604 <ADXL345_Config+0x178>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f004 fa3d 	bl	8004924 <spi_freertos_init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b05      	cmp	r3, #5
 80004ae:	d101      	bne.n	80004b4 <ADXL345_Config+0x28>
	{
		Error_Handler();
 80004b0:	f000 f900 	bl	80006b4 <Error_Handler>
	}
	ADXL.spi.nss.pin							=	SPI_CS_Pin;
 80004b4:	4b53      	ldr	r3, [pc, #332]	; (8000604 <ADXL345_Config+0x178>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80004bc:	721a      	strb	r2, [r3, #8]
 80004be:	2200      	movs	r2, #0
 80004c0:	725a      	strb	r2, [r3, #9]
	ADXL.spi.nss.port 							=	SPI_CS_GPIO_Port;
 80004c2:	4b50      	ldr	r3, [pc, #320]	; (8000604 <ADXL345_Config+0x178>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	711a      	strb	r2, [r3, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	f042 020c 	orr.w	r2, r2, #12
 80004ce:	715a      	strb	r2, [r3, #5]
 80004d0:	2200      	movs	r2, #0
 80004d2:	f042 0201 	orr.w	r2, r2, #1
 80004d6:	719a      	strb	r2, [r3, #6]
 80004d8:	2200      	movs	r2, #0
 80004da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80004de:	71da      	strb	r2, [r3, #7]
	ADXL.settings.data_rate 					=	ADXL345_DATARATE_3200_HZ;
 80004e0:	4b48      	ldr	r3, [pc, #288]	; (8000604 <ADXL345_Config+0x178>)
 80004e2:	220f      	movs	r2, #15
 80004e4:	f883 2020 	strb.w	r2, [r3, #32]
	ADXL.settings.meas_range					=	ADXL345_RANGE_16_G;
 80004e8:	4b46      	ldr	r3, [pc, #280]	; (8000604 <ADXL345_Config+0x178>)
 80004ea:	2203      	movs	r2, #3
 80004ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ADXL.settings.align							=	ADXL345_ALIGN_LSB;
 80004f0:	4b44      	ldr	r3, [pc, #272]	; (8000604 <ADXL345_Config+0x178>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ADXL.settings.resolution 					=	ADXL345_RESOLUTION_FULL;
 80004f8:	4b42      	ldr	r3, [pc, #264]	; (8000604 <ADXL345_Config+0x178>)
 80004fa:	2208      	movs	r2, #8
 80004fc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	Offset Parameter
	ADXL.settings.offset.x 						=	0;
 8000500:	4b40      	ldr	r3, [pc, #256]	; (8000604 <ADXL345_Config+0x178>)
 8000502:	2200      	movs	r2, #0
 8000504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ADXL.settings.offset.y 						=	0;
 8000508:	4b3e      	ldr	r3, [pc, #248]	; (8000604 <ADXL345_Config+0x178>)
 800050a:	2200      	movs	r2, #0
 800050c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	ADXL.settings.offset.z 						=	0;
 8000510:	4b3c      	ldr	r3, [pc, #240]	; (8000604 <ADXL345_Config+0x178>)
 8000512:	2200      	movs	r2, #0
 8000514:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	//	Interrupt Settings
	ADXL.settings.int_en 						=	ADXL345_INT_DATA_READY;//ADXL345_INT_WATERMARK;
 8000518:	4b3a      	ldr	r3, [pc, #232]	; (8000604 <ADXL345_Config+0x178>)
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	ADXL.settings.map_to_int2 					=	ADXL345_INT_DATA_READY;//ADXL345_INT_WATERMARK;
 8000520:	4b38      	ldr	r3, [pc, #224]	; (8000604 <ADXL345_Config+0x178>)
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	ADXL.int1.pin 								=	GPIO_Int1_Accelerometer_Pin;
 8000528:	4b36      	ldr	r3, [pc, #216]	; (8000604 <ADXL345_Config+0x178>)
 800052a:	2200      	movs	r2, #0
 800052c:	751a      	strb	r2, [r3, #20]
 800052e:	2200      	movs	r2, #0
 8000530:	f042 0204 	orr.w	r2, r2, #4
 8000534:	755a      	strb	r2, [r3, #21]
	ADXL.int1.port								=	GPIO_Int1_Accelerometer_GPIO_Port;
 8000536:	4b33      	ldr	r3, [pc, #204]	; (8000604 <ADXL345_Config+0x178>)
 8000538:	2200      	movs	r2, #0
 800053a:	741a      	strb	r2, [r3, #16]
 800053c:	2200      	movs	r2, #0
 800053e:	f042 0208 	orr.w	r2, r2, #8
 8000542:	745a      	strb	r2, [r3, #17]
 8000544:	2200      	movs	r2, #0
 8000546:	f042 0201 	orr.w	r2, r2, #1
 800054a:	749a      	strb	r2, [r3, #18]
 800054c:	2200      	movs	r2, #0
 800054e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000552:	74da      	strb	r2, [r3, #19]
	ADXL.settings.fifo_watermark 				=	0x00; //0x1F;
 8000554:	4b2b      	ldr	r3, [pc, #172]	; (8000604 <ADXL345_Config+0x178>)
 8000556:	2200      	movs	r2, #0
 8000558:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	ADXL.settings.fifo_mode 					=	ADXL345_FIFO_BYPASS; //ADXL345_FIFO_FIFO;
 800055c:	4b29      	ldr	r3, [pc, #164]	; (8000604 <ADXL345_Config+0x178>)
 800055e:	2200      	movs	r2, #0
 8000560:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	ADXL.settings.fifo_trigger 					=	ADXL345_FIFO_TRIG_INT1;
 8000564:	4b27      	ldr	r3, [pc, #156]	; (8000604 <ADXL345_Config+0x178>)
 8000566:	2200      	movs	r2, #0
 8000568:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	ADXL.mutex_timeout 							=	10;
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <ADXL345_Config+0x178>)
 800056e:	2200      	movs	r2, #0
 8000570:	f042 020a 	orr.w	r2, r2, #10
 8000574:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000578:	2200      	movs	r2, #0
 800057a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800057e:	2200      	movs	r2, #0
 8000580:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8000584:	2200      	movs	r2, #0
 8000586:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	ADXL.transfer_timeout 						=	10;
 800058a:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <ADXL345_Config+0x178>)
 800058c:	2200      	movs	r2, #0
 800058e:	f042 020a 	orr.w	r2, r2, #10
 8000592:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000596:	2200      	movs	r2, #0
 8000598:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800059c:	2200      	movs	r2, #0
 800059e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80005a2:	2200      	movs	r2, #0
 80005a4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	//	Configurate FREE RTOS AND ADXL345

	hadxl.hadxl 								=	ADXL;
 80005a8:	4a18      	ldr	r2, [pc, #96]	; (800060c <ADXL345_Config+0x180>)
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <ADXL345_Config+0x178>)
 80005ac:	4610      	mov	r0, r2
 80005ae:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80005b2:	4602      	mov	r2, r0
 80005b4:	4619      	mov	r1, r3
 80005b6:	f8d1 c000 	ldr.w	ip, [r1]
 80005ba:	684e      	ldr	r6, [r1, #4]
 80005bc:	688d      	ldr	r5, [r1, #8]
 80005be:	68c9      	ldr	r1, [r1, #12]
 80005c0:	f8c2 c000 	str.w	ip, [r2]
 80005c4:	6056      	str	r6, [r2, #4]
 80005c6:	6095      	str	r5, [r2, #8]
 80005c8:	60d1      	str	r1, [r2, #12]
 80005ca:	3310      	adds	r3, #16
 80005cc:	3010      	adds	r0, #16
 80005ce:	42a3      	cmp	r3, r4
 80005d0:	d1ef      	bne.n	80005b2 <ADXL345_Config+0x126>
 80005d2:	4602      	mov	r2, r0
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6013      	str	r3, [r2, #0]
	hadxl.fifo_frame_size 						=	32;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <ADXL345_Config+0x180>)
 80005da:	2220      	movs	r2, #32
 80005dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadxl.fifo_frame_qty 						=	1;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <ADXL345_Config+0x180>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	adxl345_task_create(						"Task_ADXL345_RTOS",
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <ADXL345_Config+0x180>)
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	4806      	ldr	r0, [pc, #24]	; (8000610 <ADXL345_Config+0x184>)
 80005f6:	f004 f84f 	bl	8004698 <adxl345_task_create>
	/*while(adxl345_init(&ADXL) != ADXL345_OK)
	{
	}
#endif*/

}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000602:	bf00      	nop
 8000604:	20004250 	.word	0x20004250
 8000608:	200040c4 	.word	0x200040c4
 800060c:	20004188 	.word	0x20004188
 8000610:	080078a8 	.word	0x080078a8

08000614 <ADXL345_Data_Collector_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ADXL345_Data_Collector_Task */
void ADXL345_Data_Collector_Task(void const * argument)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	3b0c      	subs	r3, #12
 8000624:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

	float	Signal[Length_Realization] 			=	{0};
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	3b04      	subs	r3, #4
 800062c:	4618      	mov	r0, r3
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	461a      	mov	r2, r3
 8000634:	2100      	movs	r1, #0
 8000636:	f007 f84d 	bl	80076d4 <memset>
	adxl345_acc_offset_t	data 				=	{0, 0, 0};
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	3b08      	subs	r3, #8
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	3b08      	subs	r3, #8
 800064a:	2200      	movs	r2, #0
 800064c:	705a      	strb	r2, [r3, #1]
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	3b08      	subs	r3, #8
 8000654:	2200      	movs	r2, #0
 8000656:	709a      	strb	r2, [r3, #2]
	uint16_t Index_Count;
Start_Mesurments:

	Index_Count 						= 	0;
 8000658:	2300      	movs	r3, #0
 800065a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800065e:	f102 020e 	add.w	r2, r2, #14
 8000662:	8013      	strh	r3, [r2, #0]
	//adxl345_start(&ADXL);

	/* Infinite loop */
	for(;Index_Count >= Length_Realization; Index_Count++)
 8000664:	e00a      	b.n	800067c <ADXL345_Data_Collector_Task+0x68>
 8000666:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800066a:	f103 030e 	add.w	r3, r3, #14
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	3301      	adds	r3, #1
 8000672:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000676:	f102 020e 	add.w	r2, r2, #14
 800067a:	8013      	strh	r3, [r2, #0]
 800067c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000680:	f103 030e 	add.w	r3, r3, #14
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800068a:	d2ec      	bcs.n	8000666 <ADXL345_Data_Collector_Task+0x52>
	{
		//adxl345_get_data(&ADXL, ((adxl345_acc_offset_t *) &data));
	}

	//uart_cobs_send(&Cobs_UART, &Signal, Length_Realization, 10 * portTICK_PERIOD_MS);
	goto Start_Mesurments;
 800068c:	e7e4      	b.n	8000658 <ADXL345_Data_Collector_Task+0x44>
	...

08000690 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d101      	bne.n	80006a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006a2:	f000 fa23 	bl	8000aec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40000800 	.word	0x40000800

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	e7fe      	b.n	80006bc <Error_Handler+0x8>
	...

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_MspInit+0x68>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	4a17      	ldr	r2, [pc, #92]	; (8000728 <HAL_MspInit+0x68>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6193      	str	r3, [r2, #24]
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_MspInit+0x68>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_MspInit+0x68>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a11      	ldr	r2, [pc, #68]	; (8000728 <HAL_MspInit+0x68>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_MspInit+0x68>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	210f      	movs	r1, #15
 80006fa:	f06f 0001 	mvn.w	r0, #1
 80006fe:	f000 fac6 	bl	8000c8e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <HAL_MspInit+0x6c>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <HAL_MspInit+0x6c>)
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000
 800072c:	40010000 	.word	0x40010000

08000730 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a47      	ldr	r2, [pc, #284]	; (8000868 <HAL_SPI_MspInit+0x138>)
 800074c:	4293      	cmp	r3, r2
 800074e:	f040 8086 	bne.w	800085e <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000752:	4b46      	ldr	r3, [pc, #280]	; (800086c <HAL_SPI_MspInit+0x13c>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	4a45      	ldr	r2, [pc, #276]	; (800086c <HAL_SPI_MspInit+0x13c>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	61d3      	str	r3, [r2, #28]
 800075e:	4b43      	ldr	r3, [pc, #268]	; (800086c <HAL_SPI_MspInit+0x13c>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b40      	ldr	r3, [pc, #256]	; (800086c <HAL_SPI_MspInit+0x13c>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	4a3f      	ldr	r2, [pc, #252]	; (800086c <HAL_SPI_MspInit+0x13c>)
 8000770:	f043 0308 	orr.w	r3, r3, #8
 8000774:	6193      	str	r3, [r2, #24]
 8000776:	4b3d      	ldr	r3, [pc, #244]	; (800086c <HAL_SPI_MspInit+0x13c>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f003 0308 	and.w	r3, r3, #8
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000782:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4619      	mov	r1, r3
 8000796:	4836      	ldr	r0, [pc, #216]	; (8000870 <HAL_SPI_MspInit+0x140>)
 8000798:	f000 fd42 	bl	8001220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800079c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	f107 0310 	add.w	r3, r7, #16
 80007ae:	4619      	mov	r1, r3
 80007b0:	482f      	ldr	r0, [pc, #188]	; (8000870 <HAL_SPI_MspInit+0x140>)
 80007b2:	f000 fd35 	bl	8001220 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80007b6:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <HAL_SPI_MspInit+0x144>)
 80007b8:	4a2f      	ldr	r2, [pc, #188]	; (8000878 <HAL_SPI_MspInit+0x148>)
 80007ba:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007bc:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <HAL_SPI_MspInit+0x144>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c2:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <HAL_SPI_MspInit+0x144>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007c8:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <HAL_SPI_MspInit+0x144>)
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007ce:	4b29      	ldr	r3, [pc, #164]	; (8000874 <HAL_SPI_MspInit+0x144>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <HAL_SPI_MspInit+0x144>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80007da:	4b26      	ldr	r3, [pc, #152]	; (8000874 <HAL_SPI_MspInit+0x144>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <HAL_SPI_MspInit+0x144>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80007e6:	4823      	ldr	r0, [pc, #140]	; (8000874 <HAL_SPI_MspInit+0x144>)
 80007e8:	f000 fa7c 	bl	8000ce4 <HAL_DMA_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 80007f2:	f7ff ff5f 	bl	80006b4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a1e      	ldr	r2, [pc, #120]	; (8000874 <HAL_SPI_MspInit+0x144>)
 80007fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80007fc:	4a1d      	ldr	r2, [pc, #116]	; (8000874 <HAL_SPI_MspInit+0x144>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <HAL_SPI_MspInit+0x14c>)
 8000804:	4a1e      	ldr	r2, [pc, #120]	; (8000880 <HAL_SPI_MspInit+0x150>)
 8000806:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <HAL_SPI_MspInit+0x14c>)
 800080a:	2210      	movs	r2, #16
 800080c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <HAL_SPI_MspInit+0x14c>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <HAL_SPI_MspInit+0x14c>)
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <HAL_SPI_MspInit+0x14c>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <HAL_SPI_MspInit+0x14c>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_SPI_MspInit+0x14c>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <HAL_SPI_MspInit+0x14c>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000832:	4812      	ldr	r0, [pc, #72]	; (800087c <HAL_SPI_MspInit+0x14c>)
 8000834:	f000 fa56 	bl	8000ce4 <HAL_DMA_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 800083e:	f7ff ff39 	bl	80006b4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <HAL_SPI_MspInit+0x14c>)
 8000846:	649a      	str	r2, [r3, #72]	; 0x48
 8000848:	4a0c      	ldr	r2, [pc, #48]	; (800087c <HAL_SPI_MspInit+0x14c>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	2024      	movs	r0, #36	; 0x24
 8000854:	f000 fa1b 	bl	8000c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000858:	2024      	movs	r0, #36	; 0x24
 800085a:	f000 fa34 	bl	8000cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40003800 	.word	0x40003800
 800086c:	40021000 	.word	0x40021000
 8000870:	40010c00 	.word	0x40010c00
 8000874:	20004144 	.word	0x20004144
 8000878:	40020044 	.word	0x40020044
 800087c:	2000420c 	.word	0x2000420c
 8000880:	40020058 	.word	0x40020058

08000884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a19      	ldr	r2, [pc, #100]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d12b      	bne.n	80008fc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <HAL_UART_MspInit+0x84>)
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	4a17      	ldr	r2, [pc, #92]	; (8000908 <HAL_UART_MspInit+0x84>)
 80008aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ae:	61d3      	str	r3, [r2, #28]
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <HAL_UART_MspInit+0x84>)
 80008b2:	69db      	ldr	r3, [r3, #28]
 80008b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_UART_MspInit+0x84>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a11      	ldr	r2, [pc, #68]	; (8000908 <HAL_UART_MspInit+0x84>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <HAL_UART_MspInit+0x84>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d4:	230c      	movs	r3, #12
 80008d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2302      	movs	r3, #2
 80008de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	4809      	ldr	r0, [pc, #36]	; (800090c <HAL_UART_MspInit+0x88>)
 80008e8:	f000 fc9a 	bl	8001220 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2105      	movs	r1, #5
 80008f0:	2026      	movs	r0, #38	; 0x26
 80008f2:	f000 f9cc 	bl	8000c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008f6:	2026      	movs	r0, #38	; 0x26
 80008f8:	f000 f9e5 	bl	8000cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40004400 	.word	0x40004400
 8000908:	40021000 	.word	0x40021000
 800090c:	40010800 	.word	0x40010800

08000910 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	; 0x30
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000920:	2200      	movs	r2, #0
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	201e      	movs	r0, #30
 8000926:	f000 f9b2 	bl	8000c8e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800092a:	201e      	movs	r0, #30
 800092c:	f000 f9cb 	bl	8000cc6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <HAL_InitTick+0xa0>)
 8000932:	69db      	ldr	r3, [r3, #28]
 8000934:	4a1e      	ldr	r2, [pc, #120]	; (80009b0 <HAL_InitTick+0xa0>)
 8000936:	f043 0304 	orr.w	r3, r3, #4
 800093a:	61d3      	str	r3, [r2, #28]
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <HAL_InitTick+0xa0>)
 800093e:	69db      	ldr	r3, [r3, #28]
 8000940:	f003 0304 	and.w	r3, r3, #4
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000948:	f107 0210 	add.w	r2, r7, #16
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f001 fa14 	bl	8001d80 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000958:	f001 f9ea 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 800095c:	4603      	mov	r3, r0
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000964:	4a13      	ldr	r2, [pc, #76]	; (80009b4 <HAL_InitTick+0xa4>)
 8000966:	fba2 2303 	umull	r2, r3, r2, r3
 800096a:	0c9b      	lsrs	r3, r3, #18
 800096c:	3b01      	subs	r3, #1
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_InitTick+0xa8>)
 8000972:	4a12      	ldr	r2, [pc, #72]	; (80009bc <HAL_InitTick+0xac>)
 8000974:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <HAL_InitTick+0xa8>)
 8000978:	f240 32e7 	movw	r2, #999	; 0x3e7
 800097c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_InitTick+0xa8>)
 8000980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000982:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_InitTick+0xa8>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_InitTick+0xa8>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000990:	4809      	ldr	r0, [pc, #36]	; (80009b8 <HAL_InitTick+0xa8>)
 8000992:	f002 fccd 	bl	8003330 <HAL_TIM_Base_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d104      	bne.n	80009a6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800099c:	4806      	ldr	r0, [pc, #24]	; (80009b8 <HAL_InitTick+0xa8>)
 800099e:	f002 fd1f 	bl	80033e0 <HAL_TIM_Base_Start_IT>
 80009a2:	4603      	mov	r3, r0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3730      	adds	r7, #48	; 0x30
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40021000 	.word	0x40021000
 80009b4:	431bde83 	.word	0x431bde83
 80009b8:	20004298 	.word	0x20004298
 80009bc:	40000800 	.word	0x40000800

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler+0x4>

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler+0x4>

080009d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler+0x4>

080009de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
	...

080009ec <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <DMA1_Channel4_IRQHandler+0x10>)
 80009f2:	f000 fae1 	bl	8000fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20004144 	.word	0x20004144

08000a00 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <DMA1_Channel5_IRQHandler+0x10>)
 8000a06:	f000 fad7 	bl	8000fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000420c 	.word	0x2000420c

08000a14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <TIM4_IRQHandler+0x10>)
 8000a1a:	f002 fd33 	bl	8003484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20004298 	.word	0x20004298

08000a28 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <SPI2_IRQHandler+0x10>)
 8000a2e:	f002 f91b 	bl	8002c68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200040c4 	.word	0x200040c4

08000a3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <USART2_IRQHandler+0x10>)
 8000a42:	f002 ff0d 	bl	8003860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200041c8 	.word	0x200041c8

08000a50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000a54:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a58:	f000 fd7e 	bl	8001558 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a60:	f000 fd7a 	bl	8001558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a76:	490d      	ldr	r1, [pc, #52]	; (8000aac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a8c:	4c0a      	ldr	r4, [pc, #40]	; (8000ab8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a9a:	f7ff ffe5 	bl	8000a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f006 fde5 	bl	800766c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aa2:	f7ff fb6d 	bl	8000180 <main>
  bx lr
 8000aa6:	4770      	bx	lr
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ab0:	08007970 	.word	0x08007970
  ldr r2, =_sbss
 8000ab4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ab8:	200042f0 	.word	0x200042f0

08000abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC1_2_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_Init+0x28>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_Init+0x28>)
 8000aca:	f043 0310 	orr.w	r3, r3, #16
 8000ace:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f8d1 	bl	8000c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	200f      	movs	r0, #15
 8000ad8:	f7ff ff1a 	bl	8000910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff fdf0 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40022000 	.word	0x40022000

08000aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_IncTick+0x1c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_IncTick+0x20>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a03      	ldr	r2, [pc, #12]	; (8000b0c <HAL_IncTick+0x20>)
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	200042e0 	.word	0x200042e0

08000b10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <HAL_GetTick+0x10>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	200042e0 	.word	0x200042e0

08000b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b40:	4013      	ands	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	60d3      	str	r3, [r2, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <__NVIC_GetPriorityGrouping+0x18>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	f003 0307 	and.w	r3, r3, #7
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	db0b      	blt.n	8000bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	f003 021f 	and.w	r2, r3, #31
 8000ba0:	4906      	ldr	r1, [pc, #24]	; (8000bbc <__NVIC_EnableIRQ+0x34>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	095b      	lsrs	r3, r3, #5
 8000ba8:	2001      	movs	r0, #1
 8000baa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	e000e100 	.word	0xe000e100

08000bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	db0a      	blt.n	8000bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	490c      	ldr	r1, [pc, #48]	; (8000c0c <__NVIC_SetPriority+0x4c>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	440b      	add	r3, r1
 8000be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be8:	e00a      	b.n	8000c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4908      	ldr	r1, [pc, #32]	; (8000c10 <__NVIC_SetPriority+0x50>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	3b04      	subs	r3, #4
 8000bf8:	0112      	lsls	r2, r2, #4
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	761a      	strb	r2, [r3, #24]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f1c3 0307 	rsb	r3, r3, #7
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	bf28      	it	cs
 8000c32:	2304      	movcs	r3, #4
 8000c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d902      	bls.n	8000c44 <NVIC_EncodePriority+0x30>
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3b03      	subs	r3, #3
 8000c42:	e000      	b.n	8000c46 <NVIC_EncodePriority+0x32>
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43da      	mvns	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43d9      	mvns	r1, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	4313      	orrs	r3, r2
         );
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3724      	adds	r7, #36	; 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ff4f 	bl	8000b24 <__NVIC_SetPriorityGrouping>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca0:	f7ff ff64 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8000ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	6978      	ldr	r0, [r7, #20]
 8000cac:	f7ff ffb2 	bl	8000c14 <NVIC_EncodePriority>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff81 	bl	8000bc0 <__NVIC_SetPriority>
}
 8000cbe:	bf00      	nop
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff57 	bl	8000b88 <__NVIC_EnableIRQ>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e043      	b.n	8000d82 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <HAL_DMA_Init+0xa8>)
 8000d02:	4413      	add	r3, r2
 8000d04:	4a22      	ldr	r2, [pc, #136]	; (8000d90 <HAL_DMA_Init+0xac>)
 8000d06:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0a:	091b      	lsrs	r3, r3, #4
 8000d0c:	009a      	lsls	r2, r3, #2
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a1f      	ldr	r2, [pc, #124]	; (8000d94 <HAL_DMA_Init+0xb0>)
 8000d16:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2201      	movs	r2, #1
 8000d74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	bffdfff8 	.word	0xbffdfff8
 8000d90:	cccccccd 	.word	0xcccccccd
 8000d94:	40020000 	.word	0x40020000

08000d98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d101      	bne.n	8000db8 <HAL_DMA_Start_IT+0x20>
 8000db4:	2302      	movs	r3, #2
 8000db6:	e04a      	b.n	8000e4e <HAL_DMA_Start_IT+0xb6>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d13a      	bne.n	8000e40 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2202      	movs	r2, #2
 8000dce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f022 0201 	bic.w	r2, r2, #1
 8000de6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	f000 f9e8 	bl	80011c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d008      	beq.n	8000e0e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f042 020e 	orr.w	r2, r2, #14
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	e00f      	b.n	8000e2e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 0204 	bic.w	r2, r2, #4
 8000e1c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f042 020a 	orr.w	r2, r2, #10
 8000e2c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f042 0201 	orr.w	r2, r2, #1
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e005      	b.n	8000e4c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d008      	beq.n	8000e7e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2204      	movs	r2, #4
 8000e70:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e020      	b.n	8000ec0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f022 020e 	bic.w	r2, r2, #14
 8000e8c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0201 	bic.w	r2, r2, #1
 8000e9c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
	...

08000ecc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d005      	beq.n	8000eee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e051      	b.n	8000f92 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 020e 	bic.w	r2, r2, #14
 8000efc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0201 	bic.w	r2, r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a22      	ldr	r2, [pc, #136]	; (8000f9c <HAL_DMA_Abort_IT+0xd0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d029      	beq.n	8000f6c <HAL_DMA_Abort_IT+0xa0>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a20      	ldr	r2, [pc, #128]	; (8000fa0 <HAL_DMA_Abort_IT+0xd4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d022      	beq.n	8000f68 <HAL_DMA_Abort_IT+0x9c>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a1f      	ldr	r2, [pc, #124]	; (8000fa4 <HAL_DMA_Abort_IT+0xd8>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d01a      	beq.n	8000f62 <HAL_DMA_Abort_IT+0x96>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a1d      	ldr	r2, [pc, #116]	; (8000fa8 <HAL_DMA_Abort_IT+0xdc>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d012      	beq.n	8000f5c <HAL_DMA_Abort_IT+0x90>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	; (8000fac <HAL_DMA_Abort_IT+0xe0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d00a      	beq.n	8000f56 <HAL_DMA_Abort_IT+0x8a>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a1a      	ldr	r2, [pc, #104]	; (8000fb0 <HAL_DMA_Abort_IT+0xe4>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d102      	bne.n	8000f50 <HAL_DMA_Abort_IT+0x84>
 8000f4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f4e:	e00e      	b.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f54:	e00b      	b.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f5a:	e008      	b.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f60:	e005      	b.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f66:	e002      	b.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f68:	2310      	movs	r3, #16
 8000f6a:	e000      	b.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <HAL_DMA_Abort_IT+0xe8>)
 8000f70:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	4798      	blx	r3
    } 
  }
  return status;
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40020008 	.word	0x40020008
 8000fa0:	4002001c 	.word	0x4002001c
 8000fa4:	40020030 	.word	0x40020030
 8000fa8:	40020044 	.word	0x40020044
 8000fac:	40020058 	.word	0x40020058
 8000fb0:	4002006c 	.word	0x4002006c
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d04f      	beq.n	8001080 <HAL_DMA_IRQHandler+0xc8>
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d04a      	beq.n	8001080 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0320 	and.w	r3, r3, #32
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d107      	bne.n	8001008 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0204 	bic.w	r2, r2, #4
 8001006:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a66      	ldr	r2, [pc, #408]	; (80011a8 <HAL_DMA_IRQHandler+0x1f0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d029      	beq.n	8001066 <HAL_DMA_IRQHandler+0xae>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a65      	ldr	r2, [pc, #404]	; (80011ac <HAL_DMA_IRQHandler+0x1f4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d022      	beq.n	8001062 <HAL_DMA_IRQHandler+0xaa>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a63      	ldr	r2, [pc, #396]	; (80011b0 <HAL_DMA_IRQHandler+0x1f8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d01a      	beq.n	800105c <HAL_DMA_IRQHandler+0xa4>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a62      	ldr	r2, [pc, #392]	; (80011b4 <HAL_DMA_IRQHandler+0x1fc>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d012      	beq.n	8001056 <HAL_DMA_IRQHandler+0x9e>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a60      	ldr	r2, [pc, #384]	; (80011b8 <HAL_DMA_IRQHandler+0x200>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d00a      	beq.n	8001050 <HAL_DMA_IRQHandler+0x98>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a5f      	ldr	r2, [pc, #380]	; (80011bc <HAL_DMA_IRQHandler+0x204>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d102      	bne.n	800104a <HAL_DMA_IRQHandler+0x92>
 8001044:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001048:	e00e      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 800104a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800104e:	e00b      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001050:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001054:	e008      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001056:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800105a:	e005      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 800105c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001060:	e002      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001062:	2340      	movs	r3, #64	; 0x40
 8001064:	e000      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001066:	2304      	movs	r3, #4
 8001068:	4a55      	ldr	r2, [pc, #340]	; (80011c0 <HAL_DMA_IRQHandler+0x208>)
 800106a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 8094 	beq.w	800119e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800107e:	e08e      	b.n	800119e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	2202      	movs	r2, #2
 8001086:	409a      	lsls	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4013      	ands	r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d056      	beq.n	800113e <HAL_DMA_IRQHandler+0x186>
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d051      	beq.n	800113e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0320 	and.w	r3, r3, #32
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10b      	bne.n	80010c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 020a 	bic.w	r2, r2, #10
 80010b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a38      	ldr	r2, [pc, #224]	; (80011a8 <HAL_DMA_IRQHandler+0x1f0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d029      	beq.n	800111e <HAL_DMA_IRQHandler+0x166>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a37      	ldr	r2, [pc, #220]	; (80011ac <HAL_DMA_IRQHandler+0x1f4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d022      	beq.n	800111a <HAL_DMA_IRQHandler+0x162>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a35      	ldr	r2, [pc, #212]	; (80011b0 <HAL_DMA_IRQHandler+0x1f8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d01a      	beq.n	8001114 <HAL_DMA_IRQHandler+0x15c>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a34      	ldr	r2, [pc, #208]	; (80011b4 <HAL_DMA_IRQHandler+0x1fc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d012      	beq.n	800110e <HAL_DMA_IRQHandler+0x156>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a32      	ldr	r2, [pc, #200]	; (80011b8 <HAL_DMA_IRQHandler+0x200>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00a      	beq.n	8001108 <HAL_DMA_IRQHandler+0x150>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a31      	ldr	r2, [pc, #196]	; (80011bc <HAL_DMA_IRQHandler+0x204>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d102      	bne.n	8001102 <HAL_DMA_IRQHandler+0x14a>
 80010fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001100:	e00e      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 8001102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001106:	e00b      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 8001108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800110c:	e008      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 800110e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001112:	e005      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 8001114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001118:	e002      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 800111a:	2320      	movs	r3, #32
 800111c:	e000      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 800111e:	2302      	movs	r3, #2
 8001120:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <HAL_DMA_IRQHandler+0x208>)
 8001122:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	2b00      	cmp	r3, #0
 8001132:	d034      	beq.n	800119e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800113c:	e02f      	b.n	800119e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	2208      	movs	r2, #8
 8001144:	409a      	lsls	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d028      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1e8>
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d023      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 020e 	bic.w	r2, r2, #14
 8001166:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001170:	2101      	movs	r1, #1
 8001172:	fa01 f202 	lsl.w	r2, r1, r2
 8001176:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	4798      	blx	r3
    }
  }
  return;
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
}
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40020008 	.word	0x40020008
 80011ac:	4002001c 	.word	0x4002001c
 80011b0:	40020030 	.word	0x40020030
 80011b4:	40020044 	.word	0x40020044
 80011b8:	40020058 	.word	0x40020058
 80011bc:	4002006c 	.word	0x4002006c
 80011c0:	40020000 	.word	0x40020000

080011c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011da:	2101      	movs	r1, #1
 80011dc:	fa01 f202 	lsl.w	r2, r1, r2
 80011e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b10      	cmp	r3, #16
 80011f0:	d108      	bne.n	8001204 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001202:	e007      	b.n	8001214 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	60da      	str	r2, [r3, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
	...

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	b480      	push	{r7}
 8001222:	b08b      	sub	sp, #44	; 0x2c
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001232:	e169      	b.n	8001508 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001234:	2201      	movs	r2, #1
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	429a      	cmp	r2, r3
 800124e:	f040 8158 	bne.w	8001502 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4a9a      	ldr	r2, [pc, #616]	; (80014c0 <HAL_GPIO_Init+0x2a0>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d05e      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 800125c:	4a98      	ldr	r2, [pc, #608]	; (80014c0 <HAL_GPIO_Init+0x2a0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d875      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001262:	4a98      	ldr	r2, [pc, #608]	; (80014c4 <HAL_GPIO_Init+0x2a4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d058      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001268:	4a96      	ldr	r2, [pc, #600]	; (80014c4 <HAL_GPIO_Init+0x2a4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d86f      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800126e:	4a96      	ldr	r2, [pc, #600]	; (80014c8 <HAL_GPIO_Init+0x2a8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d052      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001274:	4a94      	ldr	r2, [pc, #592]	; (80014c8 <HAL_GPIO_Init+0x2a8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d869      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800127a:	4a94      	ldr	r2, [pc, #592]	; (80014cc <HAL_GPIO_Init+0x2ac>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d04c      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001280:	4a92      	ldr	r2, [pc, #584]	; (80014cc <HAL_GPIO_Init+0x2ac>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d863      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001286:	4a92      	ldr	r2, [pc, #584]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d046      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 800128c:	4a90      	ldr	r2, [pc, #576]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d85d      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001292:	2b12      	cmp	r3, #18
 8001294:	d82a      	bhi.n	80012ec <HAL_GPIO_Init+0xcc>
 8001296:	2b12      	cmp	r3, #18
 8001298:	d859      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800129a:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <HAL_GPIO_Init+0x80>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	0800131b 	.word	0x0800131b
 80012a4:	080012f5 	.word	0x080012f5
 80012a8:	08001307 	.word	0x08001307
 80012ac:	08001349 	.word	0x08001349
 80012b0:	0800134f 	.word	0x0800134f
 80012b4:	0800134f 	.word	0x0800134f
 80012b8:	0800134f 	.word	0x0800134f
 80012bc:	0800134f 	.word	0x0800134f
 80012c0:	0800134f 	.word	0x0800134f
 80012c4:	0800134f 	.word	0x0800134f
 80012c8:	0800134f 	.word	0x0800134f
 80012cc:	0800134f 	.word	0x0800134f
 80012d0:	0800134f 	.word	0x0800134f
 80012d4:	0800134f 	.word	0x0800134f
 80012d8:	0800134f 	.word	0x0800134f
 80012dc:	0800134f 	.word	0x0800134f
 80012e0:	0800134f 	.word	0x0800134f
 80012e4:	080012fd 	.word	0x080012fd
 80012e8:	08001311 	.word	0x08001311
 80012ec:	4a79      	ldr	r2, [pc, #484]	; (80014d4 <HAL_GPIO_Init+0x2b4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012f2:	e02c      	b.n	800134e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	623b      	str	r3, [r7, #32]
          break;
 80012fa:	e029      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	3304      	adds	r3, #4
 8001302:	623b      	str	r3, [r7, #32]
          break;
 8001304:	e024      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	3308      	adds	r3, #8
 800130c:	623b      	str	r3, [r7, #32]
          break;
 800130e:	e01f      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	330c      	adds	r3, #12
 8001316:	623b      	str	r3, [r7, #32]
          break;
 8001318:	e01a      	b.n	8001350 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001322:	2304      	movs	r3, #4
 8001324:	623b      	str	r3, [r7, #32]
          break;
 8001326:	e013      	b.n	8001350 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d105      	bne.n	800133c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001330:	2308      	movs	r3, #8
 8001332:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	611a      	str	r2, [r3, #16]
          break;
 800133a:	e009      	b.n	8001350 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800133c:	2308      	movs	r3, #8
 800133e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	615a      	str	r2, [r3, #20]
          break;
 8001346:	e003      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
          break;
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x130>
          break;
 800134e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2bff      	cmp	r3, #255	; 0xff
 8001354:	d801      	bhi.n	800135a <HAL_GPIO_Init+0x13a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	e001      	b.n	800135e <HAL_GPIO_Init+0x13e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3304      	adds	r3, #4
 800135e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2bff      	cmp	r3, #255	; 0xff
 8001364:	d802      	bhi.n	800136c <HAL_GPIO_Init+0x14c>
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	e002      	b.n	8001372 <HAL_GPIO_Init+0x152>
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	3b08      	subs	r3, #8
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	210f      	movs	r1, #15
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	401a      	ands	r2, r3
 8001384:	6a39      	ldr	r1, [r7, #32]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	431a      	orrs	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 80b1 	beq.w	8001502 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013a0:	4b4d      	ldr	r3, [pc, #308]	; (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a4c      	ldr	r2, [pc, #304]	; (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b8:	4a48      	ldr	r2, [pc, #288]	; (80014dc <HAL_GPIO_Init+0x2bc>)
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4013      	ands	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a40      	ldr	r2, [pc, #256]	; (80014e0 <HAL_GPIO_Init+0x2c0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d013      	beq.n	800140c <HAL_GPIO_Init+0x1ec>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a3f      	ldr	r2, [pc, #252]	; (80014e4 <HAL_GPIO_Init+0x2c4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d00d      	beq.n	8001408 <HAL_GPIO_Init+0x1e8>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a3e      	ldr	r2, [pc, #248]	; (80014e8 <HAL_GPIO_Init+0x2c8>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d007      	beq.n	8001404 <HAL_GPIO_Init+0x1e4>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a3d      	ldr	r2, [pc, #244]	; (80014ec <HAL_GPIO_Init+0x2cc>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d101      	bne.n	8001400 <HAL_GPIO_Init+0x1e0>
 80013fc:	2303      	movs	r3, #3
 80013fe:	e006      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001400:	2304      	movs	r3, #4
 8001402:	e004      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001404:	2302      	movs	r3, #2
 8001406:	e002      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 800140c:	2300      	movs	r3, #0
 800140e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001410:	f002 0203 	and.w	r2, r2, #3
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	4093      	lsls	r3, r2
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800141e:	492f      	ldr	r1, [pc, #188]	; (80014dc <HAL_GPIO_Init+0x2bc>)
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001438:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	492c      	ldr	r1, [pc, #176]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	600b      	str	r3, [r1, #0]
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	43db      	mvns	r3, r3
 800144e:	4928      	ldr	r1, [pc, #160]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001450:	4013      	ands	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001460:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4922      	ldr	r1, [pc, #136]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	43db      	mvns	r3, r3
 8001476:	491e      	ldr	r1, [pc, #120]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001478:	4013      	ands	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	4918      	ldr	r1, [pc, #96]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	608b      	str	r3, [r1, #8]
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	43db      	mvns	r3, r3
 800149e:	4914      	ldr	r1, [pc, #80]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d021      	beq.n	80014f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	490e      	ldr	r1, [pc, #56]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60cb      	str	r3, [r1, #12]
 80014bc:	e021      	b.n	8001502 <HAL_GPIO_Init+0x2e2>
 80014be:	bf00      	nop
 80014c0:	10320000 	.word	0x10320000
 80014c4:	10310000 	.word	0x10310000
 80014c8:	10220000 	.word	0x10220000
 80014cc:	10210000 	.word	0x10210000
 80014d0:	10120000 	.word	0x10120000
 80014d4:	10110000 	.word	0x10110000
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000
 80014e0:	40010800 	.word	0x40010800
 80014e4:	40010c00 	.word	0x40010c00
 80014e8:	40011000 	.word	0x40011000
 80014ec:	40011400 	.word	0x40011400
 80014f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_GPIO_Init+0x304>)
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	4909      	ldr	r1, [pc, #36]	; (8001524 <HAL_GPIO_Init+0x304>)
 80014fe:	4013      	ands	r3, r2
 8001500:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	3301      	adds	r3, #1
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	fa22 f303 	lsr.w	r3, r2, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	f47f ae8e 	bne.w	8001234 <HAL_GPIO_Init+0x14>
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	372c      	adds	r7, #44	; 0x2c
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40010400 	.word	0x40010400

08001528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001544:	e003      	b.n	800154e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001546:	887b      	ldrh	r3, [r7, #2]
 8001548:	041a      	lsls	r2, r3, #16
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	611a      	str	r2, [r3, #16]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001564:	695a      	ldr	r2, [r3, #20]
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	4013      	ands	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d006      	beq.n	800157c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	4618      	mov	r0, r3
 8001578:	f003 f906 	bl	8004788 <HAL_GPIO_EXTI_Callback>
  }
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40010400 	.word	0x40010400

08001588 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e26c      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 8087 	beq.w	80016b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015a8:	4b92      	ldr	r3, [pc, #584]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	d00c      	beq.n	80015ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015b4:	4b8f      	ldr	r3, [pc, #572]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d112      	bne.n	80015e6 <HAL_RCC_OscConfig+0x5e>
 80015c0:	4b8c      	ldr	r3, [pc, #560]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015cc:	d10b      	bne.n	80015e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ce:	4b89      	ldr	r3, [pc, #548]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d06c      	beq.n	80016b4 <HAL_RCC_OscConfig+0x12c>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d168      	bne.n	80016b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e246      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x76>
 80015f0:	4b80      	ldr	r3, [pc, #512]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a7f      	ldr	r2, [pc, #508]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	e02e      	b.n	800165c <HAL_RCC_OscConfig+0xd4>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x98>
 8001606:	4b7b      	ldr	r3, [pc, #492]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a7a      	ldr	r2, [pc, #488]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800160c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b78      	ldr	r3, [pc, #480]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a77      	ldr	r2, [pc, #476]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e01d      	b.n	800165c <HAL_RCC_OscConfig+0xd4>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0xbc>
 800162a:	4b72      	ldr	r3, [pc, #456]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a71      	ldr	r2, [pc, #452]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	4b6f      	ldr	r3, [pc, #444]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a6e      	ldr	r2, [pc, #440]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800163c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e00b      	b.n	800165c <HAL_RCC_OscConfig+0xd4>
 8001644:	4b6b      	ldr	r3, [pc, #428]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a6a      	ldr	r2, [pc, #424]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800164a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b68      	ldr	r3, [pc, #416]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a67      	ldr	r2, [pc, #412]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d013      	beq.n	800168c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fa54 	bl	8000b10 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fa50 	bl	8000b10 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e1fa      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b5d      	ldr	r3, [pc, #372]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0xe4>
 800168a:	e014      	b.n	80016b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fa40 	bl	8000b10 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fa3c 	bl	8000b10 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e1e6      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a6:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x10c>
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d063      	beq.n	800178a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016c2:	4b4c      	ldr	r3, [pc, #304]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016ce:	4b49      	ldr	r3, [pc, #292]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d11c      	bne.n	8001714 <HAL_RCC_OscConfig+0x18c>
 80016da:	4b46      	ldr	r3, [pc, #280]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d116      	bne.n	8001714 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e6:	4b43      	ldr	r3, [pc, #268]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <HAL_RCC_OscConfig+0x176>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e1ba      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fe:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	4939      	ldr	r1, [pc, #228]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	e03a      	b.n	800178a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d020      	beq.n	800175e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800171c:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <HAL_RCC_OscConfig+0x270>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff f9f5 	bl	8000b10 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800172a:	f7ff f9f1 	bl	8000b10 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e19b      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173c:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4927      	ldr	r1, [pc, #156]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001758:	4313      	orrs	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
 800175c:	e015      	b.n	800178a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_RCC_OscConfig+0x270>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff f9d4 	bl	8000b10 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176c:	f7ff f9d0 	bl	8000b10 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e17a      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d03a      	beq.n	800180c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d019      	beq.n	80017d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <HAL_RCC_OscConfig+0x274>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7ff f9b4 	bl	8000b10 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ac:	f7ff f9b0 	bl	8000b10 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e15a      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f000 fb08 	bl	8001de0 <RCC_Delay>
 80017d0:	e01c      	b.n	800180c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_RCC_OscConfig+0x274>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d8:	f7ff f99a 	bl	8000b10 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017de:	e00f      	b.n	8001800 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e0:	f7ff f996 	bl	8000b10 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d908      	bls.n	8001800 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e140      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000
 80017f8:	42420000 	.word	0x42420000
 80017fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001800:	4b9e      	ldr	r3, [pc, #632]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1e9      	bne.n	80017e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80a6 	beq.w	8001966 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181e:	4b97      	ldr	r3, [pc, #604]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10d      	bne.n	8001846 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	4b94      	ldr	r3, [pc, #592]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4a93      	ldr	r2, [pc, #588]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001834:	61d3      	str	r3, [r2, #28]
 8001836:	4b91      	ldr	r3, [pc, #580]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001842:	2301      	movs	r3, #1
 8001844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001846:	4b8e      	ldr	r3, [pc, #568]	; (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d118      	bne.n	8001884 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001852:	4b8b      	ldr	r3, [pc, #556]	; (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a8a      	ldr	r2, [pc, #552]	; (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185e:	f7ff f957 	bl	8000b10 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001866:	f7ff f953 	bl	8000b10 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b64      	cmp	r3, #100	; 0x64
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e0fd      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	4b81      	ldr	r3, [pc, #516]	; (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x312>
 800188c:	4b7b      	ldr	r3, [pc, #492]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4a7a      	ldr	r2, [pc, #488]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6213      	str	r3, [r2, #32]
 8001898:	e02d      	b.n	80018f6 <HAL_RCC_OscConfig+0x36e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x334>
 80018a2:	4b76      	ldr	r3, [pc, #472]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4a75      	ldr	r2, [pc, #468]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	6213      	str	r3, [r2, #32]
 80018ae:	4b73      	ldr	r3, [pc, #460]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4a72      	ldr	r2, [pc, #456]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018b4:	f023 0304 	bic.w	r3, r3, #4
 80018b8:	6213      	str	r3, [r2, #32]
 80018ba:	e01c      	b.n	80018f6 <HAL_RCC_OscConfig+0x36e>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	d10c      	bne.n	80018de <HAL_RCC_OscConfig+0x356>
 80018c4:	4b6d      	ldr	r3, [pc, #436]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4a6c      	ldr	r2, [pc, #432]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	6213      	str	r3, [r2, #32]
 80018d0:	4b6a      	ldr	r3, [pc, #424]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4a69      	ldr	r2, [pc, #420]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6213      	str	r3, [r2, #32]
 80018dc:	e00b      	b.n	80018f6 <HAL_RCC_OscConfig+0x36e>
 80018de:	4b67      	ldr	r3, [pc, #412]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4a66      	ldr	r2, [pc, #408]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6213      	str	r3, [r2, #32]
 80018ea:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4a63      	ldr	r2, [pc, #396]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	f023 0304 	bic.w	r3, r3, #4
 80018f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d015      	beq.n	800192a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fe:	f7ff f907 	bl	8000b10 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001904:	e00a      	b.n	800191c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001906:	f7ff f903 	bl	8000b10 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	f241 3288 	movw	r2, #5000	; 0x1388
 8001914:	4293      	cmp	r3, r2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e0ab      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191c:	4b57      	ldr	r3, [pc, #348]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0ee      	beq.n	8001906 <HAL_RCC_OscConfig+0x37e>
 8001928:	e014      	b.n	8001954 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7ff f8f1 	bl	8000b10 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001930:	e00a      	b.n	8001948 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001932:	f7ff f8ed 	bl	8000b10 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001940:	4293      	cmp	r3, r2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e095      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001948:	4b4c      	ldr	r3, [pc, #304]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1ee      	bne.n	8001932 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001954:	7dfb      	ldrb	r3, [r7, #23]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d105      	bne.n	8001966 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195a:	4b48      	ldr	r3, [pc, #288]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	4a47      	ldr	r2, [pc, #284]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001964:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8081 	beq.w	8001a72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001970:	4b42      	ldr	r3, [pc, #264]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b08      	cmp	r3, #8
 800197a:	d061      	beq.n	8001a40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d146      	bne.n	8001a12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001984:	4b3f      	ldr	r3, [pc, #252]	; (8001a84 <HAL_RCC_OscConfig+0x4fc>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7ff f8c1 	bl	8000b10 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001992:	f7ff f8bd 	bl	8000b10 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e067      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a4:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f0      	bne.n	8001992 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b8:	d108      	bne.n	80019cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ba:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	492d      	ldr	r1, [pc, #180]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019cc:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a19      	ldr	r1, [r3, #32]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	430b      	orrs	r3, r1
 80019de:	4927      	ldr	r1, [pc, #156]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <HAL_RCC_OscConfig+0x4fc>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7ff f891 	bl	8000b10 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f2:	f7ff f88d 	bl	8000b10 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e037      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a04:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x46a>
 8001a10:	e02f      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <HAL_RCC_OscConfig+0x4fc>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff f87a 	bl	8000b10 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff f876 	bl	8000b10 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e020      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x498>
 8001a3e:	e018      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e013      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d106      	bne.n	8001a6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d001      	beq.n	8001a72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40007000 	.word	0x40007000
 8001a84:	42420060 	.word	0x42420060

08001a88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0d0      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a9c:	4b6a      	ldr	r3, [pc, #424]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d910      	bls.n	8001acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aaa:	4b67      	ldr	r3, [pc, #412]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 0207 	bic.w	r2, r3, #7
 8001ab2:	4965      	ldr	r1, [pc, #404]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aba:	4b63      	ldr	r3, [pc, #396]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0b8      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d020      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae4:	4b59      	ldr	r3, [pc, #356]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a58      	ldr	r2, [pc, #352]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001afc:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	4a52      	ldr	r2, [pc, #328]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b08:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	494d      	ldr	r1, [pc, #308]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d040      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d107      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d115      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e07f      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b46:	4b41      	ldr	r3, [pc, #260]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e073      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e06b      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b66:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f023 0203 	bic.w	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4936      	ldr	r1, [pc, #216]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b78:	f7fe ffca 	bl	8000b10 <HAL_GetTick>
 8001b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b80:	f7fe ffc6 	bl	8000b10 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e053      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 020c 	and.w	r2, r3, #12
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d1eb      	bne.n	8001b80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d210      	bcs.n	8001bd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 0207 	bic.w	r2, r3, #7
 8001bbe:	4922      	ldr	r1, [pc, #136]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e032      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d008      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	4916      	ldr	r1, [pc, #88]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d009      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	490e      	ldr	r1, [pc, #56]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c16:	f000 f821 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	490a      	ldr	r1, [pc, #40]	; (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c28:	5ccb      	ldrb	r3, [r1, r3]
 8001c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2e:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <HAL_RCC_ClockConfig+0x1cc>)
 8001c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_RCC_ClockConfig+0x1d0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fe6a 	bl	8000910 <HAL_InitTick>

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40022000 	.word	0x40022000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	080078f0 	.word	0x080078f0
 8001c54:	20000000 	.word	0x20000000
 8001c58:	20000004 	.word	0x20000004

08001c5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c5c:	b490      	push	{r4, r7}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c62:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c64:	1d3c      	adds	r4, r7, #4
 8001c66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c6c:	f240 2301 	movw	r3, #513	; 0x201
 8001c70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c86:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d002      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x40>
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d003      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x46>
 8001c9a:	e02d      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c9e:	623b      	str	r3, [r7, #32]
      break;
 8001ca0:	e02d      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	0c9b      	lsrs	r3, r3, #18
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cae:	4413      	add	r3, r2
 8001cb0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cb4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	0c5b      	lsrs	r3, r3, #17
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cce:	4413      	add	r3, r2
 8001cd0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cd4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cda:	fb02 f203 	mul.w	r2, r2, r3
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce6:	e004      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	623b      	str	r3, [r7, #32]
      break;
 8001cf6:	e002      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cfa:	623b      	str	r3, [r7, #32]
      break;
 8001cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3728      	adds	r7, #40	; 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc90      	pop	{r4, r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	080078d8 	.word	0x080078d8
 8001d10:	40021000 	.word	0x40021000
 8001d14:	007a1200 	.word	0x007a1200
 8001d18:	003d0900 	.word	0x003d0900

08001d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d20:	4b02      	ldr	r3, [pc, #8]	; (8001d2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	20000000 	.word	0x20000000

08001d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d34:	f7ff fff2 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	4903      	ldr	r1, [pc, #12]	; (8001d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d46:	5ccb      	ldrb	r3, [r1, r3]
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	08007900 	.word	0x08007900

08001d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d5c:	f7ff ffde 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d60:	4602      	mov	r2, r0
 8001d62:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	0adb      	lsrs	r3, r3, #11
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	4903      	ldr	r1, [pc, #12]	; (8001d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d6e:	5ccb      	ldrb	r3, [r1, r3]
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	08007900 	.word	0x08007900

08001d80 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_RCC_GetClockConfig+0x58>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0203 	and.w	r2, r3, #3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <HAL_RCC_GetClockConfig+0x58>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_GetClockConfig+0x58>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_RCC_GetClockConfig+0x58>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	08db      	lsrs	r3, r3, #3
 8001dba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_RCC_GetClockConfig+0x5c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0207 	and.w	r2, r3, #7
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40022000 	.word	0x40022000

08001de0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <RCC_Delay+0x34>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <RCC_Delay+0x38>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0a5b      	lsrs	r3, r3, #9
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dfc:	bf00      	nop
  }
  while (Delay --);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1e5a      	subs	r2, r3, #1
 8001e02:	60fa      	str	r2, [r7, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f9      	bne.n	8001dfc <RCC_Delay+0x1c>
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	20000000 	.word	0x20000000
 8001e18:	10624dd3 	.word	0x10624dd3

08001e1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e096      	b.n	8001f5c <HAL_SPI_Init+0x140>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d108      	bne.n	8001e48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e3e:	d009      	beq.n	8001e54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
 8001e46:	e005      	b.n	8001e54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d126      	bne.n	8001eb4 <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a3c      	ldr	r2, [pc, #240]	; (8001f64 <HAL_SPI_Init+0x148>)
 8001e72:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a3c      	ldr	r2, [pc, #240]	; (8001f68 <HAL_SPI_Init+0x14c>)
 8001e78:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a3b      	ldr	r2, [pc, #236]	; (8001f6c <HAL_SPI_Init+0x150>)
 8001e7e:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a3b      	ldr	r2, [pc, #236]	; (8001f70 <HAL_SPI_Init+0x154>)
 8001e84:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a3a      	ldr	r2, [pc, #232]	; (8001f74 <HAL_SPI_Init+0x158>)
 8001e8a:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a3a      	ldr	r2, [pc, #232]	; (8001f78 <HAL_SPI_Init+0x15c>)
 8001e90:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a39      	ldr	r2, [pc, #228]	; (8001f7c <HAL_SPI_Init+0x160>)
 8001e96:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a39      	ldr	r2, [pc, #228]	; (8001f80 <HAL_SPI_Init+0x164>)
 8001e9c:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a36      	ldr	r2, [pc, #216]	; (8001f84 <HAL_SPI_Init+0x168>)
 8001eaa:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f18:	ea42 0103 	orr.w	r1, r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	0c1a      	lsrs	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f002 0204 	and.w	r2, r2, #4
 8001f3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	69da      	ldr	r2, [r3, #28]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	08004e55 	.word	0x08004e55
 8001f68:	08004e05 	.word	0x08004e05
 8001f6c:	08004ea5 	.word	0x08004ea5
 8001f70:	08002e39 	.word	0x08002e39
 8001f74:	08002e4b 	.word	0x08002e4b
 8001f78:	08002e5d 	.word	0x08002e5d
 8001f7c:	08002e6f 	.word	0x08002e6f
 8001f80:	08002e81 	.word	0x08002e81
 8001f84:	08000731 	.word	0x08000731

08001f88 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	4613      	mov	r3, r2
 8001f96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_SPI_Transmit+0x22>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e126      	b.n	80021f8 <HAL_SPI_Transmit+0x270>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fb2:	f7fe fdad 	bl	8000b10 <HAL_GetTick>
 8001fb6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d002      	beq.n	8001fce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fcc:	e10b      	b.n	80021e6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <HAL_SPI_Transmit+0x52>
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d102      	bne.n	8001fe0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fde:	e102      	b.n	80021e6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	88fa      	ldrh	r2, [r7, #6]
 8001ff8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	88fa      	ldrh	r2, [r7, #6]
 8001ffe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002026:	d10f      	bne.n	8002048 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002036:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002046:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002052:	2b40      	cmp	r3, #64	; 0x40
 8002054:	d007      	beq.n	8002066 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002064:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800206e:	d14b      	bne.n	8002108 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <HAL_SPI_Transmit+0xf6>
 8002078:	8afb      	ldrh	r3, [r7, #22]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d13e      	bne.n	80020fc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	881a      	ldrh	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	1c9a      	adds	r2, r3, #2
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020a2:	e02b      	b.n	80020fc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d112      	bne.n	80020d8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	881a      	ldrh	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	1c9a      	adds	r2, r3, #2
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80020d6:	e011      	b.n	80020fc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020d8:	f7fe fd1a 	bl	8000b10 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d803      	bhi.n	80020f0 <HAL_SPI_Transmit+0x168>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ee:	d102      	bne.n	80020f6 <HAL_SPI_Transmit+0x16e>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020fa:	e074      	b.n	80021e6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002100:	b29b      	uxth	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1ce      	bne.n	80020a4 <HAL_SPI_Transmit+0x11c>
 8002106:	e04c      	b.n	80021a2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <HAL_SPI_Transmit+0x18e>
 8002110:	8afb      	ldrh	r3, [r7, #22]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d140      	bne.n	8002198 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	330c      	adds	r3, #12
 8002120:	7812      	ldrb	r2, [r2, #0]
 8002122:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800213c:	e02c      	b.n	8002198 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b02      	cmp	r3, #2
 800214a:	d113      	bne.n	8002174 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	330c      	adds	r3, #12
 8002156:	7812      	ldrb	r2, [r2, #0]
 8002158:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002168:	b29b      	uxth	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	86da      	strh	r2, [r3, #54]	; 0x36
 8002172:	e011      	b.n	8002198 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002174:	f7fe fccc 	bl	8000b10 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d803      	bhi.n	800218c <HAL_SPI_Transmit+0x204>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218a:	d102      	bne.n	8002192 <HAL_SPI_Transmit+0x20a>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d102      	bne.n	8002198 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002196:	e026      	b.n	80021e6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1cd      	bne.n	800213e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	6839      	ldr	r1, [r7, #0]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f001 f8a4 	bl	80032f4 <SPI_EndRxTxTransaction>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2220      	movs	r2, #32
 80021b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10a      	bne.n	80021d6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021c0:	2300      	movs	r3, #0
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	77fb      	strb	r3, [r7, #31]
 80021e2:	e000      	b.n	80021e6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80021e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af02      	add	r7, sp, #8
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	4613      	mov	r3, r2
 800220e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800221c:	d112      	bne.n	8002244 <HAL_SPI_Receive+0x44>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10e      	bne.n	8002244 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2204      	movs	r2, #4
 800222a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800222e:	88fa      	ldrh	r2, [r7, #6]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	4613      	mov	r3, r2
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f8f1 	bl	8002422 <HAL_SPI_TransmitReceive>
 8002240:	4603      	mov	r3, r0
 8002242:	e0ea      	b.n	800241a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_SPI_Receive+0x52>
 800224e:	2302      	movs	r3, #2
 8002250:	e0e3      	b.n	800241a <HAL_SPI_Receive+0x21a>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800225a:	f7fe fc59 	bl	8000b10 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b01      	cmp	r3, #1
 800226a:	d002      	beq.n	8002272 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800226c:	2302      	movs	r3, #2
 800226e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002270:	e0ca      	b.n	8002408 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <HAL_SPI_Receive+0x7e>
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d102      	bne.n	8002284 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002282:	e0c1      	b.n	8002408 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2204      	movs	r2, #4
 8002288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	88fa      	ldrh	r2, [r7, #6]
 800229c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	88fa      	ldrh	r2, [r7, #6]
 80022a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ca:	d10f      	bne.n	80022ec <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022ea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f6:	2b40      	cmp	r3, #64	; 0x40
 80022f8:	d007      	beq.n	800230a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002308:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d162      	bne.n	80023d8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002312:	e02e      	b.n	8002372 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b01      	cmp	r3, #1
 8002320:	d115      	bne.n	800234e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f103 020c 	add.w	r2, r3, #12
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	7812      	ldrb	r2, [r2, #0]
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002342:	b29b      	uxth	r3, r3
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800234c:	e011      	b.n	8002372 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800234e:	f7fe fbdf 	bl	8000b10 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d803      	bhi.n	8002366 <HAL_SPI_Receive+0x166>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	d102      	bne.n	800236c <HAL_SPI_Receive+0x16c>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d102      	bne.n	8002372 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002370:	e04a      	b.n	8002408 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002376:	b29b      	uxth	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1cb      	bne.n	8002314 <HAL_SPI_Receive+0x114>
 800237c:	e031      	b.n	80023e2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b01      	cmp	r3, #1
 800238a:	d113      	bne.n	80023b4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	b292      	uxth	r2, r2
 8002398:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239e:	1c9a      	adds	r2, r3, #2
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023b2:	e011      	b.n	80023d8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023b4:	f7fe fbac 	bl	8000b10 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d803      	bhi.n	80023cc <HAL_SPI_Receive+0x1cc>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ca:	d102      	bne.n	80023d2 <HAL_SPI_Receive+0x1d2>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d102      	bne.n	80023d8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80023d6:	e017      	b.n	8002408 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1cd      	bne.n	800237e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	6839      	ldr	r1, [r7, #0]
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 ff32 	bl	8003250 <SPI_EndRxTransaction>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2220      	movs	r2, #32
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	75fb      	strb	r3, [r7, #23]
 8002404:	e000      	b.n	8002408 <HAL_SPI_Receive+0x208>
  }

error :
 8002406:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002418:	7dfb      	ldrb	r3, [r7, #23]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b08c      	sub	sp, #48	; 0x30
 8002426:	af00      	add	r7, sp, #0
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002430:	2301      	movs	r3, #1
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_SPI_TransmitReceive+0x26>
 8002444:	2302      	movs	r3, #2
 8002446:	e18a      	b.n	800275e <HAL_SPI_TransmitReceive+0x33c>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002450:	f7fe fb5e 	bl	8000b10 <HAL_GetTick>
 8002454:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800245c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800246a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800246e:	2b01      	cmp	r3, #1
 8002470:	d00f      	beq.n	8002492 <HAL_SPI_TransmitReceive+0x70>
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002478:	d107      	bne.n	800248a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d103      	bne.n	800248a <HAL_SPI_TransmitReceive+0x68>
 8002482:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002486:	2b04      	cmp	r3, #4
 8002488:	d003      	beq.n	8002492 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800248a:	2302      	movs	r3, #2
 800248c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002490:	e15b      	b.n	800274a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_SPI_TransmitReceive+0x82>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <HAL_SPI_TransmitReceive+0x82>
 800249e:	887b      	ldrh	r3, [r7, #2]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d103      	bne.n	80024ac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80024aa:	e14e      	b.n	800274a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d003      	beq.n	80024c0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2205      	movs	r2, #5
 80024bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	887a      	ldrh	r2, [r7, #2]
 80024d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	887a      	ldrh	r2, [r7, #2]
 80024e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d007      	beq.n	8002514 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002512:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800251c:	d178      	bne.n	8002610 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_SPI_TransmitReceive+0x10a>
 8002526:	8b7b      	ldrh	r3, [r7, #26]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d166      	bne.n	80025fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	881a      	ldrh	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	1c9a      	adds	r2, r3, #2
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002550:	e053      	b.n	80025fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b02      	cmp	r3, #2
 800255e:	d11b      	bne.n	8002598 <HAL_SPI_TransmitReceive+0x176>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d016      	beq.n	8002598 <HAL_SPI_TransmitReceive+0x176>
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	2b01      	cmp	r3, #1
 800256e:	d113      	bne.n	8002598 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	881a      	ldrh	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	1c9a      	adds	r2, r3, #2
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800258a:	b29b      	uxth	r3, r3
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d119      	bne.n	80025da <HAL_SPI_TransmitReceive+0x1b8>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d014      	beq.n	80025da <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ba:	b292      	uxth	r2, r2
 80025bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c2:	1c9a      	adds	r2, r3, #2
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025d6:	2301      	movs	r3, #1
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025da:	f7fe fa99 	bl	8000b10 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d807      	bhi.n	80025fa <HAL_SPI_TransmitReceive+0x1d8>
 80025ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f0:	d003      	beq.n	80025fa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025f8:	e0a7      	b.n	800274a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1a6      	bne.n	8002552 <HAL_SPI_TransmitReceive+0x130>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1a1      	bne.n	8002552 <HAL_SPI_TransmitReceive+0x130>
 800260e:	e07c      	b.n	800270a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <HAL_SPI_TransmitReceive+0x1fc>
 8002618:	8b7b      	ldrh	r3, [r7, #26]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d16b      	bne.n	80026f6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	330c      	adds	r3, #12
 8002628:	7812      	ldrb	r2, [r2, #0]
 800262a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002644:	e057      	b.n	80026f6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b02      	cmp	r3, #2
 8002652:	d11c      	bne.n	800268e <HAL_SPI_TransmitReceive+0x26c>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d017      	beq.n	800268e <HAL_SPI_TransmitReceive+0x26c>
 800265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002660:	2b01      	cmp	r3, #1
 8002662:	d114      	bne.n	800268e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	330c      	adds	r3, #12
 800266e:	7812      	ldrb	r2, [r2, #0]
 8002670:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d119      	bne.n	80026d0 <HAL_SPI_TransmitReceive+0x2ae>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d014      	beq.n	80026d0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026cc:	2301      	movs	r3, #1
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026d0:	f7fe fa1e 	bl	8000b10 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026dc:	429a      	cmp	r2, r3
 80026de:	d803      	bhi.n	80026e8 <HAL_SPI_TransmitReceive+0x2c6>
 80026e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e6:	d102      	bne.n	80026ee <HAL_SPI_TransmitReceive+0x2cc>
 80026e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d103      	bne.n	80026f6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026f4:	e029      	b.n	800274a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1a2      	bne.n	8002646 <HAL_SPI_TransmitReceive+0x224>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d19d      	bne.n	8002646 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800270a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fdf0 	bl	80032f4 <SPI_EndRxTxTransaction>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d006      	beq.n	8002728 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002726:	e010      	b.n	800274a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10b      	bne.n	8002748 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	e000      	b.n	800274a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002748:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800275a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800275e:	4618      	mov	r0, r3
 8002760:	3730      	adds	r7, #48	; 0x30
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	4613      	mov	r3, r2
 8002774:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_SPI_Transmit_DMA+0x20>
 8002784:	2302      	movs	r3, #2
 8002786:	e09b      	b.n	80028c0 <HAL_SPI_Transmit_DMA+0x158>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d002      	beq.n	80027a2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800279c:	2302      	movs	r3, #2
 800279e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027a0:	e089      	b.n	80028b6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <HAL_SPI_Transmit_DMA+0x46>
 80027a8:	88fb      	ldrh	r3, [r7, #6]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d102      	bne.n	80027b4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027b2:	e080      	b.n	80028b6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2203      	movs	r2, #3
 80027b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	88fa      	ldrh	r2, [r7, #6]
 80027cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	88fa      	ldrh	r2, [r7, #6]
 80027d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027fa:	d10f      	bne.n	800281c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800280a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800281a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002820:	4a29      	ldr	r2, [pc, #164]	; (80028c8 <HAL_SPI_Transmit_DMA+0x160>)
 8002822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002828:	4a28      	ldr	r2, [pc, #160]	; (80028cc <HAL_SPI_Transmit_DMA+0x164>)
 800282a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002830:	4a27      	ldr	r2, [pc, #156]	; (80028d0 <HAL_SPI_Transmit_DMA+0x168>)
 8002832:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002838:	2200      	movs	r2, #0
 800283a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	4619      	mov	r1, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	330c      	adds	r3, #12
 800284c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002852:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002854:	f7fe faa0 	bl	8000d98 <HAL_DMA_Start_IT>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00c      	beq.n	8002878 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002862:	f043 0210 	orr.w	r2, r3, #16
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002876:	e01e      	b.n	80028b6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002882:	2b40      	cmp	r3, #64	; 0x40
 8002884:	d007      	beq.n	8002896 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002894:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0220 	orr.w	r2, r2, #32
 80028a4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0202 	orr.w	r2, r2, #2
 80028b4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028be:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	08003079 	.word	0x08003079
 80028cc:	08002e93 	.word	0x08002e93
 80028d0:	080030d3 	.word	0x080030d3

080028d4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	4613      	mov	r3, r2
 80028e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d110      	bne.n	8002910 <HAL_SPI_Receive_DMA+0x3c>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028f6:	d10b      	bne.n	8002910 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2204      	movs	r2, #4
 80028fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f8ac 	bl	8002a64 <HAL_SPI_TransmitReceive_DMA>
 800290c:	4603      	mov	r3, r0
 800290e:	e09f      	b.n	8002a50 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_SPI_Receive_DMA+0x4a>
 800291a:	2302      	movs	r3, #2
 800291c:	e098      	b.n	8002a50 <HAL_SPI_Receive_DMA+0x17c>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d002      	beq.n	8002938 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8002932:	2302      	movs	r3, #2
 8002934:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002936:	e086      	b.n	8002a46 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <HAL_SPI_Receive_DMA+0x70>
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d102      	bne.n	800294a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002948:	e07d      	b.n	8002a46 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2204      	movs	r2, #4
 800294e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	88fa      	ldrh	r2, [r7, #6]
 8002962:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	88fa      	ldrh	r2, [r7, #6]
 8002968:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800298a:	d10f      	bne.n	80029ac <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800299a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b0:	4a29      	ldr	r2, [pc, #164]	; (8002a58 <HAL_SPI_Receive_DMA+0x184>)
 80029b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b8:	4a28      	ldr	r2, [pc, #160]	; (8002a5c <HAL_SPI_Receive_DMA+0x188>)
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c0:	4a27      	ldr	r2, [pc, #156]	; (8002a60 <HAL_SPI_Receive_DMA+0x18c>)
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c8:	2200      	movs	r2, #0
 80029ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	330c      	adds	r3, #12
 80029d6:	4619      	mov	r1, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80029e4:	f7fe f9d8 	bl	8000d98 <HAL_DMA_Start_IT>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00c      	beq.n	8002a08 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f2:	f043 0210 	orr.w	r2, r3, #16
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002a06:	e01e      	b.n	8002a46 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a12:	2b40      	cmp	r3, #64	; 0x40
 8002a14:	d007      	beq.n	8002a26 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a24:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0220 	orr.w	r2, r2, #32
 8002a34:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 0201 	orr.w	r2, r2, #1
 8002a44:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	08003097 	.word	0x08003097
 8002a5c:	08002f3d 	.word	0x08002f3d
 8002a60:	080030d3 	.word	0x080030d3

08002a64 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_SPI_TransmitReceive_DMA+0x20>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e0e3      	b.n	8002c4c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a92:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002a9a:	7dbb      	ldrb	r3, [r7, #22]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d00d      	beq.n	8002abc <HAL_SPI_TransmitReceive_DMA+0x58>
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aa6:	d106      	bne.n	8002ab6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <HAL_SPI_TransmitReceive_DMA+0x52>
 8002ab0:	7dbb      	ldrb	r3, [r7, #22]
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d002      	beq.n	8002abc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002aba:	e0c2      	b.n	8002c42 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002ac8:	887b      	ldrh	r3, [r7, #2]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d102      	bne.n	8002ad4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ad2:	e0b6      	b.n	8002c42 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d003      	beq.n	8002ae8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2205      	movs	r2, #5
 8002ae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	887a      	ldrh	r2, [r7, #2]
 8002af8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	887a      	ldrh	r2, [r7, #2]
 8002afe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	887a      	ldrh	r2, [r7, #2]
 8002b0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	887a      	ldrh	r2, [r7, #2]
 8002b10:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d108      	bne.n	8002b3c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2e:	4a49      	ldr	r2, [pc, #292]	; (8002c54 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002b30:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b36:	4a48      	ldr	r2, [pc, #288]	; (8002c58 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8002b38:	629a      	str	r2, [r3, #40]	; 0x28
 8002b3a:	e007      	b.n	8002b4c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b40:	4a46      	ldr	r2, [pc, #280]	; (8002c5c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8002b42:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b48:	4a45      	ldr	r2, [pc, #276]	; (8002c60 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8002b4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b50:	4a44      	ldr	r2, [pc, #272]	; (8002c64 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b58:	2200      	movs	r2, #0
 8002b5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	330c      	adds	r3, #12
 8002b66:	4619      	mov	r1, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b72:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002b74:	f7fe f910 	bl	8000d98 <HAL_DMA_Start_IT>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00c      	beq.n	8002b98 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b82:	f043 0210 	orr.w	r2, r3, #16
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002b96:	e054      	b.n	8002c42 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bac:	2200      	movs	r2, #0
 8002bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	330c      	adds	r3, #12
 8002bd8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bde:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002be0:	f7fe f8da 	bl	8000d98 <HAL_DMA_Start_IT>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00c      	beq.n	8002c04 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bee:	f043 0210 	orr.w	r2, r3, #16
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002c02:	e01e      	b.n	8002c42 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d007      	beq.n	8002c22 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c20:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0220 	orr.w	r2, r2, #32
 8002c30:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0202 	orr.w	r2, r2, #2
 8002c40:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	08003097 	.word	0x08003097
 8002c58:	08002f3d 	.word	0x08002f3d
 8002c5c:	080030b5 	.word	0x080030b5
 8002c60:	08002fe7 	.word	0x08002fe7
 8002c64:	080030d3 	.word	0x080030d3

08002c68 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	099b      	lsrs	r3, r3, #6
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10f      	bne.n	8002cac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	099b      	lsrs	r3, r3, #6
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d004      	beq.n	8002cac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	4798      	blx	r3
    return;
 8002caa:	e0bf      	b.n	8002e2c <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	085b      	lsrs	r3, r3, #1
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <HAL_SPI_IRQHandler+0x66>
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	09db      	lsrs	r3, r3, #7
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d004      	beq.n	8002cce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4798      	blx	r3
    return;
 8002ccc:	e0ae      	b.n	8002e2c <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <HAL_SPI_IRQHandler+0x80>
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80a2 	beq.w	8002e2c <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 809b 	beq.w	8002e2c <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d023      	beq.n	8002d4a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	d011      	beq.n	8002d32 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	f043 0204 	orr.w	r2, r3, #4
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	e00b      	b.n	8002d4a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]
        return;
 8002d48:	e070      	b.n	8002e2c <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d014      	beq.n	8002d80 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	f043 0201 	orr.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d050      	beq.n	8002e2a <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d96:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d104      	bne.n	8002db4 <HAL_SPI_IRQHandler+0x14c>
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d034      	beq.n	8002e1e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0203 	bic.w	r2, r2, #3
 8002dc2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d011      	beq.n	8002df0 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd0:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <HAL_SPI_IRQHandler+0x1cc>)
 8002dd2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe f877 	bl	8000ecc <HAL_DMA_Abort_IT>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d017      	beq.n	8002e28 <HAL_SPI_IRQHandler+0x1c0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfc:	4a0d      	ldr	r2, [pc, #52]	; (8002e34 <HAL_SPI_IRQHandler+0x1cc>)
 8002dfe:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe f861 	bl	8000ecc <HAL_DMA_Abort_IT>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00b      	beq.n	8002e28 <HAL_SPI_IRQHandler+0x1c0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002e1c:	e004      	b.n	8002e28 <HAL_SPI_IRQHandler+0x1c0>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002e26:	e000      	b.n	8002e2a <HAL_SPI_IRQHandler+0x1c2>
        if (hspi->hdmatx != NULL)
 8002e28:	bf00      	nop
    return;
 8002e2a:	bf00      	nop
  }
}
 8002e2c:	3720      	adds	r7, #32
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	08003115 	.word	0x08003115

08002e38 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b086      	sub	sp, #24
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ea0:	f7fd fe36 	bl	8000b10 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d03c      	beq.n	8002f2e <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0220 	bic.w	r2, r2, #32
 8002ec2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0202 	bic.w	r2, r2, #2
 8002ed2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	2164      	movs	r1, #100	; 0x64
 8002ed8:	6978      	ldr	r0, [r7, #20]
 8002eda:	f000 fa0b 	bl	80032f4 <SPI_EndRxTxTransaction>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	f043 0220 	orr.w	r2, r3, #32
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2200      	movs	r2, #0
 8002f12:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d004      	beq.n	8002f2e <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	6978      	ldr	r0, [r7, #20]
 8002f2a:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002f2c:	e003      	b.n	8002f36 <SPI_DMATransmitCplt+0xa4>
    }
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	6978      	ldr	r0, [r7, #20]
 8002f34:	4798      	blx	r3
#else
  HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f4a:	f7fd fde1 	bl	8000b10 <HAL_GetTick>
 8002f4e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	d03c      	beq.n	8002fd8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0220 	bic.w	r2, r2, #32
 8002f6c:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <SPI_DMAReceiveCplt+0x56>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f7e:	d108      	bne.n	8002f92 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0203 	bic.w	r2, r2, #3
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	e007      	b.n	8002fa2 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	2164      	movs	r1, #100	; 0x64
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f952 	bl	8003250 <SPI_EndRxTransaction>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d004      	beq.n	8002fd8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002fd6:	e003      	b.n	8002fe0 <SPI_DMAReceiveCplt+0xa4>
    }
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	4798      	blx	r3
#else
  HAL_SPI_RxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ff4:	f7fd fd8c 	bl	8000b10 <HAL_GetTick>
 8002ff8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	2b20      	cmp	r3, #32
 8003006:	d030      	beq.n	800306a <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0220 	bic.w	r2, r2, #32
 8003016:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	2164      	movs	r1, #100	; 0x64
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f969 	bl	80032f4 <SPI_EndRxTxTransaction>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0203 	bic.w	r2, r2, #3
 8003042:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	2b00      	cmp	r3, #0
 800305e:	d004      	beq.n	800306a <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003068:	e003      	b.n	8003072 <SPI_DMATransmitReceiveCplt+0x8c>
    }
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	4798      	blx	r3
#else
  HAL_SPI_TxRxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	4798      	blx	r3
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800308e:	bf00      	nop
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030ac:	bf00      	nop
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	4798      	blx	r3
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030ca:	bf00      	nop
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0203 	bic.w	r2, r2, #3
 80030ee:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f4:	f043 0210 	orr.w	r2, r3, #16
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800310c:	bf00      	nop
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003136:	bf00      	nop
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003150:	f7fd fcde 	bl	8000b10 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	4413      	add	r3, r2
 800315e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003160:	f7fd fcd6 	bl	8000b10 <HAL_GetTick>
 8003164:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003166:	4b39      	ldr	r3, [pc, #228]	; (800324c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	015b      	lsls	r3, r3, #5
 800316c:	0d1b      	lsrs	r3, r3, #20
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	fb02 f303 	mul.w	r3, r2, r3
 8003174:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003176:	e054      	b.n	8003222 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317e:	d050      	beq.n	8003222 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003180:	f7fd fcc6 	bl	8000b10 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	429a      	cmp	r2, r3
 800318e:	d902      	bls.n	8003196 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d13d      	bne.n	8003212 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ae:	d111      	bne.n	80031d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031b8:	d004      	beq.n	80031c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c2:	d107      	bne.n	80031d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031dc:	d10f      	bne.n	80031fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e017      	b.n	8003242 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	3b01      	subs	r3, #1
 8003220:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4013      	ands	r3, r2
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	429a      	cmp	r2, r3
 8003230:	bf0c      	ite	eq
 8003232:	2301      	moveq	r3, #1
 8003234:	2300      	movne	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	429a      	cmp	r2, r3
 800323e:	d19b      	bne.n	8003178 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000000 	.word	0x20000000

08003250 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af02      	add	r7, sp, #8
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003264:	d111      	bne.n	800328a <SPI_EndRxTransaction+0x3a>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800326e:	d004      	beq.n	800327a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003278:	d107      	bne.n	800328a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003288:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003292:	d117      	bne.n	80032c4 <SPI_EndRxTransaction+0x74>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329c:	d112      	bne.n	80032c4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2200      	movs	r2, #0
 80032a6:	2101      	movs	r1, #1
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f7ff ff49 	bl	8003140 <SPI_WaitFlagStateUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01a      	beq.n	80032ea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	f043 0220 	orr.w	r2, r3, #32
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e013      	b.n	80032ec <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2200      	movs	r2, #0
 80032cc:	2180      	movs	r1, #128	; 0x80
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f7ff ff36 	bl	8003140 <SPI_WaitFlagStateUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d007      	beq.n	80032ea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	f043 0220 	orr.w	r2, r3, #32
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e000      	b.n	80032ec <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2200      	movs	r2, #0
 8003308:	2180      	movs	r1, #128	; 0x80
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f7ff ff18 	bl	8003140 <SPI_WaitFlagStateUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331a:	f043 0220 	orr.w	r2, r3, #32
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e000      	b.n	8003328 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e041      	b.n	80033c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f839 	bl	80033ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	4619      	mov	r1, r3
 800336e:	4610      	mov	r0, r2
 8003370:	f000 f9b4 	bl	80036dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr

080033e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d001      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e03a      	b.n	800346e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a18      	ldr	r2, [pc, #96]	; (8003478 <HAL_TIM_Base_Start_IT+0x98>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00e      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x58>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003422:	d009      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x58>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a14      	ldr	r2, [pc, #80]	; (800347c <HAL_TIM_Base_Start_IT+0x9c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d004      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x58>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a13      	ldr	r2, [pc, #76]	; (8003480 <HAL_TIM_Base_Start_IT+0xa0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d111      	bne.n	800345c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b06      	cmp	r3, #6
 8003448:	d010      	beq.n	800346c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0201 	orr.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345a:	e007      	b.n	800346c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr
 8003478:	40012c00 	.word	0x40012c00
 800347c:	40000400 	.word	0x40000400
 8003480:	40000800 	.word	0x40000800

08003484 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b02      	cmp	r3, #2
 8003498:	d122      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d11b      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0202 	mvn.w	r2, #2
 80034b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f8ed 	bl	80036a6 <HAL_TIM_IC_CaptureCallback>
 80034cc:	e005      	b.n	80034da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f8e0 	bl	8003694 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f8ef 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d122      	bne.n	8003534 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d11b      	bne.n	8003534 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0204 	mvn.w	r2, #4
 8003504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2202      	movs	r2, #2
 800350a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f8c3 	bl	80036a6 <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f8b6 	bl	8003694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f8c5 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b08      	cmp	r3, #8
 8003540:	d122      	bne.n	8003588 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b08      	cmp	r3, #8
 800354e:	d11b      	bne.n	8003588 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0208 	mvn.w	r2, #8
 8003558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2204      	movs	r2, #4
 800355e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f899 	bl	80036a6 <HAL_TIM_IC_CaptureCallback>
 8003574:	e005      	b.n	8003582 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f88c 	bl	8003694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f89b 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b10      	cmp	r3, #16
 8003594:	d122      	bne.n	80035dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	2b10      	cmp	r3, #16
 80035a2:	d11b      	bne.n	80035dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0210 	mvn.w	r2, #16
 80035ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2208      	movs	r2, #8
 80035b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f86f 	bl	80036a6 <HAL_TIM_IC_CaptureCallback>
 80035c8:	e005      	b.n	80035d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f862 	bl	8003694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f871 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d10e      	bne.n	8003608 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d107      	bne.n	8003608 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0201 	mvn.w	r2, #1
 8003600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fd f844 	bl	8000690 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003612:	2b80      	cmp	r3, #128	; 0x80
 8003614:	d10e      	bne.n	8003634 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003620:	2b80      	cmp	r3, #128	; 0x80
 8003622:	d107      	bne.n	8003634 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800362c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f8bf 	bl	80037b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d10e      	bne.n	8003660 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364c:	2b40      	cmp	r3, #64	; 0x40
 800364e:	d107      	bne.n	8003660 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f835 	bl	80036ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b20      	cmp	r3, #32
 800366c:	d10e      	bne.n	800368c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b20      	cmp	r3, #32
 800367a:	d107      	bne.n	800368c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0220 	mvn.w	r2, #32
 8003684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f88a 	bl	80037a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr

080036a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr

080036ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr

080036dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a29      	ldr	r2, [pc, #164]	; (8003794 <TIM_Base_SetConfig+0xb8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00b      	beq.n	800370c <TIM_Base_SetConfig+0x30>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fa:	d007      	beq.n	800370c <TIM_Base_SetConfig+0x30>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a26      	ldr	r2, [pc, #152]	; (8003798 <TIM_Base_SetConfig+0xbc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d003      	beq.n	800370c <TIM_Base_SetConfig+0x30>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a25      	ldr	r2, [pc, #148]	; (800379c <TIM_Base_SetConfig+0xc0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d108      	bne.n	800371e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <TIM_Base_SetConfig+0xb8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00b      	beq.n	800373e <TIM_Base_SetConfig+0x62>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372c:	d007      	beq.n	800373e <TIM_Base_SetConfig+0x62>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a19      	ldr	r2, [pc, #100]	; (8003798 <TIM_Base_SetConfig+0xbc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d003      	beq.n	800373e <TIM_Base_SetConfig+0x62>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a18      	ldr	r2, [pc, #96]	; (800379c <TIM_Base_SetConfig+0xc0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d108      	bne.n	8003750 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a07      	ldr	r2, [pc, #28]	; (8003794 <TIM_Base_SetConfig+0xb8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d103      	bne.n	8003784 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	615a      	str	r2, [r3, #20]
}
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	40012c00 	.word	0x40012c00
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800

080037a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr

080037b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr

080037c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e03f      	b.n	8003856 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd f84a 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2224      	movs	r2, #36	; 0x24
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fb37 	bl	8003e7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800381c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695a      	ldr	r2, [r3, #20]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800382c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800383c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10d      	bne.n	80038b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_UART_IRQHandler+0x52>
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fa3d 	bl	8003d2a <UART_Receive_IT>
      return;
 80038b0:	e17b      	b.n	8003baa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80b1 	beq.w	8003a1c <HAL_UART_IRQHandler+0x1bc>
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d105      	bne.n	80038d0 <HAL_UART_IRQHandler+0x70>
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 80a6 	beq.w	8003a1c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_UART_IRQHandler+0x90>
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	f043 0201 	orr.w	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <HAL_UART_IRQHandler+0xb0>
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f043 0202 	orr.w	r2, r3, #2
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_UART_IRQHandler+0xd0>
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f043 0204 	orr.w	r2, r3, #4
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00f      	beq.n	800395a <HAL_UART_IRQHandler+0xfa>
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b00      	cmp	r3, #0
 8003942:	d104      	bne.n	800394e <HAL_UART_IRQHandler+0xee>
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f043 0208 	orr.w	r2, r3, #8
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 811e 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <HAL_UART_IRQHandler+0x11e>
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f9d6 	bl	8003d2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf14      	ite	ne
 800398c:	2301      	movne	r3, #1
 800398e:	2300      	moveq	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d102      	bne.n	80039a6 <HAL_UART_IRQHandler+0x146>
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d031      	beq.n	8003a0a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f918 	bl	8003bdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d023      	beq.n	8003a02 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695a      	ldr	r2, [r3, #20]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d013      	beq.n	80039fa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	4a76      	ldr	r2, [pc, #472]	; (8003bb0 <HAL_UART_IRQHandler+0x350>)
 80039d8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd fa74 	bl	8000ecc <HAL_DMA_Abort_IT>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d016      	beq.n	8003a18 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039f4:	4610      	mov	r0, r2
 80039f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f8:	e00e      	b.n	8003a18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f8da 	bl	8003bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a00:	e00a      	b.n	8003a18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f8d6 	bl	8003bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a08:	e006      	b.n	8003a18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f8d2 	bl	8003bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a16:	e0c3      	b.n	8003ba0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	bf00      	nop
    return;
 8003a1a:	e0c1      	b.n	8003ba0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	f040 80a1 	bne.w	8003b68 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 809b 	beq.w	8003b68 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8095 	beq.w	8003b68 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d04e      	beq.n	8003b00 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003a6c:	8a3b      	ldrh	r3, [r7, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 8098 	beq.w	8003ba4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a78:	8a3a      	ldrh	r2, [r7, #16]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	f080 8092 	bcs.w	8003ba4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8a3a      	ldrh	r2, [r7, #16]
 8003a84:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d02b      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a9e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695a      	ldr	r2, [r3, #20]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0201 	bic.w	r2, r2, #1
 8003aae:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695a      	ldr	r2, [r3, #20]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003abe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0210 	bic.w	r2, r2, #16
 8003adc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fd f9b7 	bl	8000e56 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	4619      	mov	r1, r3
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f864 	bl	8003bc6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003afe:	e051      	b.n	8003ba4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d047      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003b18:	8a7b      	ldrh	r3, [r7, #18]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d044      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b2c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0201 	bic.w	r2, r2, #1
 8003b3c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0210 	bic.w	r2, r2, #16
 8003b5a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b5c:	8a7b      	ldrh	r3, [r7, #18]
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f830 	bl	8003bc6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b66:	e01f      	b.n	8003ba8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <HAL_UART_IRQHandler+0x324>
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f86d 	bl	8003c5c <UART_Transmit_IT>
    return;
 8003b82:	e012      	b.n	8003baa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00d      	beq.n	8003baa <HAL_UART_IRQHandler+0x34a>
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f8ae 	bl	8003cfa <UART_EndTransmit_IT>
    return;
 8003b9e:	e004      	b.n	8003baa <HAL_UART_IRQHandler+0x34a>
    return;
 8003ba0:	bf00      	nop
 8003ba2:	e002      	b.n	8003baa <HAL_UART_IRQHandler+0x34a>
      return;
 8003ba4:	bf00      	nop
 8003ba6:	e000      	b.n	8003baa <HAL_UART_IRQHandler+0x34a>
      return;
 8003ba8:	bf00      	nop
  }
}
 8003baa:	3728      	adds	r7, #40	; 0x28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	08003c35 	.word	0x08003c35

08003bb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bf2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0201 	bic.w	r2, r2, #1
 8003c02:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d107      	bne.n	8003c1c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0210 	bic.w	r2, r2, #16
 8003c1a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f7ff ffb0 	bl	8003bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c54:	bf00      	nop
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b21      	cmp	r3, #33	; 0x21
 8003c6e:	d13e      	bne.n	8003cee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c78:	d114      	bne.n	8003ca4 <UART_Transmit_IT+0x48>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d110      	bne.n	8003ca4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	1c9a      	adds	r2, r3, #2
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	621a      	str	r2, [r3, #32]
 8003ca2:	e008      	b.n	8003cb6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	1c59      	adds	r1, r3, #1
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6211      	str	r1, [r2, #32]
 8003cae:	781a      	ldrb	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10f      	bne.n	8003cea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cd8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e000      	b.n	8003cf0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
  }
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr

08003cfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f001 f930 	bl	8004f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b086      	sub	sp, #24
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b22      	cmp	r3, #34	; 0x22
 8003d3c:	f040 8099 	bne.w	8003e72 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d48:	d117      	bne.n	8003d7a <UART_Receive_IT+0x50>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d113      	bne.n	8003d7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	1c9a      	adds	r2, r3, #2
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28
 8003d78:	e026      	b.n	8003dc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8c:	d007      	beq.n	8003d9e <UART_Receive_IT+0x74>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <UART_Receive_IT+0x82>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	e008      	b.n	8003dbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d148      	bne.n	8003e6e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0220 	bic.w	r2, r2, #32
 8003dea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0201 	bic.w	r2, r2, #1
 8003e0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d123      	bne.n	8003e64 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0210 	bic.w	r2, r2, #16
 8003e30:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b10      	cmp	r3, #16
 8003e3e:	d10a      	bne.n	8003e56 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff feb2 	bl	8003bc6 <HAL_UARTEx_RxEventCallback>
 8003e62:	e002      	b.n	8003e6a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f001 f863 	bl	8004f30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e002      	b.n	8003e74 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	e000      	b.n	8003e74 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003e72:	2302      	movs	r3, #2
  }
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003eb6:	f023 030c 	bic.w	r3, r3, #12
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a2c      	ldr	r2, [pc, #176]	; (8003f90 <UART_SetConfig+0x114>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d103      	bne.n	8003eec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ee4:	f7fd ff38 	bl	8001d58 <HAL_RCC_GetPCLK2Freq>
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	e002      	b.n	8003ef2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003eec:	f7fd ff20 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 8003ef0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	009a      	lsls	r2, r3, #2
 8003efc:	441a      	add	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	4a22      	ldr	r2, [pc, #136]	; (8003f94 <UART_SetConfig+0x118>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	0119      	lsls	r1, r3, #4
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009a      	lsls	r2, r3, #2
 8003f1c:	441a      	add	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f28:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <UART_SetConfig+0x118>)
 8003f2a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	2064      	movs	r0, #100	; 0x64
 8003f32:	fb00 f303 	mul.w	r3, r0, r3
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	3332      	adds	r3, #50	; 0x32
 8003f3c:	4a15      	ldr	r2, [pc, #84]	; (8003f94 <UART_SetConfig+0x118>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f48:	4419      	add	r1, r3
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	009a      	lsls	r2, r3, #2
 8003f54:	441a      	add	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f60:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <UART_SetConfig+0x118>)
 8003f62:	fba3 0302 	umull	r0, r3, r3, r2
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	2064      	movs	r0, #100	; 0x64
 8003f6a:	fb00 f303 	mul.w	r3, r0, r3
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	3332      	adds	r3, #50	; 0x32
 8003f74:	4a07      	ldr	r2, [pc, #28]	; (8003f94 <UART_SetConfig+0x118>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	f003 020f 	and.w	r2, r3, #15
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	440a      	add	r2, r1
 8003f86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40013800 	.word	0x40013800
 8003f94:	51eb851f 	.word	0x51eb851f

08003f98 <adxl345_init>:
  High-level functions
----------------------------------------------------------------------*/

/* Init the device*/
adxl345_status adxl345_init(adxl345_handle_t* hadxl)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	/* register callback for check SPI configuration */
	spi_freertos_set_check_config_callback(&(hadxl->spi),
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	495e      	ldr	r1, [pc, #376]	; (800411c <adxl345_init+0x184>)
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fce9 	bl	800497c <spi_freertos_set_check_config_callback>
		adxl345_spi_check_config);
	
	uint8_t reg;
	adxl345_status ret = ADXL345_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	73fb      	strb	r3, [r7, #15]
	/* set up NSS into inactive state */
	spi_freertos_nss_high(&(hadxl->spi));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fefc 	bl	8004dae <spi_freertos_nss_high>
	
	/* Read Device ID */
	ret = adxl345_read_spi(hadxl, ADXL345_REG_DEVID,
 8003fb6:	f107 020e 	add.w	r2, r7, #14
 8003fba:	2301      	movs	r3, #1
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f962 	bl	8004288 <adxl345_read_spi>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <adxl345_init+0x3a>
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	e09f      	b.n	8004112 <adxl345_init+0x17a>
	if(reg != ADXL345_ID) return ADXL345_NODEV;
 8003fd2:	7bbb      	ldrb	r3, [r7, #14]
 8003fd4:	2be5      	cmp	r3, #229	; 0xe5
 8003fd6:	d001      	beq.n	8003fdc <adxl345_init+0x44>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e09a      	b.n	8004112 <adxl345_init+0x17a>
	
	/* Disable device operation */
	reg = 0;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi(hadxl, ADXL345_REG_POWER_CTL,
 8003fe0:	f107 020e 	add.w	r2, r7, #14
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	212d      	movs	r1, #45	; 0x2d
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f927 	bl	800423c <adxl345_write_spi>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <adxl345_init+0x64>
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	e08a      	b.n	8004112 <adxl345_init+0x17a>
	
	/* Clear interrupts */
	reg = 0;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_ENABLE,
 8004000:	f107 020e 	add.w	r2, r7, #14
 8004004:	2301      	movs	r3, #1
 8004006:	212e      	movs	r1, #46	; 0x2e
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f917 	bl	800423c <adxl345_write_spi>
 800400e:	4603      	mov	r3, r0
 8004010:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <adxl345_init+0x84>
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	e07a      	b.n	8004112 <adxl345_init+0x17a>

	/* Write device settings */
	/* Data rate */
	ret = adxl345_write_spi(hadxl, ADXL345_REG_BW_RATE,
		(void *) &(hadxl->settings.data_rate),
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f103 0220 	add.w	r2, r3, #32
	ret = adxl345_write_spi(hadxl, ADXL345_REG_BW_RATE,
 8004022:	2301      	movs	r3, #1
 8004024:	212c      	movs	r1, #44	; 0x2c
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f908 	bl	800423c <adxl345_write_spi>
 800402c:	4603      	mov	r3, r0
 800402e:	73fb      	strb	r3, [r7, #15]
		sizeof(hadxl->settings.data_rate));
	if(ret != ADXL345_OK) return ret;
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <adxl345_init+0xa2>
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	e06b      	b.n	8004112 <adxl345_init+0x17a>
	
	/* Data format */
	reg = 	hadxl->settings.meas_range | hadxl->settings.align |
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004046:	4313      	orrs	r3, r2
 8004048:	b2da      	uxtb	r2, r3
			hadxl->settings.resolution;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
	reg = 	hadxl->settings.meas_range | hadxl->settings.align |
 8004050:	4313      	orrs	r3, r2
 8004052:	b2db      	uxtb	r3, r3
 8004054:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi(hadxl, ADXL345_REG_DATA_FORMAT,
 8004056:	f107 020e 	add.w	r2, r7, #14
 800405a:	2301      	movs	r3, #1
 800405c:	2131      	movs	r1, #49	; 0x31
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f8ec 	bl	800423c <adxl345_write_spi>
 8004064:	4603      	mov	r3, r0
 8004066:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <adxl345_init+0xda>
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	e04f      	b.n	8004112 <adxl345_init+0x17a>
	
	/* Acc offset */
	ret = adxl345_write_spi(hadxl, ADXL345_REG_OFSX,
		(void *) &(hadxl->settings.offset),
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f103 0224 	add.w	r2, r3, #36	; 0x24
	ret = adxl345_write_spi(hadxl, ADXL345_REG_OFSX,
 8004078:	2303      	movs	r3, #3
 800407a:	211e      	movs	r1, #30
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f8dd 	bl	800423c <adxl345_write_spi>
 8004082:	4603      	mov	r3, r0
 8004084:	73fb      	strb	r3, [r7, #15]
		sizeof(hadxl->settings.offset));
	if(ret != ADXL345_OK) return ret;
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <adxl345_init+0xf8>
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	e040      	b.n	8004112 <adxl345_init+0x17a>
	
	/* FIFO */
	reg = 	hadxl->settings.fifo_mode | hadxl->settings.fifo_trigger |
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800409c:	4313      	orrs	r3, r2
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	b25a      	sxtb	r2, r3
		(hadxl->settings.fifo_watermark&ADXL345_FIFO_CTL_SAMPLES_MASK);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80040a8:	b25b      	sxtb	r3, r3
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	b25b      	sxtb	r3, r3
	reg = 	hadxl->settings.fifo_mode | hadxl->settings.fifo_trigger |
 80040b0:	4313      	orrs	r3, r2
 80040b2:	b25b      	sxtb	r3, r3
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi(hadxl, ADXL345_REG_FIFO_CTL,
 80040b8:	f107 020e 	add.w	r2, r7, #14
 80040bc:	2301      	movs	r3, #1
 80040be:	2138      	movs	r1, #56	; 0x38
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f8bb 	bl	800423c <adxl345_write_spi>
 80040c6:	4603      	mov	r3, r0
 80040c8:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <adxl345_init+0x13c>
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	e01e      	b.n	8004112 <adxl345_init+0x17a>
	
	/* Interrupts */
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_MAP,
		(void *) &(hadxl->settings.map_to_int2),
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f103 0228 	add.w	r2, r3, #40	; 0x28
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_MAP,
 80040da:	2301      	movs	r3, #1
 80040dc:	212f      	movs	r1, #47	; 0x2f
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f8ac 	bl	800423c <adxl345_write_spi>
 80040e4:	4603      	mov	r3, r0
 80040e6:	73fb      	strb	r3, [r7, #15]
		sizeof(hadxl->settings.map_to_int2));
	if(ret != ADXL345_OK) return ret;
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <adxl345_init+0x15a>
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	e00f      	b.n	8004112 <adxl345_init+0x17a>
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_ENABLE,
		(void *) &(hadxl->settings.int_en),
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f103 0227 	add.w	r2, r3, #39	; 0x27
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_ENABLE,
 80040f8:	2301      	movs	r3, #1
 80040fa:	212e      	movs	r1, #46	; 0x2e
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f89d 	bl	800423c <adxl345_write_spi>
 8004102:	4603      	mov	r3, r0
 8004104:	73fb      	strb	r3, [r7, #15]
		sizeof(hadxl->settings.int_en));
	if(ret != ADXL345_OK) return ret;
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <adxl345_init+0x178>
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	e000      	b.n	8004112 <adxl345_init+0x17a>
	
	return ret;
 8004110:	7bfb      	ldrb	r3, [r7, #15]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	08004359 	.word	0x08004359

08004120 <adxl345_start>:
		offset, sizeof(adxl345_acc_offset_t));
}

/* Start acceleration measurements */
adxl345_status adxl345_start(adxl345_handle_t* hadxl)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
	uint8_t data;
	adxl345_status ret = ADXL345_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	73fb      	strb	r3, [r7, #15]
	ret = adxl345_read_spi_dma(hadxl, ADXL345_REG_POWER_CTL,
 800412c:	f107 020e 	add.w	r2, r7, #14
 8004130:	2301      	movs	r3, #1
 8004132:	212d      	movs	r1, #45	; 0x2d
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f8ee 	bl	8004316 <adxl345_read_spi_dma>
 800413a:	4603      	mov	r3, r0
 800413c:	73fb      	strb	r3, [r7, #15]
							&data, sizeof(data));
	if(ret != ADXL345_OK) return ret;
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <adxl345_start+0x28>
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	e00e      	b.n	8004166 <adxl345_start+0x46>
	data |= ADXL345_MEASURE;
 8004148:	7bbb      	ldrb	r3, [r7, #14]
 800414a:	f043 0308 	orr.w	r3, r3, #8
 800414e:	b2db      	uxtb	r3, r3
 8004150:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi_dma(hadxl, ADXL345_REG_POWER_CTL,
 8004152:	f107 020e 	add.w	r2, r7, #14
 8004156:	2301      	movs	r3, #1
 8004158:	212d      	movs	r1, #45	; 0x2d
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f8b5 	bl	80042ca <adxl345_write_spi_dma>
 8004160:	4603      	mov	r3, r0
 8004162:	73fb      	strb	r3, [r7, #15]
							&data, sizeof(data));
	return ret;
 8004164:	7bfb      	ldrb	r3, [r7, #15]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <adxl345_stop>:

/* Stop acceleration measurements */
adxl345_status adxl345_stop(adxl345_handle_t* hadxl)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b084      	sub	sp, #16
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
	uint8_t data;
	adxl345_status ret = ADXL345_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	73fb      	strb	r3, [r7, #15]
	ret = adxl345_read_spi_dma(hadxl, ADXL345_REG_POWER_CTL,
 800417a:	f107 020e 	add.w	r2, r7, #14
 800417e:	2301      	movs	r3, #1
 8004180:	212d      	movs	r1, #45	; 0x2d
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f8c7 	bl	8004316 <adxl345_read_spi_dma>
 8004188:	4603      	mov	r3, r0
 800418a:	73fb      	strb	r3, [r7, #15]
							&data, sizeof(data));
	if(ret != ADXL345_OK) return ret;
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <adxl345_stop+0x28>
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	e00e      	b.n	80041b4 <adxl345_stop+0x46>
	data &= (~ADXL345_MEASURE);
 8004196:	7bbb      	ldrb	r3, [r7, #14]
 8004198:	f023 0308 	bic.w	r3, r3, #8
 800419c:	b2db      	uxtb	r3, r3
 800419e:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi_dma(hadxl, ADXL345_REG_POWER_CTL,
 80041a0:	f107 020e 	add.w	r2, r7, #14
 80041a4:	2301      	movs	r3, #1
 80041a6:	212d      	movs	r1, #45	; 0x2d
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f88e 	bl	80042ca <adxl345_write_spi_dma>
 80041ae:	4603      	mov	r3, r0
 80041b0:	73fb      	strb	r3, [r7, #15]
							&data, sizeof(data));
	return ret;
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <adxl345_get_data>:

/* Get the acceleration data for all axes */
adxl345_status adxl345_get_data(adxl345_handle_t* hadxl,
	adxl345_acc_data_t* data)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
	return adxl345_read_spi_dma(hadxl, ADXL345_REG_DATAX0,
 80041c6:	2306      	movs	r3, #6
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	2132      	movs	r1, #50	; 0x32
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f8a2 	bl	8004316 <adxl345_read_spi_dma>
 80041d2:	4603      	mov	r3, r0
		data, sizeof(adxl345_acc_data_t));
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <adxl345_fifo_flush>:

/* Flush internal FIFO */
adxl345_status adxl345_fifo_flush(adxl345_handle_t* hadxl)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
	adxl345_acc_data_t tmp;
	uint8_t sample_cnt = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	73fb      	strb	r3, [r7, #15]
	while(adxl345_get_int_src(hadxl) & ADXL345_INT_DATA_READY)
 80041e8:	e00c      	b.n	8004204 <adxl345_fifo_flush+0x28>
	{
		if(sample_cnt++ > ADXL345_FLUSH_THESHOLD)
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	73fa      	strb	r2, [r7, #15]
 80041f0:	2b40      	cmp	r3, #64	; 0x40
 80041f2:	d901      	bls.n	80041f8 <adxl345_fifo_flush+0x1c>
			return ADXL345_ERR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e00d      	b.n	8004214 <adxl345_fifo_flush+0x38>
		adxl345_get_data(hadxl, &tmp);
 80041f8:	f107 0308 	add.w	r3, r7, #8
 80041fc:	4619      	mov	r1, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff ffdc 	bl	80041bc <adxl345_get_data>
	while(adxl345_get_int_src(hadxl) & ADXL345_INT_DATA_READY)
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f809 	bl	800421c <adxl345_get_int_src>
 800420a:	4603      	mov	r3, r0
 800420c:	b25b      	sxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	dbeb      	blt.n	80041ea <adxl345_fifo_flush+0xe>
	}
	return ADXL345_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <adxl345_get_int_src>:
	return id;
}

/* Read the INT_SOURCE register */
uint8_t adxl345_get_int_src(adxl345_handle_t* hadxl)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	adxl345_read_spi(hadxl, ADXL345_REG_INT_SOURCE,
 8004224:	f107 020f 	add.w	r2, r7, #15
 8004228:	2301      	movs	r3, #1
 800422a:	2130      	movs	r1, #48	; 0x30
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f82b 	bl	8004288 <adxl345_read_spi>
		(void *) &reg, sizeof(reg));
	return reg;
 8004232:	7bfb      	ldrb	r3, [r7, #15]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <adxl345_write_spi>:
----------------------------------------------------------------------*/

/* Write registers through SPI */
adxl345_status adxl345_write_spi(adxl345_handle_t* hadxl,
	uint8_t addr, void* buf, size_t size)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	; 0x28
 8004240:	af04      	add	r7, sp, #16
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	460b      	mov	r3, r1
 800424a:	72fb      	strb	r3, [r7, #11]
	/* Command - write multiple bytes */
	uint8_t cmd = ADXL345_SPI_MB | (addr & ADXL345_SPI_ADDR_MASK);
 800424c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004254:	b25b      	sxtb	r3, r3
 8004256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800425a:	b25b      	sxtb	r3, r3
 800425c:	b2db      	uxtb	r3, r3
 800425e:	75fb      	strb	r3, [r7, #23]
	
	return (adxl345_status) spi_freertos_write(&(hadxl->spi), &cmd, sizeof(cmd),
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		buf, size, hadxl->mutex_timeout, (uint32_t) hadxl->transfer_timeout);
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	6b12      	ldr	r2, [r2, #48]	; 0x30
	return (adxl345_status) spi_freertos_write(&(hadxl->spi), &cmd, sizeof(cmd),
 800426a:	f107 0117 	add.w	r1, r7, #23
 800426e:	9202      	str	r2, [sp, #8]
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f000 fb8c 	bl	8004996 <spi_freertos_write>
 800427e:	4603      	mov	r3, r0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <adxl345_read_spi>:

/* Read registers through SPI */
adxl345_status adxl345_read_spi(adxl345_handle_t* hadxl,
	uint8_t addr, void* buf, size_t size)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	; 0x28
 800428c:	af04      	add	r7, sp, #16
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	607a      	str	r2, [r7, #4]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	460b      	mov	r3, r1
 8004296:	72fb      	strb	r3, [r7, #11]
	/* Command - read multiple bytes */
	uint8_t cmd = ADXL345_SPI_READ |
				ADXL345_SPI_MB | (addr&ADXL345_SPI_ADDR_MASK);
 8004298:	7afb      	ldrb	r3, [r7, #11]
 800429a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800429e:	b2db      	uxtb	r3, r3
	uint8_t cmd = ADXL345_SPI_READ |
 80042a0:	75fb      	strb	r3, [r7, #23]
	
	return (adxl345_status) spi_freertos_read(&(hadxl->spi), &cmd, sizeof(cmd),
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		buf, size, hadxl->mutex_timeout, (uint32_t) hadxl->transfer_timeout);
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
	return (adxl345_status) spi_freertos_read(&(hadxl->spi), &cmd, sizeof(cmd),
 80042ac:	f107 0117 	add.w	r1, r7, #23
 80042b0:	9202      	str	r2, [sp, #8]
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f000 fbe7 	bl	8004a8e <spi_freertos_read>
 80042c0:	4603      	mov	r3, r0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <adxl345_write_spi_dma>:

/* Write registers through SPI using DMA */
adxl345_status adxl345_write_spi_dma(adxl345_handle_t* hadxl,
	uint8_t addr, void* buf, size_t size)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b08a      	sub	sp, #40	; 0x28
 80042ce:	af04      	add	r7, sp, #16
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	460b      	mov	r3, r1
 80042d8:	72fb      	strb	r3, [r7, #11]
	/* Command - write multiple bytes */
	uint8_t cmd = ADXL345_SPI_MB | (addr & ADXL345_SPI_ADDR_MASK);
 80042da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80042de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042e2:	b25b      	sxtb	r3, r3
 80042e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042e8:	b25b      	sxtb	r3, r3
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	75fb      	strb	r3, [r7, #23]
	
	return (adxl345_status) spi_freertos_write_dma(&(hadxl->spi),
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042f8:	f107 0117 	add.w	r1, r7, #23
 80042fc:	9202      	str	r2, [sp, #8]
 80042fe:	9301      	str	r3, [sp, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f000 fc3d 	bl	8004b86 <spi_freertos_write_dma>
 800430c:	4603      	mov	r3, r0
		&cmd, sizeof(cmd), buf, size,
		hadxl->mutex_timeout, hadxl->transfer_timeout);
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <adxl345_read_spi_dma>:

/* Read registers through SPI using DMA */
adxl345_status adxl345_read_spi_dma(adxl345_handle_t* hadxl,
	uint8_t addr, void* buf, size_t size)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b08a      	sub	sp, #40	; 0x28
 800431a:	af04      	add	r7, sp, #16
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
 8004322:	460b      	mov	r3, r1
 8004324:	72fb      	strb	r3, [r7, #11]
	uint8_t cmd = ADXL345_SPI_READ |
				ADXL345_SPI_MB | (addr&ADXL345_SPI_ADDR_MASK);
 8004326:	7afb      	ldrb	r3, [r7, #11]
 8004328:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800432c:	b2db      	uxtb	r3, r3
	uint8_t cmd = ADXL345_SPI_READ |
 800432e:	75fb      	strb	r3, [r7, #23]
	
	return (adxl345_status) spi_freertos_read_dma(&(hadxl->spi),
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800433a:	f107 0117 	add.w	r1, r7, #23
 800433e:	9202      	str	r2, [sp, #8]
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f000 fca6 	bl	8004c9a <spi_freertos_read_dma>
 800434e:	4603      	mov	r3, r0
		&cmd, sizeof(cmd), buf, size,
		hadxl->mutex_timeout, hadxl->transfer_timeout);
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <adxl345_spi_check_config>:

/* Check and change SPI configuration */
void adxl345_spi_check_config(SPI_HandleTypeDef* hspi)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
	/* Check configuration */
	if( (hspi->Init.CLKPhase    != ADXL345_SPI_CPHA)       ||
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d10f      	bne.n	8004388 <adxl345_spi_check_config+0x30>
		(hspi->Init.CLKPolarity != ADXL345_SPI_CPOL)       ||
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
	if( (hspi->Init.CLKPhase    != ADXL345_SPI_CPHA)       ||
 800436c:	2b02      	cmp	r3, #2
 800436e:	d10b      	bne.n	8004388 <adxl345_spi_check_config+0x30>
		(hspi->Init.DataSize    != ADXL345_SPI_DATASIZE)   ||
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
		(hspi->Init.CLKPolarity != ADXL345_SPI_CPOL)       ||
 8004374:	2b00      	cmp	r3, #0
 8004376:	d107      	bne.n	8004388 <adxl345_spi_check_config+0x30>
		(hspi->Init.Direction   != ADXL345_SPI_DIRECTION)  ||
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
		(hspi->Init.DataSize    != ADXL345_SPI_DATASIZE)   ||
 800437c:	2b00      	cmp	r3, #0
 800437e:	d103      	bne.n	8004388 <adxl345_spi_check_config+0x30>
		(hspi->Init.FirstBit    != ADXL345_SPI_BIT_ORDER))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
		(hspi->Init.Direction   != ADXL345_SPI_DIRECTION)  ||
 8004384:	2b00      	cmp	r3, #0
 8004386:	d016      	beq.n	80043b6 <adxl345_spi_check_config+0x5e>
	{
		hspi->Init.CLKPhase     = ADXL345_SPI_CPHA;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	615a      	str	r2, [r3, #20]
		hspi->Init.CLKPolarity  = ADXL345_SPI_CPOL;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2202      	movs	r2, #2
 8004392:	611a      	str	r2, [r3, #16]
		hspi->Init.DataSize     = ADXL345_SPI_DATASIZE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	60da      	str	r2, [r3, #12]
		hspi->Init.Direction    = ADXL345_SPI_DIRECTION;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	609a      	str	r2, [r3, #8]
		hspi->Init.FirstBit     = ADXL345_SPI_BIT_ORDER;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	621a      	str	r2, [r3, #32]
		if (HAL_SPI_Init(hspi) != HAL_OK)
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fd fd38 	bl	8001e1c <HAL_SPI_Init>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <adxl345_spi_check_config+0x5e>
		{
			Error_Handler();
 80043b2:	f7fc f97f 	bl	80006b4 <Error_Handler>
		}
	}
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <adxl345_task>:
static void adxl345_int2(uint16_t pin, BaseType_t* pxHigherPriorityTaskWoken);
static osThreadId adxl345_task_id;
static adxl345_task_handle_t* htask;

void adxl345_task(void const * argument)
{	
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
	htask = (adxl345_task_handle_t *) argument;
 80043c8:	4ab0      	ldr	r2, [pc, #704]	; (800468c <adxl345_task+0x2cc>)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6013      	str	r3, [r2, #0]
	adxl345_power_state_t state = ADXL345_STANDBY;
 80043ce:	2301      	movs	r3, #1
 80043d0:	75fb      	strb	r3, [r7, #23]

	uint32_t event;
	uint8_t sample_idx = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	75bb      	strb	r3, [r7, #22]
	uint8_t frame_idx = 0;
 80043d6:	2300      	movs	r3, #0
 80043d8:	757b      	strb	r3, [r7, #21]
	uint8_t i = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	753b      	strb	r3, [r7, #20]
	
	/* Initializing ADXL345 */
	if(adxl345_init(&(htask->hadxl)) != ADXL345_OK)
 80043de:	4bab      	ldr	r3, [pc, #684]	; (800468c <adxl345_task+0x2cc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff fdd8 	bl	8003f98 <adxl345_init>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <adxl345_task+0x32>
		Error_Handler();
 80043ee:	f7fc f961 	bl	80006b4 <Error_Handler>

	/* Allocating FIFO memory  */
	adxl345_acc_data_t *fifo = pvPortMalloc(htask->fifo_frame_size*
 80043f2:	4ba6      	ldr	r3, [pc, #664]	; (800468c <adxl345_task+0x2cc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043fa:	461a      	mov	r2, r3
		htask->fifo_frame_qty*sizeof(adxl345_acc_data_t));
 80043fc:	4ba3      	ldr	r3, [pc, #652]	; (800468c <adxl345_task+0x2cc>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
	adxl345_acc_data_t *fifo = pvPortMalloc(htask->fifo_frame_size*
 8004404:	fb03 f302 	mul.w	r3, r3, r2
 8004408:	461a      	mov	r2, r3
 800440a:	4613      	mov	r3, r2
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	4413      	add	r3, r2
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	4618      	mov	r0, r3
 8004414:	f002 ff52 	bl	80072bc <pvPortMalloc>
 8004418:	6138      	str	r0, [r7, #16]
	if(fifo == NULL)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <adxl345_task+0x64>
		Error_Handler();
 8004420:	f7fc f948 	bl	80006b4 <Error_Handler>
	adxl345_acc_data_t *ptr_to_send = NULL;
 8004424:	2300      	movs	r3, #0
 8004426:	60bb      	str	r3, [r7, #8]
	
	/* Flush ADXL345 internal FIFO */
	if(adxl345_fifo_flush(&(htask->hadxl)) != ADXL345_OK)
 8004428:	4b98      	ldr	r3, [pc, #608]	; (800468c <adxl345_task+0x2cc>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fed5 	bl	80041dc <adxl345_fifo_flush>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <adxl345_task+0x7c>
		Error_Handler();
 8004438:	f7fc f93c 	bl	80006b4 <Error_Handler>
	/* Suspend acc */
	if(adxl345_stop(&(htask->hadxl)) != ADXL345_OK)
 800443c:	4b93      	ldr	r3, [pc, #588]	; (800468c <adxl345_task+0x2cc>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff fe94 	bl	800416e <adxl345_stop>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <adxl345_task+0x90>
						Error_Handler();
 800444c:	f7fc f932 	bl	80006b4 <Error_Handler>
	
	/* Registering interrupt handlers */
	if(exti_freertos_register(htask->hadxl.int1.pin, adxl345_int1) != pdTRUE)
 8004450:	4b8e      	ldr	r3, [pc, #568]	; (800468c <adxl345_task+0x2cc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	8a9b      	ldrh	r3, [r3, #20]
 8004456:	b29b      	uxth	r3, r3
 8004458:	498d      	ldr	r1, [pc, #564]	; (8004690 <adxl345_task+0x2d0>)
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f976 	bl	800474c <exti_freertos_register>
 8004460:	4603      	mov	r3, r0
 8004462:	2b01      	cmp	r3, #1
 8004464:	d001      	beq.n	800446a <adxl345_task+0xaa>
		Error_Handler();
 8004466:	f7fc f925 	bl	80006b4 <Error_Handler>
/*	if(exti_freertos_register(htask->hadxl.int2.pin, adxl345_int2) != pdTRUE)
		Error_Handler();
*/
	/* Notify than init complete */
	xSemaphoreGive(htask->suspend_notify);
 800446a:	4b88      	ldr	r3, [pc, #544]	; (800468c <adxl345_task+0x2cc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004470:	2300      	movs	r3, #0
 8004472:	2200      	movs	r2, #0
 8004474:	2100      	movs	r1, #0
 8004476:	f000 ffbd 	bl	80053f4 <xQueueGenericSend>

	/* Event loop */
	while(1)
	{
		xTaskNotifyWait(pdFALSE, UINT32_MAX, &event, portMAX_DELAY);
 800447a:	f107 020c 	add.w	r2, r7, #12
 800447e:	f04f 33ff 	mov.w	r3, #4294967295
 8004482:	f04f 31ff 	mov.w	r1, #4294967295
 8004486:	2000      	movs	r0, #0
 8004488:	f002 fae8 	bl	8006a5c <xTaskNotifyWait>

		switch(state)
 800448c:	7dfb      	ldrb	r3, [r7, #23]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <adxl345_task+0xda>
 8004492:	2b01      	cmp	r3, #1
 8004494:	f000 80df 	beq.w	8004656 <adxl345_task+0x296>
 8004498:	e0f6      	b.n	8004688 <adxl345_task+0x2c8>
		{
		case ADXL345_RUN:
			/* Suspend request */
			if(event & ADXL345_SUSPEND)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01e      	beq.n	80044e2 <adxl345_task+0x122>
			{
				/* Stop ADXL345 */
				if(adxl345_stop(&(htask->hadxl)) != ADXL345_OK)
 80044a4:	4b79      	ldr	r3, [pc, #484]	; (800468c <adxl345_task+0x2cc>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fe60 	bl	800416e <adxl345_stop>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <adxl345_task+0xf8>
					Error_Handler();
 80044b4:	f7fc f8fe 	bl	80006b4 <Error_Handler>
				/* Flush ADXL345 internal FIFO */
				if(adxl345_fifo_flush(&(htask->hadxl)) != ADXL345_OK)
 80044b8:	4b74      	ldr	r3, [pc, #464]	; (800468c <adxl345_task+0x2cc>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fe8d 	bl	80041dc <adxl345_fifo_flush>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <adxl345_task+0x10c>
					Error_Handler();
 80044c8:	f7fc f8f4 	bl	80006b4 <Error_Handler>
				xSemaphoreGive(htask->suspend_notify);
 80044cc:	4b6f      	ldr	r3, [pc, #444]	; (800468c <adxl345_task+0x2cc>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80044d2:	2300      	movs	r3, #0
 80044d4:	2200      	movs	r2, #0
 80044d6:	2100      	movs	r1, #0
 80044d8:	f000 ff8c 	bl	80053f4 <xQueueGenericSend>
				state = ADXL345_STANDBY;
 80044dc:	2301      	movs	r3, #1
 80044de:	75fb      	strb	r3, [r7, #23]
				break;
 80044e0:	e0d2      	b.n	8004688 <adxl345_task+0x2c8>
			}
			/* ADXL345 internal FIFO overflow */
			if(event & ADXL345_EXTI2)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d048      	beq.n	800457e <adxl345_task+0x1be>
			{
				if(!adxl345_get_int_src(&(htask->hadxl)) & ADXL345_INT_OVERRUN)
 80044ec:	4b67      	ldr	r3, [pc, #412]	; (800468c <adxl345_task+0x2cc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fe93 	bl	800421c <adxl345_get_int_src>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 80be 	beq.w	800467a <adxl345_task+0x2ba>
					break;
				/* Stop ADXL345 */
				if(adxl345_stop(&(htask->hadxl)) != ADXL345_OK)
 80044fe:	4b63      	ldr	r3, [pc, #396]	; (800468c <adxl345_task+0x2cc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fe33 	bl	800416e <adxl345_stop>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <adxl345_task+0x152>
					Error_Handler();
 800450e:	f7fc f8d1 	bl	80006b4 <Error_Handler>
				/* Flush ADXL345 internal FIFO */
				if(adxl345_fifo_flush(&(htask->hadxl)) != ADXL345_OK)
 8004512:	4b5e      	ldr	r3, [pc, #376]	; (800468c <adxl345_task+0x2cc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff fe60 	bl	80041dc <adxl345_fifo_flush>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <adxl345_task+0x166>
					Error_Handler();
 8004522:	f7fc f8c7 	bl	80006b4 <Error_Handler>
				/* ADXL345 hard fault */
				if(!(event & ADXL345_EXTI1))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d109      	bne.n	8004544 <adxl345_task+0x184>
					if(adxl345_init(&(htask->hadxl)) != ADXL345_OK)
 8004530:	4b56      	ldr	r3, [pc, #344]	; (800468c <adxl345_task+0x2cc>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff fd2f 	bl	8003f98 <adxl345_init>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <adxl345_task+0x184>
						Error_Handler();
 8004540:	f7fc f8b8 	bl	80006b4 <Error_Handler>
				/* Start ADXL345 again */
				if(adxl345_start(&(htask->hadxl)) != ADXL345_OK)
 8004544:	4b51      	ldr	r3, [pc, #324]	; (800468c <adxl345_task+0x2cc>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff fde9 	bl	8004120 <adxl345_start>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <adxl345_task+0x198>
					Error_Handler();
 8004554:	f7fc f8ae 	bl	80006b4 <Error_Handler>
				if(adxl345_get_int_src(&(htask->hadxl)) & ADXL345_INT_OVERRUN)
 8004558:	4b4c      	ldr	r3, [pc, #304]	; (800468c <adxl345_task+0x2cc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff fe5d 	bl	800421c <adxl345_get_int_src>
 8004562:	4603      	mov	r3, r0
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8088 	beq.w	800467e <adxl345_task+0x2be>
					xTaskNotify(adxl345_task_id, ADXL345_EXTI2, eSetBits);
 800456e:	4b49      	ldr	r3, [pc, #292]	; (8004694 <adxl345_task+0x2d4>)
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	2300      	movs	r3, #0
 8004574:	2201      	movs	r2, #1
 8004576:	2102      	movs	r1, #2
 8004578:	f002 fad0 	bl	8006b1c <xTaskGenericNotify>
				break;
 800457c:	e07f      	b.n	800467e <adxl345_task+0x2be>
			}
			/* ADXL345 internal FIFO watermark is exceeded */
			if(event & ADXL345_EXTI1)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d07c      	beq.n	8004682 <adxl345_task+0x2c2>
			{
				/* Get burst of data from ADXL345 internal FIFO */
				for(i = 0; i < htask->hadxl.settings.fifo_watermark; i++)
 8004588:	2300      	movs	r3, #0
 800458a:	753b      	strb	r3, [r7, #20]
 800458c:	e01b      	b.n	80045c6 <adxl345_task+0x206>
					adxl345_get_data(&(htask->hadxl),
 800458e:	4b3f      	ldr	r3, [pc, #252]	; (800468c <adxl345_task+0x2cc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
						&(fifo[frame_idx*htask->hadxl.settings.fifo_watermark +
 8004594:	7d7b      	ldrb	r3, [r7, #21]
 8004596:	4a3d      	ldr	r2, [pc, #244]	; (800468c <adxl345_task+0x2cc>)
 8004598:	6812      	ldr	r2, [r2, #0]
 800459a:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800459e:	fb02 f203 	mul.w	r2, r2, r3
							sample_idx++]));
 80045a2:	7dbb      	ldrb	r3, [r7, #22]
 80045a4:	1c59      	adds	r1, r3, #1
 80045a6:	75b9      	strb	r1, [r7, #22]
						&(fifo[frame_idx*htask->hadxl.settings.fifo_watermark +
 80045a8:	4413      	add	r3, r2
 80045aa:	461a      	mov	r2, r3
 80045ac:	4613      	mov	r3, r2
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	4413      	add	r3, r2
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	461a      	mov	r2, r3
					adxl345_get_data(&(htask->hadxl),
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4413      	add	r3, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	f7ff fdfe 	bl	80041bc <adxl345_get_data>
				for(i = 0; i < htask->hadxl.settings.fifo_watermark; i++)
 80045c0:	7d3b      	ldrb	r3, [r7, #20]
 80045c2:	3301      	adds	r3, #1
 80045c4:	753b      	strb	r3, [r7, #20]
 80045c6:	4b31      	ldr	r3, [pc, #196]	; (800468c <adxl345_task+0x2cc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80045ce:	7d3a      	ldrb	r2, [r7, #20]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d3dc      	bcc.n	800458e <adxl345_task+0x1ce>
				/* Generate interrupt event if FIFO watermark is still exceeded */
				if(adxl345_get_int_src(&(htask->hadxl)) & ADXL345_INT_WATERMARK)
 80045d4:	4b2d      	ldr	r3, [pc, #180]	; (800468c <adxl345_task+0x2cc>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff fe1f 	bl	800421c <adxl345_get_int_src>
 80045de:	4603      	mov	r3, r0
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d006      	beq.n	80045f6 <adxl345_task+0x236>
					xTaskNotify(adxl345_task_id, ADXL345_EXTI1, eSetBits);
 80045e8:	4b2a      	ldr	r3, [pc, #168]	; (8004694 <adxl345_task+0x2d4>)
 80045ea:	6818      	ldr	r0, [r3, #0]
 80045ec:	2300      	movs	r3, #0
 80045ee:	2201      	movs	r2, #1
 80045f0:	2101      	movs	r1, #1
 80045f2:	f002 fa93 	bl	8006b1c <xTaskGenericNotify>
				/* Send frame pointer to queue if frame is full, switch to next */
				if(sample_idx >= htask->fifo_frame_size)
 80045f6:	4b25      	ldr	r3, [pc, #148]	; (800468c <adxl345_task+0x2cc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045fe:	7dba      	ldrb	r2, [r7, #22]
 8004600:	429a      	cmp	r2, r3
 8004602:	d33e      	bcc.n	8004682 <adxl345_task+0x2c2>
				{
					sample_idx = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	75bb      	strb	r3, [r7, #22]
					ptr_to_send = &(fifo[frame_idx*htask->hadxl.settings.fifo_watermark]);
 8004608:	7d7b      	ldrb	r3, [r7, #21]
 800460a:	4a20      	ldr	r2, [pc, #128]	; (800468c <adxl345_task+0x2cc>)
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8004612:	fb02 f303 	mul.w	r3, r2, r3
 8004616:	461a      	mov	r2, r3
 8004618:	4613      	mov	r3, r2
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	4413      	add	r3, r2
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	461a      	mov	r2, r3
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4413      	add	r3, r2
 8004626:	60bb      	str	r3, [r7, #8]
					xQueueSend(htask->fifo_frame_ptr_queue, &ptr_to_send, 0);
 8004628:	4b18      	ldr	r3, [pc, #96]	; (800468c <adxl345_task+0x2cc>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f8d3 0039 	ldr.w	r0, [r3, #57]	; 0x39
 8004630:	f107 0108 	add.w	r1, r7, #8
 8004634:	2300      	movs	r3, #0
 8004636:	2200      	movs	r2, #0
 8004638:	f000 fedc 	bl	80053f4 <xQueueGenericSend>
					if(++frame_idx >= htask->fifo_frame_qty)
 800463c:	7d7b      	ldrb	r3, [r7, #21]
 800463e:	3301      	adds	r3, #1
 8004640:	757b      	strb	r3, [r7, #21]
 8004642:	4b12      	ldr	r3, [pc, #72]	; (800468c <adxl345_task+0x2cc>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464a:	7d7a      	ldrb	r2, [r7, #21]
 800464c:	429a      	cmp	r2, r3
 800464e:	d318      	bcc.n	8004682 <adxl345_task+0x2c2>
						frame_idx = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	757b      	strb	r3, [r7, #21]
				}
			}
			break;
 8004654:	e015      	b.n	8004682 <adxl345_task+0x2c2>
		case ADXL345_STANDBY:
			/* Resume request */
			if(event & ADXL345_RESUME)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b00      	cmp	r3, #0
 800465e:	d012      	beq.n	8004686 <adxl345_task+0x2c6>
			{
				/* Start ADXL345 */
				if(adxl345_start(&(htask->hadxl)) != ADXL345_OK)
 8004660:	4b0a      	ldr	r3, [pc, #40]	; (800468c <adxl345_task+0x2cc>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff fd5b 	bl	8004120 <adxl345_start>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <adxl345_task+0x2b4>
					Error_Handler();
 8004670:	f7fc f820 	bl	80006b4 <Error_Handler>
				state = ADXL345_RUN;
 8004674:	2300      	movs	r3, #0
 8004676:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8004678:	e005      	b.n	8004686 <adxl345_task+0x2c6>
					break;
 800467a:	bf00      	nop
 800467c:	e6fd      	b.n	800447a <adxl345_task+0xba>
				break;
 800467e:	bf00      	nop
 8004680:	e6fb      	b.n	800447a <adxl345_task+0xba>
			break;
 8004682:	bf00      	nop
 8004684:	e6f9      	b.n	800447a <adxl345_task+0xba>
			break;
 8004686:	bf00      	nop
		xTaskNotifyWait(pdFALSE, UINT32_MAX, &event, portMAX_DELAY);
 8004688:	e6f7      	b.n	800447a <adxl345_task+0xba>
 800468a:	bf00      	nop
 800468c:	20000348 	.word	0x20000348
 8004690:	08004721 	.word	0x08004721
 8004694:	20000344 	.word	0x20000344

08004698 <adxl345_task_create>:
}

osThreadId adxl345_task_create(char *name, osPriority priority,
	uint32_t instances, uint32_t stack_size,
	adxl345_task_handle_t* htask)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08c      	sub	sp, #48	; 0x30
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	607a      	str	r2, [r7, #4]
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	460b      	mov	r3, r1
 80046a6:	817b      	strh	r3, [r7, #10]
	/* create semaphores, mutexes and queues */
	htask->fifo_frame_ptr_queue = xQueueCreate(htask->fifo_frame_qty,
 80046a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ae:	2200      	movs	r2, #0
 80046b0:	2104      	movs	r1, #4
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fe0e 	bl	80052d4 <xQueueGenericCreate>
 80046b8:	4602      	mov	r2, r0
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	f8c3 2039 	str.w	r2, [r3, #57]	; 0x39
		sizeof(adxl345_acc_data_t*));
	htask->suspend_notify = xSemaphoreCreateBinary();
 80046c0:	2203      	movs	r2, #3
 80046c2:	2100      	movs	r1, #0
 80046c4:	2001      	movs	r0, #1
 80046c6:	f000 fe05 	bl	80052d4 <xQueueGenericCreate>
 80046ca:	4602      	mov	r2, r0
 80046cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ce:	635a      	str	r2, [r3, #52]	; 0x34
	
	/* create tread */
	osThreadDef_t thread = {
 80046d0:	f107 0314 	add.w	r3, r7, #20
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	605a      	str	r2, [r3, #4]
 80046da:	609a      	str	r2, [r3, #8]
 80046dc:	60da      	str	r2, [r3, #12]
 80046de:	611a      	str	r2, [r3, #16]
 80046e0:	615a      	str	r2, [r3, #20]
 80046e2:	619a      	str	r2, [r3, #24]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <adxl345_task_create+0x80>)
 80046ea:	61bb      	str	r3, [r7, #24]
 80046ec:	897b      	ldrh	r3, [r7, #10]
 80046ee:	83bb      	strh	r3, [r7, #28]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	623b      	str	r3, [r7, #32]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
		.tpriority	= priority,
		.instances	= instances,
		.stacksize	= stack_size
	};

	adxl345_task_id = osThreadCreate(&thread, (void *) htask);
 80046f8:	f107 0314 	add.w	r3, r7, #20
 80046fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fc84 	bl	800500c <osThreadCreate>
 8004704:	4603      	mov	r3, r0
 8004706:	4a05      	ldr	r2, [pc, #20]	; (800471c <adxl345_task_create+0x84>)
 8004708:	6013      	str	r3, [r2, #0]
	return adxl345_task_id;
 800470a:	4b04      	ldr	r3, [pc, #16]	; (800471c <adxl345_task_create+0x84>)
 800470c:	681b      	ldr	r3, [r3, #0]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3730      	adds	r7, #48	; 0x30
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	080043c1 	.word	0x080043c1
 800471c:	20000344 	.word	0x20000344

08004720 <adxl345_int1>:
{
	xTaskNotify(adxl345_task_id, ADXL345_RESUME, eSetBits);
}

static void adxl345_int1(uint16_t pin, BaseType_t* pxHigherPriorityTaskWoken)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af02      	add	r7, sp, #8
 8004726:	4603      	mov	r3, r0
 8004728:	6039      	str	r1, [r7, #0]
 800472a:	80fb      	strh	r3, [r7, #6]
	xTaskNotifyFromISR(adxl345_task_id, ADXL345_EXTI1, eSetBits,
 800472c:	4b06      	ldr	r3, [pc, #24]	; (8004748 <adxl345_int1+0x28>)
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	2300      	movs	r3, #0
 8004736:	2201      	movs	r2, #1
 8004738:	2101      	movs	r1, #1
 800473a:	f002 fa99 	bl	8006c70 <xTaskGenericNotifyFromISR>
		pxHigherPriorityTaskWoken);
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000344 	.word	0x20000344

0800474c <exti_freertos_register>:


/* register handler on EXTI GPIO pin */
BaseType_t exti_freertos_register(uint16_t pin,
	void (*handler)(uint16_t pin, BaseType_t* pxHigherPriorityTaskWoken))
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	6039      	str	r1, [r7, #0]
 8004756:	80fb      	strh	r3, [r7, #6]
	if(exti_freertos_find_item(pin) != NULL)
 8004758:	88fb      	ldrh	r3, [r7, #6]
 800475a:	4618      	mov	r0, r3
 800475c:	f000 f86c 	bl	8004838 <exti_freertos_find_item>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <exti_freertos_register+0x1e>
		return pdFALSE;
 8004766:	2300      	movs	r3, #0
 8004768:	e009      	b.n	800477e <exti_freertos_register+0x32>
	taskENTER_CRITICAL();
 800476a:	f002 fca7 	bl	80070bc <vPortEnterCritical>
	exti_freertos_list_append(pin, handler);
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	6839      	ldr	r1, [r7, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 f830 	bl	80047d8 <exti_freertos_list_append>
	taskEXIT_CRITICAL();
 8004778:	f002 fcd0 	bl	800711c <vPortExitCritical>
	return pdTRUE;
 800477c:	2301      	movs	r3, #1
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <HAL_GPIO_EXTI_Callback>:
	taskEXIT_CRITICAL();
}

/* EXTI ISR */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004792:	2300      	movs	r3, #0
 8004794:	60bb      	str	r3, [r7, #8]
	exti_freertos_list_t *service = exti_freertos_find_item(GPIO_Pin);
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	4618      	mov	r0, r3
 800479a:	f000 f84d 	bl	8004838 <exti_freertos_find_item>
 800479e:	60f8      	str	r0, [r7, #12]
	if(service == NULL) return;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d012      	beq.n	80047cc <HAL_GPIO_EXTI_Callback+0x44>
	service->handler(GPIO_Pin, &xHigherPriorityTaskWoken);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f107 0108 	add.w	r1, r7, #8
 80047ae:	88fa      	ldrh	r2, [r7, #6]
 80047b0:	4610      	mov	r0, r2
 80047b2:	4798      	blx	r3
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_GPIO_EXTI_Callback+0x46>
 80047ba:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80047bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	e000      	b.n	80047ce <HAL_GPIO_EXTI_Callback+0x46>
	if(service == NULL) return;
 80047cc:	bf00      	nop
}
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	e000ed04 	.word	0xe000ed04

080047d8 <exti_freertos_list_append>:
static exti_freertos_list_t* exti_freertos_list_begin = NULL;

/* Append the item at the end of list */
static exti_freertos_list_t* exti_freertos_list_append(uint16_t pin,
	void (*handler)(uint16_t pin, BaseType_t* pxHigherPriorityTaskWoken))
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	6039      	str	r1, [r7, #0]
 80047e2:	80fb      	strh	r3, [r7, #6]
	/* creating item */
	exti_freertos_list_t* new_item = (exti_freertos_list_t*)
		pvPortMalloc(sizeof(exti_freertos_list_t));
 80047e4:	200c      	movs	r0, #12
 80047e6:	f002 fd69 	bl	80072bc <pvPortMalloc>
 80047ea:	60b8      	str	r0, [r7, #8]
	new_item->pin = pin;
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	88fa      	ldrh	r2, [r7, #6]
 80047f0:	801a      	strh	r2, [r3, #0]
	new_item->handler = handler;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	605a      	str	r2, [r3, #4]
	new_item->next = NULL;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2200      	movs	r2, #0
 80047fc:	609a      	str	r2, [r3, #8]
	/* if list is empty, create and return the begin of list */
	if(exti_freertos_list_begin == NULL)
 80047fe:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <exti_freertos_list_append+0x5c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d103      	bne.n	800480e <exti_freertos_list_append+0x36>
		exti_freertos_list_begin = new_item;
 8004806:	4a0b      	ldr	r2, [pc, #44]	; (8004834 <exti_freertos_list_append+0x5c>)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	e00d      	b.n	800482a <exti_freertos_list_append+0x52>
	/* else find end of list and append item at the end of list */
	else
	{
		exti_freertos_list_t *item = exti_freertos_list_begin;
 800480e:	4b09      	ldr	r3, [pc, #36]	; (8004834 <exti_freertos_list_append+0x5c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60fb      	str	r3, [r7, #12]
		while(item->next != NULL)
 8004814:	e002      	b.n	800481c <exti_freertos_list_append+0x44>
			item = item->next;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	60fb      	str	r3, [r7, #12]
		while(item->next != NULL)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1f8      	bne.n	8004816 <exti_freertos_list_append+0x3e>
		item->next = new_item;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	609a      	str	r2, [r3, #8]
	}
	return new_item;
 800482a:	68bb      	ldr	r3, [r7, #8]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	2000034c 	.word	0x2000034c

08004838 <exti_freertos_find_item>:
	return item;
}

/* Find item in list with mached pin */
exti_freertos_list_t* exti_freertos_find_item(uint16_t pin)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	4603      	mov	r3, r0
 8004840:	80fb      	strh	r3, [r7, #6]
	exti_freertos_list_t *item = exti_freertos_list_begin;
 8004842:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <exti_freertos_find_item+0x38>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 8004848:	e007      	b.n	800485a <exti_freertos_find_item+0x22>
	{
		if(item->pin == pin)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	88fa      	ldrh	r2, [r7, #6]
 8004850:	429a      	cmp	r2, r3
 8004852:	d006      	beq.n	8004862 <exti_freertos_find_item+0x2a>
			break;
		item = item->next;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f4      	bne.n	800484a <exti_freertos_find_item+0x12>
 8004860:	e000      	b.n	8004864 <exti_freertos_find_item+0x2c>
			break;
 8004862:	bf00      	nop
	}
	return item;
 8004864:	68fb      	ldr	r3, [r7, #12]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr
 8004870:	2000034c 	.word	0x2000034c

08004874 <spi_rtos_list_append>:
/* Root of SPI FreeRTOS list */
static struct spi_rtos_list *spi_rtos_list_begin = NULL;

/* Append the item at the end of SPI FreeRTOS list */
static struct spi_rtos_list* spi_rtos_list_append(spi_freertos_t *spi_rtos)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
	/* if list is empty, create and return the begin of list */
	if(spi_rtos_list_begin == NULL)
 800487c:	4b19      	ldr	r3, [pc, #100]	; (80048e4 <spi_rtos_list_append+0x70>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d110      	bne.n	80048a6 <spi_rtos_list_append+0x32>
	{
		spi_rtos_list_begin = (struct spi_rtos_list*)
			pvPortMalloc(sizeof(struct spi_rtos_list));
 8004884:	2008      	movs	r0, #8
 8004886:	f002 fd19 	bl	80072bc <pvPortMalloc>
 800488a:	4603      	mov	r3, r0
		spi_rtos_list_begin = (struct spi_rtos_list*)
 800488c:	4a15      	ldr	r2, [pc, #84]	; (80048e4 <spi_rtos_list_append+0x70>)
 800488e:	6013      	str	r3, [r2, #0]
		spi_rtos_list_begin->spi_rtos = spi_rtos;
 8004890:	4b14      	ldr	r3, [pc, #80]	; (80048e4 <spi_rtos_list_append+0x70>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	601a      	str	r2, [r3, #0]
		spi_rtos_list_begin->next = NULL;
 8004898:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <spi_rtos_list_append+0x70>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2200      	movs	r2, #0
 800489e:	605a      	str	r2, [r3, #4]
		return spi_rtos_list_begin;
 80048a0:	4b10      	ldr	r3, [pc, #64]	; (80048e4 <spi_rtos_list_append+0x70>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	e01a      	b.n	80048dc <spi_rtos_list_append+0x68>
	}
	/* else find end of list */
	struct spi_rtos_list *item = spi_rtos_list_begin;
 80048a6:	4b0f      	ldr	r3, [pc, #60]	; (80048e4 <spi_rtos_list_append+0x70>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60fb      	str	r3, [r7, #12]
	while(item->next != NULL)
 80048ac:	e002      	b.n	80048b4 <spi_rtos_list_append+0x40>
		item = item->next;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	60fb      	str	r3, [r7, #12]
	while(item->next != NULL)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f8      	bne.n	80048ae <spi_rtos_list_append+0x3a>
	/* and create and append item at the end of list */
	item->next = (struct spi_rtos_list*)
		pvPortMalloc(sizeof(struct spi_rtos_list));
 80048bc:	2008      	movs	r0, #8
 80048be:	f002 fcfd 	bl	80072bc <pvPortMalloc>
 80048c2:	4602      	mov	r2, r0
	item->next = (struct spi_rtos_list*)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	605a      	str	r2, [r3, #4]
	item->next->spi_rtos = spi_rtos;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	601a      	str	r2, [r3, #0]
	item->next->next = NULL;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	605a      	str	r2, [r3, #4]
	return item->next;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685b      	ldr	r3, [r3, #4]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20000350 	.word	0x20000350

080048e8 <spi_rtos_list_find_item>:
}

/* Find item in SPI FreeRTOS list with mached SPI_HandleTypeDef */
static struct spi_rtos_list* spi_rtos_list_find_item
	(SPI_HandleTypeDef* hspi)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	struct spi_rtos_list *item = spi_rtos_list_begin;
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <spi_rtos_list_find_item+0x38>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 80048f6:	e008      	b.n	800490a <spi_rtos_list_find_item+0x22>
	{
		if(item->spi_rtos->hspi == hspi)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	429a      	cmp	r2, r3
 8004902:	d006      	beq.n	8004912 <spi_rtos_list_find_item+0x2a>
			break;
		else
			item = item->next;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1f3      	bne.n	80048f8 <spi_rtos_list_find_item+0x10>
 8004910:	e000      	b.n	8004914 <spi_rtos_list_find_item+0x2c>
			break;
 8004912:	bf00      	nop
	}
	return item;
 8004914:	68fb      	ldr	r3, [r7, #12]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr
 8004920:	20000350 	.word	0x20000350

08004924 <spi_freertos_init>:

/* Initialize SPI with FreeRTOS mutexes and semaphores */
spi_freertos_status spi_freertos_init(spi_freertos_t* spi_rtos)
{	
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
	/* find hspi into list */
	if(spi_rtos_list_find_item(spi_rtos->hspi) != NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff ffd9 	bl	80048e8 <spi_rtos_list_find_item>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <spi_freertos_init+0x1c>
		return SPI_FREERTOS_EXIST;
 800493c:	2305      	movs	r3, #5
 800493e:	e019      	b.n	8004974 <spi_freertos_init+0x50>
	
	/* if hspi not found, create semaphores and mutexes */
	spi_rtos->mutex = xSemaphoreCreateMutex();
 8004940:	2001      	movs	r0, #1
 8004942:	f000 fd3e 	bl	80053c2 <xQueueCreateMutex>
 8004946:	4602      	mov	r2, r0
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	605a      	str	r2, [r3, #4]
	spi_rtos->tx_complete = xSemaphoreCreateBinary();
 800494c:	2203      	movs	r2, #3
 800494e:	2100      	movs	r1, #0
 8004950:	2001      	movs	r0, #1
 8004952:	f000 fcbf 	bl	80052d4 <xQueueGenericCreate>
 8004956:	4602      	mov	r2, r0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	60da      	str	r2, [r3, #12]
	spi_rtos->rx_complete = xSemaphoreCreateBinary();
 800495c:	2203      	movs	r2, #3
 800495e:	2100      	movs	r1, #0
 8004960:	2001      	movs	r0, #1
 8004962:	f000 fcb7 	bl	80052d4 <xQueueGenericCreate>
 8004966:	4602      	mov	r2, r0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	609a      	str	r2, [r3, #8]
	
	/* register spi_freertos_base into list */
	spi_rtos_list_append(spi_rtos);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff ff81 	bl	8004874 <spi_rtos_list_append>
	return SPI_FREERTOS_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <spi_freertos_set_check_config_callback>:

/* Set callback for check SPI configuration (CPHA, CPOL, rate, etc.)
 * before transaction */
void spi_freertos_set_check_config_callback(spi_freertos_nss_t* spi,
	void (*check_spi_conf_callback)(SPI_HandleTypeDef *hspi))
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
	spi->check_spi_conf_callback = check_spi_conf_callback;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	60da      	str	r2, [r3, #12]
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr

08004996 <spi_freertos_write>:
/* Write registers through SPI */
spi_freertos_status spi_freertos_write(spi_freertos_nss_t* spi,
	const void* cmd,  size_t cmd_size,
	const void* data, size_t data_size,
	TickType_t mutex_timeout, uint32_t transfer_timeout)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b086      	sub	sp, #24
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	603b      	str	r3, [r7, #0]
	spi_freertos_status ret = SPI_FREERTOS_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef hal_ret;
	/* Take SPI mutex */
	if(xSemaphoreTake(spi->spi_rtos->mutex, mutex_timeout) == pdFALSE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 feab 	bl	800570c <xQueueSemaphoreTake>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d102      	bne.n	80049c2 <spi_freertos_write+0x2c>
	{
		ret = SPI_FREERTOS_BUSY;
 80049bc:	2303      	movs	r3, #3
 80049be:	75fb      	strb	r3, [r7, #23]
		goto exit;
 80049c0:	e060      	b.n	8004a84 <spi_freertos_write+0xee>
	}
	
	/* Check and change SPI configuration if nessessary */
	if(spi->check_spi_conf_callback != NULL)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d006      	beq.n	80049d8 <spi_freertos_write+0x42>
		spi->check_spi_conf_callback(spi->spi_rtos->hspi);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	4610      	mov	r0, r2
 80049d6:	4798      	blx	r3
	
	/* NSS to low - start of transaction */
	spi_freertos_nss_low(spi);
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f9fd 	bl	8004dd8 <spi_freertos_nss_low>
	
	/* Command data write from buffer */
	if(cmd_size == 0) goto data_stage;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01d      	beq.n	8004a20 <spi_freertos_write+0x8a>
	hal_ret = HAL_SPI_Transmit(spi->spi_rtos->hspi,
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6818      	ldr	r0, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	f7fd fac9 	bl	8001f88 <HAL_SPI_Transmit>
 80049f6:	4603      	mov	r3, r0
 80049f8:	75bb      	strb	r3, [r7, #22]
		(void *) cmd, cmd_size, transfer_timeout);
	switch(hal_ret)
 80049fa:	7dbb      	ldrb	r3, [r7, #22]
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d00c      	beq.n	8004a1a <spi_freertos_write+0x84>
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	dc0f      	bgt.n	8004a24 <spi_freertos_write+0x8e>
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d002      	beq.n	8004a0e <spi_freertos_write+0x78>
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d003      	beq.n	8004a14 <spi_freertos_write+0x7e>
			goto end_of_transaction;
		case HAL_TIMEOUT:
			ret = SPI_FREERTOS_TIMEOUT;
			goto end_of_transaction;
		default:
			break;
 8004a0c:	e00a      	b.n	8004a24 <spi_freertos_write+0x8e>
			ret = SPI_FREERTOS_ERR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 8004a12:	e02c      	b.n	8004a6e <spi_freertos_write+0xd8>
			ret = SPI_FREERTOS_BUSY;
 8004a14:	2303      	movs	r3, #3
 8004a16:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 8004a18:	e029      	b.n	8004a6e <spi_freertos_write+0xd8>
			ret = SPI_FREERTOS_TIMEOUT;
 8004a1a:	2304      	movs	r3, #4
 8004a1c:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 8004a1e:	e026      	b.n	8004a6e <spi_freertos_write+0xd8>
	if(cmd_size == 0) goto data_stage;
 8004a20:	bf00      	nop
 8004a22:	e000      	b.n	8004a26 <spi_freertos_write+0x90>
			break;
 8004a24:	bf00      	nop
	}
	
	data_stage:
	if(data_size == 0) goto end_of_transaction;
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01d      	beq.n	8004a68 <spi_freertos_write+0xd2>
	
	/* Data write from buffer */
	hal_ret = HAL_SPI_Transmit(spi->spi_rtos->hspi,
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6818      	ldr	r0, [r3, #0]
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	6839      	ldr	r1, [r7, #0]
 8004a3a:	f7fd faa5 	bl	8001f88 <HAL_SPI_Transmit>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	75bb      	strb	r3, [r7, #22]
		(void *) data, data_size, transfer_timeout);
	switch(hal_ret)
 8004a42:	7dbb      	ldrb	r3, [r7, #22]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d00c      	beq.n	8004a62 <spi_freertos_write+0xcc>
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	dc0f      	bgt.n	8004a6c <spi_freertos_write+0xd6>
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d002      	beq.n	8004a56 <spi_freertos_write+0xc0>
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d003      	beq.n	8004a5c <spi_freertos_write+0xc6>
			goto end_of_transaction;
		case HAL_TIMEOUT:
			ret = SPI_FREERTOS_TIMEOUT;
			goto end_of_transaction;
		default:
			break;
 8004a54:	e00a      	b.n	8004a6c <spi_freertos_write+0xd6>
			ret = SPI_FREERTOS_ERR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 8004a5a:	e008      	b.n	8004a6e <spi_freertos_write+0xd8>
			ret = SPI_FREERTOS_BUSY;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 8004a60:	e005      	b.n	8004a6e <spi_freertos_write+0xd8>
			ret = SPI_FREERTOS_TIMEOUT;
 8004a62:	2304      	movs	r3, #4
 8004a64:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 8004a66:	e002      	b.n	8004a6e <spi_freertos_write+0xd8>
	if(data_size == 0) goto end_of_transaction;
 8004a68:	bf00      	nop
 8004a6a:	e000      	b.n	8004a6e <spi_freertos_write+0xd8>
			break;
 8004a6c:	bf00      	nop
	}

	end_of_transaction:
	/* NSS to high - end of transaction */
	spi_freertos_nss_high(spi);
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f99d 	bl	8004dae <spi_freertos_nss_high>
	
	/* Give back SPI mutex */
	xSemaphoreGive(spi->spi_rtos->mutex);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6858      	ldr	r0, [r3, #4]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2100      	movs	r1, #0
 8004a80:	f000 fcb8 	bl	80053f4 <xQueueGenericSend>
	
	exit:
	return ret;
 8004a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <spi_freertos_read>:
/* Read registers through SPI */
spi_freertos_status spi_freertos_read(spi_freertos_nss_t* spi,
	const void* cmd,  size_t cmd_size,
	const void* data, size_t data_size,
	TickType_t mutex_timeout, uint32_t transfer_timeout)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b086      	sub	sp, #24
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	607a      	str	r2, [r7, #4]
 8004a9a:	603b      	str	r3, [r7, #0]
	spi_freertos_status ret = SPI_FREERTOS_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef hal_ret;
	/* Take SPI mutex */
	if(xSemaphoreTake(spi->spi_rtos->mutex, mutex_timeout) == pdFALSE)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fe2f 	bl	800570c <xQueueSemaphoreTake>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d102      	bne.n	8004aba <spi_freertos_read+0x2c>
	{
		ret = SPI_FREERTOS_BUSY;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8004ab8:	e060      	b.n	8004b7c <spi_freertos_read+0xee>
	}
	
	/* Check and change SPI configuration if nessessary */
	if(spi->check_spi_conf_callback != NULL)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d006      	beq.n	8004ad0 <spi_freertos_read+0x42>
		spi->check_spi_conf_callback(spi->spi_rtos->hspi);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	4610      	mov	r0, r2
 8004ace:	4798      	blx	r3
	
	/* NSS to low - start of transaction */
	spi_freertos_nss_low(spi);
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f981 	bl	8004dd8 <spi_freertos_nss_low>
	
	/* Command data write from buffer */
	if(cmd_size == 0) goto data_stage;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01d      	beq.n	8004b18 <spi_freertos_read+0x8a>
	hal_ret = HAL_SPI_Transmit(spi->spi_rtos->hspi,
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	68b9      	ldr	r1, [r7, #8]
 8004aea:	f7fd fa4d 	bl	8001f88 <HAL_SPI_Transmit>
 8004aee:	4603      	mov	r3, r0
 8004af0:	75bb      	strb	r3, [r7, #22]
		(void *) cmd, cmd_size, transfer_timeout);
	switch(hal_ret)
 8004af2:	7dbb      	ldrb	r3, [r7, #22]
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d00c      	beq.n	8004b12 <spi_freertos_read+0x84>
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	dc0f      	bgt.n	8004b1c <spi_freertos_read+0x8e>
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d002      	beq.n	8004b06 <spi_freertos_read+0x78>
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d003      	beq.n	8004b0c <spi_freertos_read+0x7e>
		goto end_of_transaction;
	case HAL_TIMEOUT:
		ret = SPI_FREERTOS_TIMEOUT;
		goto end_of_transaction;
	default:
		break;
 8004b04:	e00a      	b.n	8004b1c <spi_freertos_read+0x8e>
		ret = SPI_FREERTOS_ERR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004b0a:	e02c      	b.n	8004b66 <spi_freertos_read+0xd8>
		ret = SPI_FREERTOS_BUSY;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004b10:	e029      	b.n	8004b66 <spi_freertos_read+0xd8>
		ret = SPI_FREERTOS_TIMEOUT;
 8004b12:	2304      	movs	r3, #4
 8004b14:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004b16:	e026      	b.n	8004b66 <spi_freertos_read+0xd8>
	if(cmd_size == 0) goto data_stage;
 8004b18:	bf00      	nop
 8004b1a:	e000      	b.n	8004b1e <spi_freertos_read+0x90>
		break;
 8004b1c:	bf00      	nop
	}
	
	data_stage:
	if(data_size == 0) goto end_of_transaction;
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01d      	beq.n	8004b60 <spi_freertos_read+0xd2>
	
	/* Data read to buffer */
	hal_ret = HAL_SPI_Receive(spi->spi_rtos->hspi,
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b30:	6839      	ldr	r1, [r7, #0]
 8004b32:	f7fd fb65 	bl	8002200 <HAL_SPI_Receive>
 8004b36:	4603      	mov	r3, r0
 8004b38:	75bb      	strb	r3, [r7, #22]
		(void *) data, data_size, transfer_timeout);
	switch(hal_ret)
 8004b3a:	7dbb      	ldrb	r3, [r7, #22]
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d00c      	beq.n	8004b5a <spi_freertos_read+0xcc>
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	dc0f      	bgt.n	8004b64 <spi_freertos_read+0xd6>
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d002      	beq.n	8004b4e <spi_freertos_read+0xc0>
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d003      	beq.n	8004b54 <spi_freertos_read+0xc6>
		goto end_of_transaction;
	case HAL_TIMEOUT:
		ret = SPI_FREERTOS_TIMEOUT;
		goto end_of_transaction;
	default:
		break;
 8004b4c:	e00a      	b.n	8004b64 <spi_freertos_read+0xd6>
		ret = SPI_FREERTOS_ERR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004b52:	e008      	b.n	8004b66 <spi_freertos_read+0xd8>
		ret = SPI_FREERTOS_BUSY;
 8004b54:	2303      	movs	r3, #3
 8004b56:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004b58:	e005      	b.n	8004b66 <spi_freertos_read+0xd8>
		ret = SPI_FREERTOS_TIMEOUT;
 8004b5a:	2304      	movs	r3, #4
 8004b5c:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004b5e:	e002      	b.n	8004b66 <spi_freertos_read+0xd8>
	if(data_size == 0) goto end_of_transaction;
 8004b60:	bf00      	nop
 8004b62:	e000      	b.n	8004b66 <spi_freertos_read+0xd8>
		break;
 8004b64:	bf00      	nop
	}

	end_of_transaction:
	/* NSS to high - end of transaction */
	spi_freertos_nss_high(spi);
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f921 	bl	8004dae <spi_freertos_nss_high>
	
	/* Give back SPI mutex */
	xSemaphoreGive(spi->spi_rtos->mutex);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6858      	ldr	r0, [r3, #4]
 8004b72:	2300      	movs	r3, #0
 8004b74:	2200      	movs	r2, #0
 8004b76:	2100      	movs	r1, #0
 8004b78:	f000 fc3c 	bl	80053f4 <xQueueGenericSend>
	
	exit:
	return ret;
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <spi_freertos_write_dma>:
/* Write registers through SPI using DMA */
spi_freertos_status spi_freertos_write_dma(spi_freertos_nss_t* spi,
	const void* cmd,  size_t cmd_size,
	const void* data, size_t data_size,
	TickType_t mutex_timeout, TickType_t transfer_timeout)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b086      	sub	sp, #24
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	607a      	str	r2, [r7, #4]
 8004b92:	603b      	str	r3, [r7, #0]
	spi_freertos_status ret = SPI_FREERTOS_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef hal_ret;
	/* Take SPI mutex */
	if(xSemaphoreTake(spi->spi_rtos->mutex, mutex_timeout) == pdFALSE)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fdb3 	bl	800570c <xQueueSemaphoreTake>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <spi_freertos_write_dma+0x2c>
	{
		ret = SPI_FREERTOS_BUSY;
 8004bac:	2303      	movs	r3, #3
 8004bae:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8004bb0:	e06e      	b.n	8004c90 <spi_freertos_write_dma+0x10a>
	}
	
	/* Check and change SPI configuration if nessessary */
	if(spi->check_spi_conf_callback != NULL)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d006      	beq.n	8004bc8 <spi_freertos_write_dma+0x42>
		spi->check_spi_conf_callback(spi->spi_rtos->hspi);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	6812      	ldr	r2, [r2, #0]
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4798      	blx	r3
	
	/* NSS to low - start of transaction */
	spi_freertos_nss_low(spi);
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 f905 	bl	8004dd8 <spi_freertos_nss_low>
	
	/* Command data DMA write from buffer */
	if(cmd_size == 0) goto data_stage;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d024      	beq.n	8004c1e <spi_freertos_write_dma+0x98>
	hal_ret = HAL_SPI_Transmit_DMA(spi->spi_rtos->hspi,
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	b292      	uxth	r2, r2
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fd fdc1 	bl	8002768 <HAL_SPI_Transmit_DMA>
 8004be6:	4603      	mov	r3, r0
 8004be8:	75bb      	strb	r3, [r7, #22]
		(void *) cmd, cmd_size);
	switch(hal_ret)
 8004bea:	7dbb      	ldrb	r3, [r7, #22]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d00d      	beq.n	8004c0c <spi_freertos_write_dma+0x86>
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d00e      	beq.n	8004c12 <spi_freertos_write_dma+0x8c>
		goto end_of_transaction;
	case HAL_BUSY:
		ret = SPI_FREERTOS_BUSY;
		goto end_of_transaction;
	default:
		break;
 8004bf4:	bf00      	nop
	}
	
	/* Waiting for transfer complete */
	if(xSemaphoreTake(spi->spi_rtos->tx_complete, transfer_timeout)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fd84 	bl	800570c <xQueueSemaphoreTake>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10b      	bne.n	8004c22 <spi_freertos_write_dma+0x9c>
 8004c0a:	e005      	b.n	8004c18 <spi_freertos_write_dma+0x92>
		ret = SPI_FREERTOS_ERR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004c10:	e033      	b.n	8004c7a <spi_freertos_write_dma+0xf4>
		ret = SPI_FREERTOS_BUSY;
 8004c12:	2303      	movs	r3, #3
 8004c14:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004c16:	e030      	b.n	8004c7a <spi_freertos_write_dma+0xf4>
		== pdFALSE)
	{
		ret = SPI_FREERTOS_TIMEOUT;
 8004c18:	2304      	movs	r3, #4
 8004c1a:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004c1c:	e02d      	b.n	8004c7a <spi_freertos_write_dma+0xf4>
	if(cmd_size == 0) goto data_stage;
 8004c1e:	bf00      	nop
 8004c20:	e000      	b.n	8004c24 <spi_freertos_write_dma+0x9e>
	}
	
	data_stage:
 8004c22:	bf00      	nop
	if(data_size == 0) goto end_of_transaction;
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d024      	beq.n	8004c74 <spi_freertos_write_dma+0xee>
	
	/* Data DMA write from buffer */
	hal_ret = HAL_SPI_Transmit_DMA(spi->spi_rtos->hspi,
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6a3a      	ldr	r2, [r7, #32]
 8004c32:	b292      	uxth	r2, r2
 8004c34:	6839      	ldr	r1, [r7, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fd fd96 	bl	8002768 <HAL_SPI_Transmit_DMA>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	75bb      	strb	r3, [r7, #22]
		(void *) data, data_size);
	switch(hal_ret)
 8004c40:	7dbb      	ldrb	r3, [r7, #22]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d00d      	beq.n	8004c62 <spi_freertos_write_dma+0xdc>
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d00e      	beq.n	8004c68 <spi_freertos_write_dma+0xe2>
		goto end_of_transaction;
	case HAL_BUSY:
		ret = SPI_FREERTOS_BUSY;
		goto end_of_transaction;
	default:
		break;
 8004c4a:	bf00      	nop
	}
	
	/* Waiting for transfer complete */
	if(xSemaphoreTake(spi->spi_rtos->tx_complete, transfer_timeout)	== pdFALSE)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fd59 	bl	800570c <xQueueSemaphoreTake>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10b      	bne.n	8004c78 <spi_freertos_write_dma+0xf2>
 8004c60:	e005      	b.n	8004c6e <spi_freertos_write_dma+0xe8>
		ret = SPI_FREERTOS_ERR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004c66:	e008      	b.n	8004c7a <spi_freertos_write_dma+0xf4>
		ret = SPI_FREERTOS_BUSY;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004c6c:	e005      	b.n	8004c7a <spi_freertos_write_dma+0xf4>
	{
		ret = SPI_FREERTOS_TIMEOUT;
 8004c6e:	2304      	movs	r3, #4
 8004c70:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004c72:	e002      	b.n	8004c7a <spi_freertos_write_dma+0xf4>
	if(data_size == 0) goto end_of_transaction;
 8004c74:	bf00      	nop
 8004c76:	e000      	b.n	8004c7a <spi_freertos_write_dma+0xf4>
	}
	
	end_of_transaction:
 8004c78:	bf00      	nop
	/* NSS to high - end of transaction */
	spi_freertos_nss_high(spi);
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 f897 	bl	8004dae <spi_freertos_nss_high>
	
	/* Give back SPI mutex */
	xSemaphoreGive(spi->spi_rtos->mutex);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6858      	ldr	r0, [r3, #4]
 8004c86:	2300      	movs	r3, #0
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	f000 fbb2 	bl	80053f4 <xQueueGenericSend>
	
	exit:
	return ret;
 8004c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <spi_freertos_read_dma>:
/* Read registers through SPI using DMA */
spi_freertos_status spi_freertos_read_dma(spi_freertos_nss_t* spi,
	const void* cmd,  size_t cmd_size,
	const void* data, size_t data_size,
	TickType_t mutex_timeout, TickType_t transfer_timeout)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b086      	sub	sp, #24
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	607a      	str	r2, [r7, #4]
 8004ca6:	603b      	str	r3, [r7, #0]
	spi_freertos_status ret = SPI_FREERTOS_OK;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef hal_ret;
	/* Take SPI mutex */
	if(xSemaphoreTake(spi->spi_rtos->mutex, mutex_timeout) == pdFALSE)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fd29 	bl	800570c <xQueueSemaphoreTake>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d102      	bne.n	8004cc6 <spi_freertos_read_dma+0x2c>
	{
		ret = SPI_FREERTOS_BUSY;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8004cc4:	e06e      	b.n	8004da4 <spi_freertos_read_dma+0x10a>
	}
	
	/* Check and change SPI configuration if nessessary */
	if(spi->check_spi_conf_callback != NULL)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d006      	beq.n	8004cdc <spi_freertos_read_dma+0x42>
		spi->check_spi_conf_callback(spi->spi_rtos->hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4798      	blx	r3
	
	/* NSS to low - start of transaction */
	spi_freertos_nss_low(spi);
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f87b 	bl	8004dd8 <spi_freertos_nss_low>
	
	/* Command data DMA write from buffer */
	if(cmd_size == 0) goto data_stage;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d024      	beq.n	8004d32 <spi_freertos_read_dma+0x98>
	hal_ret = HAL_SPI_Transmit_DMA(spi->spi_rtos->hspi,
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	b292      	uxth	r2, r2
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fd fd37 	bl	8002768 <HAL_SPI_Transmit_DMA>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	75bb      	strb	r3, [r7, #22]
		(void *) cmd, cmd_size);
	switch(hal_ret)
 8004cfe:	7dbb      	ldrb	r3, [r7, #22]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d00d      	beq.n	8004d20 <spi_freertos_read_dma+0x86>
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d00e      	beq.n	8004d26 <spi_freertos_read_dma+0x8c>
		goto end_of_transaction;
	case HAL_BUSY:
		ret = SPI_FREERTOS_BUSY;
		goto end_of_transaction;
	default:
		break;
 8004d08:	bf00      	nop
	}
	
	/* Waiting for transfer complete */
	if(xSemaphoreTake(spi->spi_rtos->tx_complete, transfer_timeout)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fcfa 	bl	800570c <xQueueSemaphoreTake>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10b      	bne.n	8004d36 <spi_freertos_read_dma+0x9c>
 8004d1e:	e005      	b.n	8004d2c <spi_freertos_read_dma+0x92>
		ret = SPI_FREERTOS_ERR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004d24:	e033      	b.n	8004d8e <spi_freertos_read_dma+0xf4>
		ret = SPI_FREERTOS_BUSY;
 8004d26:	2303      	movs	r3, #3
 8004d28:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004d2a:	e030      	b.n	8004d8e <spi_freertos_read_dma+0xf4>
		== pdFALSE)
	{
		ret = SPI_FREERTOS_TIMEOUT;
 8004d2c:	2304      	movs	r3, #4
 8004d2e:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004d30:	e02d      	b.n	8004d8e <spi_freertos_read_dma+0xf4>
	if(cmd_size == 0) goto data_stage;
 8004d32:	bf00      	nop
 8004d34:	e000      	b.n	8004d38 <spi_freertos_read_dma+0x9e>
	}
	
	data_stage:
 8004d36:	bf00      	nop
	if(data_size == 0) goto end_of_transaction;
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d024      	beq.n	8004d88 <spi_freertos_read_dma+0xee>
	
	/* Data DMA read to buffer */
	hal_ret = HAL_SPI_Receive_DMA(spi->spi_rtos->hspi,
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6a3a      	ldr	r2, [r7, #32]
 8004d46:	b292      	uxth	r2, r2
 8004d48:	6839      	ldr	r1, [r7, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fd fdc2 	bl	80028d4 <HAL_SPI_Receive_DMA>
 8004d50:	4603      	mov	r3, r0
 8004d52:	75bb      	strb	r3, [r7, #22]
		(void *) data, data_size);
	switch(hal_ret)
 8004d54:	7dbb      	ldrb	r3, [r7, #22]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d00d      	beq.n	8004d76 <spi_freertos_read_dma+0xdc>
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d00e      	beq.n	8004d7c <spi_freertos_read_dma+0xe2>
		goto end_of_transaction;
	case HAL_BUSY:
		ret = SPI_FREERTOS_BUSY;
		goto end_of_transaction;
	default:
		break;
 8004d5e:	bf00      	nop
	}
	
	/* Waiting for transfer complete */
	if(xSemaphoreTake(spi->spi_rtos->rx_complete, transfer_timeout)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 fccf 	bl	800570c <xQueueSemaphoreTake>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10b      	bne.n	8004d8c <spi_freertos_read_dma+0xf2>
 8004d74:	e005      	b.n	8004d82 <spi_freertos_read_dma+0xe8>
		ret = SPI_FREERTOS_ERR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004d7a:	e008      	b.n	8004d8e <spi_freertos_read_dma+0xf4>
		ret = SPI_FREERTOS_BUSY;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004d80:	e005      	b.n	8004d8e <spi_freertos_read_dma+0xf4>
		== pdFALSE)
	{
		ret = SPI_FREERTOS_TIMEOUT;
 8004d82:	2304      	movs	r3, #4
 8004d84:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004d86:	e002      	b.n	8004d8e <spi_freertos_read_dma+0xf4>
	if(data_size == 0) goto end_of_transaction;
 8004d88:	bf00      	nop
 8004d8a:	e000      	b.n	8004d8e <spi_freertos_read_dma+0xf4>
	}
	
	end_of_transaction:
 8004d8c:	bf00      	nop
	/* NSS to high - end of transaction */
	spi_freertos_nss_high(spi);
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 f80d 	bl	8004dae <spi_freertos_nss_high>
	
	/* Give back SPI mutex */
	xSemaphoreGive(spi->spi_rtos->mutex);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6858      	ldr	r0, [r3, #4]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2100      	movs	r1, #0
 8004da0:	f000 fb28 	bl	80053f4 <xQueueGenericSend>
	
	exit:
	return ret;
 8004da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <spi_freertos_nss_high>:
	return ret;
}

/* Set NSS pin to high */
inline void spi_freertos_nss_high(spi_freertos_nss_t* spi)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
	if(spi->nss.port != NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d008      	beq.n	8004dd0 <spi_freertos_nss_high+0x22>
		HAL_GPIO_WritePin(spi->nss.port, spi->nss.pin, GPIO_PIN_SET);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6858      	ldr	r0, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	891b      	ldrh	r3, [r3, #8]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2201      	movs	r2, #1
 8004dca:	4619      	mov	r1, r3
 8004dcc:	f7fc fbac 	bl	8001528 <HAL_GPIO_WritePin>
}
 8004dd0:	bf00      	nop
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <spi_freertos_nss_low>:

/* Set NSS pin to low */
inline void spi_freertos_nss_low(spi_freertos_nss_t* spi)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	if(spi->nss.port != NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d008      	beq.n	8004dfa <spi_freertos_nss_low+0x22>
		HAL_GPIO_WritePin(spi->nss.port, spi->nss.pin, GPIO_PIN_RESET);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6858      	ldr	r0, [r3, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	891b      	ldrh	r3, [r3, #8]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2200      	movs	r2, #0
 8004df4:	4619      	mov	r1, r3
 8004df6:	f7fc fb97 	bl	8001528 <HAL_GPIO_WritePin>
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi);
*/

/* RX complete */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60bb      	str	r3, [r7, #8]
	struct spi_rtos_list *item = spi_rtos_list_find_item(hspi);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff fd69 	bl	80048e8 <spi_rtos_list_find_item>
 8004e16:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d014      	beq.n	8004e48 <HAL_SPI_RxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->spi_rtos->rx_complete,
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f107 0208 	add.w	r2, r7, #8
 8004e28:	4611      	mov	r1, r2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fbe0 	bl	80055f0 <xQueueGiveFromISR>
		&xHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d009      	beq.n	8004e4a <HAL_SPI_RxCpltCallback+0x46>
 8004e36:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <HAL_SPI_RxCpltCallback+0x4c>)
 8004e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	e000      	b.n	8004e4a <HAL_SPI_RxCpltCallback+0x46>
	if(item == NULL) return;
 8004e48:	bf00      	nop
}
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	e000ed04 	.word	0xe000ed04

08004e54 <HAL_SPI_TxCpltCallback>:

/* TX complete */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60bb      	str	r3, [r7, #8]
	struct spi_rtos_list *item = spi_rtos_list_find_item(hspi);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7ff fd41 	bl	80048e8 <spi_rtos_list_find_item>
 8004e66:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d014      	beq.n	8004e98 <HAL_SPI_TxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->spi_rtos->tx_complete,
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f107 0208 	add.w	r2, r7, #8
 8004e78:	4611      	mov	r1, r2
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fbb8 	bl	80055f0 <xQueueGiveFromISR>
		&xHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d009      	beq.n	8004e9a <HAL_SPI_TxCpltCallback+0x46>
 8004e86:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <HAL_SPI_TxCpltCallback+0x4c>)
 8004e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	e000      	b.n	8004e9a <HAL_SPI_TxCpltCallback+0x46>
	if(item == NULL) return;
 8004e98:	bf00      	nop
}
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	e000ed04 	.word	0xe000ed04

08004ea4 <HAL_SPI_TxRxCpltCallback>:

/* Full-duplex complete - rx_complete semaphore is used*/
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60bb      	str	r3, [r7, #8]
	struct spi_rtos_list *item = spi_rtos_list_find_item(hspi);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff fd19 	bl	80048e8 <spi_rtos_list_find_item>
 8004eb6:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d014      	beq.n	8004ee8 <HAL_SPI_TxRxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->spi_rtos->rx_complete,
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f107 0208 	add.w	r2, r7, #8
 8004ec8:	4611      	mov	r1, r2
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fb90 	bl	80055f0 <xQueueGiveFromISR>
		&xHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d009      	beq.n	8004eea <HAL_SPI_TxRxCpltCallback+0x46>
 8004ed6:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <HAL_SPI_TxRxCpltCallback+0x4c>)
 8004ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	e000      	b.n	8004eea <HAL_SPI_TxRxCpltCallback+0x46>
	if(item == NULL) return;
 8004ee8:	bf00      	nop
}
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <uart_rtos_list_find_item>:
}

/* Find item in SPI FreeRTOS list with mached SPI_HandleTypeDef */
static struct uart_rtos_list* uart_rtos_list_find_item
	(UART_HandleTypeDef* huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]

	struct uart_rtos_list *item = uart_rtos_list_begin;
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <uart_rtos_list_find_item+0x38>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 8004f02:	e008      	b.n	8004f16 <uart_rtos_list_find_item+0x22>
	{
		if(item->uart_rtos->huart == huart)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d006      	beq.n	8004f1e <uart_rtos_list_find_item+0x2a>
			break;
		else
			item = item->next;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1f3      	bne.n	8004f04 <uart_rtos_list_find_item+0x10>
 8004f1c:	e000      	b.n	8004f20 <uart_rtos_list_find_item+0x2c>
			break;
 8004f1e:	bf00      	nop
	}
	return item;
 8004f20:	68fb      	ldr	r3, [r7, #12]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr
 8004f2c:	20000354 	.word	0x20000354

08004f30 <HAL_UART_RxCpltCallback>:
	return rtn;
}

/* USART RX complete inperrupt */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60bb      	str	r3, [r7, #8]
	struct uart_rtos_list *item = uart_rtos_list_find_item(huart);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff ffd9 	bl	8004ef4 <uart_rtos_list_find_item>
 8004f42:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d014      	beq.n	8004f74 <HAL_UART_RxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->uart_rtos->rx_complete,	&xHigherPriorityTaskWoken);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f107 0208 	add.w	r2, r7, #8
 8004f54:	4611      	mov	r1, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fb4a 	bl	80055f0 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <HAL_UART_RxCpltCallback+0x46>
 8004f62:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <HAL_UART_RxCpltCallback+0x4c>)
 8004f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	e000      	b.n	8004f76 <HAL_UART_RxCpltCallback+0x46>
	if(item == NULL) return;
 8004f74:	bf00      	nop
}
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	e000ed04 	.word	0xe000ed04

08004f80 <HAL_UART_TxCpltCallback>:

/* USART TX complete inperrupt */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60bb      	str	r3, [r7, #8]
	struct uart_rtos_list *item = uart_rtos_list_find_item(huart);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff ffb1 	bl	8004ef4 <uart_rtos_list_find_item>
 8004f92:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d014      	beq.n	8004fc4 <HAL_UART_TxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->uart_rtos->tx_complete,	&xHigherPriorityTaskWoken);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	f107 0208 	add.w	r2, r7, #8
 8004fa4:	4611      	mov	r1, r2
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fb22 	bl	80055f0 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d009      	beq.n	8004fc6 <HAL_UART_TxCpltCallback+0x46>
 8004fb2:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <HAL_UART_TxCpltCallback+0x4c>)
 8004fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	e000      	b.n	8004fc6 <HAL_UART_TxCpltCallback+0x46>
	if(item == NULL) return;
 8004fc4:	bf00      	nop
}
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	e000ed04 	.word	0xe000ed04

08004fd0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fe2:	2b84      	cmp	r3, #132	; 0x84
 8004fe4:	d005      	beq.n	8004ff2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004fe6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4413      	add	r3, r2
 8004fee:	3303      	adds	r3, #3
 8004ff0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr

08004ffe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005002:	f000 ff31 	bl	8005e68 <vTaskStartScheduler>
  
  return osOK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	bd80      	pop	{r7, pc}

0800500c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800500c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800500e:	b089      	sub	sp, #36	; 0x24
 8005010:	af04      	add	r7, sp, #16
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d020      	beq.n	8005060 <osThreadCreate+0x54>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d01c      	beq.n	8005060 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685c      	ldr	r4, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681d      	ldr	r5, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691e      	ldr	r6, [r3, #16]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff ffc9 	bl	8004fd0 <makeFreeRtosPriority>
 800503e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005048:	9202      	str	r2, [sp, #8]
 800504a:	9301      	str	r3, [sp, #4]
 800504c:	9100      	str	r1, [sp, #0]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	4632      	mov	r2, r6
 8005052:	4629      	mov	r1, r5
 8005054:	4620      	mov	r0, r4
 8005056:	f000 fd66 	bl	8005b26 <xTaskCreateStatic>
 800505a:	4603      	mov	r3, r0
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	e01c      	b.n	800509a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685c      	ldr	r4, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800506c:	b29e      	uxth	r6, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff ffab 	bl	8004fd0 <makeFreeRtosPriority>
 800507a:	4602      	mov	r2, r0
 800507c:	f107 030c 	add.w	r3, r7, #12
 8005080:	9301      	str	r3, [sp, #4]
 8005082:	9200      	str	r2, [sp, #0]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	4632      	mov	r2, r6
 8005088:	4629      	mov	r1, r5
 800508a:	4620      	mov	r0, r4
 800508c:	f000 fda7 	bl	8005bde <xTaskCreate>
 8005090:	4603      	mov	r3, r0
 8005092:	2b01      	cmp	r3, #1
 8005094:	d001      	beq.n	800509a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005096:	2300      	movs	r3, #0
 8005098:	e000      	b.n	800509c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800509a:	68fb      	ldr	r3, [r7, #12]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f103 0208 	add.w	r2, r3, #8
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f04f 32ff 	mov.w	r2, #4294967295
 80050bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f103 0208 	add.w	r2, r3, #8
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f103 0208 	add.w	r2, r3, #8
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr

080050e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bc80      	pop	{r7}
 80050f8:	4770      	bx	lr

080050fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050fa:	b480      	push	{r7}
 80050fc:	b085      	sub	sp, #20
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	601a      	str	r2, [r3, #0]
}
 8005136:	bf00      	nop
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	d103      	bne.n	8005160 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	e00c      	b.n	800517a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3308      	adds	r3, #8
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	e002      	b.n	800516e <vListInsert+0x2e>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	429a      	cmp	r2, r3
 8005178:	d2f6      	bcs.n	8005168 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	601a      	str	r2, [r3, #0]
}
 80051a6:	bf00      	nop
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr

080051b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6892      	ldr	r2, [r2, #8]
 80051c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6852      	ldr	r2, [r2, #4]
 80051d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d103      	bne.n	80051e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	1e5a      	subs	r2, r3, #1
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr
	...

08005204 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10a      	bne.n	800522e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800522a:	bf00      	nop
 800522c:	e7fe      	b.n	800522c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800522e:	f001 ff45 	bl	80070bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523a:	68f9      	ldr	r1, [r7, #12]
 800523c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800523e:	fb01 f303 	mul.w	r3, r1, r3
 8005242:	441a      	add	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525e:	3b01      	subs	r3, #1
 8005260:	68f9      	ldr	r1, [r7, #12]
 8005262:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005264:	fb01 f303 	mul.w	r3, r1, r3
 8005268:	441a      	add	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	22ff      	movs	r2, #255	; 0xff
 8005272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	22ff      	movs	r2, #255	; 0xff
 800527a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d114      	bne.n	80052ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01a      	beq.n	80052c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	3310      	adds	r3, #16
 8005290:	4618      	mov	r0, r3
 8005292:	f001 f841 	bl	8006318 <xTaskRemoveFromEventList>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d012      	beq.n	80052c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800529c:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <xQueueGenericReset+0xcc>)
 800529e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	e009      	b.n	80052c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3310      	adds	r3, #16
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff fef6 	bl	80050a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3324      	adds	r3, #36	; 0x24
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff fef1 	bl	80050a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052c2:	f001 ff2b 	bl	800711c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052c6:	2301      	movs	r3, #1
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	e000ed04 	.word	0xe000ed04

080052d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08a      	sub	sp, #40	; 0x28
 80052d8:	af02      	add	r7, sp, #8
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	4613      	mov	r3, r2
 80052e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <xQueueGenericCreate+0x2a>
	__asm volatile
 80052e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	613b      	str	r3, [r7, #16]
}
 80052fa:	bf00      	nop
 80052fc:	e7fe      	b.n	80052fc <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005304:	2300      	movs	r3, #0
 8005306:	61fb      	str	r3, [r7, #28]
 8005308:	e004      	b.n	8005314 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	3348      	adds	r3, #72	; 0x48
 8005318:	4618      	mov	r0, r3
 800531a:	f001 ffcf 	bl	80072bc <pvPortMalloc>
 800531e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00f      	beq.n	8005346 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	3348      	adds	r3, #72	; 0x48
 800532a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005334:	79fa      	ldrb	r2, [r7, #7]
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	4613      	mov	r3, r2
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	68b9      	ldr	r1, [r7, #8]
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f805 	bl	8005350 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005346:	69bb      	ldr	r3, [r7, #24]
	}
 8005348:	4618      	mov	r0, r3
 800534a:	3720      	adds	r7, #32
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d103      	bne.n	800536c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e002      	b.n	8005372 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800537e:	2101      	movs	r1, #1
 8005380:	69b8      	ldr	r0, [r7, #24]
 8005382:	f7ff ff3f 	bl	8005204 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005386:	bf00      	nop
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800538e:	b580      	push	{r7, lr}
 8005390:	b082      	sub	sp, #8
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00e      	beq.n	80053ba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80053ae:	2300      	movs	r3, #0
 80053b0:	2200      	movs	r2, #0
 80053b2:	2100      	movs	r1, #0
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f81d 	bl	80053f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80053ba:	bf00      	nop
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b086      	sub	sp, #24
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	4603      	mov	r3, r0
 80053ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80053cc:	2301      	movs	r3, #1
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	2300      	movs	r3, #0
 80053d2:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	461a      	mov	r2, r3
 80053d8:	6939      	ldr	r1, [r7, #16]
 80053da:	6978      	ldr	r0, [r7, #20]
 80053dc:	f7ff ff7a 	bl	80052d4 <xQueueGenericCreate>
 80053e0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f7ff ffd3 	bl	800538e <prvInitialiseMutex>

		return pxNewQueue;
 80053e8:	68fb      	ldr	r3, [r7, #12]
	}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08e      	sub	sp, #56	; 0x38
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005402:	2300      	movs	r3, #0
 8005404:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <xQueueGenericSend+0x32>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d103      	bne.n	8005434 <xQueueGenericSend+0x40>
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <xQueueGenericSend+0x44>
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <xQueueGenericSend+0x46>
 8005438:	2300      	movs	r3, #0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <xQueueGenericSend+0x60>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	2b02      	cmp	r3, #2
 8005458:	d103      	bne.n	8005462 <xQueueGenericSend+0x6e>
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545e:	2b01      	cmp	r3, #1
 8005460:	d101      	bne.n	8005466 <xQueueGenericSend+0x72>
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <xQueueGenericSend+0x74>
 8005466:	2300      	movs	r3, #0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10a      	bne.n	8005482 <xQueueGenericSend+0x8e>
	__asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	623b      	str	r3, [r7, #32]
}
 800547e:	bf00      	nop
 8005480:	e7fe      	b.n	8005480 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005482:	f001 f90d 	bl	80066a0 <xTaskGetSchedulerState>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <xQueueGenericSend+0x9e>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <xQueueGenericSend+0xa2>
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <xQueueGenericSend+0xa4>
 8005496:	2300      	movs	r3, #0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10a      	bne.n	80054b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	61fb      	str	r3, [r7, #28]
}
 80054ae:	bf00      	nop
 80054b0:	e7fe      	b.n	80054b0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054b2:	f001 fe03 	bl	80070bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054be:	429a      	cmp	r2, r3
 80054c0:	d302      	bcc.n	80054c8 <xQueueGenericSend+0xd4>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d129      	bne.n	800551c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054ce:	f000 fa40 	bl	8005952 <prvCopyDataToQueue>
 80054d2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d010      	beq.n	80054fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	3324      	adds	r3, #36	; 0x24
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 ff19 	bl	8006318 <xTaskRemoveFromEventList>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d013      	beq.n	8005514 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054ec:	4b3f      	ldr	r3, [pc, #252]	; (80055ec <xQueueGenericSend+0x1f8>)
 80054ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	e00a      	b.n	8005514 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d007      	beq.n	8005514 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005504:	4b39      	ldr	r3, [pc, #228]	; (80055ec <xQueueGenericSend+0x1f8>)
 8005506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005514:	f001 fe02 	bl	800711c <vPortExitCritical>
				return pdPASS;
 8005518:	2301      	movs	r3, #1
 800551a:	e063      	b.n	80055e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d103      	bne.n	800552a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005522:	f001 fdfb 	bl	800711c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005526:	2300      	movs	r3, #0
 8005528:	e05c      	b.n	80055e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800552a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552c:	2b00      	cmp	r3, #0
 800552e:	d106      	bne.n	800553e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005530:	f107 0314 	add.w	r3, r7, #20
 8005534:	4618      	mov	r0, r3
 8005536:	f000 ff51 	bl	80063dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800553a:	2301      	movs	r3, #1
 800553c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800553e:	f001 fded 	bl	800711c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005542:	f000 fcfb 	bl	8005f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005546:	f001 fdb9 	bl	80070bc <vPortEnterCritical>
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005550:	b25b      	sxtb	r3, r3
 8005552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005556:	d103      	bne.n	8005560 <xQueueGenericSend+0x16c>
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005566:	b25b      	sxtb	r3, r3
 8005568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556c:	d103      	bne.n	8005576 <xQueueGenericSend+0x182>
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005576:	f001 fdd1 	bl	800711c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800557a:	1d3a      	adds	r2, r7, #4
 800557c:	f107 0314 	add.w	r3, r7, #20
 8005580:	4611      	mov	r1, r2
 8005582:	4618      	mov	r0, r3
 8005584:	f000 ff40 	bl	8006408 <xTaskCheckForTimeOut>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d124      	bne.n	80055d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800558e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005590:	f000 fab1 	bl	8005af6 <prvIsQueueFull>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d018      	beq.n	80055cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	3310      	adds	r3, #16
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	4611      	mov	r1, r2
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fe94 	bl	80062d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055aa:	f000 fa3c 	bl	8005a26 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055ae:	f000 fcd3 	bl	8005f58 <xTaskResumeAll>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f47f af7c 	bne.w	80054b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80055ba:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <xQueueGenericSend+0x1f8>)
 80055bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	e772      	b.n	80054b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ce:	f000 fa2a 	bl	8005a26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055d2:	f000 fcc1 	bl	8005f58 <xTaskResumeAll>
 80055d6:	e76c      	b.n	80054b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055da:	f000 fa24 	bl	8005a26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055de:	f000 fcbb 	bl	8005f58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055e2:	2300      	movs	r3, #0
		}
	}
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3738      	adds	r7, #56	; 0x38
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	e000ed04 	.word	0xe000ed04

080055f0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08e      	sub	sp, #56	; 0x38
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	623b      	str	r3, [r7, #32]
}
 8005616:	bf00      	nop
 8005618:	e7fe      	b.n	8005618 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	61fb      	str	r3, [r7, #28]
}
 8005634:	bf00      	nop
 8005636:	e7fe      	b.n	8005636 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d103      	bne.n	8005648 <xQueueGiveFromISR+0x58>
 8005640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <xQueueGiveFromISR+0x5c>
 8005648:	2301      	movs	r3, #1
 800564a:	e000      	b.n	800564e <xQueueGiveFromISR+0x5e>
 800564c:	2300      	movs	r3, #0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10a      	bne.n	8005668 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	61bb      	str	r3, [r7, #24]
}
 8005664:	bf00      	nop
 8005666:	e7fe      	b.n	8005666 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005668:	f001 fdea 	bl	8007240 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800566c:	f3ef 8211 	mrs	r2, BASEPRI
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	617a      	str	r2, [r7, #20]
 8005682:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005684:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005686:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005694:	429a      	cmp	r2, r3
 8005696:	d22b      	bcs.n	80056f0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800569e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80056ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b2:	d112      	bne.n	80056da <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d016      	beq.n	80056ea <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	3324      	adds	r3, #36	; 0x24
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fe29 	bl	8006318 <xTaskRemoveFromEventList>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00e      	beq.n	80056ea <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00b      	beq.n	80056ea <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2201      	movs	r2, #1
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	e007      	b.n	80056ea <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056de:	3301      	adds	r3, #1
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	b25a      	sxtb	r2, r3
 80056e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80056ea:	2301      	movs	r3, #1
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
 80056ee:	e001      	b.n	80056f4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056f0:	2300      	movs	r3, #0
 80056f2:	637b      	str	r3, [r7, #52]	; 0x34
 80056f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005702:	4618      	mov	r0, r3
 8005704:	3738      	adds	r7, #56	; 0x38
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b08e      	sub	sp, #56	; 0x38
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005716:	2300      	movs	r3, #0
 8005718:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800571e:	2300      	movs	r3, #0
 8005720:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	623b      	str	r3, [r7, #32]
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	61fb      	str	r3, [r7, #28]
}
 8005758:	bf00      	nop
 800575a:	e7fe      	b.n	800575a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800575c:	f000 ffa0 	bl	80066a0 <xTaskGetSchedulerState>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d102      	bne.n	800576c <xQueueSemaphoreTake+0x60>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <xQueueSemaphoreTake+0x64>
 800576c:	2301      	movs	r3, #1
 800576e:	e000      	b.n	8005772 <xQueueSemaphoreTake+0x66>
 8005770:	2300      	movs	r3, #0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10a      	bne.n	800578c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	61bb      	str	r3, [r7, #24]
}
 8005788:	bf00      	nop
 800578a:	e7fe      	b.n	800578a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800578c:	f001 fc96 	bl	80070bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	2b00      	cmp	r3, #0
 800579a:	d024      	beq.n	80057e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	1e5a      	subs	r2, r3, #1
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d104      	bne.n	80057b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80057ac:	f001 f942 	bl	8006a34 <pvTaskIncrementMutexHeldCount>
 80057b0:	4602      	mov	r2, r0
 80057b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00f      	beq.n	80057de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c0:	3310      	adds	r3, #16
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fda8 	bl	8006318 <xTaskRemoveFromEventList>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057ce:	4b54      	ldr	r3, [pc, #336]	; (8005920 <xQueueSemaphoreTake+0x214>)
 80057d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057de:	f001 fc9d 	bl	800711c <vPortExitCritical>
				return pdPASS;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e097      	b.n	8005916 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d111      	bne.n	8005810 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	617b      	str	r3, [r7, #20]
}
 8005804:	bf00      	nop
 8005806:	e7fe      	b.n	8005806 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005808:	f001 fc88 	bl	800711c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800580c:	2300      	movs	r3, #0
 800580e:	e082      	b.n	8005916 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005816:	f107 030c 	add.w	r3, r7, #12
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fdde 	bl	80063dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005820:	2301      	movs	r3, #1
 8005822:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005824:	f001 fc7a 	bl	800711c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005828:	f000 fb88 	bl	8005f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800582c:	f001 fc46 	bl	80070bc <vPortEnterCritical>
 8005830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005836:	b25b      	sxtb	r3, r3
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d103      	bne.n	8005846 <xQueueSemaphoreTake+0x13a>
 800583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800584c:	b25b      	sxtb	r3, r3
 800584e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005852:	d103      	bne.n	800585c <xQueueSemaphoreTake+0x150>
 8005854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800585c:	f001 fc5e 	bl	800711c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005860:	463a      	mov	r2, r7
 8005862:	f107 030c 	add.w	r3, r7, #12
 8005866:	4611      	mov	r1, r2
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fdcd 	bl	8006408 <xTaskCheckForTimeOut>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d132      	bne.n	80058da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005874:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005876:	f000 f928 	bl	8005aca <prvIsQueueEmpty>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d026      	beq.n	80058ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d109      	bne.n	800589c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005888:	f001 fc18 	bl	80070bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800588c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4618      	mov	r0, r3
 8005892:	f000 ff23 	bl	80066dc <xTaskPriorityInherit>
 8005896:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005898:	f001 fc40 	bl	800711c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589e:	3324      	adds	r3, #36	; 0x24
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	4611      	mov	r1, r2
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fd13 	bl	80062d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058ac:	f000 f8bb 	bl	8005a26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058b0:	f000 fb52 	bl	8005f58 <xTaskResumeAll>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f47f af68 	bne.w	800578c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80058bc:	4b18      	ldr	r3, [pc, #96]	; (8005920 <xQueueSemaphoreTake+0x214>)
 80058be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	e75e      	b.n	800578c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80058ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058d0:	f000 f8a9 	bl	8005a26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058d4:	f000 fb40 	bl	8005f58 <xTaskResumeAll>
 80058d8:	e758      	b.n	800578c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80058da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058dc:	f000 f8a3 	bl	8005a26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058e0:	f000 fb3a 	bl	8005f58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058e6:	f000 f8f0 	bl	8005aca <prvIsQueueEmpty>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f43f af4d 	beq.w	800578c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00d      	beq.n	8005914 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80058f8:	f001 fbe0 	bl	80070bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80058fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058fe:	f000 f811 	bl	8005924 <prvGetDisinheritPriorityAfterTimeout>
 8005902:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fff2 	bl	80068f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005910:	f001 fc04 	bl	800711c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005914:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005916:	4618      	mov	r0, r3
 8005918:	3738      	adds	r7, #56	; 0x38
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	e000ed04 	.word	0xe000ed04

08005924 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	2b00      	cmp	r3, #0
 8005932:	d006      	beq.n	8005942 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f1c3 0307 	rsb	r3, r3, #7
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	e001      	b.n	8005946 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005946:	68fb      	ldr	r3, [r7, #12]
	}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr

08005952 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b086      	sub	sp, #24
 8005956:	af00      	add	r7, sp, #0
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	60b9      	str	r1, [r7, #8]
 800595c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800595e:	2300      	movs	r3, #0
 8005960:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10d      	bne.n	800598c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d14d      	bne.n	8005a14 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	4618      	mov	r0, r3
 800597e:	f000 ff33 	bl	80067e8 <xTaskPriorityDisinherit>
 8005982:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	605a      	str	r2, [r3, #4]
 800598a:	e043      	b.n	8005a14 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d119      	bne.n	80059c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6898      	ldr	r0, [r3, #8]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	461a      	mov	r2, r3
 800599c:	68b9      	ldr	r1, [r7, #8]
 800599e:	f001 fe8b 	bl	80076b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	441a      	add	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d32b      	bcc.n	8005a14 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	609a      	str	r2, [r3, #8]
 80059c4:	e026      	b.n	8005a14 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	68d8      	ldr	r0, [r3, #12]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	461a      	mov	r2, r3
 80059d0:	68b9      	ldr	r1, [r7, #8]
 80059d2:	f001 fe71 	bl	80076b8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	425b      	negs	r3, r3
 80059e0:	441a      	add	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d207      	bcs.n	8005a02 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	425b      	negs	r3, r3
 80059fc:	441a      	add	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d105      	bne.n	8005a14 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005a1c:	697b      	ldr	r3, [r7, #20]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a2e:	f001 fb45 	bl	80070bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a38:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a3a:	e011      	b.n	8005a60 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d012      	beq.n	8005a6a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3324      	adds	r3, #36	; 0x24
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 fc65 	bl	8006318 <xTaskRemoveFromEventList>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a54:	f000 fd3a 	bl	80064cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	dce9      	bgt.n	8005a3c <prvUnlockQueue+0x16>
 8005a68:	e000      	b.n	8005a6c <prvUnlockQueue+0x46>
					break;
 8005a6a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	22ff      	movs	r2, #255	; 0xff
 8005a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a74:	f001 fb52 	bl	800711c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a78:	f001 fb20 	bl	80070bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a82:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a84:	e011      	b.n	8005aaa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d012      	beq.n	8005ab4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3310      	adds	r3, #16
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 fc40 	bl	8006318 <xTaskRemoveFromEventList>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a9e:	f000 fd15 	bl	80064cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005aa2:	7bbb      	ldrb	r3, [r7, #14]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005aaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	dce9      	bgt.n	8005a86 <prvUnlockQueue+0x60>
 8005ab2:	e000      	b.n	8005ab6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ab4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	22ff      	movs	r2, #255	; 0xff
 8005aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005abe:	f001 fb2d 	bl	800711c <vPortExitCritical>
}
 8005ac2:	bf00      	nop
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ad2:	f001 faf3 	bl	80070bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	e001      	b.n	8005ae8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ae8:	f001 fb18 	bl	800711c <vPortExitCritical>

	return xReturn;
 8005aec:	68fb      	ldr	r3, [r7, #12]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005afe:	f001 fadd 	bl	80070bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d102      	bne.n	8005b14 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	e001      	b.n	8005b18 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b14:	2300      	movs	r3, #0
 8005b16:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b18:	f001 fb00 	bl	800711c <vPortExitCritical>

	return xReturn;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b08e      	sub	sp, #56	; 0x38
 8005b2a:	af04      	add	r7, sp, #16
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	607a      	str	r2, [r7, #4]
 8005b32:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10a      	bne.n	8005b50 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	623b      	str	r3, [r7, #32]
}
 8005b4c:	bf00      	nop
 8005b4e:	e7fe      	b.n	8005b4e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10a      	bne.n	8005b6c <xTaskCreateStatic+0x46>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	61fb      	str	r3, [r7, #28]
}
 8005b68:	bf00      	nop
 8005b6a:	e7fe      	b.n	8005b6a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b6c:	23b4      	movs	r3, #180	; 0xb4
 8005b6e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2bb4      	cmp	r3, #180	; 0xb4
 8005b74:	d00a      	beq.n	8005b8c <xTaskCreateStatic+0x66>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	61bb      	str	r3, [r7, #24]
}
 8005b88:	bf00      	nop
 8005b8a:	e7fe      	b.n	8005b8a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01e      	beq.n	8005bd0 <xTaskCreateStatic+0xaa>
 8005b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01b      	beq.n	8005bd0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005baa:	2300      	movs	r3, #0
 8005bac:	9303      	str	r3, [sp, #12]
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	9302      	str	r3, [sp, #8]
 8005bb2:	f107 0314 	add.w	r3, r7, #20
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f850 	bl	8005c68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bca:	f000 f8e3 	bl	8005d94 <prvAddNewTaskToReadyList>
 8005bce:	e001      	b.n	8005bd4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bd4:	697b      	ldr	r3, [r7, #20]
	}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3728      	adds	r7, #40	; 0x28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b08c      	sub	sp, #48	; 0x30
 8005be2:	af04      	add	r7, sp, #16
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	603b      	str	r3, [r7, #0]
 8005bea:	4613      	mov	r3, r2
 8005bec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f001 fb62 	bl	80072bc <pvPortMalloc>
 8005bf8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00e      	beq.n	8005c1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005c00:	20b4      	movs	r0, #180	; 0xb4
 8005c02:	f001 fb5b 	bl	80072bc <pvPortMalloc>
 8005c06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
 8005c14:	e005      	b.n	8005c22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c16:	6978      	ldr	r0, [r7, #20]
 8005c18:	f001 fc14 	bl	8007444 <vPortFree>
 8005c1c:	e001      	b.n	8005c22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d017      	beq.n	8005c58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c30:	88fa      	ldrh	r2, [r7, #6]
 8005c32:	2300      	movs	r3, #0
 8005c34:	9303      	str	r3, [sp, #12]
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	9302      	str	r3, [sp, #8]
 8005c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 f80e 	bl	8005c68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c4c:	69f8      	ldr	r0, [r7, #28]
 8005c4e:	f000 f8a1 	bl	8005d94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c52:	2301      	movs	r3, #1
 8005c54:	61bb      	str	r3, [r7, #24]
 8005c56:	e002      	b.n	8005c5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c58:	f04f 33ff 	mov.w	r3, #4294967295
 8005c5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
	}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3720      	adds	r7, #32
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c80:	3b01      	subs	r3, #1
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	f023 0307 	bic.w	r3, r3, #7
 8005c8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00a      	beq.n	8005cb0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	617b      	str	r3, [r7, #20]
}
 8005cac:	bf00      	nop
 8005cae:	e7fe      	b.n	8005cae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61fb      	str	r3, [r7, #28]
 8005cb4:	e012      	b.n	8005cdc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	4413      	add	r3, r2
 8005cbc:	7819      	ldrb	r1, [r3, #0]
 8005cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	3334      	adds	r3, #52	; 0x34
 8005cc6:	460a      	mov	r2, r1
 8005cc8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	4413      	add	r3, r2
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d006      	beq.n	8005ce4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	61fb      	str	r3, [r7, #28]
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	2b0f      	cmp	r3, #15
 8005ce0:	d9e9      	bls.n	8005cb6 <prvInitialiseNewTask+0x4e>
 8005ce2:	e000      	b.n	8005ce6 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005ce4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	2b06      	cmp	r3, #6
 8005cf2:	d901      	bls.n	8005cf8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005cf4:	2306      	movs	r3, #6
 8005cf6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d02:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	2200      	movs	r2, #0
 8005d08:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff f9e7 	bl	80050e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	3318      	adds	r3, #24
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff f9e2 	bl	80050e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	f1c3 0207 	rsb	r2, r3, #7
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d36:	2200      	movs	r2, #0
 8005d38:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d46:	334c      	adds	r3, #76	; 0x4c
 8005d48:	2260      	movs	r2, #96	; 0x60
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 fcc1 	bl	80076d4 <memset>
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	4a0c      	ldr	r2, [pc, #48]	; (8005d88 <prvInitialiseNewTask+0x120>)
 8005d56:	651a      	str	r2, [r3, #80]	; 0x50
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	4a0c      	ldr	r2, [pc, #48]	; (8005d8c <prvInitialiseNewTask+0x124>)
 8005d5c:	655a      	str	r2, [r3, #84]	; 0x54
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	4a0b      	ldr	r2, [pc, #44]	; (8005d90 <prvInitialiseNewTask+0x128>)
 8005d62:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	68f9      	ldr	r1, [r7, #12]
 8005d68:	69b8      	ldr	r0, [r7, #24]
 8005d6a:	f001 f8b7 	bl	8006edc <pxPortInitialiseStack>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d80:	bf00      	nop
 8005d82:	3720      	adds	r7, #32
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	08007928 	.word	0x08007928
 8005d8c:	08007948 	.word	0x08007948
 8005d90:	08007908 	.word	0x08007908

08005d94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d9c:	f001 f98e 	bl	80070bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005da0:	4b2a      	ldr	r3, [pc, #168]	; (8005e4c <prvAddNewTaskToReadyList+0xb8>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3301      	adds	r3, #1
 8005da6:	4a29      	ldr	r2, [pc, #164]	; (8005e4c <prvAddNewTaskToReadyList+0xb8>)
 8005da8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005daa:	4b29      	ldr	r3, [pc, #164]	; (8005e50 <prvAddNewTaskToReadyList+0xbc>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d109      	bne.n	8005dc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005db2:	4a27      	ldr	r2, [pc, #156]	; (8005e50 <prvAddNewTaskToReadyList+0xbc>)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005db8:	4b24      	ldr	r3, [pc, #144]	; (8005e4c <prvAddNewTaskToReadyList+0xb8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d110      	bne.n	8005de2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005dc0:	f000 fba8 	bl	8006514 <prvInitialiseTaskLists>
 8005dc4:	e00d      	b.n	8005de2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005dc6:	4b23      	ldr	r3, [pc, #140]	; (8005e54 <prvAddNewTaskToReadyList+0xc0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d109      	bne.n	8005de2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005dce:	4b20      	ldr	r3, [pc, #128]	; (8005e50 <prvAddNewTaskToReadyList+0xbc>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d802      	bhi.n	8005de2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ddc:	4a1c      	ldr	r2, [pc, #112]	; (8005e50 <prvAddNewTaskToReadyList+0xbc>)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005de2:	4b1d      	ldr	r3, [pc, #116]	; (8005e58 <prvAddNewTaskToReadyList+0xc4>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3301      	adds	r3, #1
 8005de8:	4a1b      	ldr	r2, [pc, #108]	; (8005e58 <prvAddNewTaskToReadyList+0xc4>)
 8005dea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	2201      	movs	r2, #1
 8005df2:	409a      	lsls	r2, r3
 8005df4:	4b19      	ldr	r3, [pc, #100]	; (8005e5c <prvAddNewTaskToReadyList+0xc8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <prvAddNewTaskToReadyList+0xc8>)
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e02:	4613      	mov	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4a15      	ldr	r2, [pc, #84]	; (8005e60 <prvAddNewTaskToReadyList+0xcc>)
 8005e0c:	441a      	add	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3304      	adds	r3, #4
 8005e12:	4619      	mov	r1, r3
 8005e14:	4610      	mov	r0, r2
 8005e16:	f7ff f970 	bl	80050fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e1a:	f001 f97f 	bl	800711c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e1e:	4b0d      	ldr	r3, [pc, #52]	; (8005e54 <prvAddNewTaskToReadyList+0xc0>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00e      	beq.n	8005e44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e26:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <prvAddNewTaskToReadyList+0xbc>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d207      	bcs.n	8005e44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e34:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <prvAddNewTaskToReadyList+0xd0>)
 8005e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e44:	bf00      	nop
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	20000458 	.word	0x20000458
 8005e50:	20000358 	.word	0x20000358
 8005e54:	20000464 	.word	0x20000464
 8005e58:	20000474 	.word	0x20000474
 8005e5c:	20000460 	.word	0x20000460
 8005e60:	2000035c 	.word	0x2000035c
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08a      	sub	sp, #40	; 0x28
 8005e6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e76:	463a      	mov	r2, r7
 8005e78:	1d39      	adds	r1, r7, #4
 8005e7a:	f107 0308 	add.w	r3, r7, #8
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fa f966 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	9202      	str	r2, [sp, #8]
 8005e8c:	9301      	str	r3, [sp, #4]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	2300      	movs	r3, #0
 8005e94:	460a      	mov	r2, r1
 8005e96:	4921      	ldr	r1, [pc, #132]	; (8005f1c <vTaskStartScheduler+0xb4>)
 8005e98:	4821      	ldr	r0, [pc, #132]	; (8005f20 <vTaskStartScheduler+0xb8>)
 8005e9a:	f7ff fe44 	bl	8005b26 <xTaskCreateStatic>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4a20      	ldr	r2, [pc, #128]	; (8005f24 <vTaskStartScheduler+0xbc>)
 8005ea2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ea4:	4b1f      	ldr	r3, [pc, #124]	; (8005f24 <vTaskStartScheduler+0xbc>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005eac:	2301      	movs	r3, #1
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e001      	b.n	8005eb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d11b      	bne.n	8005ef4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	613b      	str	r3, [r7, #16]
}
 8005ece:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ed0:	4b15      	ldr	r3, [pc, #84]	; (8005f28 <vTaskStartScheduler+0xc0>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	334c      	adds	r3, #76	; 0x4c
 8005ed6:	4a15      	ldr	r2, [pc, #84]	; (8005f2c <vTaskStartScheduler+0xc4>)
 8005ed8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005eda:	4b15      	ldr	r3, [pc, #84]	; (8005f30 <vTaskStartScheduler+0xc8>)
 8005edc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ee2:	4b14      	ldr	r3, [pc, #80]	; (8005f34 <vTaskStartScheduler+0xcc>)
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005ee8:	4b13      	ldr	r3, [pc, #76]	; (8005f38 <vTaskStartScheduler+0xd0>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005eee:	f001 f873 	bl	8006fd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ef2:	e00e      	b.n	8005f12 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efa:	d10a      	bne.n	8005f12 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	60fb      	str	r3, [r7, #12]
}
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <vTaskStartScheduler+0xa8>
}
 8005f12:	bf00      	nop
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	080078e8 	.word	0x080078e8
 8005f20:	080064e5 	.word	0x080064e5
 8005f24:	2000047c 	.word	0x2000047c
 8005f28:	20000358 	.word	0x20000358
 8005f2c:	20000010 	.word	0x20000010
 8005f30:	20000478 	.word	0x20000478
 8005f34:	20000464 	.word	0x20000464
 8005f38:	2000045c 	.word	0x2000045c

08005f3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005f40:	4b04      	ldr	r3, [pc, #16]	; (8005f54 <vTaskSuspendAll+0x18>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3301      	adds	r3, #1
 8005f46:	4a03      	ldr	r2, [pc, #12]	; (8005f54 <vTaskSuspendAll+0x18>)
 8005f48:	6013      	str	r3, [r2, #0]
}
 8005f4a:	bf00      	nop
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc80      	pop	{r7}
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	20000480 	.word	0x20000480

08005f58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f66:	4b41      	ldr	r3, [pc, #260]	; (800606c <xTaskResumeAll+0x114>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	603b      	str	r3, [r7, #0]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f84:	f001 f89a 	bl	80070bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f88:	4b38      	ldr	r3, [pc, #224]	; (800606c <xTaskResumeAll+0x114>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	4a37      	ldr	r2, [pc, #220]	; (800606c <xTaskResumeAll+0x114>)
 8005f90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f92:	4b36      	ldr	r3, [pc, #216]	; (800606c <xTaskResumeAll+0x114>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d161      	bne.n	800605e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f9a:	4b35      	ldr	r3, [pc, #212]	; (8006070 <xTaskResumeAll+0x118>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d05d      	beq.n	800605e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fa2:	e02e      	b.n	8006002 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005fa4:	4b33      	ldr	r3, [pc, #204]	; (8006074 <xTaskResumeAll+0x11c>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	3318      	adds	r3, #24
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff f8fd 	bl	80051b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7ff f8f8 	bl	80051b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	409a      	lsls	r2, r3
 8005fc8:	4b2b      	ldr	r3, [pc, #172]	; (8006078 <xTaskResumeAll+0x120>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	4a2a      	ldr	r2, [pc, #168]	; (8006078 <xTaskResumeAll+0x120>)
 8005fd0:	6013      	str	r3, [r2, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4a27      	ldr	r2, [pc, #156]	; (800607c <xTaskResumeAll+0x124>)
 8005fe0:	441a      	add	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4610      	mov	r0, r2
 8005fea:	f7ff f886 	bl	80050fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff2:	4b23      	ldr	r3, [pc, #140]	; (8006080 <xTaskResumeAll+0x128>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d302      	bcc.n	8006002 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005ffc:	4b21      	ldr	r3, [pc, #132]	; (8006084 <xTaskResumeAll+0x12c>)
 8005ffe:	2201      	movs	r2, #1
 8006000:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006002:	4b1c      	ldr	r3, [pc, #112]	; (8006074 <xTaskResumeAll+0x11c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1cc      	bne.n	8005fa4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006010:	f000 fb22 	bl	8006658 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006014:	4b1c      	ldr	r3, [pc, #112]	; (8006088 <xTaskResumeAll+0x130>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d010      	beq.n	8006042 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006020:	f000 f836 	bl	8006090 <xTaskIncrementTick>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800602a:	4b16      	ldr	r3, [pc, #88]	; (8006084 <xTaskResumeAll+0x12c>)
 800602c:	2201      	movs	r2, #1
 800602e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3b01      	subs	r3, #1
 8006034:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1f1      	bne.n	8006020 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800603c:	4b12      	ldr	r3, [pc, #72]	; (8006088 <xTaskResumeAll+0x130>)
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006042:	4b10      	ldr	r3, [pc, #64]	; (8006084 <xTaskResumeAll+0x12c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d009      	beq.n	800605e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800604a:	2301      	movs	r3, #1
 800604c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800604e:	4b0f      	ldr	r3, [pc, #60]	; (800608c <xTaskResumeAll+0x134>)
 8006050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800605e:	f001 f85d 	bl	800711c <vPortExitCritical>

	return xAlreadyYielded;
 8006062:	68bb      	ldr	r3, [r7, #8]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	20000480 	.word	0x20000480
 8006070:	20000458 	.word	0x20000458
 8006074:	20000418 	.word	0x20000418
 8006078:	20000460 	.word	0x20000460
 800607c:	2000035c 	.word	0x2000035c
 8006080:	20000358 	.word	0x20000358
 8006084:	2000046c 	.word	0x2000046c
 8006088:	20000468 	.word	0x20000468
 800608c:	e000ed04 	.word	0xe000ed04

08006090 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006096:	2300      	movs	r3, #0
 8006098:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800609a:	4b51      	ldr	r3, [pc, #324]	; (80061e0 <xTaskIncrementTick+0x150>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f040 808d 	bne.w	80061be <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060a4:	4b4f      	ldr	r3, [pc, #316]	; (80061e4 <xTaskIncrementTick+0x154>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3301      	adds	r3, #1
 80060aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060ac:	4a4d      	ldr	r2, [pc, #308]	; (80061e4 <xTaskIncrementTick+0x154>)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d120      	bne.n	80060fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80060b8:	4b4b      	ldr	r3, [pc, #300]	; (80061e8 <xTaskIncrementTick+0x158>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	603b      	str	r3, [r7, #0]
}
 80060d4:	bf00      	nop
 80060d6:	e7fe      	b.n	80060d6 <xTaskIncrementTick+0x46>
 80060d8:	4b43      	ldr	r3, [pc, #268]	; (80061e8 <xTaskIncrementTick+0x158>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	4b43      	ldr	r3, [pc, #268]	; (80061ec <xTaskIncrementTick+0x15c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a41      	ldr	r2, [pc, #260]	; (80061e8 <xTaskIncrementTick+0x158>)
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	4a41      	ldr	r2, [pc, #260]	; (80061ec <xTaskIncrementTick+0x15c>)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6013      	str	r3, [r2, #0]
 80060ec:	4b40      	ldr	r3, [pc, #256]	; (80061f0 <xTaskIncrementTick+0x160>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3301      	adds	r3, #1
 80060f2:	4a3f      	ldr	r2, [pc, #252]	; (80061f0 <xTaskIncrementTick+0x160>)
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	f000 faaf 	bl	8006658 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060fa:	4b3e      	ldr	r3, [pc, #248]	; (80061f4 <xTaskIncrementTick+0x164>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	429a      	cmp	r2, r3
 8006102:	d34d      	bcc.n	80061a0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006104:	4b38      	ldr	r3, [pc, #224]	; (80061e8 <xTaskIncrementTick+0x158>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <xTaskIncrementTick+0x82>
 800610e:	2301      	movs	r3, #1
 8006110:	e000      	b.n	8006114 <xTaskIncrementTick+0x84>
 8006112:	2300      	movs	r3, #0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d004      	beq.n	8006122 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006118:	4b36      	ldr	r3, [pc, #216]	; (80061f4 <xTaskIncrementTick+0x164>)
 800611a:	f04f 32ff 	mov.w	r2, #4294967295
 800611e:	601a      	str	r2, [r3, #0]
					break;
 8006120:	e03e      	b.n	80061a0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006122:	4b31      	ldr	r3, [pc, #196]	; (80061e8 <xTaskIncrementTick+0x158>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	429a      	cmp	r2, r3
 8006138:	d203      	bcs.n	8006142 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800613a:	4a2e      	ldr	r2, [pc, #184]	; (80061f4 <xTaskIncrementTick+0x164>)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6013      	str	r3, [r2, #0]
						break;
 8006140:	e02e      	b.n	80061a0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	3304      	adds	r3, #4
 8006146:	4618      	mov	r0, r3
 8006148:	f7ff f832 	bl	80051b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006150:	2b00      	cmp	r3, #0
 8006152:	d004      	beq.n	800615e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	3318      	adds	r3, #24
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff f829 	bl	80051b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	2201      	movs	r2, #1
 8006164:	409a      	lsls	r2, r3
 8006166:	4b24      	ldr	r3, [pc, #144]	; (80061f8 <xTaskIncrementTick+0x168>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4313      	orrs	r3, r2
 800616c:	4a22      	ldr	r2, [pc, #136]	; (80061f8 <xTaskIncrementTick+0x168>)
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006174:	4613      	mov	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4a1f      	ldr	r2, [pc, #124]	; (80061fc <xTaskIncrementTick+0x16c>)
 800617e:	441a      	add	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	3304      	adds	r3, #4
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f7fe ffb7 	bl	80050fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006190:	4b1b      	ldr	r3, [pc, #108]	; (8006200 <xTaskIncrementTick+0x170>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	429a      	cmp	r2, r3
 8006198:	d3b4      	bcc.n	8006104 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800619a:	2301      	movs	r3, #1
 800619c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800619e:	e7b1      	b.n	8006104 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061a0:	4b17      	ldr	r3, [pc, #92]	; (8006200 <xTaskIncrementTick+0x170>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a6:	4915      	ldr	r1, [pc, #84]	; (80061fc <xTaskIncrementTick+0x16c>)
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d907      	bls.n	80061c8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80061b8:	2301      	movs	r3, #1
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	e004      	b.n	80061c8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80061be:	4b11      	ldr	r3, [pc, #68]	; (8006204 <xTaskIncrementTick+0x174>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3301      	adds	r3, #1
 80061c4:	4a0f      	ldr	r2, [pc, #60]	; (8006204 <xTaskIncrementTick+0x174>)
 80061c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80061c8:	4b0f      	ldr	r3, [pc, #60]	; (8006208 <xTaskIncrementTick+0x178>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80061d0:	2301      	movs	r3, #1
 80061d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80061d4:	697b      	ldr	r3, [r7, #20]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000480 	.word	0x20000480
 80061e4:	2000045c 	.word	0x2000045c
 80061e8:	20000410 	.word	0x20000410
 80061ec:	20000414 	.word	0x20000414
 80061f0:	20000470 	.word	0x20000470
 80061f4:	20000478 	.word	0x20000478
 80061f8:	20000460 	.word	0x20000460
 80061fc:	2000035c 	.word	0x2000035c
 8006200:	20000358 	.word	0x20000358
 8006204:	20000468 	.word	0x20000468
 8006208:	2000046c 	.word	0x2000046c

0800620c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006212:	4b29      	ldr	r3, [pc, #164]	; (80062b8 <vTaskSwitchContext+0xac>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800621a:	4b28      	ldr	r3, [pc, #160]	; (80062bc <vTaskSwitchContext+0xb0>)
 800621c:	2201      	movs	r2, #1
 800621e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006220:	e044      	b.n	80062ac <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006222:	4b26      	ldr	r3, [pc, #152]	; (80062bc <vTaskSwitchContext+0xb0>)
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006228:	4b25      	ldr	r3, [pc, #148]	; (80062c0 <vTaskSwitchContext+0xb4>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	fab3 f383 	clz	r3, r3
 8006234:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006236:	7afb      	ldrb	r3, [r7, #11]
 8006238:	f1c3 031f 	rsb	r3, r3, #31
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	4921      	ldr	r1, [pc, #132]	; (80062c4 <vTaskSwitchContext+0xb8>)
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	607b      	str	r3, [r7, #4]
}
 8006264:	bf00      	nop
 8006266:	e7fe      	b.n	8006266 <vTaskSwitchContext+0x5a>
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	4613      	mov	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4a14      	ldr	r2, [pc, #80]	; (80062c4 <vTaskSwitchContext+0xb8>)
 8006274:	4413      	add	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	605a      	str	r2, [r3, #4]
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	3308      	adds	r3, #8
 800628a:	429a      	cmp	r2, r3
 800628c:	d104      	bne.n	8006298 <vTaskSwitchContext+0x8c>
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	605a      	str	r2, [r3, #4]
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	4a0a      	ldr	r2, [pc, #40]	; (80062c8 <vTaskSwitchContext+0xbc>)
 80062a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062a2:	4b09      	ldr	r3, [pc, #36]	; (80062c8 <vTaskSwitchContext+0xbc>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	334c      	adds	r3, #76	; 0x4c
 80062a8:	4a08      	ldr	r2, [pc, #32]	; (80062cc <vTaskSwitchContext+0xc0>)
 80062aa:	6013      	str	r3, [r2, #0]
}
 80062ac:	bf00      	nop
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	20000480 	.word	0x20000480
 80062bc:	2000046c 	.word	0x2000046c
 80062c0:	20000460 	.word	0x20000460
 80062c4:	2000035c 	.word	0x2000035c
 80062c8:	20000358 	.word	0x20000358
 80062cc:	20000010 	.word	0x20000010

080062d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	60fb      	str	r3, [r7, #12]
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062f6:	4b07      	ldr	r3, [pc, #28]	; (8006314 <vTaskPlaceOnEventList+0x44>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	3318      	adds	r3, #24
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fe ff1e 	bl	8005140 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006304:	2101      	movs	r1, #1
 8006306:	6838      	ldr	r0, [r7, #0]
 8006308:	f000 fd82 	bl	8006e10 <prvAddCurrentTaskToDelayedList>
}
 800630c:	bf00      	nop
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	20000358 	.word	0x20000358

08006318 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10a      	bne.n	8006344 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	60fb      	str	r3, [r7, #12]
}
 8006340:	bf00      	nop
 8006342:	e7fe      	b.n	8006342 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	3318      	adds	r3, #24
 8006348:	4618      	mov	r0, r3
 800634a:	f7fe ff31 	bl	80051b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800634e:	4b1d      	ldr	r3, [pc, #116]	; (80063c4 <xTaskRemoveFromEventList+0xac>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d11c      	bne.n	8006390 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	3304      	adds	r3, #4
 800635a:	4618      	mov	r0, r3
 800635c:	f7fe ff28 	bl	80051b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	2201      	movs	r2, #1
 8006366:	409a      	lsls	r2, r3
 8006368:	4b17      	ldr	r3, [pc, #92]	; (80063c8 <xTaskRemoveFromEventList+0xb0>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4313      	orrs	r3, r2
 800636e:	4a16      	ldr	r2, [pc, #88]	; (80063c8 <xTaskRemoveFromEventList+0xb0>)
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006376:	4613      	mov	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4a13      	ldr	r2, [pc, #76]	; (80063cc <xTaskRemoveFromEventList+0xb4>)
 8006380:	441a      	add	r2, r3
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	3304      	adds	r3, #4
 8006386:	4619      	mov	r1, r3
 8006388:	4610      	mov	r0, r2
 800638a:	f7fe feb6 	bl	80050fa <vListInsertEnd>
 800638e:	e005      	b.n	800639c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	3318      	adds	r3, #24
 8006394:	4619      	mov	r1, r3
 8006396:	480e      	ldr	r0, [pc, #56]	; (80063d0 <xTaskRemoveFromEventList+0xb8>)
 8006398:	f7fe feaf 	bl	80050fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a0:	4b0c      	ldr	r3, [pc, #48]	; (80063d4 <xTaskRemoveFromEventList+0xbc>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d905      	bls.n	80063b6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063aa:	2301      	movs	r3, #1
 80063ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063ae:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <xTaskRemoveFromEventList+0xc0>)
 80063b0:	2201      	movs	r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	e001      	b.n	80063ba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80063ba:	697b      	ldr	r3, [r7, #20]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	20000480 	.word	0x20000480
 80063c8:	20000460 	.word	0x20000460
 80063cc:	2000035c 	.word	0x2000035c
 80063d0:	20000418 	.word	0x20000418
 80063d4:	20000358 	.word	0x20000358
 80063d8:	2000046c 	.word	0x2000046c

080063dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063e4:	4b06      	ldr	r3, [pc, #24]	; (8006400 <vTaskInternalSetTimeOutState+0x24>)
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80063ec:	4b05      	ldr	r3, [pc, #20]	; (8006404 <vTaskInternalSetTimeOutState+0x28>)
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	605a      	str	r2, [r3, #4]
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bc80      	pop	{r7}
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	20000470 	.word	0x20000470
 8006404:	2000045c 	.word	0x2000045c

08006408 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b088      	sub	sp, #32
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10a      	bne.n	800642e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	613b      	str	r3, [r7, #16]
}
 800642a:	bf00      	nop
 800642c:	e7fe      	b.n	800642c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	60fb      	str	r3, [r7, #12]
}
 8006446:	bf00      	nop
 8006448:	e7fe      	b.n	8006448 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800644a:	f000 fe37 	bl	80070bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800644e:	4b1d      	ldr	r3, [pc, #116]	; (80064c4 <xTaskCheckForTimeOut+0xbc>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006466:	d102      	bne.n	800646e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006468:	2300      	movs	r3, #0
 800646a:	61fb      	str	r3, [r7, #28]
 800646c:	e023      	b.n	80064b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <xTaskCheckForTimeOut+0xc0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d007      	beq.n	800648a <xTaskCheckForTimeOut+0x82>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	429a      	cmp	r2, r3
 8006482:	d302      	bcc.n	800648a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006484:	2301      	movs	r3, #1
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	e015      	b.n	80064b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	429a      	cmp	r2, r3
 8006492:	d20b      	bcs.n	80064ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	1ad2      	subs	r2, r2, r3
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7ff ff9b 	bl	80063dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064a6:	2300      	movs	r3, #0
 80064a8:	61fb      	str	r3, [r7, #28]
 80064aa:	e004      	b.n	80064b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064b2:	2301      	movs	r3, #1
 80064b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064b6:	f000 fe31 	bl	800711c <vPortExitCritical>

	return xReturn;
 80064ba:	69fb      	ldr	r3, [r7, #28]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3720      	adds	r7, #32
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	2000045c 	.word	0x2000045c
 80064c8:	20000470 	.word	0x20000470

080064cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064d0:	4b03      	ldr	r3, [pc, #12]	; (80064e0 <vTaskMissedYield+0x14>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
}
 80064d6:	bf00      	nop
 80064d8:	46bd      	mov	sp, r7
 80064da:	bc80      	pop	{r7}
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	2000046c 	.word	0x2000046c

080064e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064ec:	f000 f852 	bl	8006594 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064f0:	4b06      	ldr	r3, [pc, #24]	; (800650c <prvIdleTask+0x28>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d9f9      	bls.n	80064ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80064f8:	4b05      	ldr	r3, [pc, #20]	; (8006510 <prvIdleTask+0x2c>)
 80064fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006508:	e7f0      	b.n	80064ec <prvIdleTask+0x8>
 800650a:	bf00      	nop
 800650c:	2000035c 	.word	0x2000035c
 8006510:	e000ed04 	.word	0xe000ed04

08006514 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800651a:	2300      	movs	r3, #0
 800651c:	607b      	str	r3, [r7, #4]
 800651e:	e00c      	b.n	800653a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	4613      	mov	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4a12      	ldr	r2, [pc, #72]	; (8006574 <prvInitialiseTaskLists+0x60>)
 800652c:	4413      	add	r3, r2
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe fdb8 	bl	80050a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3301      	adds	r3, #1
 8006538:	607b      	str	r3, [r7, #4]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b06      	cmp	r3, #6
 800653e:	d9ef      	bls.n	8006520 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006540:	480d      	ldr	r0, [pc, #52]	; (8006578 <prvInitialiseTaskLists+0x64>)
 8006542:	f7fe fdaf 	bl	80050a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006546:	480d      	ldr	r0, [pc, #52]	; (800657c <prvInitialiseTaskLists+0x68>)
 8006548:	f7fe fdac 	bl	80050a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800654c:	480c      	ldr	r0, [pc, #48]	; (8006580 <prvInitialiseTaskLists+0x6c>)
 800654e:	f7fe fda9 	bl	80050a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006552:	480c      	ldr	r0, [pc, #48]	; (8006584 <prvInitialiseTaskLists+0x70>)
 8006554:	f7fe fda6 	bl	80050a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006558:	480b      	ldr	r0, [pc, #44]	; (8006588 <prvInitialiseTaskLists+0x74>)
 800655a:	f7fe fda3 	bl	80050a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800655e:	4b0b      	ldr	r3, [pc, #44]	; (800658c <prvInitialiseTaskLists+0x78>)
 8006560:	4a05      	ldr	r2, [pc, #20]	; (8006578 <prvInitialiseTaskLists+0x64>)
 8006562:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006564:	4b0a      	ldr	r3, [pc, #40]	; (8006590 <prvInitialiseTaskLists+0x7c>)
 8006566:	4a05      	ldr	r2, [pc, #20]	; (800657c <prvInitialiseTaskLists+0x68>)
 8006568:	601a      	str	r2, [r3, #0]
}
 800656a:	bf00      	nop
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	2000035c 	.word	0x2000035c
 8006578:	200003e8 	.word	0x200003e8
 800657c:	200003fc 	.word	0x200003fc
 8006580:	20000418 	.word	0x20000418
 8006584:	2000042c 	.word	0x2000042c
 8006588:	20000444 	.word	0x20000444
 800658c:	20000410 	.word	0x20000410
 8006590:	20000414 	.word	0x20000414

08006594 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800659a:	e019      	b.n	80065d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800659c:	f000 fd8e 	bl	80070bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80065a0:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <prvCheckTasksWaitingTermination+0x50>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	3304      	adds	r3, #4
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fe fdff 	bl	80051b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065b2:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <prvCheckTasksWaitingTermination+0x54>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	4a0b      	ldr	r2, [pc, #44]	; (80065e8 <prvCheckTasksWaitingTermination+0x54>)
 80065ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065bc:	4b0b      	ldr	r3, [pc, #44]	; (80065ec <prvCheckTasksWaitingTermination+0x58>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	4a0a      	ldr	r2, [pc, #40]	; (80065ec <prvCheckTasksWaitingTermination+0x58>)
 80065c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065c6:	f000 fda9 	bl	800711c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f810 	bl	80065f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065d0:	4b06      	ldr	r3, [pc, #24]	; (80065ec <prvCheckTasksWaitingTermination+0x58>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e1      	bne.n	800659c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	2000042c 	.word	0x2000042c
 80065e8:	20000458 	.word	0x20000458
 80065ec:	20000440 	.word	0x20000440

080065f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	334c      	adds	r3, #76	; 0x4c
 80065fc:	4618      	mov	r0, r3
 80065fe:	f001 f87f 	bl	8007700 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d108      	bne.n	800661e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	4618      	mov	r0, r3
 8006612:	f000 ff17 	bl	8007444 <vPortFree>
				vPortFree( pxTCB );
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 ff14 	bl	8007444 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800661c:	e018      	b.n	8006650 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006624:	2b01      	cmp	r3, #1
 8006626:	d103      	bne.n	8006630 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 ff0b 	bl	8007444 <vPortFree>
	}
 800662e:	e00f      	b.n	8006650 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006636:	2b02      	cmp	r3, #2
 8006638:	d00a      	beq.n	8006650 <prvDeleteTCB+0x60>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	60fb      	str	r3, [r7, #12]
}
 800664c:	bf00      	nop
 800664e:	e7fe      	b.n	800664e <prvDeleteTCB+0x5e>
	}
 8006650:	bf00      	nop
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800665e:	4b0e      	ldr	r3, [pc, #56]	; (8006698 <prvResetNextTaskUnblockTime+0x40>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <prvResetNextTaskUnblockTime+0x14>
 8006668:	2301      	movs	r3, #1
 800666a:	e000      	b.n	800666e <prvResetNextTaskUnblockTime+0x16>
 800666c:	2300      	movs	r3, #0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d004      	beq.n	800667c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006672:	4b0a      	ldr	r3, [pc, #40]	; (800669c <prvResetNextTaskUnblockTime+0x44>)
 8006674:	f04f 32ff 	mov.w	r2, #4294967295
 8006678:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800667a:	e008      	b.n	800668e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800667c:	4b06      	ldr	r3, [pc, #24]	; (8006698 <prvResetNextTaskUnblockTime+0x40>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	4a04      	ldr	r2, [pc, #16]	; (800669c <prvResetNextTaskUnblockTime+0x44>)
 800668c:	6013      	str	r3, [r2, #0]
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr
 8006698:	20000410 	.word	0x20000410
 800669c:	20000478 	.word	0x20000478

080066a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066a6:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <xTaskGetSchedulerState+0x34>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d102      	bne.n	80066b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066ae:	2301      	movs	r3, #1
 80066b0:	607b      	str	r3, [r7, #4]
 80066b2:	e008      	b.n	80066c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066b4:	4b08      	ldr	r3, [pc, #32]	; (80066d8 <xTaskGetSchedulerState+0x38>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d102      	bne.n	80066c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066bc:	2302      	movs	r3, #2
 80066be:	607b      	str	r3, [r7, #4]
 80066c0:	e001      	b.n	80066c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066c2:	2300      	movs	r3, #0
 80066c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066c6:	687b      	ldr	r3, [r7, #4]
	}
 80066c8:	4618      	mov	r0, r3
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc80      	pop	{r7}
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	20000464 	.word	0x20000464
 80066d8:	20000480 	.word	0x20000480

080066dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d06e      	beq.n	80067d0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f6:	4b39      	ldr	r3, [pc, #228]	; (80067dc <xTaskPriorityInherit+0x100>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d25e      	bcs.n	80067be <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	2b00      	cmp	r3, #0
 8006706:	db06      	blt.n	8006716 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006708:	4b34      	ldr	r3, [pc, #208]	; (80067dc <xTaskPriorityInherit+0x100>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670e:	f1c3 0207 	rsb	r2, r3, #7
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	6959      	ldr	r1, [r3, #20]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4a2e      	ldr	r2, [pc, #184]	; (80067e0 <xTaskPriorityInherit+0x104>)
 8006728:	4413      	add	r3, r2
 800672a:	4299      	cmp	r1, r3
 800672c:	d101      	bne.n	8006732 <xTaskPriorityInherit+0x56>
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <xTaskPriorityInherit+0x58>
 8006732:	2300      	movs	r3, #0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d03a      	beq.n	80067ae <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	3304      	adds	r3, #4
 800673c:	4618      	mov	r0, r3
 800673e:	f7fe fd37 	bl	80051b0 <uxListRemove>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d115      	bne.n	8006774 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674c:	4924      	ldr	r1, [pc, #144]	; (80067e0 <xTaskPriorityInherit+0x104>)
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	440b      	add	r3, r1
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <xTaskPriorityInherit+0x98>
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	2201      	movs	r2, #1
 8006764:	fa02 f303 	lsl.w	r3, r2, r3
 8006768:	43da      	mvns	r2, r3
 800676a:	4b1e      	ldr	r3, [pc, #120]	; (80067e4 <xTaskPriorityInherit+0x108>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4013      	ands	r3, r2
 8006770:	4a1c      	ldr	r2, [pc, #112]	; (80067e4 <xTaskPriorityInherit+0x108>)
 8006772:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006774:	4b19      	ldr	r3, [pc, #100]	; (80067dc <xTaskPriorityInherit+0x100>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006782:	2201      	movs	r2, #1
 8006784:	409a      	lsls	r2, r3
 8006786:	4b17      	ldr	r3, [pc, #92]	; (80067e4 <xTaskPriorityInherit+0x108>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4313      	orrs	r3, r2
 800678c:	4a15      	ldr	r2, [pc, #84]	; (80067e4 <xTaskPriorityInherit+0x108>)
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006794:	4613      	mov	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4a10      	ldr	r2, [pc, #64]	; (80067e0 <xTaskPriorityInherit+0x104>)
 800679e:	441a      	add	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	3304      	adds	r3, #4
 80067a4:	4619      	mov	r1, r3
 80067a6:	4610      	mov	r0, r2
 80067a8:	f7fe fca7 	bl	80050fa <vListInsertEnd>
 80067ac:	e004      	b.n	80067b8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067ae:	4b0b      	ldr	r3, [pc, #44]	; (80067dc <xTaskPriorityInherit+0x100>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80067b8:	2301      	movs	r3, #1
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	e008      	b.n	80067d0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067c2:	4b06      	ldr	r3, [pc, #24]	; (80067dc <xTaskPriorityInherit+0x100>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d201      	bcs.n	80067d0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80067cc:	2301      	movs	r3, #1
 80067ce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067d0:	68fb      	ldr	r3, [r7, #12]
	}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20000358 	.word	0x20000358
 80067e0:	2000035c 	.word	0x2000035c
 80067e4:	20000460 	.word	0x20000460

080067e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80067f4:	2300      	movs	r3, #0
 80067f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d06e      	beq.n	80068dc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80067fe:	4b3a      	ldr	r3, [pc, #232]	; (80068e8 <xTaskPriorityDisinherit+0x100>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	429a      	cmp	r2, r3
 8006806:	d00a      	beq.n	800681e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	60fb      	str	r3, [r7, #12]
}
 800681a:	bf00      	nop
 800681c:	e7fe      	b.n	800681c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10a      	bne.n	800683c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	60bb      	str	r3, [r7, #8]
}
 8006838:	bf00      	nop
 800683a:	e7fe      	b.n	800683a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006840:	1e5a      	subs	r2, r3, #1
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684e:	429a      	cmp	r2, r3
 8006850:	d044      	beq.n	80068dc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006856:	2b00      	cmp	r3, #0
 8006858:	d140      	bne.n	80068dc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	3304      	adds	r3, #4
 800685e:	4618      	mov	r0, r3
 8006860:	f7fe fca6 	bl	80051b0 <uxListRemove>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d115      	bne.n	8006896 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686e:	491f      	ldr	r1, [pc, #124]	; (80068ec <xTaskPriorityDisinherit+0x104>)
 8006870:	4613      	mov	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	440b      	add	r3, r1
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <xTaskPriorityDisinherit+0xae>
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	2201      	movs	r2, #1
 8006886:	fa02 f303 	lsl.w	r3, r2, r3
 800688a:	43da      	mvns	r2, r3
 800688c:	4b18      	ldr	r3, [pc, #96]	; (80068f0 <xTaskPriorityDisinherit+0x108>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4013      	ands	r3, r2
 8006892:	4a17      	ldr	r2, [pc, #92]	; (80068f0 <xTaskPriorityDisinherit+0x108>)
 8006894:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a2:	f1c3 0207 	rsb	r2, r3, #7
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ae:	2201      	movs	r2, #1
 80068b0:	409a      	lsls	r2, r3
 80068b2:	4b0f      	ldr	r3, [pc, #60]	; (80068f0 <xTaskPriorityDisinherit+0x108>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	4a0d      	ldr	r2, [pc, #52]	; (80068f0 <xTaskPriorityDisinherit+0x108>)
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c0:	4613      	mov	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4a08      	ldr	r2, [pc, #32]	; (80068ec <xTaskPriorityDisinherit+0x104>)
 80068ca:	441a      	add	r2, r3
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	3304      	adds	r3, #4
 80068d0:	4619      	mov	r1, r3
 80068d2:	4610      	mov	r0, r2
 80068d4:	f7fe fc11 	bl	80050fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80068d8:	2301      	movs	r3, #1
 80068da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068dc:	697b      	ldr	r3, [r7, #20]
	}
 80068de:	4618      	mov	r0, r3
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20000358 	.word	0x20000358
 80068ec:	2000035c 	.word	0x2000035c
 80068f0:	20000460 	.word	0x20000460

080068f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006902:	2301      	movs	r3, #1
 8006904:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 8088 	beq.w	8006a1e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10a      	bne.n	800692c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	60fb      	str	r3, [r7, #12]
}
 8006928:	bf00      	nop
 800692a:	e7fe      	b.n	800692a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d902      	bls.n	800693c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	61fb      	str	r3, [r7, #28]
 800693a:	e002      	b.n	8006942 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006940:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	429a      	cmp	r2, r3
 800694a:	d068      	beq.n	8006a1e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	429a      	cmp	r2, r3
 8006954:	d163      	bne.n	8006a1e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006956:	4b34      	ldr	r3, [pc, #208]	; (8006a28 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	429a      	cmp	r2, r3
 800695e:	d10a      	bne.n	8006976 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	60bb      	str	r3, [r7, #8]
}
 8006972:	bf00      	nop
 8006974:	e7fe      	b.n	8006974 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	2b00      	cmp	r3, #0
 8006988:	db04      	blt.n	8006994 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	f1c3 0207 	rsb	r2, r3, #7
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	6959      	ldr	r1, [r3, #20]
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	4613      	mov	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4a22      	ldr	r2, [pc, #136]	; (8006a2c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80069a4:	4413      	add	r3, r2
 80069a6:	4299      	cmp	r1, r3
 80069a8:	d101      	bne.n	80069ae <vTaskPriorityDisinheritAfterTimeout+0xba>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e000      	b.n	80069b0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80069ae:	2300      	movs	r3, #0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d034      	beq.n	8006a1e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	3304      	adds	r3, #4
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fe fbf9 	bl	80051b0 <uxListRemove>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d115      	bne.n	80069f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c8:	4918      	ldr	r1, [pc, #96]	; (8006a2c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80069ca:	4613      	mov	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	440b      	add	r3, r1
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10a      	bne.n	80069f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069de:	2201      	movs	r2, #1
 80069e0:	fa02 f303 	lsl.w	r3, r2, r3
 80069e4:	43da      	mvns	r2, r3
 80069e6:	4b12      	ldr	r3, [pc, #72]	; (8006a30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4013      	ands	r3, r2
 80069ec:	4a10      	ldr	r2, [pc, #64]	; (8006a30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80069ee:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f4:	2201      	movs	r2, #1
 80069f6:	409a      	lsls	r2, r3
 80069f8:	4b0d      	ldr	r3, [pc, #52]	; (8006a30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	4a0c      	ldr	r2, [pc, #48]	; (8006a30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4a07      	ldr	r2, [pc, #28]	; (8006a2c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006a10:	441a      	add	r2, r3
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	3304      	adds	r3, #4
 8006a16:	4619      	mov	r1, r3
 8006a18:	4610      	mov	r0, r2
 8006a1a:	f7fe fb6e 	bl	80050fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a1e:	bf00      	nop
 8006a20:	3720      	adds	r7, #32
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20000358 	.word	0x20000358
 8006a2c:	2000035c 	.word	0x2000035c
 8006a30:	20000460 	.word	0x20000460

08006a34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006a38:	4b07      	ldr	r3, [pc, #28]	; (8006a58 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d004      	beq.n	8006a4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006a40:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a46:	3201      	adds	r2, #1
 8006a48:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006a4a:	4b03      	ldr	r3, [pc, #12]	; (8006a58 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
	}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	20000358 	.word	0x20000358

08006a5c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006a6a:	f000 fb27 	bl	80070bc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006a6e:	4b29      	ldr	r3, [pc, #164]	; (8006b14 <xTaskNotifyWait+0xb8>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d01c      	beq.n	8006ab6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006a7c:	4b25      	ldr	r3, [pc, #148]	; (8006b14 <xTaskNotifyWait+0xb8>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	43d2      	mvns	r2, r2
 8006a88:	400a      	ands	r2, r1
 8006a8a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006a8e:	4b21      	ldr	r3, [pc, #132]	; (8006b14 <xTaskNotifyWait+0xb8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00b      	beq.n	8006ab6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	6838      	ldr	r0, [r7, #0]
 8006aa2:	f000 f9b5 	bl	8006e10 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006aa6:	4b1c      	ldr	r3, [pc, #112]	; (8006b18 <xTaskNotifyWait+0xbc>)
 8006aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006ab6:	f000 fb31 	bl	800711c <vPortExitCritical>

		taskENTER_CRITICAL();
 8006aba:	f000 faff 	bl	80070bc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d005      	beq.n	8006ad0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006ac4:	4b13      	ldr	r3, [pc, #76]	; (8006b14 <xTaskNotifyWait+0xb8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006ad0:	4b10      	ldr	r3, [pc, #64]	; (8006b14 <xTaskNotifyWait+0xb8>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d002      	beq.n	8006ae4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	e00a      	b.n	8006afa <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006ae4:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <xTaskNotifyWait+0xb8>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	43d2      	mvns	r2, r2
 8006af0:	400a      	ands	r2, r1
 8006af2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 8006af6:	2301      	movs	r3, #1
 8006af8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006afa:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <xTaskNotifyWait+0xb8>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8006b04:	f000 fb0a 	bl	800711c <vPortExitCritical>

		return xReturn;
 8006b08:	697b      	ldr	r3, [r7, #20]
	}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20000358 	.word	0x20000358
 8006b18:	e000ed04 	.word	0xe000ed04

08006b1c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08a      	sub	sp, #40	; 0x28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	603b      	str	r3, [r7, #0]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10a      	bne.n	8006b4c <xTaskGenericNotify+0x30>
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	61bb      	str	r3, [r7, #24]
}
 8006b48:	bf00      	nop
 8006b4a:	e7fe      	b.n	8006b4a <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006b50:	f000 fab4 	bl	80070bc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d004      	beq.n	8006b64 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006b6a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8006b74:	79fb      	ldrb	r3, [r7, #7]
 8006b76:	2b04      	cmp	r3, #4
 8006b78:	d82d      	bhi.n	8006bd6 <xTaskGenericNotify+0xba>
 8006b7a:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <xTaskGenericNotify+0x64>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006bd7 	.word	0x08006bd7
 8006b84:	08006b95 	.word	0x08006b95
 8006b88:	08006ba7 	.word	0x08006ba7
 8006b8c:	08006bb7 	.word	0x08006bb7
 8006b90:	08006bc1 	.word	0x08006bc1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006ba4:	e017      	b.n	8006bd6 <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006bb4:	e00f      	b.n	8006bd6 <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006bbe:	e00a      	b.n	8006bd6 <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006bc0:	7ffb      	ldrb	r3, [r7, #31]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d004      	beq.n	8006bd0 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006bce:	e001      	b.n	8006bd4 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8006bd4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006bd6:	7ffb      	ldrb	r3, [r7, #31]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d139      	bne.n	8006c50 <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	3304      	adds	r3, #4
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7fe fae5 	bl	80051b0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bea:	2201      	movs	r2, #1
 8006bec:	409a      	lsls	r2, r3
 8006bee:	4b1c      	ldr	r3, [pc, #112]	; (8006c60 <xTaskGenericNotify+0x144>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	4a1a      	ldr	r2, [pc, #104]	; (8006c60 <xTaskGenericNotify+0x144>)
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4a17      	ldr	r2, [pc, #92]	; (8006c64 <xTaskGenericNotify+0x148>)
 8006c06:	441a      	add	r2, r3
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4610      	mov	r0, r2
 8006c10:	f7fe fa73 	bl	80050fa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <xTaskGenericNotify+0x116>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	617b      	str	r3, [r7, #20]
}
 8006c2e:	bf00      	nop
 8006c30:	e7fe      	b.n	8006c30 <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c36:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <xTaskGenericNotify+0x14c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d907      	bls.n	8006c50 <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006c40:	4b0a      	ldr	r3, [pc, #40]	; (8006c6c <xTaskGenericNotify+0x150>)
 8006c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006c50:	f000 fa64 	bl	800711c <vPortExitCritical>

		return xReturn;
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3728      	adds	r7, #40	; 0x28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20000460 	.word	0x20000460
 8006c64:	2000035c 	.word	0x2000035c
 8006c68:	20000358 	.word	0x20000358
 8006c6c:	e000ed04 	.word	0xe000ed04

08006c70 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b08e      	sub	sp, #56	; 0x38
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	603b      	str	r3, [r7, #0]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006c80:	2301      	movs	r3, #1
 8006c82:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10a      	bne.n	8006ca0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c9c:	bf00      	nop
 8006c9e:	e7fe      	b.n	8006c9e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ca0:	f000 face 	bl	8007240 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8006ca8:	f3ef 8211 	mrs	r2, BASEPRI
 8006cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	623a      	str	r2, [r7, #32]
 8006cbe:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8006cc0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d004      	beq.n	8006cd4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	2b04      	cmp	r3, #4
 8006cea:	d82f      	bhi.n	8006d4c <xTaskGenericNotifyFromISR+0xdc>
 8006cec:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <xTaskGenericNotifyFromISR+0x84>)
 8006cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006d4d 	.word	0x08006d4d
 8006cf8:	08006d09 	.word	0x08006d09
 8006cfc:	08006d1b 	.word	0x08006d1b
 8006d00:	08006d2b 	.word	0x08006d2b
 8006d04:	08006d35 	.word	0x08006d35
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	431a      	orrs	r2, r3
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006d18:	e018      	b.n	8006d4c <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006d28:	e010      	b.n	8006d4c <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006d32:	e00b      	b.n	8006d4c <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006d34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d004      	beq.n	8006d46 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006d44:	e001      	b.n	8006d4a <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8006d4a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006d4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d146      	bne.n	8006de2 <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00a      	beq.n	8006d72 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	61bb      	str	r3, [r7, #24]
}
 8006d6e:	bf00      	nop
 8006d70:	e7fe      	b.n	8006d70 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d72:	4b21      	ldr	r3, [pc, #132]	; (8006df8 <xTaskGenericNotifyFromISR+0x188>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d11c      	bne.n	8006db4 <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe fa16 	bl	80051b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	2201      	movs	r2, #1
 8006d8a:	409a      	lsls	r2, r3
 8006d8c:	4b1b      	ldr	r3, [pc, #108]	; (8006dfc <xTaskGenericNotifyFromISR+0x18c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	4a1a      	ldr	r2, [pc, #104]	; (8006dfc <xTaskGenericNotifyFromISR+0x18c>)
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4a17      	ldr	r2, [pc, #92]	; (8006e00 <xTaskGenericNotifyFromISR+0x190>)
 8006da4:	441a      	add	r2, r3
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	3304      	adds	r3, #4
 8006daa:	4619      	mov	r1, r3
 8006dac:	4610      	mov	r0, r2
 8006dae:	f7fe f9a4 	bl	80050fa <vListInsertEnd>
 8006db2:	e005      	b.n	8006dc0 <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db6:	3318      	adds	r3, #24
 8006db8:	4619      	mov	r1, r3
 8006dba:	4812      	ldr	r0, [pc, #72]	; (8006e04 <xTaskGenericNotifyFromISR+0x194>)
 8006dbc:	f7fe f99d 	bl	80050fa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc4:	4b10      	ldr	r3, [pc, #64]	; (8006e08 <xTaskGenericNotifyFromISR+0x198>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d909      	bls.n	8006de2 <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	e002      	b.n	8006de2 <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <xTaskGenericNotifyFromISR+0x19c>)
 8006dde:	2201      	movs	r2, #1
 8006de0:	601a      	str	r2, [r3, #0]
 8006de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de4:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f383 8811 	msr	BASEPRI, r3
}
 8006dec:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3738      	adds	r7, #56	; 0x38
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	20000480 	.word	0x20000480
 8006dfc:	20000460 	.word	0x20000460
 8006e00:	2000035c 	.word	0x2000035c
 8006e04:	20000418 	.word	0x20000418
 8006e08:	20000358 	.word	0x20000358
 8006e0c:	2000046c 	.word	0x2000046c

08006e10 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e1a:	4b29      	ldr	r3, [pc, #164]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e20:	4b28      	ldr	r3, [pc, #160]	; (8006ec4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3304      	adds	r3, #4
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fe f9c2 	bl	80051b0 <uxListRemove>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10b      	bne.n	8006e4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006e32:	4b24      	ldr	r3, [pc, #144]	; (8006ec4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	2201      	movs	r2, #1
 8006e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3e:	43da      	mvns	r2, r3
 8006e40:	4b21      	ldr	r3, [pc, #132]	; (8006ec8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4013      	ands	r3, r2
 8006e46:	4a20      	ldr	r2, [pc, #128]	; (8006ec8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e50:	d10a      	bne.n	8006e68 <prvAddCurrentTaskToDelayedList+0x58>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d007      	beq.n	8006e68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e58:	4b1a      	ldr	r3, [pc, #104]	; (8006ec4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	4619      	mov	r1, r3
 8006e60:	481a      	ldr	r0, [pc, #104]	; (8006ecc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e62:	f7fe f94a 	bl	80050fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e66:	e026      	b.n	8006eb6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e70:	4b14      	ldr	r3, [pc, #80]	; (8006ec4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d209      	bcs.n	8006e94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e80:	4b13      	ldr	r3, [pc, #76]	; (8006ed0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	4b0f      	ldr	r3, [pc, #60]	; (8006ec4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	f7fe f957 	bl	8005140 <vListInsert>
}
 8006e92:	e010      	b.n	8006eb6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e94:	4b0f      	ldr	r3, [pc, #60]	; (8006ed4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	f7fe f94d 	bl	8005140 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ea6:	4b0c      	ldr	r3, [pc, #48]	; (8006ed8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d202      	bcs.n	8006eb6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006eb0:	4a09      	ldr	r2, [pc, #36]	; (8006ed8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	6013      	str	r3, [r2, #0]
}
 8006eb6:	bf00      	nop
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	2000045c 	.word	0x2000045c
 8006ec4:	20000358 	.word	0x20000358
 8006ec8:	20000460 	.word	0x20000460
 8006ecc:	20000444 	.word	0x20000444
 8006ed0:	20000414 	.word	0x20000414
 8006ed4:	20000410 	.word	0x20000410
 8006ed8:	20000478 	.word	0x20000478

08006edc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3b04      	subs	r3, #4
 8006eec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3b04      	subs	r3, #4
 8006efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f023 0201 	bic.w	r2, r3, #1
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3b04      	subs	r3, #4
 8006f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f0c:	4a08      	ldr	r2, [pc, #32]	; (8006f30 <pxPortInitialiseStack+0x54>)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3b14      	subs	r3, #20
 8006f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3b20      	subs	r3, #32
 8006f22:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f24:	68fb      	ldr	r3, [r7, #12]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bc80      	pop	{r7}
 8006f2e:	4770      	bx	lr
 8006f30:	08006f35 	.word	0x08006f35

08006f34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f3e:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <prvTaskExitError+0x54>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f46:	d00a      	beq.n	8006f5e <prvTaskExitError+0x2a>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	60fb      	str	r3, [r7, #12]
}
 8006f5a:	bf00      	nop
 8006f5c:	e7fe      	b.n	8006f5c <prvTaskExitError+0x28>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	60bb      	str	r3, [r7, #8]
}
 8006f70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f72:	bf00      	nop
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0fc      	beq.n	8006f74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f7a:	bf00      	nop
 8006f7c:	bf00      	nop
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bc80      	pop	{r7}
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	2000000c 	.word	0x2000000c
 8006f8c:	00000000 	.word	0x00000000

08006f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f90:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <pxCurrentTCBConst2>)
 8006f92:	6819      	ldr	r1, [r3, #0]
 8006f94:	6808      	ldr	r0, [r1, #0]
 8006f96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006f9a:	f380 8809 	msr	PSP, r0
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f04f 0000 	mov.w	r0, #0
 8006fa6:	f380 8811 	msr	BASEPRI, r0
 8006faa:	f04e 0e0d 	orr.w	lr, lr, #13
 8006fae:	4770      	bx	lr

08006fb0 <pxCurrentTCBConst2>:
 8006fb0:	20000358 	.word	0x20000358
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop

08006fb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006fb8:	4806      	ldr	r0, [pc, #24]	; (8006fd4 <prvPortStartFirstTask+0x1c>)
 8006fba:	6800      	ldr	r0, [r0, #0]
 8006fbc:	6800      	ldr	r0, [r0, #0]
 8006fbe:	f380 8808 	msr	MSP, r0
 8006fc2:	b662      	cpsie	i
 8006fc4:	b661      	cpsie	f
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	df00      	svc	0
 8006fd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fd2:	bf00      	nop
 8006fd4:	e000ed08 	.word	0xe000ed08

08006fd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006fde:	4b32      	ldr	r3, [pc, #200]	; (80070a8 <xPortStartScheduler+0xd0>)
 8006fe0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	22ff      	movs	r2, #255	; 0xff
 8006fee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007000:	b2da      	uxtb	r2, r3
 8007002:	4b2a      	ldr	r3, [pc, #168]	; (80070ac <xPortStartScheduler+0xd4>)
 8007004:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007006:	4b2a      	ldr	r3, [pc, #168]	; (80070b0 <xPortStartScheduler+0xd8>)
 8007008:	2207      	movs	r2, #7
 800700a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800700c:	e009      	b.n	8007022 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800700e:	4b28      	ldr	r3, [pc, #160]	; (80070b0 <xPortStartScheduler+0xd8>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3b01      	subs	r3, #1
 8007014:	4a26      	ldr	r2, [pc, #152]	; (80070b0 <xPortStartScheduler+0xd8>)
 8007016:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	b2db      	uxtb	r3, r3
 8007020:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007022:	78fb      	ldrb	r3, [r7, #3]
 8007024:	b2db      	uxtb	r3, r3
 8007026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702a:	2b80      	cmp	r3, #128	; 0x80
 800702c:	d0ef      	beq.n	800700e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800702e:	4b20      	ldr	r3, [pc, #128]	; (80070b0 <xPortStartScheduler+0xd8>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f1c3 0307 	rsb	r3, r3, #7
 8007036:	2b04      	cmp	r3, #4
 8007038:	d00a      	beq.n	8007050 <xPortStartScheduler+0x78>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	60bb      	str	r3, [r7, #8]
}
 800704c:	bf00      	nop
 800704e:	e7fe      	b.n	800704e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007050:	4b17      	ldr	r3, [pc, #92]	; (80070b0 <xPortStartScheduler+0xd8>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	021b      	lsls	r3, r3, #8
 8007056:	4a16      	ldr	r2, [pc, #88]	; (80070b0 <xPortStartScheduler+0xd8>)
 8007058:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800705a:	4b15      	ldr	r3, [pc, #84]	; (80070b0 <xPortStartScheduler+0xd8>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007062:	4a13      	ldr	r2, [pc, #76]	; (80070b0 <xPortStartScheduler+0xd8>)
 8007064:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	b2da      	uxtb	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800706e:	4b11      	ldr	r3, [pc, #68]	; (80070b4 <xPortStartScheduler+0xdc>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a10      	ldr	r2, [pc, #64]	; (80070b4 <xPortStartScheduler+0xdc>)
 8007074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007078:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800707a:	4b0e      	ldr	r3, [pc, #56]	; (80070b4 <xPortStartScheduler+0xdc>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a0d      	ldr	r2, [pc, #52]	; (80070b4 <xPortStartScheduler+0xdc>)
 8007080:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007084:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007086:	f000 f8b9 	bl	80071fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800708a:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <xPortStartScheduler+0xe0>)
 800708c:	2200      	movs	r2, #0
 800708e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007090:	f7ff ff92 	bl	8006fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007094:	f7ff f8ba 	bl	800620c <vTaskSwitchContext>
	prvTaskExitError();
 8007098:	f7ff ff4c 	bl	8006f34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	e000e400 	.word	0xe000e400
 80070ac:	20000484 	.word	0x20000484
 80070b0:	20000488 	.word	0x20000488
 80070b4:	e000ed20 	.word	0xe000ed20
 80070b8:	2000000c 	.word	0x2000000c

080070bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	607b      	str	r3, [r7, #4]
}
 80070d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070d6:	4b0f      	ldr	r3, [pc, #60]	; (8007114 <vPortEnterCritical+0x58>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3301      	adds	r3, #1
 80070dc:	4a0d      	ldr	r2, [pc, #52]	; (8007114 <vPortEnterCritical+0x58>)
 80070de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070e0:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <vPortEnterCritical+0x58>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d10f      	bne.n	8007108 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070e8:	4b0b      	ldr	r3, [pc, #44]	; (8007118 <vPortEnterCritical+0x5c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00a      	beq.n	8007108 <vPortEnterCritical+0x4c>
	__asm volatile
 80070f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	603b      	str	r3, [r7, #0]
}
 8007104:	bf00      	nop
 8007106:	e7fe      	b.n	8007106 <vPortEnterCritical+0x4a>
	}
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	bc80      	pop	{r7}
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	2000000c 	.word	0x2000000c
 8007118:	e000ed04 	.word	0xe000ed04

0800711c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007122:	4b11      	ldr	r3, [pc, #68]	; (8007168 <vPortExitCritical+0x4c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10a      	bne.n	8007140 <vPortExitCritical+0x24>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	607b      	str	r3, [r7, #4]
}
 800713c:	bf00      	nop
 800713e:	e7fe      	b.n	800713e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007140:	4b09      	ldr	r3, [pc, #36]	; (8007168 <vPortExitCritical+0x4c>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3b01      	subs	r3, #1
 8007146:	4a08      	ldr	r2, [pc, #32]	; (8007168 <vPortExitCritical+0x4c>)
 8007148:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800714a:	4b07      	ldr	r3, [pc, #28]	; (8007168 <vPortExitCritical+0x4c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d105      	bne.n	800715e <vPortExitCritical+0x42>
 8007152:	2300      	movs	r3, #0
 8007154:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	f383 8811 	msr	BASEPRI, r3
}
 800715c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	bc80      	pop	{r7}
 8007166:	4770      	bx	lr
 8007168:	2000000c 	.word	0x2000000c
 800716c:	00000000 	.word	0x00000000

08007170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007170:	f3ef 8009 	mrs	r0, PSP
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	4b0d      	ldr	r3, [pc, #52]	; (80071b0 <pxCurrentTCBConst>)
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007180:	6010      	str	r0, [r2, #0]
 8007182:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007186:	f04f 0050 	mov.w	r0, #80	; 0x50
 800718a:	f380 8811 	msr	BASEPRI, r0
 800718e:	f7ff f83d 	bl	800620c <vTaskSwitchContext>
 8007192:	f04f 0000 	mov.w	r0, #0
 8007196:	f380 8811 	msr	BASEPRI, r0
 800719a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800719e:	6819      	ldr	r1, [r3, #0]
 80071a0:	6808      	ldr	r0, [r1, #0]
 80071a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80071a6:	f380 8809 	msr	PSP, r0
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	4770      	bx	lr

080071b0 <pxCurrentTCBConst>:
 80071b0:	20000358 	.word	0x20000358
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop

080071b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	607b      	str	r3, [r7, #4]
}
 80071d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071d2:	f7fe ff5d 	bl	8006090 <xTaskIncrementTick>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071dc:	4b06      	ldr	r3, [pc, #24]	; (80071f8 <SysTick_Handler+0x40>)
 80071de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	2300      	movs	r3, #0
 80071e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	f383 8811 	msr	BASEPRI, r3
}
 80071ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80071f0:	bf00      	nop
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	e000ed04 	.word	0xe000ed04

080071fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80071fc:	b480      	push	{r7}
 80071fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007200:	4b0a      	ldr	r3, [pc, #40]	; (800722c <vPortSetupTimerInterrupt+0x30>)
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007206:	4b0a      	ldr	r3, [pc, #40]	; (8007230 <vPortSetupTimerInterrupt+0x34>)
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800720c:	4b09      	ldr	r3, [pc, #36]	; (8007234 <vPortSetupTimerInterrupt+0x38>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a09      	ldr	r2, [pc, #36]	; (8007238 <vPortSetupTimerInterrupt+0x3c>)
 8007212:	fba2 2303 	umull	r2, r3, r2, r3
 8007216:	099b      	lsrs	r3, r3, #6
 8007218:	4a08      	ldr	r2, [pc, #32]	; (800723c <vPortSetupTimerInterrupt+0x40>)
 800721a:	3b01      	subs	r3, #1
 800721c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800721e:	4b03      	ldr	r3, [pc, #12]	; (800722c <vPortSetupTimerInterrupt+0x30>)
 8007220:	2207      	movs	r2, #7
 8007222:	601a      	str	r2, [r3, #0]
}
 8007224:	bf00      	nop
 8007226:	46bd      	mov	sp, r7
 8007228:	bc80      	pop	{r7}
 800722a:	4770      	bx	lr
 800722c:	e000e010 	.word	0xe000e010
 8007230:	e000e018 	.word	0xe000e018
 8007234:	20000000 	.word	0x20000000
 8007238:	10624dd3 	.word	0x10624dd3
 800723c:	e000e014 	.word	0xe000e014

08007240 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007246:	f3ef 8305 	mrs	r3, IPSR
 800724a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b0f      	cmp	r3, #15
 8007250:	d914      	bls.n	800727c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007252:	4a16      	ldr	r2, [pc, #88]	; (80072ac <vPortValidateInterruptPriority+0x6c>)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4413      	add	r3, r2
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800725c:	4b14      	ldr	r3, [pc, #80]	; (80072b0 <vPortValidateInterruptPriority+0x70>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	7afa      	ldrb	r2, [r7, #11]
 8007262:	429a      	cmp	r2, r3
 8007264:	d20a      	bcs.n	800727c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	607b      	str	r3, [r7, #4]
}
 8007278:	bf00      	nop
 800727a:	e7fe      	b.n	800727a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800727c:	4b0d      	ldr	r3, [pc, #52]	; (80072b4 <vPortValidateInterruptPriority+0x74>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007284:	4b0c      	ldr	r3, [pc, #48]	; (80072b8 <vPortValidateInterruptPriority+0x78>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	429a      	cmp	r2, r3
 800728a:	d90a      	bls.n	80072a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800728c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	603b      	str	r3, [r7, #0]
}
 800729e:	bf00      	nop
 80072a0:	e7fe      	b.n	80072a0 <vPortValidateInterruptPriority+0x60>
	}
 80072a2:	bf00      	nop
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bc80      	pop	{r7}
 80072aa:	4770      	bx	lr
 80072ac:	e000e3f0 	.word	0xe000e3f0
 80072b0:	20000484 	.word	0x20000484
 80072b4:	e000ed0c 	.word	0xe000ed0c
 80072b8:	20000488 	.word	0x20000488

080072bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b08a      	sub	sp, #40	; 0x28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072c4:	2300      	movs	r3, #0
 80072c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072c8:	f7fe fe38 	bl	8005f3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072cc:	4b58      	ldr	r3, [pc, #352]	; (8007430 <pvPortMalloc+0x174>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072d4:	f000 f910 	bl	80074f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072d8:	4b56      	ldr	r3, [pc, #344]	; (8007434 <pvPortMalloc+0x178>)
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4013      	ands	r3, r2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f040 808e 	bne.w	8007402 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d01d      	beq.n	8007328 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80072ec:	2208      	movs	r2, #8
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4413      	add	r3, r2
 80072f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d014      	beq.n	8007328 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f023 0307 	bic.w	r3, r3, #7
 8007304:	3308      	adds	r3, #8
 8007306:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f003 0307 	and.w	r3, r3, #7
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <pvPortMalloc+0x6c>
	__asm volatile
 8007312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	617b      	str	r3, [r7, #20]
}
 8007324:	bf00      	nop
 8007326:	e7fe      	b.n	8007326 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d069      	beq.n	8007402 <pvPortMalloc+0x146>
 800732e:	4b42      	ldr	r3, [pc, #264]	; (8007438 <pvPortMalloc+0x17c>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	429a      	cmp	r2, r3
 8007336:	d864      	bhi.n	8007402 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007338:	4b40      	ldr	r3, [pc, #256]	; (800743c <pvPortMalloc+0x180>)
 800733a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800733c:	4b3f      	ldr	r3, [pc, #252]	; (800743c <pvPortMalloc+0x180>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007342:	e004      	b.n	800734e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	429a      	cmp	r2, r3
 8007356:	d903      	bls.n	8007360 <pvPortMalloc+0xa4>
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1f1      	bne.n	8007344 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007360:	4b33      	ldr	r3, [pc, #204]	; (8007430 <pvPortMalloc+0x174>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007366:	429a      	cmp	r2, r3
 8007368:	d04b      	beq.n	8007402 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2208      	movs	r2, #8
 8007370:	4413      	add	r3, r2
 8007372:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	1ad2      	subs	r2, r2, r3
 8007384:	2308      	movs	r3, #8
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	429a      	cmp	r2, r3
 800738a:	d91f      	bls.n	80073cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800738c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4413      	add	r3, r2
 8007392:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00a      	beq.n	80073b4 <pvPortMalloc+0xf8>
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	613b      	str	r3, [r7, #16]
}
 80073b0:	bf00      	nop
 80073b2:	e7fe      	b.n	80073b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	1ad2      	subs	r2, r2, r3
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073c6:	69b8      	ldr	r0, [r7, #24]
 80073c8:	f000 f8f8 	bl	80075bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073cc:	4b1a      	ldr	r3, [pc, #104]	; (8007438 <pvPortMalloc+0x17c>)
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	4a18      	ldr	r2, [pc, #96]	; (8007438 <pvPortMalloc+0x17c>)
 80073d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073da:	4b17      	ldr	r3, [pc, #92]	; (8007438 <pvPortMalloc+0x17c>)
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	4b18      	ldr	r3, [pc, #96]	; (8007440 <pvPortMalloc+0x184>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d203      	bcs.n	80073ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073e6:	4b14      	ldr	r3, [pc, #80]	; (8007438 <pvPortMalloc+0x17c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a15      	ldr	r2, [pc, #84]	; (8007440 <pvPortMalloc+0x184>)
 80073ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	4b10      	ldr	r3, [pc, #64]	; (8007434 <pvPortMalloc+0x178>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	431a      	orrs	r2, r3
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007402:	f7fe fda9 	bl	8005f58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	f003 0307 	and.w	r3, r3, #7
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00a      	beq.n	8007426 <pvPortMalloc+0x16a>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	60fb      	str	r3, [r7, #12]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <pvPortMalloc+0x168>
	return pvReturn;
 8007426:	69fb      	ldr	r3, [r7, #28]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3728      	adds	r7, #40	; 0x28
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	200040ac 	.word	0x200040ac
 8007434:	200040b8 	.word	0x200040b8
 8007438:	200040b0 	.word	0x200040b0
 800743c:	200040a4 	.word	0x200040a4
 8007440:	200040b4 	.word	0x200040b4

08007444 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d048      	beq.n	80074e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007456:	2308      	movs	r3, #8
 8007458:	425b      	negs	r3, r3
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	4413      	add	r3, r2
 800745e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	4b21      	ldr	r3, [pc, #132]	; (80074f0 <vPortFree+0xac>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4013      	ands	r3, r2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10a      	bne.n	8007488 <vPortFree+0x44>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	60fb      	str	r3, [r7, #12]
}
 8007484:	bf00      	nop
 8007486:	e7fe      	b.n	8007486 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00a      	beq.n	80074a6 <vPortFree+0x62>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	60bb      	str	r3, [r7, #8]
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	4b11      	ldr	r3, [pc, #68]	; (80074f0 <vPortFree+0xac>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4013      	ands	r3, r2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d019      	beq.n	80074e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d115      	bne.n	80074e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <vPortFree+0xac>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	43db      	mvns	r3, r3
 80074c6:	401a      	ands	r2, r3
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074cc:	f7fe fd36 	bl	8005f3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	4b07      	ldr	r3, [pc, #28]	; (80074f4 <vPortFree+0xb0>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4413      	add	r3, r2
 80074da:	4a06      	ldr	r2, [pc, #24]	; (80074f4 <vPortFree+0xb0>)
 80074dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074de:	6938      	ldr	r0, [r7, #16]
 80074e0:	f000 f86c 	bl	80075bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80074e4:	f7fe fd38 	bl	8005f58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074e8:	bf00      	nop
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	200040b8 	.word	0x200040b8
 80074f4:	200040b0 	.word	0x200040b0

080074f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074fe:	f643 4318 	movw	r3, #15384	; 0x3c18
 8007502:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007504:	4b27      	ldr	r3, [pc, #156]	; (80075a4 <prvHeapInit+0xac>)
 8007506:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f003 0307 	and.w	r3, r3, #7
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00c      	beq.n	800752c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3307      	adds	r3, #7
 8007516:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 0307 	bic.w	r3, r3, #7
 800751e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	4a1f      	ldr	r2, [pc, #124]	; (80075a4 <prvHeapInit+0xac>)
 8007528:	4413      	add	r3, r2
 800752a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007530:	4a1d      	ldr	r2, [pc, #116]	; (80075a8 <prvHeapInit+0xb0>)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007536:	4b1c      	ldr	r3, [pc, #112]	; (80075a8 <prvHeapInit+0xb0>)
 8007538:	2200      	movs	r2, #0
 800753a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	4413      	add	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007544:	2208      	movs	r2, #8
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	1a9b      	subs	r3, r3, r2
 800754a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0307 	bic.w	r3, r3, #7
 8007552:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4a15      	ldr	r2, [pc, #84]	; (80075ac <prvHeapInit+0xb4>)
 8007558:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800755a:	4b14      	ldr	r3, [pc, #80]	; (80075ac <prvHeapInit+0xb4>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2200      	movs	r2, #0
 8007560:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007562:	4b12      	ldr	r3, [pc, #72]	; (80075ac <prvHeapInit+0xb4>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2200      	movs	r2, #0
 8007568:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	1ad2      	subs	r2, r2, r3
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007578:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <prvHeapInit+0xb4>)
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	4a0a      	ldr	r2, [pc, #40]	; (80075b0 <prvHeapInit+0xb8>)
 8007586:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	4a09      	ldr	r2, [pc, #36]	; (80075b4 <prvHeapInit+0xbc>)
 800758e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007590:	4b09      	ldr	r3, [pc, #36]	; (80075b8 <prvHeapInit+0xc0>)
 8007592:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007596:	601a      	str	r2, [r3, #0]
}
 8007598:	bf00      	nop
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	bc80      	pop	{r7}
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	2000048c 	.word	0x2000048c
 80075a8:	200040a4 	.word	0x200040a4
 80075ac:	200040ac 	.word	0x200040ac
 80075b0:	200040b4 	.word	0x200040b4
 80075b4:	200040b0 	.word	0x200040b0
 80075b8:	200040b8 	.word	0x200040b8

080075bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075c4:	4b27      	ldr	r3, [pc, #156]	; (8007664 <prvInsertBlockIntoFreeList+0xa8>)
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	e002      	b.n	80075d0 <prvInsertBlockIntoFreeList+0x14>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d8f7      	bhi.n	80075ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	4413      	add	r3, r2
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d108      	bne.n	80075fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	441a      	add	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	441a      	add	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d118      	bne.n	8007644 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	4b14      	ldr	r3, [pc, #80]	; (8007668 <prvInsertBlockIntoFreeList+0xac>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d00d      	beq.n	800763a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	441a      	add	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	e008      	b.n	800764c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800763a:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <prvInsertBlockIntoFreeList+0xac>)
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	e003      	b.n	800764c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	429a      	cmp	r2, r3
 8007652:	d002      	beq.n	800765a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800765a:	bf00      	nop
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	bc80      	pop	{r7}
 8007662:	4770      	bx	lr
 8007664:	200040a4 	.word	0x200040a4
 8007668:	200040ac 	.word	0x200040ac

0800766c <__libc_init_array>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	2600      	movs	r6, #0
 8007670:	4d0c      	ldr	r5, [pc, #48]	; (80076a4 <__libc_init_array+0x38>)
 8007672:	4c0d      	ldr	r4, [pc, #52]	; (80076a8 <__libc_init_array+0x3c>)
 8007674:	1b64      	subs	r4, r4, r5
 8007676:	10a4      	asrs	r4, r4, #2
 8007678:	42a6      	cmp	r6, r4
 800767a:	d109      	bne.n	8007690 <__libc_init_array+0x24>
 800767c:	f000 f8f4 	bl	8007868 <_init>
 8007680:	2600      	movs	r6, #0
 8007682:	4d0a      	ldr	r5, [pc, #40]	; (80076ac <__libc_init_array+0x40>)
 8007684:	4c0a      	ldr	r4, [pc, #40]	; (80076b0 <__libc_init_array+0x44>)
 8007686:	1b64      	subs	r4, r4, r5
 8007688:	10a4      	asrs	r4, r4, #2
 800768a:	42a6      	cmp	r6, r4
 800768c:	d105      	bne.n	800769a <__libc_init_array+0x2e>
 800768e:	bd70      	pop	{r4, r5, r6, pc}
 8007690:	f855 3b04 	ldr.w	r3, [r5], #4
 8007694:	4798      	blx	r3
 8007696:	3601      	adds	r6, #1
 8007698:	e7ee      	b.n	8007678 <__libc_init_array+0xc>
 800769a:	f855 3b04 	ldr.w	r3, [r5], #4
 800769e:	4798      	blx	r3
 80076a0:	3601      	adds	r6, #1
 80076a2:	e7f2      	b.n	800768a <__libc_init_array+0x1e>
 80076a4:	08007968 	.word	0x08007968
 80076a8:	08007968 	.word	0x08007968
 80076ac:	08007968 	.word	0x08007968
 80076b0:	0800796c 	.word	0x0800796c

080076b4 <__retarget_lock_acquire_recursive>:
 80076b4:	4770      	bx	lr

080076b6 <__retarget_lock_release_recursive>:
 80076b6:	4770      	bx	lr

080076b8 <memcpy>:
 80076b8:	440a      	add	r2, r1
 80076ba:	4291      	cmp	r1, r2
 80076bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80076c0:	d100      	bne.n	80076c4 <memcpy+0xc>
 80076c2:	4770      	bx	lr
 80076c4:	b510      	push	{r4, lr}
 80076c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ca:	4291      	cmp	r1, r2
 80076cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076d0:	d1f9      	bne.n	80076c6 <memcpy+0xe>
 80076d2:	bd10      	pop	{r4, pc}

080076d4 <memset>:
 80076d4:	4603      	mov	r3, r0
 80076d6:	4402      	add	r2, r0
 80076d8:	4293      	cmp	r3, r2
 80076da:	d100      	bne.n	80076de <memset+0xa>
 80076dc:	4770      	bx	lr
 80076de:	f803 1b01 	strb.w	r1, [r3], #1
 80076e2:	e7f9      	b.n	80076d8 <memset+0x4>

080076e4 <cleanup_glue>:
 80076e4:	b538      	push	{r3, r4, r5, lr}
 80076e6:	460c      	mov	r4, r1
 80076e8:	6809      	ldr	r1, [r1, #0]
 80076ea:	4605      	mov	r5, r0
 80076ec:	b109      	cbz	r1, 80076f2 <cleanup_glue+0xe>
 80076ee:	f7ff fff9 	bl	80076e4 <cleanup_glue>
 80076f2:	4621      	mov	r1, r4
 80076f4:	4628      	mov	r0, r5
 80076f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076fa:	f000 b869 	b.w	80077d0 <_free_r>
	...

08007700 <_reclaim_reent>:
 8007700:	4b2c      	ldr	r3, [pc, #176]	; (80077b4 <_reclaim_reent+0xb4>)
 8007702:	b570      	push	{r4, r5, r6, lr}
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4604      	mov	r4, r0
 8007708:	4283      	cmp	r3, r0
 800770a:	d051      	beq.n	80077b0 <_reclaim_reent+0xb0>
 800770c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800770e:	b143      	cbz	r3, 8007722 <_reclaim_reent+0x22>
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d14a      	bne.n	80077ac <_reclaim_reent+0xac>
 8007716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007718:	6819      	ldr	r1, [r3, #0]
 800771a:	b111      	cbz	r1, 8007722 <_reclaim_reent+0x22>
 800771c:	4620      	mov	r0, r4
 800771e:	f000 f857 	bl	80077d0 <_free_r>
 8007722:	6961      	ldr	r1, [r4, #20]
 8007724:	b111      	cbz	r1, 800772c <_reclaim_reent+0x2c>
 8007726:	4620      	mov	r0, r4
 8007728:	f000 f852 	bl	80077d0 <_free_r>
 800772c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800772e:	b111      	cbz	r1, 8007736 <_reclaim_reent+0x36>
 8007730:	4620      	mov	r0, r4
 8007732:	f000 f84d 	bl	80077d0 <_free_r>
 8007736:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007738:	b111      	cbz	r1, 8007740 <_reclaim_reent+0x40>
 800773a:	4620      	mov	r0, r4
 800773c:	f000 f848 	bl	80077d0 <_free_r>
 8007740:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007742:	b111      	cbz	r1, 800774a <_reclaim_reent+0x4a>
 8007744:	4620      	mov	r0, r4
 8007746:	f000 f843 	bl	80077d0 <_free_r>
 800774a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800774c:	b111      	cbz	r1, 8007754 <_reclaim_reent+0x54>
 800774e:	4620      	mov	r0, r4
 8007750:	f000 f83e 	bl	80077d0 <_free_r>
 8007754:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007756:	b111      	cbz	r1, 800775e <_reclaim_reent+0x5e>
 8007758:	4620      	mov	r0, r4
 800775a:	f000 f839 	bl	80077d0 <_free_r>
 800775e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007760:	b111      	cbz	r1, 8007768 <_reclaim_reent+0x68>
 8007762:	4620      	mov	r0, r4
 8007764:	f000 f834 	bl	80077d0 <_free_r>
 8007768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800776a:	b111      	cbz	r1, 8007772 <_reclaim_reent+0x72>
 800776c:	4620      	mov	r0, r4
 800776e:	f000 f82f 	bl	80077d0 <_free_r>
 8007772:	69a3      	ldr	r3, [r4, #24]
 8007774:	b1e3      	cbz	r3, 80077b0 <_reclaim_reent+0xb0>
 8007776:	4620      	mov	r0, r4
 8007778:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800777a:	4798      	blx	r3
 800777c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800777e:	b1b9      	cbz	r1, 80077b0 <_reclaim_reent+0xb0>
 8007780:	4620      	mov	r0, r4
 8007782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007786:	f7ff bfad 	b.w	80076e4 <cleanup_glue>
 800778a:	5949      	ldr	r1, [r1, r5]
 800778c:	b941      	cbnz	r1, 80077a0 <_reclaim_reent+0xa0>
 800778e:	3504      	adds	r5, #4
 8007790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007792:	2d80      	cmp	r5, #128	; 0x80
 8007794:	68d9      	ldr	r1, [r3, #12]
 8007796:	d1f8      	bne.n	800778a <_reclaim_reent+0x8a>
 8007798:	4620      	mov	r0, r4
 800779a:	f000 f819 	bl	80077d0 <_free_r>
 800779e:	e7ba      	b.n	8007716 <_reclaim_reent+0x16>
 80077a0:	680e      	ldr	r6, [r1, #0]
 80077a2:	4620      	mov	r0, r4
 80077a4:	f000 f814 	bl	80077d0 <_free_r>
 80077a8:	4631      	mov	r1, r6
 80077aa:	e7ef      	b.n	800778c <_reclaim_reent+0x8c>
 80077ac:	2500      	movs	r5, #0
 80077ae:	e7ef      	b.n	8007790 <_reclaim_reent+0x90>
 80077b0:	bd70      	pop	{r4, r5, r6, pc}
 80077b2:	bf00      	nop
 80077b4:	20000010 	.word	0x20000010

080077b8 <__malloc_lock>:
 80077b8:	4801      	ldr	r0, [pc, #4]	; (80077c0 <__malloc_lock+0x8>)
 80077ba:	f7ff bf7b 	b.w	80076b4 <__retarget_lock_acquire_recursive>
 80077be:	bf00      	nop
 80077c0:	200042e8 	.word	0x200042e8

080077c4 <__malloc_unlock>:
 80077c4:	4801      	ldr	r0, [pc, #4]	; (80077cc <__malloc_unlock+0x8>)
 80077c6:	f7ff bf76 	b.w	80076b6 <__retarget_lock_release_recursive>
 80077ca:	bf00      	nop
 80077cc:	200042e8 	.word	0x200042e8

080077d0 <_free_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	4605      	mov	r5, r0
 80077d4:	2900      	cmp	r1, #0
 80077d6:	d043      	beq.n	8007860 <_free_r+0x90>
 80077d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077dc:	1f0c      	subs	r4, r1, #4
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bfb8      	it	lt
 80077e2:	18e4      	addlt	r4, r4, r3
 80077e4:	f7ff ffe8 	bl	80077b8 <__malloc_lock>
 80077e8:	4a1e      	ldr	r2, [pc, #120]	; (8007864 <_free_r+0x94>)
 80077ea:	6813      	ldr	r3, [r2, #0]
 80077ec:	4610      	mov	r0, r2
 80077ee:	b933      	cbnz	r3, 80077fe <_free_r+0x2e>
 80077f0:	6063      	str	r3, [r4, #4]
 80077f2:	6014      	str	r4, [r2, #0]
 80077f4:	4628      	mov	r0, r5
 80077f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077fa:	f7ff bfe3 	b.w	80077c4 <__malloc_unlock>
 80077fe:	42a3      	cmp	r3, r4
 8007800:	d90a      	bls.n	8007818 <_free_r+0x48>
 8007802:	6821      	ldr	r1, [r4, #0]
 8007804:	1862      	adds	r2, r4, r1
 8007806:	4293      	cmp	r3, r2
 8007808:	bf01      	itttt	eq
 800780a:	681a      	ldreq	r2, [r3, #0]
 800780c:	685b      	ldreq	r3, [r3, #4]
 800780e:	1852      	addeq	r2, r2, r1
 8007810:	6022      	streq	r2, [r4, #0]
 8007812:	6063      	str	r3, [r4, #4]
 8007814:	6004      	str	r4, [r0, #0]
 8007816:	e7ed      	b.n	80077f4 <_free_r+0x24>
 8007818:	461a      	mov	r2, r3
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	b10b      	cbz	r3, 8007822 <_free_r+0x52>
 800781e:	42a3      	cmp	r3, r4
 8007820:	d9fa      	bls.n	8007818 <_free_r+0x48>
 8007822:	6811      	ldr	r1, [r2, #0]
 8007824:	1850      	adds	r0, r2, r1
 8007826:	42a0      	cmp	r0, r4
 8007828:	d10b      	bne.n	8007842 <_free_r+0x72>
 800782a:	6820      	ldr	r0, [r4, #0]
 800782c:	4401      	add	r1, r0
 800782e:	1850      	adds	r0, r2, r1
 8007830:	4283      	cmp	r3, r0
 8007832:	6011      	str	r1, [r2, #0]
 8007834:	d1de      	bne.n	80077f4 <_free_r+0x24>
 8007836:	6818      	ldr	r0, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	4401      	add	r1, r0
 800783c:	6011      	str	r1, [r2, #0]
 800783e:	6053      	str	r3, [r2, #4]
 8007840:	e7d8      	b.n	80077f4 <_free_r+0x24>
 8007842:	d902      	bls.n	800784a <_free_r+0x7a>
 8007844:	230c      	movs	r3, #12
 8007846:	602b      	str	r3, [r5, #0]
 8007848:	e7d4      	b.n	80077f4 <_free_r+0x24>
 800784a:	6820      	ldr	r0, [r4, #0]
 800784c:	1821      	adds	r1, r4, r0
 800784e:	428b      	cmp	r3, r1
 8007850:	bf01      	itttt	eq
 8007852:	6819      	ldreq	r1, [r3, #0]
 8007854:	685b      	ldreq	r3, [r3, #4]
 8007856:	1809      	addeq	r1, r1, r0
 8007858:	6021      	streq	r1, [r4, #0]
 800785a:	6063      	str	r3, [r4, #4]
 800785c:	6054      	str	r4, [r2, #4]
 800785e:	e7c9      	b.n	80077f4 <_free_r+0x24>
 8007860:	bd38      	pop	{r3, r4, r5, pc}
 8007862:	bf00      	nop
 8007864:	200040bc 	.word	0x200040bc

08007868 <_init>:
 8007868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786a:	bf00      	nop
 800786c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786e:	bc08      	pop	{r3}
 8007870:	469e      	mov	lr, r3
 8007872:	4770      	bx	lr

08007874 <_fini>:
 8007874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007876:	bf00      	nop
 8007878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787a:	bc08      	pop	{r3}
 800787c:	469e      	mov	lr, r3
 800787e:	4770      	bx	lr
