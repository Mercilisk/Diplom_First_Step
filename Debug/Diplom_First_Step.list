
Diplom_First_Step.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9d4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800dae8  0800dae8  0001dae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc90  0800dc90  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800dc90  0800dc90  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dc90  0800dc90  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc90  0800dc90  0001dc90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc94  0800dc94  0001dc94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800dc98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004468  20000078  0800dd10  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044e0  0800dd10  000244e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024293  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004be0  00000000  00000000  00044334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  00048f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001668  00000000  00000000  0004a748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5db  00000000  00000000  0004bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e1d6  00000000  00000000  0006738b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009693d  00000000  00000000  00085561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011be9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bf4  00000000  00000000  0011bef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800dacc 	.word	0x0800dacc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800dacc 	.word	0x0800dacc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	; 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d76:	2afd      	cmp	r2, #253	; 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	; 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	; 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	; 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <Data_Collector_Task>:

uint16_t *First_Select_Axis_Data = NULL;
uint16_t *Second_Select_Axis_Data = NULL;

void Data_Collector_Task(void const * argument)
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b08b      	sub	sp, #44	; 0x2c
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	User_Data_Settings_TypeDef *Setting_TypeDef
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	617b      	str	r3, [r7, #20]
										= 	(User_Data_Settings_TypeDef *) argument;

	Setting_TypeDef -> Signal_Data 		=	(float*) pvPortMalloc(Setting_TypeDef -> Length_Realization * sizeof(float));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f00b f8fa 	bl	800c2bc <pvPortMalloc>
 80010c8:	4602      	mov	r2, r0
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	609a      	str	r2, [r3, #8]
	Setting_TypeDef -> Status_Signal_Ready
										=	xSemaphoreCreateBinary();
 80010ce:	2203      	movs	r2, #3
 80010d0:	2100      	movs	r1, #0
 80010d2:	2001      	movs	r0, #1
 80010d4:	f008 fee8 	bl	8009ea8 <xQueueGenericCreate>
 80010d8:	4602      	mov	r2, r0
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24
	adxl345_acc_data_t	*data_read;
	Status_Activ_AXIS Status 			=	One_Axis_Enable;
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Num_Axis_TypeDef  Number_Activ_Axis =	(Num_Axis_TypeDef) (Setting_TypeDef -> X_Axis +
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	791a      	ldrb	r2, [r3, #4]
												   	   	   	    Setting_TypeDef -> Y_Axis +
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	795b      	ldrb	r3, [r3, #5]
	Num_Axis_TypeDef  Number_Activ_Axis =	(Num_Axis_TypeDef) (Setting_TypeDef -> X_Axis +
 80010ec:	4413      	add	r3, r2
 80010ee:	b2da      	uxtb	r2, r3
																Setting_TypeDef -> Z_Axis - 1);
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	799b      	ldrb	r3, [r3, #6]
												   	   	   	    Setting_TypeDef -> Y_Axis +
 80010f4:	4413      	add	r3, r2
 80010f6:	b2db      	uxtb	r3, r3
	Num_Axis_TypeDef  Number_Activ_Axis =	(Num_Axis_TypeDef) (Setting_TypeDef -> X_Axis +
 80010f8:	3b01      	subs	r3, #1
 80010fa:	74fb      	strb	r3, [r7, #19]
	switch(Number_Activ_Axis)
 80010fc:	7cfb      	ldrb	r3, [r7, #19]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d002      	beq.n	8001108 <Data_Collector_Task+0x58>
 8001102:	2b02      	cmp	r3, #2
 8001104:	d00a      	beq.n	800111c <Data_Collector_Task+0x6c>
		break;
	case Three_Axis_Enable:
		Second_Select_Axis_Data			=	(uint16_t*) pvPortMalloc(Setting_TypeDef -> Length_Realization * sizeof(uint16_t));
		break;
	default:
		break;
 8001106:	e013      	b.n	8001130 <Data_Collector_Task+0x80>
		First_Select_Axis_Data 			=	(uint16_t*) pvPortMalloc(Setting_TypeDef -> Length_Realization * sizeof(uint16_t));
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4618      	mov	r0, r3
 8001110:	f00b f8d4 	bl	800c2bc <pvPortMalloc>
 8001114:	4603      	mov	r3, r0
 8001116:	4aa4      	ldr	r2, [pc, #656]	; (80013a8 <Data_Collector_Task+0x2f8>)
 8001118:	6013      	str	r3, [r2, #0]
		break;
 800111a:	e009      	b.n	8001130 <Data_Collector_Task+0x80>
		Second_Select_Axis_Data			=	(uint16_t*) pvPortMalloc(Setting_TypeDef -> Length_Realization * sizeof(uint16_t));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4618      	mov	r0, r3
 8001124:	f00b f8ca 	bl	800c2bc <pvPortMalloc>
 8001128:	4603      	mov	r3, r0
 800112a:	4aa0      	ldr	r2, [pc, #640]	; (80013ac <Data_Collector_Task+0x2fc>)
 800112c:	6013      	str	r3, [r2, #0]
		break;
 800112e:	bf00      	nop
	}
	uint16_t Index_Count 				=	0;
 8001130:	2300      	movs	r3, #0
 8001132:	84bb      	strh	r3, [r7, #36]	; 0x24
	while(1)
	{
		adxl345_resume();
 8001134:	f005 fe06 	bl	8006d44 <adxl345_resume>
		xQueueReceive(Setting_TypeDef->hadxl->fifo_frame_ptr_queue, &data_read, portMAX_DELAY);
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	f8d3 3039 	ldr.w	r3, [r3, #57]	; 0x39
 8001140:	f107 010c 	add.w	r1, r7, #12
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	4618      	mov	r0, r3
 800114a:	f009 f8c9 	bl	800a2e0 <xQueueReceive>
		if(Setting_TypeDef -> FStatus != Enable_Time)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	789b      	ldrb	r3, [r3, #2]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d006      	beq.n	8001164 <Data_Collector_Task+0xb4>
		{
			xSemaphoreTake(Setting_TypeDef -> Status_Furie_Ready, portMAX_DELAY);
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115a:	f04f 31ff 	mov.w	r1, #4294967295
 800115e:	4618      	mov	r0, r3
 8001160:	f009 f99e 	bl	800a4a0 <xQueueSemaphoreTake>
		}
		switch(Number_Activ_Axis)
 8001164:	7cfb      	ldrb	r3, [r7, #19]
 8001166:	2b02      	cmp	r3, #2
 8001168:	f000 81d4 	beq.w	8001514 <Data_Collector_Task+0x464>
 800116c:	2b02      	cmp	r3, #2
 800116e:	dce1      	bgt.n	8001134 <Data_Collector_Task+0x84>
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <Data_Collector_Task+0xcc>
 8001174:	2b01      	cmp	r3, #1
 8001176:	f000 80bd 	beq.w	80012f4 <Data_Collector_Task+0x244>
 800117a:	e2a7      	b.n	80016cc <Data_Collector_Task+0x61c>
		{
		case One_Axis_Enable:
			//-----------------------------------------------------------------------------------------------//
			//-----------------------------------COLLECTION WITCH X AXIS-------------------------------------//
			//-----------------------------------------------------------------------------------------------//
			if (Setting_TypeDef -> X_Axis == Enable)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	791b      	ldrb	r3, [r3, #4]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d12a      	bne.n	80011da <Data_Collector_Task+0x12a>
			{
				for (uint16_t i = 0; i < Setting_TypeDef -> hadxl -> fifo_frame_size &&
 8001184:	2300      	movs	r3, #0
 8001186:	847b      	strh	r3, [r7, #34]	; 0x22
 8001188:	e019      	b.n	80011be <Data_Collector_Task+0x10e>
									 Index_Count < Setting_TypeDef -> Length_Realization; i++, Index_Count++)
				{
					*(Setting_TypeDef -> Signal_Data + Index_Count) = adxl345_convert_float_mpss( (data_read + i) -> x);
 800118a:	68f9      	ldr	r1, [r7, #12]
 800118c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	440b      	add	r3, r1
 8001198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119c:	b219      	sxth	r1, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	18d4      	adds	r4, r2, r3
 80011a8:	4608      	mov	r0, r1
 80011aa:	f005 f9bd 	bl	8006528 <adxl345_convert_float_mpss>
 80011ae:	4603      	mov	r3, r0
 80011b0:	6023      	str	r3, [r4, #0]
									 Index_Count < Setting_TypeDef -> Length_Realization; i++, Index_Count++)
 80011b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011b4:	3301      	adds	r3, #1
 80011b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80011b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011ba:	3301      	adds	r3, #1
 80011bc:	84bb      	strh	r3, [r7, #36]	; 0x24
				for (uint16_t i = 0; i < Setting_TypeDef -> hadxl -> fifo_frame_size &&
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d25e      	bcs.n	800128c <Data_Collector_Task+0x1dc>
									 Index_Count < Setting_TypeDef -> Length_Realization; i++, Index_Count++)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	881b      	ldrh	r3, [r3, #0]
				for (uint16_t i = 0; i < Setting_TypeDef -> hadxl -> fifo_frame_size &&
 80011d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d3d8      	bcc.n	800118a <Data_Collector_Task+0xda>
 80011d8:	e058      	b.n	800128c <Data_Collector_Task+0x1dc>
				}
			}
			//-----------------------------------------------------------------------------------------------//
			//-----------------------------------COLLECTION WITCH Y AXIS-------------------------------------//
			//-----------------------------------------------------------------------------------------------//
			else if (Setting_TypeDef -> Y_Axis == Enable)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	795b      	ldrb	r3, [r3, #5]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d12a      	bne.n	8001238 <Data_Collector_Task+0x188>
			{
				for (uint16_t i = 0; i < Setting_TypeDef -> hadxl -> fifo_frame_size &&
 80011e2:	2300      	movs	r3, #0
 80011e4:	843b      	strh	r3, [r7, #32]
 80011e6:	e019      	b.n	800121c <Data_Collector_Task+0x16c>
									 Index_Count < Setting_TypeDef -> Length_Realization; i++, Index_Count++)
				{
					*(Setting_TypeDef -> Signal_Data + Index_Count) = adxl345_convert_float_mpss( (data_read + i) -> y);
 80011e8:	68f9      	ldr	r1, [r7, #12]
 80011ea:	8c3a      	ldrh	r2, [r7, #32]
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	440b      	add	r3, r1
 80011f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011fa:	b219      	sxth	r1, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	18d4      	adds	r4, r2, r3
 8001206:	4608      	mov	r0, r1
 8001208:	f005 f98e 	bl	8006528 <adxl345_convert_float_mpss>
 800120c:	4603      	mov	r3, r0
 800120e:	6023      	str	r3, [r4, #0]
									 Index_Count < Setting_TypeDef -> Length_Realization; i++, Index_Count++)
 8001210:	8c3b      	ldrh	r3, [r7, #32]
 8001212:	3301      	adds	r3, #1
 8001214:	843b      	strh	r3, [r7, #32]
 8001216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001218:	3301      	adds	r3, #1
 800121a:	84bb      	strh	r3, [r7, #36]	; 0x24
				for (uint16_t i = 0; i < Setting_TypeDef -> hadxl -> fifo_frame_size &&
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001224:	b29b      	uxth	r3, r3
 8001226:	8c3a      	ldrh	r2, [r7, #32]
 8001228:	429a      	cmp	r2, r3
 800122a:	d22f      	bcs.n	800128c <Data_Collector_Task+0x1dc>
									 Index_Count < Setting_TypeDef -> Length_Realization; i++, Index_Count++)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	881b      	ldrh	r3, [r3, #0]
				for (uint16_t i = 0; i < Setting_TypeDef -> hadxl -> fifo_frame_size &&
 8001230:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001232:	429a      	cmp	r2, r3
 8001234:	d3d8      	bcc.n	80011e8 <Data_Collector_Task+0x138>
 8001236:	e029      	b.n	800128c <Data_Collector_Task+0x1dc>
			//-----------------------------------------------------------------------------------------------//
			//-----------------------------------COLLECTION WITCH Z AXIS-------------------------------------//
			//-----------------------------------------------------------------------------------------------//
			else
			{
				for (uint16_t i = 0; i < Setting_TypeDef -> hadxl -> fifo_frame_size &&
 8001238:	2300      	movs	r3, #0
 800123a:	83fb      	strh	r3, [r7, #30]
 800123c:	e019      	b.n	8001272 <Data_Collector_Task+0x1c2>
									 Index_Count < Setting_TypeDef -> Length_Realization; i++, Index_Count++)
				{
					*(Setting_TypeDef -> Signal_Data + Index_Count) = adxl345_convert_float_mpss( (data_read + i) -> z);
 800123e:	68f9      	ldr	r1, [r7, #12]
 8001240:	8bfa      	ldrh	r2, [r7, #30]
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	440b      	add	r3, r1
 800124c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001250:	b219      	sxth	r1, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	18d4      	adds	r4, r2, r3
 800125c:	4608      	mov	r0, r1
 800125e:	f005 f963 	bl	8006528 <adxl345_convert_float_mpss>
 8001262:	4603      	mov	r3, r0
 8001264:	6023      	str	r3, [r4, #0]
									 Index_Count < Setting_TypeDef -> Length_Realization; i++, Index_Count++)
 8001266:	8bfb      	ldrh	r3, [r7, #30]
 8001268:	3301      	adds	r3, #1
 800126a:	83fb      	strh	r3, [r7, #30]
 800126c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800126e:	3301      	adds	r3, #1
 8001270:	84bb      	strh	r3, [r7, #36]	; 0x24
				for (uint16_t i = 0; i < Setting_TypeDef -> hadxl -> fifo_frame_size &&
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800127a:	b29b      	uxth	r3, r3
 800127c:	8bfa      	ldrh	r2, [r7, #30]
 800127e:	429a      	cmp	r2, r3
 8001280:	d204      	bcs.n	800128c <Data_Collector_Task+0x1dc>
									 Index_Count < Setting_TypeDef -> Length_Realization; i++, Index_Count++)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	881b      	ldrh	r3, [r3, #0]
				for (uint16_t i = 0; i < Setting_TypeDef -> hadxl -> fifo_frame_size &&
 8001286:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001288:	429a      	cmp	r2, r3
 800128a:	d3d8      	bcc.n	800123e <Data_Collector_Task+0x18e>
				}
			}
			//-----------------------------------------------------------------------------------------------//
			//---------------------------------ACTIV TRANSMIT AND CALCULATION--------------------------------//
			//-----------------------------------------------------------------------------------------------//
			if ( Index_Count >= Setting_TypeDef -> Length_Realization)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001292:	429a      	cmp	r2, r3
 8001294:	f0c0 8215 	bcc.w	80016c2 <Data_Collector_Task+0x612>
			{
				if(Setting_TypeDef -> FStatus != Enable_Time)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	789b      	ldrb	r3, [r3, #2]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <Data_Collector_Task+0x1fe>
				{
					xSemaphoreGive(Setting_TypeDef -> Status_Signal_Ready);
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80012a4:	2300      	movs	r3, #0
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	f008 fe8d 	bl	8009fc8 <xQueueGenericSend>
				}
				uart_cobs_send(Setting_TypeDef -> Cobs_UART,
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	69d8      	ldr	r0, [r3, #28]
							   Setting_TypeDef -> Signal_Data,
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	6899      	ldr	r1, [r3, #8]
							   4 * Setting_TypeDef -> Length_Realization,
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	009b      	lsls	r3, r3, #2
				uart_cobs_send(Setting_TypeDef -> Cobs_UART,
 80012bc:	461a      	mov	r2, r3
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	f006 fa07 	bl	80076d4 <uart_cobs_send>
							   portMAX_DELAY);
				xSemaphoreTake(Setting_TypeDef -> Cobs_UART -> Transmit_Ready, portMAX_DELAY);
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f8d3 3012 	ldr.w	r3, [r3, #18]
 80012ce:	f04f 31ff 	mov.w	r1, #4294967295
 80012d2:	4618      	mov	r0, r3
 80012d4:	f009 f8e4 	bl	800a4a0 <xQueueSemaphoreTake>
				if(Setting_TypeDef -> FStatus != Enable_Time)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	789b      	ldrb	r3, [r3, #2]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <Data_Collector_Task+0x23e>
				{
					xSemaphoreTake(Setting_TypeDef -> Status_Furie_Ready, portMAX_DELAY);
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	4618      	mov	r0, r3
 80012ea:	f009 f8d9 	bl	800a4a0 <xQueueSemaphoreTake>
				}

				Index_Count 		=	0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	84bb      	strh	r3, [r7, #36]	; 0x24
			}
			break;
 80012f2:	e1e6      	b.n	80016c2 <Data_Collector_Task+0x612>
		case Two_Axis_Enable:
			//-----------------------------------------------------------------------------------------------//
			//------------------------------COLLECTION WITCH X AND Y OR Z AXIS-------------------------------//
			//-----------------------------------------------------------------------------------------------//
			if (Setting_TypeDef -> X_Axis == Enable)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	791b      	ldrb	r3, [r3, #4]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d173      	bne.n	80013e4 <Data_Collector_Task+0x334>
			{
				if (Status == One_Axis_Enable)
 80012fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001300:	2b00      	cmp	r3, #0
 8001302:	d169      	bne.n	80013d8 <Data_Collector_Task+0x328>
				{
					for (uint16_t i = 0; i < Setting_TypeDef -> hadxl -> fifo_frame_size &&
 8001304:	2300      	movs	r3, #0
 8001306:	83bb      	strh	r3, [r7, #28]
 8001308:	e040      	b.n	800138c <Data_Collector_Task+0x2dc>
										 Index_Count < Setting_TypeDef -> Length_Realization; i++, Index_Count++)
					{
						*(Setting_TypeDef -> Signal_Data + Index_Count) = 	adxl345_convert_float_mpss( (data_read + i) -> x);
 800130a:	68f9      	ldr	r1, [r7, #12]
 800130c:	8bba      	ldrh	r2, [r7, #28]
 800130e:	4613      	mov	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	440b      	add	r3, r1
 8001318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800131c:	b219      	sxth	r1, r3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	18d4      	adds	r4, r2, r3
 8001328:	4608      	mov	r0, r1
 800132a:	f005 f8fd 	bl	8006528 <adxl345_convert_float_mpss>
 800132e:	4603      	mov	r3, r0
 8001330:	6023      	str	r3, [r4, #0]
						if (Setting_TypeDef -> Y_Axis == Enable)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	795b      	ldrb	r3, [r3, #5]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d111      	bne.n	800135e <Data_Collector_Task+0x2ae>
						{
							*(First_Select_Axis_Data + Index_Count) 	=	(data_read + i) -> y;
 800133a:	68f9      	ldr	r1, [r7, #12]
 800133c:	8bba      	ldrh	r2, [r7, #28]
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	440b      	add	r3, r1
 8001348:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800134c:	b219      	sxth	r1, r3
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <Data_Collector_Task+0x2f8>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	b28a      	uxth	r2, r1
 800135a:	801a      	strh	r2, [r3, #0]
 800135c:	e010      	b.n	8001380 <Data_Collector_Task+0x2d0>
						}
						else
						{
							*(First_Select_Axis_Data + Index_Count) 	=	(data_read + i) -> z;
 800135e:	68f9      	ldr	r1, [r7, #12]
 8001360:	8bba      	ldrh	r2, [r7, #28]
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	440b      	add	r3, r1
 800136c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001370:	b219      	sxth	r1, r3
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <Data_Collector_Task+0x2f8>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4413      	add	r3, r2
 800137c:	b28a      	uxth	r2, r1
 800137e:	801a      	strh	r2, [r3, #0]
										 Index_Count < Setting_TypeDef -> Length_Realization; i++, Index_Count++)
 8001380:	8bbb      	ldrh	r3, [r7, #28]
 8001382:	3301      	adds	r3, #1
 8001384:	83bb      	strh	r3, [r7, #28]
 8001386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001388:	3301      	adds	r3, #1
 800138a:	84bb      	strh	r3, [r7, #36]	; 0x24
					for (uint16_t i = 0; i < Setting_TypeDef -> hadxl -> fifo_frame_size &&
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001394:	b29b      	uxth	r3, r3
 8001396:	8bba      	ldrh	r2, [r7, #28]
 8001398:	429a      	cmp	r2, r3
 800139a:	d27c      	bcs.n	8001496 <Data_Collector_Task+0x3e6>
										 Index_Count < Setting_TypeDef -> Length_Realization; i++, Index_Count++)
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	881b      	ldrh	r3, [r3, #0]
					for (uint16_t i = 0; i < Setting_TypeDef -> hadxl -> fifo_frame_size &&
 80013a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d3b1      	bcc.n	800130a <Data_Collector_Task+0x25a>
 80013a6:	e076      	b.n	8001496 <Data_Collector_Task+0x3e6>
 80013a8:	20000094 	.word	0x20000094
 80013ac:	20000098 	.word	0x20000098
				}
				else
				{
					for (; Index_Count < Setting_TypeDef -> Length_Realization; Index_Count++)
					{
						*(Setting_TypeDef -> Signal_Data + Index_Count) = 	adxl345_convert_float_mpss(*(First_Select_Axis_Data + Index_Count));
 80013b0:	4b93      	ldr	r3, [pc, #588]	; (8001600 <Data_Collector_Task+0x550>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	b219      	sxth	r1, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	18d4      	adds	r4, r2, r3
 80013c8:	4608      	mov	r0, r1
 80013ca:	f005 f8ad 	bl	8006528 <adxl345_convert_float_mpss>
 80013ce:	4603      	mov	r3, r0
 80013d0:	6023      	str	r3, [r4, #0]
					for (; Index_Count < Setting_TypeDef -> Length_Realization; Index_Count++)
 80013d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013d4:	3301      	adds	r3, #1
 80013d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013de:	429a      	cmp	r2, r3
 80013e0:	d3e6      	bcc.n	80013b0 <Data_Collector_Task+0x300>
 80013e2:	e058      	b.n	8001496 <Data_Collector_Task+0x3e6>
			//-----------------------------------------------------------------------------------------------//
			//---------------------------------COLLECTION WITCH Y AND Z AXIS---------------------------------//
			//-----------------------------------------------------------------------------------------------//
			else
			{
				if (Status == One_Axis_Enable)
 80013e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d14f      	bne.n	800148c <Data_Collector_Task+0x3dc>
				{
					for (uint16_t i = 0; i < Setting_TypeDef -> hadxl -> fifo_frame_size &&
 80013ec:	2300      	movs	r3, #0
 80013ee:	837b      	strh	r3, [r7, #26]
 80013f0:	e02a      	b.n	8001448 <Data_Collector_Task+0x398>
										 Index_Count < Setting_TypeDef -> Length_Realization; i++, Index_Count++)
					{
						*(Setting_TypeDef -> Signal_Data + Index_Count) = 	adxl345_convert_float_mpss( (data_read + i) -> y);
 80013f2:	68f9      	ldr	r1, [r7, #12]
 80013f4:	8b7a      	ldrh	r2, [r7, #26]
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	440b      	add	r3, r1
 8001400:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001404:	b219      	sxth	r1, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	18d4      	adds	r4, r2, r3
 8001410:	4608      	mov	r0, r1
 8001412:	f005 f889 	bl	8006528 <adxl345_convert_float_mpss>
 8001416:	4603      	mov	r3, r0
 8001418:	6023      	str	r3, [r4, #0]
						*(First_Select_Axis_Data + Index_Count) 		=	(data_read + i) -> z;
 800141a:	68f9      	ldr	r1, [r7, #12]
 800141c:	8b7a      	ldrh	r2, [r7, #26]
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	440b      	add	r3, r1
 8001428:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800142c:	b219      	sxth	r1, r3
 800142e:	4b74      	ldr	r3, [pc, #464]	; (8001600 <Data_Collector_Task+0x550>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	b28a      	uxth	r2, r1
 800143a:	801a      	strh	r2, [r3, #0]
										 Index_Count < Setting_TypeDef -> Length_Realization; i++, Index_Count++)
 800143c:	8b7b      	ldrh	r3, [r7, #26]
 800143e:	3301      	adds	r3, #1
 8001440:	837b      	strh	r3, [r7, #26]
 8001442:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001444:	3301      	adds	r3, #1
 8001446:	84bb      	strh	r3, [r7, #36]	; 0x24
					for (uint16_t i = 0; i < Setting_TypeDef -> hadxl -> fifo_frame_size &&
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001450:	b29b      	uxth	r3, r3
 8001452:	8b7a      	ldrh	r2, [r7, #26]
 8001454:	429a      	cmp	r2, r3
 8001456:	d21e      	bcs.n	8001496 <Data_Collector_Task+0x3e6>
										 Index_Count < Setting_TypeDef -> Length_Realization; i++, Index_Count++)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	881b      	ldrh	r3, [r3, #0]
					for (uint16_t i = 0; i < Setting_TypeDef -> hadxl -> fifo_frame_size &&
 800145c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800145e:	429a      	cmp	r2, r3
 8001460:	d3c7      	bcc.n	80013f2 <Data_Collector_Task+0x342>
 8001462:	e018      	b.n	8001496 <Data_Collector_Task+0x3e6>
				}
				else
				{
					for (; Index_Count < Setting_TypeDef -> Length_Realization; Index_Count++)
					{
						*(Setting_TypeDef -> Signal_Data + Index_Count) = 	adxl345_convert_float_mpss(*(First_Select_Axis_Data + Index_Count));
 8001464:	4b66      	ldr	r3, [pc, #408]	; (8001600 <Data_Collector_Task+0x550>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	b219      	sxth	r1, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	18d4      	adds	r4, r2, r3
 800147c:	4608      	mov	r0, r1
 800147e:	f005 f853 	bl	8006528 <adxl345_convert_float_mpss>
 8001482:	4603      	mov	r3, r0
 8001484:	6023      	str	r3, [r4, #0]
					for (; Index_Count < Setting_TypeDef -> Length_Realization; Index_Count++)
 8001486:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001488:	3301      	adds	r3, #1
 800148a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001492:	429a      	cmp	r2, r3
 8001494:	d3e6      	bcc.n	8001464 <Data_Collector_Task+0x3b4>
				}
			}
			//-----------------------------------------------------------------------------------------------//
			//---------------------------------ACTIV TRANSMIT AND CALCULATION--------------------------------//
			//-----------------------------------------------------------------------------------------------//
			if ( Index_Count >= Setting_TypeDef -> Length_Realization)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800149c:	429a      	cmp	r2, r3
 800149e:	f0c0 8112 	bcc.w	80016c6 <Data_Collector_Task+0x616>
			{
				if(Setting_TypeDef -> FStatus != Enable_Time)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	789b      	ldrb	r3, [r3, #2]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <Data_Collector_Task+0x408>
				{
					xSemaphoreGive(Setting_TypeDef -> Status_Signal_Ready);
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80014ae:	2300      	movs	r3, #0
 80014b0:	2200      	movs	r2, #0
 80014b2:	2100      	movs	r1, #0
 80014b4:	f008 fd88 	bl	8009fc8 <xQueueGenericSend>
				}
				uart_cobs_send(Setting_TypeDef -> Cobs_UART,
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	69d8      	ldr	r0, [r3, #28]
							   Setting_TypeDef -> Signal_Data,
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	6899      	ldr	r1, [r3, #8]
							   4 * Setting_TypeDef -> Length_Realization,
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	009b      	lsls	r3, r3, #2
				uart_cobs_send(Setting_TypeDef -> Cobs_UART,
 80014c6:	461a      	mov	r2, r3
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
 80014cc:	f006 f902 	bl	80076d4 <uart_cobs_send>
							   portMAX_DELAY);
				xSemaphoreTake(Setting_TypeDef -> Cobs_UART -> Transmit_Ready, portMAX_DELAY);
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	f8d3 3012 	ldr.w	r3, [r3, #18]
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	4618      	mov	r0, r3
 80014de:	f008 ffdf 	bl	800a4a0 <xQueueSemaphoreTake>
				if(Setting_TypeDef -> FStatus != Enable_Time)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	789b      	ldrb	r3, [r3, #2]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <Data_Collector_Task+0x448>
				{
					xSemaphoreTake(Setting_TypeDef -> Status_Furie_Ready, portMAX_DELAY);
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	f04f 31ff 	mov.w	r1, #4294967295
 80014f2:	4618      	mov	r0, r3
 80014f4:	f008 ffd4 	bl	800a4a0 <xQueueSemaphoreTake>
				}
				if (Status == One_Axis_Enable)
 80014f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d103      	bne.n	8001508 <Data_Collector_Task+0x458>
				{
					Status 				= 	Two_Axis_Enable;
 8001500:	2301      	movs	r3, #1
 8001502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001506:	e002      	b.n	800150e <Data_Collector_Task+0x45e>
				}
				else
				{
					Status 				= 	One_Axis_Enable;
 8001508:	2300      	movs	r3, #0
 800150a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				Index_Count 			=	0;
 800150e:	2300      	movs	r3, #0
 8001510:	84bb      	strh	r3, [r7, #36]	; 0x24
			}
			break;
 8001512:	e0d8      	b.n	80016c6 <Data_Collector_Task+0x616>
		case Three_Axis_Enable:
			//-----------------------------------------------------------------------------------------------//
			//-----------------------------COLLECTION WITCH X AND Y AND Z AXIS-------------------------------//
			//-----------------------------------------------------------------------------------------------//
			if (Status == One_Axis_Enable)
 8001514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001518:	2b00      	cmp	r3, #0
 800151a:	d151      	bne.n	80015c0 <Data_Collector_Task+0x510>
			{
				for (uint16_t i = 0; i < Setting_TypeDef -> hadxl -> fifo_frame_size &&
 800151c:	2300      	movs	r3, #0
 800151e:	833b      	strh	r3, [r7, #24]
 8001520:	e040      	b.n	80015a4 <Data_Collector_Task+0x4f4>
									 Index_Count < Setting_TypeDef -> Length_Realization; i++, Index_Count++)
				{
					*(Setting_TypeDef -> Signal_Data + Index_Count) = 	adxl345_convert_float_mpss( (data_read + i) -> x);
 8001522:	68f9      	ldr	r1, [r7, #12]
 8001524:	8b3a      	ldrh	r2, [r7, #24]
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	440b      	add	r3, r1
 8001530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001534:	b219      	sxth	r1, r3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	18d4      	adds	r4, r2, r3
 8001540:	4608      	mov	r0, r1
 8001542:	f004 fff1 	bl	8006528 <adxl345_convert_float_mpss>
 8001546:	4603      	mov	r3, r0
 8001548:	6023      	str	r3, [r4, #0]
					if (Setting_TypeDef -> Y_Axis == Enable)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	795b      	ldrb	r3, [r3, #5]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d111      	bne.n	8001576 <Data_Collector_Task+0x4c6>
					{
						*(First_Select_Axis_Data + Index_Count) 	=	(data_read + i) -> y;
 8001552:	68f9      	ldr	r1, [r7, #12]
 8001554:	8b3a      	ldrh	r2, [r7, #24]
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	440b      	add	r3, r1
 8001560:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001564:	b219      	sxth	r1, r3
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <Data_Collector_Task+0x550>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	b28a      	uxth	r2, r1
 8001572:	801a      	strh	r2, [r3, #0]
 8001574:	e010      	b.n	8001598 <Data_Collector_Task+0x4e8>
					}
					else
					{
						*(First_Select_Axis_Data + Index_Count) 	=	(data_read + i) -> z;
 8001576:	68f9      	ldr	r1, [r7, #12]
 8001578:	8b3a      	ldrh	r2, [r7, #24]
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	440b      	add	r3, r1
 8001584:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001588:	b219      	sxth	r1, r3
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <Data_Collector_Task+0x550>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	b28a      	uxth	r2, r1
 8001596:	801a      	strh	r2, [r3, #0]
									 Index_Count < Setting_TypeDef -> Length_Realization; i++, Index_Count++)
 8001598:	8b3b      	ldrh	r3, [r7, #24]
 800159a:	3301      	adds	r3, #1
 800159c:	833b      	strh	r3, [r7, #24]
 800159e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015a0:	3301      	adds	r3, #1
 80015a2:	84bb      	strh	r3, [r7, #36]	; 0x24
				for (uint16_t i = 0; i < Setting_TypeDef -> hadxl -> fifo_frame_size &&
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	8b3a      	ldrh	r2, [r7, #24]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d240      	bcs.n	8001636 <Data_Collector_Task+0x586>
									 Index_Count < Setting_TypeDef -> Length_Realization; i++, Index_Count++)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	881b      	ldrh	r3, [r3, #0]
				for (uint16_t i = 0; i < Setting_TypeDef -> hadxl -> fifo_frame_size &&
 80015b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d3b1      	bcc.n	8001522 <Data_Collector_Task+0x472>
 80015be:	e03a      	b.n	8001636 <Data_Collector_Task+0x586>
					}
				}
			}
			else if (Status == Two_Axis_Enable)
 80015c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d131      	bne.n	800162c <Data_Collector_Task+0x57c>
			{
				for (; Index_Count < Setting_TypeDef -> Length_Realization; Index_Count++)
 80015c8:	e013      	b.n	80015f2 <Data_Collector_Task+0x542>
				{
					*(Setting_TypeDef -> Signal_Data + Index_Count) = 	adxl345_convert_float_mpss(*(First_Select_Axis_Data + Index_Count));
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <Data_Collector_Task+0x550>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4413      	add	r3, r2
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	b219      	sxth	r1, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	18d4      	adds	r4, r2, r3
 80015e2:	4608      	mov	r0, r1
 80015e4:	f004 ffa0 	bl	8006528 <adxl345_convert_float_mpss>
 80015e8:	4603      	mov	r3, r0
 80015ea:	6023      	str	r3, [r4, #0]
				for (; Index_Count < Setting_TypeDef -> Length_Realization; Index_Count++)
 80015ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015ee:	3301      	adds	r3, #1
 80015f0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d3e6      	bcc.n	80015ca <Data_Collector_Task+0x51a>
 80015fc:	e01b      	b.n	8001636 <Data_Collector_Task+0x586>
 80015fe:	bf00      	nop
 8001600:	20000094 	.word	0x20000094
			}
			else
			{
				for (; Index_Count < Setting_TypeDef -> Length_Realization; Index_Count++)
				{
					*(Setting_TypeDef -> Signal_Data + Index_Count) = 	adxl345_convert_float_mpss(*(Second_Select_Axis_Data + Index_Count));
 8001604:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <Data_Collector_Task+0x620>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	b219      	sxth	r1, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	18d4      	adds	r4, r2, r3
 800161c:	4608      	mov	r0, r1
 800161e:	f004 ff83 	bl	8006528 <adxl345_convert_float_mpss>
 8001622:	4603      	mov	r3, r0
 8001624:	6023      	str	r3, [r4, #0]
				for (; Index_Count < Setting_TypeDef -> Length_Realization; Index_Count++)
 8001626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001628:	3301      	adds	r3, #1
 800162a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001632:	429a      	cmp	r2, r3
 8001634:	d3e6      	bcc.n	8001604 <Data_Collector_Task+0x554>
				}
			}
			//-----------------------------------------------------------------------------------------------//
			//---------------------------------ACTIV TRANSMIT AND CALCULATION--------------------------------//
			//-----------------------------------------------------------------------------------------------//
			if ( Index_Count >= Setting_TypeDef -> Length_Realization)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800163c:	429a      	cmp	r2, r3
 800163e:	d344      	bcc.n	80016ca <Data_Collector_Task+0x61a>
			{
				if(Setting_TypeDef -> FStatus != Enable_Time)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	789b      	ldrb	r3, [r3, #2]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <Data_Collector_Task+0x5a6>
				{
					xSemaphoreGive(Setting_TypeDef -> Status_Signal_Ready);
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800164c:	2300      	movs	r3, #0
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	f008 fcb9 	bl	8009fc8 <xQueueGenericSend>
				}
				uart_cobs_send(Setting_TypeDef -> Cobs_UART,
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	69d8      	ldr	r0, [r3, #28]
							   Setting_TypeDef -> Signal_Data,
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	6899      	ldr	r1, [r3, #8]
							   4 * Setting_TypeDef -> Length_Realization,
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	009b      	lsls	r3, r3, #2
				uart_cobs_send(Setting_TypeDef -> Cobs_UART,
 8001664:	461a      	mov	r2, r3
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	f006 f833 	bl	80076d4 <uart_cobs_send>
							   portMAX_DELAY);
				xSemaphoreTake(Setting_TypeDef -> Cobs_UART -> Transmit_Ready, portMAX_DELAY);
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8001676:	f04f 31ff 	mov.w	r1, #4294967295
 800167a:	4618      	mov	r0, r3
 800167c:	f008 ff10 	bl	800a4a0 <xQueueSemaphoreTake>
				if(Setting_TypeDef -> FStatus != Enable_Time)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	789b      	ldrb	r3, [r3, #2]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d006      	beq.n	8001696 <Data_Collector_Task+0x5e6>
				{
					xSemaphoreTake(Setting_TypeDef -> Status_Furie_Ready, portMAX_DELAY);
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	f04f 31ff 	mov.w	r1, #4294967295
 8001690:	4618      	mov	r0, r3
 8001692:	f008 ff05 	bl	800a4a0 <xQueueSemaphoreTake>
				}
				if (Status == One_Axis_Enable)
 8001696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800169a:	2b00      	cmp	r3, #0
 800169c:	d103      	bne.n	80016a6 <Data_Collector_Task+0x5f6>
				{
					Status 				= 	Two_Axis_Enable;
 800169e:	2301      	movs	r3, #1
 80016a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016a4:	e00a      	b.n	80016bc <Data_Collector_Task+0x60c>
				}
				else if (Status == Two_Axis_Enable)
 80016a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d103      	bne.n	80016b6 <Data_Collector_Task+0x606>
				{
					Status 				= 	Three_Axis_Enable;
 80016ae:	2302      	movs	r3, #2
 80016b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016b4:	e002      	b.n	80016bc <Data_Collector_Task+0x60c>
				}
				else
				{
					Status 				= 	One_Axis_Enable;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				Index_Count 			=	0;
 80016bc:	2300      	movs	r3, #0
 80016be:	84bb      	strh	r3, [r7, #36]	; 0x24
			}
			break;
 80016c0:	e003      	b.n	80016ca <Data_Collector_Task+0x61a>
			break;
 80016c2:	bf00      	nop
 80016c4:	e536      	b.n	8001134 <Data_Collector_Task+0x84>
			break;
 80016c6:	bf00      	nop
 80016c8:	e534      	b.n	8001134 <Data_Collector_Task+0x84>
			break;
 80016ca:	bf00      	nop
		adxl345_resume();
 80016cc:	e532      	b.n	8001134 <Data_Collector_Task+0x84>
 80016ce:	bf00      	nop
 80016d0:	20000098 	.word	0x20000098

080016d4 <Furie_Transform_Task>:
	}

}

void Furie_Transform_Task(void const * argument)
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af02      	add	r7, sp, #8
 80016da:	6078      	str	r0, [r7, #4]
	User_Data_Settings_TypeDef *Setting_TypeDef
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	60fb      	str	r3, [r7, #12]
										= 	(User_Data_Settings_TypeDef *) argument;

	Setting_TypeDef -> Furie_Compl 		=	(compl_t*) pvPortMalloc(Setting_TypeDef -> Length_Realization * sizeof(compl_t));
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f00a fde4 	bl	800c2bc <pvPortMalloc>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	60da      	str	r2, [r3, #12]
	Setting_TypeDef -> Furie 			=	(float*) pvPortMalloc(Setting_TypeDef -> Length_Realization * sizeof(float));
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4618      	mov	r0, r3
 8001702:	f00a fddb 	bl	800c2bc <pvPortMalloc>
 8001706:	4602      	mov	r2, r0
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	611a      	str	r2, [r3, #16]
	if (Setting_TypeDef -> FStatus == Enable_Envelope_Furie)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	789b      	ldrb	r3, [r3, #2]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d108      	bne.n	8001726 <Furie_Transform_Task+0x52>
	{
		Setting_TypeDef -> Envelope 	=	(float*) pvPortMalloc(Setting_TypeDef -> Length_Realization * sizeof(float));
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4618      	mov	r0, r3
 800171c:	f00a fdce 	bl	800c2bc <pvPortMalloc>
 8001720:	4602      	mov	r2, r0
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	615a      	str	r2, [r3, #20]
	}
	Setting_TypeDef -> Status_Furie_Ready
										=	xSemaphoreCreateBinary();
 8001726:	2203      	movs	r2, #3
 8001728:	2100      	movs	r1, #0
 800172a:	2001      	movs	r0, #1
 800172c:	f008 fbbc 	bl	8009ea8 <xQueueGenericCreate>
 8001730:	4602      	mov	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	629a      	str	r2, [r3, #40]	; 0x28
	while(1)
	{
		xSemaphoreTake(Setting_TypeDef -> Status_Signal_Ready, portMAX_DELAY);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	f04f 31ff 	mov.w	r1, #4294967295
 800173e:	4618      	mov	r0, r3
 8001740:	f008 feae 	bl	800a4a0 <xQueueSemaphoreTake>
		switch(Setting_TypeDef -> FStatus)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	789b      	ldrb	r3, [r3, #2]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d002      	beq.n	8001752 <Furie_Transform_Task+0x7e>
 800174c:	2b02      	cmp	r3, #2
 800174e:	d045      	beq.n	80017dc <Furie_Transform_Task+0x108>
						   4 * Setting_TypeDef -> Length_Realization,
						   portMAX_DELAY);
			xSemaphoreTake(Setting_TypeDef -> Cobs_UART -> Transmit_Ready, portMAX_DELAY);
			break;
		default:
			break;
 8001750:	e0ce      	b.n	80018f0 <Furie_Transform_Task+0x21c>
			SignalFastFurieTransformFREERTOS(Setting_TypeDef -> Signal_Data,
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6898      	ldr	r0, [r3, #8]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	68d9      	ldr	r1, [r3, #12]
											 Setting_TypeDef -> Length_Realization,
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	881b      	ldrh	r3, [r3, #0]
			SignalFastFurieTransformFREERTOS(Setting_TypeDef -> Signal_Data,
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	f007 fda0 	bl	80092a8 <SignalFastFurieTransformFREERTOS>
			for(uint16_t i; i < Setting_TypeDef -> Length_Realization; i++)
 8001768:	e014      	b.n	8001794 <Furie_Transform_Task+0xc0>
				*(Setting_TypeDef -> Furie + i) = Compl_Abs((Setting_TypeDef -> Furie_Compl + i));
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	68d9      	ldr	r1, [r3, #12]
 800176e:	8afa      	ldrh	r2, [r7, #22]
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4419      	add	r1, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	8afb      	ldrh	r3, [r7, #22]
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	18d4      	adds	r4, r2, r3
 8001784:	4608      	mov	r0, r1
 8001786:	f006 feef 	bl	8008568 <Compl_Abs>
 800178a:	4603      	mov	r3, r0
 800178c:	6023      	str	r3, [r4, #0]
			for(uint16_t i; i < Setting_TypeDef -> Length_Realization; i++)
 800178e:	8afb      	ldrh	r3, [r7, #22]
 8001790:	3301      	adds	r3, #1
 8001792:	82fb      	strh	r3, [r7, #22]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	8afa      	ldrh	r2, [r7, #22]
 800179a:	429a      	cmp	r2, r3
 800179c:	d3e5      	bcc.n	800176a <Furie_Transform_Task+0x96>
			xSemaphoreTake(Setting_TypeDef -> Cobs_UART -> Transmit_Ready, portMAX_DELAY);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f8d3 3012 	ldr.w	r3, [r3, #18]
 80017a6:	f04f 31ff 	mov.w	r1, #4294967295
 80017aa:	4618      	mov	r0, r3
 80017ac:	f008 fe78 	bl	800a4a0 <xQueueSemaphoreTake>
			uart_cobs_send(Setting_TypeDef -> Cobs_UART,
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	69d8      	ldr	r0, [r3, #28]
						   Setting_TypeDef -> Furie,
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6919      	ldr	r1, [r3, #16]
						   4 * Setting_TypeDef -> Length_Realization,
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	009b      	lsls	r3, r3, #2
			uart_cobs_send(Setting_TypeDef -> Cobs_UART,
 80017be:	461a      	mov	r2, r3
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
 80017c4:	f005 ff86 	bl	80076d4 <uart_cobs_send>
			xSemaphoreTake(Setting_TypeDef -> Cobs_UART -> Transmit_Ready, portMAX_DELAY);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	f8d3 3012 	ldr.w	r3, [r3, #18]
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	4618      	mov	r0, r3
 80017d6:	f008 fe63 	bl	800a4a0 <xQueueSemaphoreTake>
			break;
 80017da:	e089      	b.n	80018f0 <Furie_Transform_Task+0x21c>
			Envelope(Setting_TypeDef -> Envelope,
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6958      	ldr	r0, [r3, #20]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6899      	ldr	r1, [r3, #8]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	68da      	ldr	r2, [r3, #12]
					 Setting_TypeDef -> Length_Realization,
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	881b      	ldrh	r3, [r3, #0]
			Envelope(Setting_TypeDef -> Envelope,
 80017ec:	461c      	mov	r4, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	4623      	mov	r3, r4
 80017f6:	f008 f97d 	bl	8009af4 <Envelope>
		  	FastFurieTransform(Setting_TypeDef -> Furie_Compl, Setting_TypeDef -> Length_Realization);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	4619      	mov	r1, r3
 8001804:	4610      	mov	r0, r2
 8001806:	f006 ff47 	bl	8008698 <FastFurieTransform>
			for(uint16_t i; i < Setting_TypeDef -> Length_Realization; i++)
 800180a:	e014      	b.n	8001836 <Furie_Transform_Task+0x162>
				*(Setting_TypeDef -> Furie + i) = Compl_Abs((Setting_TypeDef -> Furie_Compl + i));
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	68d9      	ldr	r1, [r3, #12]
 8001810:	8aba      	ldrh	r2, [r7, #20]
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4419      	add	r1, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	8abb      	ldrh	r3, [r7, #20]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	18d4      	adds	r4, r2, r3
 8001826:	4608      	mov	r0, r1
 8001828:	f006 fe9e 	bl	8008568 <Compl_Abs>
 800182c:	4603      	mov	r3, r0
 800182e:	6023      	str	r3, [r4, #0]
			for(uint16_t i; i < Setting_TypeDef -> Length_Realization; i++)
 8001830:	8abb      	ldrh	r3, [r7, #20]
 8001832:	3301      	adds	r3, #1
 8001834:	82bb      	strh	r3, [r7, #20]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	8aba      	ldrh	r2, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	d3e5      	bcc.n	800180c <Furie_Transform_Task+0x138>
			xSemaphoreTake(Setting_TypeDef -> Cobs_UART -> Transmit_Ready, portMAX_DELAY);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	4618      	mov	r0, r3
 800184e:	f008 fe27 	bl	800a4a0 <xQueueSemaphoreTake>
			uart_cobs_send(Setting_TypeDef -> Cobs_UART,
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	69d8      	ldr	r0, [r3, #28]
						   Setting_TypeDef -> Furie,
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6919      	ldr	r1, [r3, #16]
						   4 * Setting_TypeDef -> Length_Realization,
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	009b      	lsls	r3, r3, #2
			uart_cobs_send(Setting_TypeDef -> Cobs_UART,
 8001860:	461a      	mov	r2, r3
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	f005 ff35 	bl	80076d4 <uart_cobs_send>
			SignalFastFurieTransform(Setting_TypeDef -> Envelope,
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6958      	ldr	r0, [r3, #20]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	68d9      	ldr	r1, [r3, #12]
									 Setting_TypeDef -> Length_Realization);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	881b      	ldrh	r3, [r3, #0]
			SignalFastFurieTransform(Setting_TypeDef -> Envelope,
 8001876:	461a      	mov	r2, r3
 8001878:	f007 f9b2 	bl	8008be0 <SignalFastFurieTransform>
			for(uint16_t i; i < Setting_TypeDef -> Length_Realization; i++)
 800187c:	e014      	b.n	80018a8 <Furie_Transform_Task+0x1d4>
				*(Setting_TypeDef -> Envelope + i) = Compl_Abs((Setting_TypeDef -> Furie_Compl + i));
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	68d9      	ldr	r1, [r3, #12]
 8001882:	8a7a      	ldrh	r2, [r7, #18]
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4419      	add	r1, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	8a7b      	ldrh	r3, [r7, #18]
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	18d4      	adds	r4, r2, r3
 8001898:	4608      	mov	r0, r1
 800189a:	f006 fe65 	bl	8008568 <Compl_Abs>
 800189e:	4603      	mov	r3, r0
 80018a0:	6023      	str	r3, [r4, #0]
			for(uint16_t i; i < Setting_TypeDef -> Length_Realization; i++)
 80018a2:	8a7b      	ldrh	r3, [r7, #18]
 80018a4:	3301      	adds	r3, #1
 80018a6:	827b      	strh	r3, [r7, #18]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	8a7a      	ldrh	r2, [r7, #18]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d3e5      	bcc.n	800187e <Furie_Transform_Task+0x1aa>
			xSemaphoreTake(Setting_TypeDef -> Cobs_UART -> Transmit_Ready, portMAX_DELAY);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	f8d3 3012 	ldr.w	r3, [r3, #18]
 80018ba:	f04f 31ff 	mov.w	r1, #4294967295
 80018be:	4618      	mov	r0, r3
 80018c0:	f008 fdee 	bl	800a4a0 <xQueueSemaphoreTake>
			uart_cobs_send(Setting_TypeDef -> Cobs_UART,
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	69d8      	ldr	r0, [r3, #28]
						   Setting_TypeDef -> Envelope,
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6959      	ldr	r1, [r3, #20]
						   4 * Setting_TypeDef -> Length_Realization,
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	009b      	lsls	r3, r3, #2
			uart_cobs_send(Setting_TypeDef -> Cobs_UART,
 80018d2:	461a      	mov	r2, r3
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
 80018d8:	f005 fefc 	bl	80076d4 <uart_cobs_send>
			xSemaphoreTake(Setting_TypeDef -> Cobs_UART -> Transmit_Ready, portMAX_DELAY);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	f8d3 3012 	ldr.w	r3, [r3, #18]
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	4618      	mov	r0, r3
 80018ea:	f008 fdd9 	bl	800a4a0 <xQueueSemaphoreTake>
			break;
 80018ee:	bf00      	nop
		xSemaphoreTake(Setting_TypeDef -> Status_Signal_Ready, portMAX_DELAY);
 80018f0:	e721      	b.n	8001736 <Furie_Transform_Task+0x62>
	...

080018f4 <Data_Collector_create>:

osThreadId Data_Collector_task_id 		= 	NULL;

osThreadId Data_Collector_create(char *name, osPriority priority,
	uint32_t instances, uint32_t stack_size, User_Data_Settings_TypeDef* Settings)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08c      	sub	sp, #48	; 0x30
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	460b      	mov	r3, r1
 8001902:	817b      	strh	r3, [r7, #10]

	/* create treads */
	osThreadDef_t thread = {
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
 8001914:	615a      	str	r2, [r3, #20]
 8001916:	619a      	str	r2, [r3, #24]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <Data_Collector_create+0x58>)
 800191e:	61bb      	str	r3, [r7, #24]
 8001920:	897b      	ldrh	r3, [r7, #10]
 8001922:	83bb      	strh	r3, [r7, #28]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	623b      	str	r3, [r7, #32]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
		.tpriority	= priority,
		.instances	= instances,
		.stacksize	= stack_size
	};

	Data_Collector_task_id 				= 	osThreadCreate(&thread, (void *) Settings);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001932:	4618      	mov	r0, r3
 8001934:	f008 f934 	bl	8009ba0 <osThreadCreate>
 8001938:	4603      	mov	r3, r0
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <Data_Collector_create+0x5c>)
 800193c:	6013      	str	r3, [r2, #0]
	return Data_Collector_task_id;
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <Data_Collector_create+0x5c>)
 8001940:	681b      	ldr	r3, [r3, #0]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3730      	adds	r7, #48	; 0x30
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	080010b1 	.word	0x080010b1
 8001950:	2000009c 	.word	0x2000009c

08001954 <Furie_Transform_create>:

osThreadId Furie_Transform_task_id 		= 	NULL;

osThreadId Furie_Transform_create(char *name, osPriority priority,
	uint32_t instances, uint32_t stack_size, User_Data_Settings_TypeDef* Settings)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08c      	sub	sp, #48	; 0x30
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	460b      	mov	r3, r1
 8001962:	817b      	strh	r3, [r7, #10]

	/* create treads */
	osThreadDef_t thread = {
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
 8001974:	615a      	str	r2, [r3, #20]
 8001976:	619a      	str	r2, [r3, #24]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <Furie_Transform_create+0x58>)
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	897b      	ldrh	r3, [r7, #10]
 8001982:	83bb      	strh	r3, [r7, #28]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	623b      	str	r3, [r7, #32]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
		.tpriority	= priority,
		.instances	= instances,
		.stacksize	= stack_size
	};

	Furie_Transform_task_id 		=	osThreadCreate(&thread, (void *) Settings);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001992:	4618      	mov	r0, r3
 8001994:	f008 f904 	bl	8009ba0 <osThreadCreate>
 8001998:	4603      	mov	r3, r0
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <Furie_Transform_create+0x5c>)
 800199c:	6013      	str	r3, [r2, #0]
	return Furie_Transform_task_id;
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <Furie_Transform_create+0x5c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3730      	adds	r7, #48	; 0x30
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	080016d5 	.word	0x080016d5
 80019b0:	200000a0 	.word	0x200000a0

080019b4 <Data_Collector_free>:
/*********************************************************************************************/
/*						  		 	 Free Memoru Task Function								 */
/*********************************************************************************************/

void Data_Collector_free(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	Free_RTOS_Buffer(First_Select_Axis_Data);
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <Data_Collector_free+0x34>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 f887 	bl	8001ad0 <Free_RTOS_Buffer>
	Free_RTOS_Buffer(Second_Select_Axis_Data);
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <Data_Collector_free+0x38>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f882 	bl	8001ad0 <Free_RTOS_Buffer>
	if (Data_Collector_task_id != NULL)
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <Data_Collector_free+0x3c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d007      	beq.n	80019e4 <Data_Collector_free+0x30>
	{
		osThreadTerminate(Data_Collector_task_id);
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <Data_Collector_free+0x3c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f008 f92d 	bl	8009c38 <osThreadTerminate>
		Data_Collector_task_id = NULL;
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <Data_Collector_free+0x3c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
	}
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000094 	.word	0x20000094
 80019ec:	20000098 	.word	0x20000098
 80019f0:	2000009c 	.word	0x2000009c

080019f4 <Furie_Transform_free>:

void Furie_Transform_free(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	if (Furie_Transform_task_id != NULL)
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <Furie_Transform_free+0x20>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d007      	beq.n	8001a10 <Furie_Transform_free+0x1c>
	{
		osThreadTerminate(Furie_Transform_task_id);
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <Furie_Transform_free+0x20>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f008 f917 	bl	8009c38 <osThreadTerminate>
		Furie_Transform_task_id = NULL;
 8001a0a:	4b02      	ldr	r3, [pc, #8]	; (8001a14 <Furie_Transform_free+0x20>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
	}
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200000a0 	.word	0x200000a0

08001a18 <vApplicationMallocFailedHook>:
/*********************************************************************************************/
static SemaphoreHandle_t 		Mutex_Failed_Memoru;
static uart_cobs_service_t 		*COBS_UART_Transmit;

void vApplicationMallocFailedHook(void)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b08d      	sub	sp, #52	; 0x34
 8001a1c:	af02      	add	r7, sp, #8
	const char Error_Messege[] = "Out of memory";
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <vApplicationMallocFailedHook+0x64>)
 8001a20:	f107 0414 	add.w	r4, r7, #20
 8001a24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a26:	c407      	stmia	r4!, {r0, r1, r2}
 8001a28:	8023      	strh	r3, [r4, #0]
	uint8_t Error_Messege_COBS[14];
	size_t size = cobs_encode((uint8_t *) Error_Messege, (size_t) 12, (uint8_t *)  Error_Messege_COBS);
 8001a2a:	1d3a      	adds	r2, r7, #4
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	210c      	movs	r1, #12
 8001a32:	4618      	mov	r0, r3
 8001a34:	f005 f9de 	bl	8006df4 <cobs_encode>
 8001a38:	6278      	str	r0, [r7, #36]	; 0x24
	Error_Messege_COBS[size++] = 0;
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	627a      	str	r2, [r7, #36]	; 0x24
 8001a40:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a44:	4413      	add	r3, r2
 8001a46:	2200      	movs	r2, #0
 8001a48:	f803 2c24 	strb.w	r2, [r3, #-36]
	uart_freertos_tx_it(COBS_UART_Transmit->huart, Error_Messege_COBS, 14,
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <vApplicationMallocFailedHook+0x68>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6818      	ldr	r0, [r3, #0]
 8001a52:	1d39      	adds	r1, r7, #4
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	220e      	movs	r2, #14
 8001a60:	f006 f9a8 	bl	8007db4 <uart_freertos_tx_it>
					 	portMAX_DELAY, HAL_MAX_DELAY);
	xSemaphoreGive(Mutex_Failed_Memoru);
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <vApplicationMallocFailedHook+0x6c>)
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	f008 faab 	bl	8009fc8 <xQueueGenericSend>
}
 8001a72:	bf00      	nop
 8001a74:	372c      	adds	r7, #44	; 0x2c
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd90      	pop	{r4, r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	0800dae8 	.word	0x0800dae8
 8001a80:	200000a8 	.word	0x200000a8
 8001a84:	200000a4 	.word	0x200000a4

08001a88 <Create_Mutex_Malloc_Failed>:

void Create_Mutex_Malloc_Failed(uart_cobs_service_t *uart_cobs_service)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	COBS_UART_Transmit 	=	uart_cobs_service;
 8001a90:	4a06      	ldr	r2, [pc, #24]	; (8001aac <Create_Mutex_Malloc_Failed+0x24>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
	Mutex_Failed_Memoru = 	xSemaphoreCreateMutex();
 8001a96:	2001      	movs	r0, #1
 8001a98:	f008 fa7d 	bl	8009f96 <xQueueCreateMutex>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <Create_Mutex_Malloc_Failed+0x28>)
 8001aa0:	6013      	str	r3, [r2, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200000a8 	.word	0x200000a8
 8001ab0:	200000a4 	.word	0x200000a4

08001ab4 <Read_Mutex_Malloc_Failed>:

BaseType_t Read_Mutex_Malloc_Failed(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
	return(xSemaphoreTake(Mutex_Failed_Memoru, 0));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <Read_Mutex_Malloc_Failed+0x18>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f008 fcee 	bl	800a4a0 <xQueueSemaphoreTake>
 8001ac4:	4603      	mov	r3, r0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200000a4 	.word	0x200000a4

08001ad0 <Free_RTOS_Buffer>:
/*********************************************************************************************/
/*						  		 	   Free Buffers Function								 */
/*********************************************************************************************/

void Free_RTOS_Buffer(const void *pBuff)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	if (pBuff != NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <Free_RTOS_Buffer+0x14>
	{
		vPortFree((void *) pBuff);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f00a fcb6 	bl	800c450 <vPortFree>
	}
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <vApplicationGetIdleTaskMemory+0x28>)
 8001afc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2280      	movs	r2, #128	; 0x80
 8001b08:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b0a:	bf00      	nop
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	200000ac 	.word	0x200000ac
 8001b18:	20000160 	.word	0x20000160

08001b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b1c:	b5b0      	push	{r4, r5, r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b22:	f000 fdcd 	bl	80026c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b26:	f000 f821 	bl	8001b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b2a:	f000 f8eb 	bl	8001d04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b2e:	f000 f899 	bl	8001c64 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001b32:	f000 f8c1 	bl	8001cb8 <MX_DMA_Init>
  MX_SPI2_Init();
 8001b36:	f000 f85f 	bl	8001bf8 <MX_SPI2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, Settings_Controll_Task, osPriorityAboveNormal, 0, 128);
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <main+0x48>)
 8001b3c:	1d3c      	adds	r4, r7, #4
 8001b3e:	461d      	mov	r5, r3
 8001b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f008 f825 	bl	8009ba0 <osThreadCreate>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4a03      	ldr	r2, [pc, #12]	; (8001b68 <main+0x4c>)
 8001b5a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001b5c:	f008 f819 	bl	8009b92 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <main+0x44>
 8001b62:	bf00      	nop
 8001b64:	0800db04 	.word	0x0800db04
 8001b68:	20004230 	.word	0x20004230

08001b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b090      	sub	sp, #64	; 0x40
 8001b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b72:	f107 0318 	add.w	r3, r7, #24
 8001b76:	2228      	movs	r2, #40	; 0x28
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f00a fdb6 	bl	800c6ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b92:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ba4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ba8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001baa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb0:	f107 0318 	add.w	r3, r7, #24
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f001 fae7 	bl	8003188 <HAL_RCC_OscConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001bc0:	f000 fb78 	bl	80022b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc4:	230f      	movs	r3, #15
 8001bc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2102      	movs	r1, #2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f001 fd52 	bl	8003688 <HAL_RCC_ClockConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001bea:	f000 fb63 	bl	80022b4 <Error_Handler>
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3740      	adds	r7, #64	; 0x40
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <MX_SPI2_Init+0x64>)
 8001bfe:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <MX_SPI2_Init+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <MX_SPI2_Init+0x64>)
 8001c04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c0a:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <MX_SPI2_Init+0x64>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_SPI2_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <MX_SPI2_Init+0x64>)
 8001c18:	2202      	movs	r2, #2
 8001c1a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_SPI2_Init+0x64>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_SPI2_Init+0x64>)
 8001c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c28:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_SPI2_Init+0x64>)
 8001c2c:	2218      	movs	r2, #24
 8001c2e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <MX_SPI2_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_SPI2_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <MX_SPI2_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_SPI2_Init+0x64>)
 8001c44:	220a      	movs	r2, #10
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <MX_SPI2_Init+0x64>)
 8001c4a:	f001 fee7 	bl	8003a1c <HAL_SPI_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001c54:	f000 fb2e 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20004234 	.word	0x20004234
 8001c60:	40003800 	.word	0x40003800

08001c64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <MX_USART2_UART_Init+0x50>)
 8001c6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c9a:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c9c:	f003 fb92 	bl	80053c4 <HAL_UART_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ca6:	f000 fb05 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200043a8 	.word	0x200043a8
 8001cb4:	40004400 	.word	0x40004400

08001cb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <MX_DMA_Init+0x48>)
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	4a0f      	ldr	r2, [pc, #60]	; (8001d00 <MX_DMA_Init+0x48>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6153      	str	r3, [r2, #20]
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <MX_DMA_Init+0x48>)
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2105      	movs	r1, #5
 8001cda:	200e      	movs	r0, #14
 8001cdc:	f000 fdd7 	bl	800288e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001ce0:	200e      	movs	r0, #14
 8001ce2:	f000 fdf0 	bl	80028c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2105      	movs	r1, #5
 8001cea:	200f      	movs	r0, #15
 8001cec:	f000 fdcf 	bl	800288e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001cf0:	200f      	movs	r0, #15
 8001cf2:	f000 fde8 	bl	80028c6 <HAL_NVIC_EnableIRQ>

}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000

08001d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0a:	f107 0310 	add.w	r3, r7, #16
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d18:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <MX_GPIO_Init+0x10c>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a3c      	ldr	r2, [pc, #240]	; (8001e10 <MX_GPIO_Init+0x10c>)
 8001d1e:	f043 0310 	orr.w	r3, r3, #16
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <MX_GPIO_Init+0x10c>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d30:	4b37      	ldr	r3, [pc, #220]	; (8001e10 <MX_GPIO_Init+0x10c>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a36      	ldr	r2, [pc, #216]	; (8001e10 <MX_GPIO_Init+0x10c>)
 8001d36:	f043 0320 	orr.w	r3, r3, #32
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <MX_GPIO_Init+0x10c>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d48:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <MX_GPIO_Init+0x10c>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a30      	ldr	r2, [pc, #192]	; (8001e10 <MX_GPIO_Init+0x10c>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <MX_GPIO_Init+0x10c>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d60:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <MX_GPIO_Init+0x10c>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a2a      	ldr	r2, [pc, #168]	; (8001e10 <MX_GPIO_Init+0x10c>)
 8001d66:	f043 0308 	orr.w	r3, r3, #8
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <MX_GPIO_Init+0x10c>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2120      	movs	r1, #32
 8001d7c:	4825      	ldr	r0, [pc, #148]	; (8001e14 <MX_GPIO_Init+0x110>)
 8001d7e:	f001 f9d3 	bl	8003128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2140      	movs	r1, #64	; 0x40
 8001d86:	4824      	ldr	r0, [pc, #144]	; (8001e18 <MX_GPIO_Init+0x114>)
 8001d88:	f001 f9ce 	bl	8003128 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin GPIO_Int2_Accelerometer_Pin */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_Int2_Accelerometer_Pin;
 8001d8c:	f242 0310 	movw	r3, #8208	; 0x2010
 8001d90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d92:	4b22      	ldr	r3, [pc, #136]	; (8001e1c <MX_GPIO_Init+0x118>)
 8001d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	4619      	mov	r1, r3
 8001da0:	481f      	ldr	r0, [pc, #124]	; (8001e20 <MX_GPIO_Init+0x11c>)
 8001da2:	f001 f83d 	bl	8002e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_Pin */
  GPIO_InitStruct.Pin = Green_Pin;
 8001da6:	2320      	movs	r3, #32
 8001da8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2302      	movs	r3, #2
 8001db4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Green_GPIO_Port, &GPIO_InitStruct);
 8001db6:	f107 0310 	add.w	r3, r7, #16
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4815      	ldr	r0, [pc, #84]	; (8001e14 <MX_GPIO_Init+0x110>)
 8001dbe:	f001 f82f 	bl	8002e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Int1_Accelerometer_Pin */
  GPIO_InitStruct.Pin = GPIO_Int1_Accelerometer_Pin;
 8001dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <MX_GPIO_Init+0x118>)
 8001dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_Int1_Accelerometer_GPIO_Port, &GPIO_InitStruct);
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480f      	ldr	r0, [pc, #60]	; (8001e14 <MX_GPIO_Init+0x110>)
 8001dd8:	f001 f822 	bl	8002e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001ddc:	2340      	movs	r3, #64	; 0x40
 8001dde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de0:	2301      	movs	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	4619      	mov	r1, r3
 8001df2:	4809      	ldr	r0, [pc, #36]	; (8001e18 <MX_GPIO_Init+0x114>)
 8001df4:	f001 f814 	bl	8002e20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2105      	movs	r1, #5
 8001dfc:	2028      	movs	r0, #40	; 0x28
 8001dfe:	f000 fd46 	bl	800288e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e02:	2028      	movs	r0, #40	; 0x28
 8001e04:	f000 fd5f 	bl	80028c6 <HAL_NVIC_EnableIRQ>

}
 8001e08:	bf00      	nop
 8001e0a:	3720      	adds	r7, #32
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40010800 	.word	0x40010800
 8001e18:	40010c00 	.word	0x40010c00
 8001e1c:	10110000 	.word	0x10110000
 8001e20:	40011000 	.word	0x40011000

08001e24 <Settings_Controll_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Settings_Controll_Task */
void Settings_Controll_Task(void const * argument)
{
 8001e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af02      	add	r7, sp, #8
 8001e2a:	6078      	str	r0, [r7, #4]
	//-----------------------------------------------------------------------------------------------//
	//---------------------------Base Configuration Accelerometr Struct------------------------------//
	//---------------------------**************************************------------------------------//
	//										SPI CONFIG												 //
	//***********************************************************************************************//
	hadxl_settings.spi.spi_rtos			=	&spi_rtos;
 8001e2c:	4bc8      	ldr	r3, [pc, #800]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001e2e:	4ac9      	ldr	r2, [pc, #804]	; (8002154 <Settings_Controll_Task+0x330>)
 8001e30:	601a      	str	r2, [r3, #0]
	hadxl_settings.spi.spi_rtos->hspi	=	&hspi2;
 8001e32:	4bc7      	ldr	r3, [pc, #796]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4ac8      	ldr	r2, [pc, #800]	; (8002158 <Settings_Controll_Task+0x334>)
 8001e38:	601a      	str	r2, [r3, #0]
	if(spi_freertos_init(hadxl_settings.spi.spi_rtos) == SPI_FREERTOS_EXIST)
 8001e3a:	4bc5      	ldr	r3, [pc, #788]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f005 f960 	bl	8007104 <spi_freertos_init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b05      	cmp	r3, #5
 8001e48:	d101      	bne.n	8001e4e <Settings_Controll_Task+0x2a>
	{
		Error_Handler();
 8001e4a:	f000 fa33 	bl	80022b4 <Error_Handler>
	}
	hadxl_settings.spi.nss.pin			=	SPI_CS_Pin;
 8001e4e:	4bc0      	ldr	r3, [pc, #768]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e56:	721a      	strb	r2, [r3, #8]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	725a      	strb	r2, [r3, #9]
	hadxl_settings.spi.nss.port 		=	SPI_CS_GPIO_Port;
 8001e5c:	4bbc      	ldr	r3, [pc, #752]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	711a      	strb	r2, [r3, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f042 020c 	orr.w	r2, r2, #12
 8001e68:	715a      	strb	r2, [r3, #5]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f042 0201 	orr.w	r2, r2, #1
 8001e70:	719a      	strb	r2, [r3, #6]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e78:	71da      	strb	r2, [r3, #7]
	//***********************************************************************************************//
	//							        Format Read Accelertion										 //
	//***********************************************************************************************//
	hadxl_settings.settings.align		=	ADXL345_ALIGN_LSB;
 8001e7a:	4bb5      	ldr	r3, [pc, #724]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	hadxl_settings.settings.resolution	=	ADXL345_RESOLUTION_FULL;
 8001e82:	4bb3      	ldr	r3, [pc, #716]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001e84:	2208      	movs	r2, #8
 8001e86:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//***********************************************************************************************//
	//							   Settings FIFO Buffer in accelerometr								 //
	//***********************************************************************************************//
	hadxl_settings.
				settings.fifo_watermark =	0x25;
 8001e8a:	4bb1      	ldr	r3, [pc, #708]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001e8c:	2225      	movs	r2, #37	; 0x25
 8001e8e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	hadxl_settings.settings.fifo_mode 	=	ADXL345_FIFO_FIFO;
 8001e92:	4baf      	ldr	r3, [pc, #700]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001e94:	2240      	movs	r2, #64	; 0x40
 8001e96:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	hadxl_settings.settings.fifo_trigger=	ADXL345_FIFO_TRIG_INT1;
 8001e9a:	4bad      	ldr	r3, [pc, #692]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	//***********************************************************************************************//
	//					Interrupt Settings, GPIO Configuration, FREERTOS Controll					 //
	//***********************************************************************************************//
	hadxl_settings.settings.int_en 		=	ADXL345_INT_WATERMARK | ADXL345_INT_OVERRUN;
 8001ea2:	4bab      	ldr	r3, [pc, #684]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	hadxl_settings.settings.map_to_int2	=  ~ADXL345_INT_WATERMARK & ADXL345_INT_OVERRUN;
 8001eaa:	4ba9      	ldr	r3, [pc, #676]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	hadxl_settings.int1.pin 			=	GPIO_Int1_Accelerometer_Pin;
 8001eb2:	4ba7      	ldr	r3, [pc, #668]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	751a      	strb	r2, [r3, #20]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f042 0204 	orr.w	r2, r2, #4
 8001ebe:	755a      	strb	r2, [r3, #21]
	hadxl_settings.int1.port			=	GPIO_Int1_Accelerometer_GPIO_Port;
 8001ec0:	4ba3      	ldr	r3, [pc, #652]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	741a      	strb	r2, [r3, #16]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f042 0208 	orr.w	r2, r2, #8
 8001ecc:	745a      	strb	r2, [r3, #17]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	749a      	strb	r2, [r3, #18]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001edc:	74da      	strb	r2, [r3, #19]
	hadxl_settings.int2.pin 			=	GPIO_Int2_Accelerometer_Pin;
 8001ede:	4b9c      	ldr	r3, [pc, #624]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f042 0210 	orr.w	r2, r2, #16
 8001ee6:	771a      	strb	r2, [r3, #28]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	775a      	strb	r2, [r3, #29]
	hadxl_settings.int2.port			=	GPIO_Int2_Accelerometer_GPIO_Port;
 8001eec:	4b98      	ldr	r3, [pc, #608]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	761a      	strb	r2, [r3, #24]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f042 0210 	orr.w	r2, r2, #16
 8001ef8:	765a      	strb	r2, [r3, #25]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f042 0201 	orr.w	r2, r2, #1
 8001f00:	769a      	strb	r2, [r3, #26]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f08:	76da      	strb	r2, [r3, #27]
	hadxl_settings.mutex_timeout 		=	100;
 8001f0a:	4b91      	ldr	r3, [pc, #580]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 8001f12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	hadxl_settings.transfer_timeout 	=	100;
 8001f28:	4b89      	ldr	r3, [pc, #548]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 8001f30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	//---------------------------**************************************------------------------------//
	//----------------------------Start Configure Settigs Task Struct--------------------------------//
	//-----------------------------------------------------------------------------------------------//
	Setting_TypeDef.Length_Realization	=	0;
 8001f46:	4b85      	ldr	r3, [pc, #532]	; (800215c <Settings_Controll_Task+0x338>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	801a      	strh	r2, [r3, #0]
	Setting_TypeDef.FStatus 			= 	Enable_Time;
 8001f4c:	4b83      	ldr	r3, [pc, #524]	; (800215c <Settings_Controll_Task+0x338>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	709a      	strb	r2, [r3, #2]
	Setting_TypeDef.hadxl 				=	&hadxl_task;
 8001f52:	4b82      	ldr	r3, [pc, #520]	; (800215c <Settings_Controll_Task+0x338>)
 8001f54:	4a82      	ldr	r2, [pc, #520]	; (8002160 <Settings_Controll_Task+0x33c>)
 8001f56:	621a      	str	r2, [r3, #32]
					 hadxl_task.hadxl 	=	hadxl_settings;
 8001f58:	4a81      	ldr	r2, [pc, #516]	; (8002160 <Settings_Controll_Task+0x33c>)
 8001f5a:	4b7d      	ldr	r3, [pc, #500]	; (8002150 <Settings_Controll_Task+0x32c>)
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001f62:	4602      	mov	r2, r0
 8001f64:	4619      	mov	r1, r3
 8001f66:	f8d1 c000 	ldr.w	ip, [r1]
 8001f6a:	684e      	ldr	r6, [r1, #4]
 8001f6c:	688d      	ldr	r5, [r1, #8]
 8001f6e:	68c9      	ldr	r1, [r1, #12]
 8001f70:	f8c2 c000 	str.w	ip, [r2]
 8001f74:	6056      	str	r6, [r2, #4]
 8001f76:	6095      	str	r5, [r2, #8]
 8001f78:	60d1      	str	r1, [r2, #12]
 8001f7a:	3310      	adds	r3, #16
 8001f7c:	3010      	adds	r0, #16
 8001f7e:	42a3      	cmp	r3, r4
 8001f80:	d1ef      	bne.n	8001f62 <Settings_Controll_Task+0x13e>
 8001f82:	4602      	mov	r2, r0
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6013      	str	r3, [r2, #0]
					 hadxl_task.
					 	 fifo_frame_size=	128;
 8001f88:	4b75      	ldr	r3, [pc, #468]	; (8002160 <Settings_Controll_Task+0x33c>)
 8001f8a:	2280      	movs	r2, #128	; 0x80
 8001f8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					 hadxl_task.
					 	 fifo_frame_qty =	2;
 8001f90:	4b73      	ldr	r3, [pc, #460]	; (8002160 <Settings_Controll_Task+0x33c>)
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Setting_TypeDef.TempStatus 			=	Temp_Enable;
 8001f98:	4b70      	ldr	r3, [pc, #448]	; (800215c <Settings_Controll_Task+0x338>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	70da      	strb	r2, [r3, #3]
	Setting_TypeDef.X_Axis  			=	Disable;
 8001f9e:	4b6f      	ldr	r3, [pc, #444]	; (800215c <Settings_Controll_Task+0x338>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	711a      	strb	r2, [r3, #4]
	Setting_TypeDef.Y_Axis  			=	Disable;
 8001fa4:	4b6d      	ldr	r3, [pc, #436]	; (800215c <Settings_Controll_Task+0x338>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	715a      	strb	r2, [r3, #5]
	Setting_TypeDef.Z_Axis  			=	Disable;
 8001faa:	4b6c      	ldr	r3, [pc, #432]	; (800215c <Settings_Controll_Task+0x338>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	719a      	strb	r2, [r3, #6]
	Setting_TypeDef.Signal_Data			=	NULL;
 8001fb0:	4b6a      	ldr	r3, [pc, #424]	; (800215c <Settings_Controll_Task+0x338>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
	Setting_TypeDef.Furie_Compl			=	NULL;
 8001fb6:	4b69      	ldr	r3, [pc, #420]	; (800215c <Settings_Controll_Task+0x338>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60da      	str	r2, [r3, #12]
	Setting_TypeDef.Furie				=	NULL;
 8001fbc:	4b67      	ldr	r3, [pc, #412]	; (800215c <Settings_Controll_Task+0x338>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
	Setting_TypeDef.Envelope			=	NULL;
 8001fc2:	4b66      	ldr	r3, [pc, #408]	; (800215c <Settings_Controll_Task+0x338>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	615a      	str	r2, [r3, #20]
	Setting_TypeDef.Status_Signal 		=	Outage;
 8001fc8:	4b64      	ldr	r3, [pc, #400]	; (800215c <Settings_Controll_Task+0x338>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	761a      	strb	r2, [r3, #24]
	Setting_TypeDef.Status_Furie 		=	Outage;
 8001fce:	4b63      	ldr	r3, [pc, #396]	; (800215c <Settings_Controll_Task+0x338>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	765a      	strb	r2, [r3, #25]
	Setting_TypeDef.Status_Envelope 	=	Outage;
 8001fd4:	4b61      	ldr	r3, [pc, #388]	; (800215c <Settings_Controll_Task+0x338>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	769a      	strb	r2, [r3, #26]
	Setting_TypeDef.Cobs_UART			=	&Cobs_UART;
 8001fda:	4b60      	ldr	r3, [pc, #384]	; (800215c <Settings_Controll_Task+0x338>)
 8001fdc:	4a61      	ldr	r2, [pc, #388]	; (8002164 <Settings_Controll_Task+0x340>)
 8001fde:	61da      	str	r2, [r3, #28]
	 	 	 	 	 	 	 	 	 	 	 	 *	1 bytes on status activity y_axis
	 	 	 	 	 	 	 	 	 	 	 	 *	1 bytes on status activity z_axis
	 	 	 	 	 	 	 	 	 	 	 	 *	1 bytes on frequensy discretisation
	 	 	 	 	 	 	 	 	 	 	 	 *	1 bytes on range measure acceleration
	 	 	 	 	 	 	 	 	 	 	 	 */
	uint8_t Receive_Data_Settings[Size_Data_Settings_in_Bytes]
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
								  	  	=	{0};
	//***********************************************************************************************//
	//						   Configuration and create task reseive data							 //
	//***********************************************************************************************//
	Cobs_UART.huart						=	(uart_freertos_t*) pvPortMalloc(sizeof(uart_freertos_t));
 8001fe8:	2014      	movs	r0, #20
 8001fea:	f00a f967 	bl	800c2bc <pvPortMalloc>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4a5c      	ldr	r2, [pc, #368]	; (8002164 <Settings_Controll_Task+0x340>)
 8001ff2:	6013      	str	r3, [r2, #0]
	uart_freertos_init(					Cobs_UART.huart
 8001ff4:	4b5b      	ldr	r3, [pc, #364]	; (8002164 <Settings_Controll_Task+0x340>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f005 fe0b 	bl	8007c14 <uart_freertos_init>
					  );
	Cobs_UART.max_frame_size 			=	(size_t) Size_Data_Settings_in_Bytes;
 8001ffe:	4b59      	ldr	r3, [pc, #356]	; (8002164 <Settings_Controll_Task+0x340>)
 8002000:	2200      	movs	r2, #0
 8002002:	f042 0208 	orr.w	r2, r2, #8
 8002006:	711a      	strb	r2, [r3, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	715a      	strb	r2, [r3, #5]
 800200c:	2200      	movs	r2, #0
 800200e:	719a      	strb	r2, [r3, #6]
 8002010:	2200      	movs	r2, #0
 8002012:	71da      	strb	r2, [r3, #7]
	Cobs_UART.huart -> huart			=	(UART_HandleTypeDef *) &huart2;
 8002014:	4b53      	ldr	r3, [pc, #332]	; (8002164 <Settings_Controll_Task+0x340>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a53      	ldr	r2, [pc, #332]	; (8002168 <Settings_Controll_Task+0x344>)
 800201a:	601a      	str	r2, [r3, #0]
	Cobs_UART.queue_depth 				=	3;
 800201c:	4b51      	ldr	r3, [pc, #324]	; (8002164 <Settings_Controll_Task+0x340>)
 800201e:	2203      	movs	r2, #3
 8002020:	721a      	strb	r2, [r3, #8]
	Cobs_UART.mode 						=	UART_COBS_INTERRUPT;
 8002022:	4b50      	ldr	r3, [pc, #320]	; (8002164 <Settings_Controll_Task+0x340>)
 8002024:	2201      	movs	r2, #1
 8002026:	725a      	strb	r2, [r3, #9]
	uart_cobs_service_rx_create(		"Task_uart_cobs_service_rx",
 8002028:	4b4e      	ldr	r3, [pc, #312]	; (8002164 <Settings_Controll_Task+0x340>)
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	2200      	movs	r2, #0
 8002030:	2102      	movs	r1, #2
 8002032:	484e      	ldr	r0, [pc, #312]	; (800216c <Settings_Controll_Task+0x348>)
 8002034:	f005 fd10 	bl	8007a58 <uart_cobs_service_rx_create>
	//-------------------------******************************************----------------------------//
	//----------------------Brains Setting, Reseive, Create and Delete Tasks-------------------------//
	//-------------------------******************************************----------------------------//
	//									Start Configure Accelerometr 								 //
	//***********************************************************************************************//
	hadxl_settings.settings.data_rate	=	ADXL345_DATARATE_0_10_HZ;
 8002038:	4b45      	ldr	r3, [pc, #276]	; (8002150 <Settings_Controll_Task+0x32c>)
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2020 	strb.w	r2, [r3, #32]
	hadxl_settings.settings.meas_range	=	ADXL345_RANGE_2_G;
 8002040:	4b43      	ldr	r3, [pc, #268]	; (8002150 <Settings_Controll_Task+0x32c>)
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	//								НАП�?САТЬ КОД СТАРТОВОЙ КОНФ�?ГУРАЦ�?�?

	hadxl_settings.settings.offset.x	=	0;
 8002048:	4b41      	ldr	r3, [pc, #260]	; (8002150 <Settings_Controll_Task+0x32c>)
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadxl_settings.settings.offset.y	=	0;
 8002050:	4b3f      	ldr	r3, [pc, #252]	; (8002150 <Settings_Controll_Task+0x32c>)
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	hadxl_settings.settings.offset.z 	=	0;
 8002058:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <Settings_Controll_Task+0x32c>)
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	/* Initializing ADXL345 */
	if(adxl345_init(&(hadxl_settings)) != ADXL345_OK)
 8002060:	483b      	ldr	r0, [pc, #236]	; (8002150 <Settings_Controll_Task+0x32c>)
 8002062:	f004 fa91 	bl	8006588 <adxl345_init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <Settings_Controll_Task+0x24c>
		Error_Handler();
 800206c:	f000 f922 	bl	80022b4 <Error_Handler>
	//-----------------------------------------------------------------------------------------------//
	//----------------------------------Create Mutex Failed Memoru-----------------------------------//
	//-----------------------------------------------------------------------------------------------//
	Create_Mutex_Malloc_Failed(&Cobs_UART);
 8002070:	483c      	ldr	r0, [pc, #240]	; (8002164 <Settings_Controll_Task+0x340>)
 8002072:	f7ff fd09 	bl	8001a88 <Create_Mutex_Malloc_Failed>
	//-------------------------******************************************----------------------------//
	while(1)
	{
		//uart_cobs_recv(&Cobs_UART,  (void **)  &Receive_Data_Settings, portMAX_DELAY);
		Read_Mutex_Malloc_Failed();
 8002076:	f7ff fd1d 	bl	8001ab4 <Read_Mutex_Malloc_Failed>
		//uint16_t *pLength_Relization 	=	(uint16_t *) 						Receive_Data_Settings;
		Setting_TypeDef.Length_Realization
										=	256;//*pLength_Relization;
 800207a:	4b38      	ldr	r3, [pc, #224]	; (800215c <Settings_Controll_Task+0x338>)
 800207c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002080:	801a      	strh	r2, [r3, #0]
		Setting_TypeDef.FStatus 		=	(Furie_Task_Status_TypeDef)   		0;//*(Receive_Data_Settings + 2);
 8002082:	4b36      	ldr	r3, [pc, #216]	; (800215c <Settings_Controll_Task+0x338>)
 8002084:	2200      	movs	r2, #0
 8002086:	709a      	strb	r2, [r3, #2]
		Setting_TypeDef.X_Axis 			=	(Measurement_Axis_Status_TypeDef)	1;//*(Receive_Data_Settings + 3);
 8002088:	4b34      	ldr	r3, [pc, #208]	; (800215c <Settings_Controll_Task+0x338>)
 800208a:	2201      	movs	r2, #1
 800208c:	711a      	strb	r2, [r3, #4]
		Setting_TypeDef.Y_Axis 			=	(Measurement_Axis_Status_TypeDef)	0;//*(Receive_Data_Settings + 4);
 800208e:	4b33      	ldr	r3, [pc, #204]	; (800215c <Settings_Controll_Task+0x338>)
 8002090:	2200      	movs	r2, #0
 8002092:	715a      	strb	r2, [r3, #5]
		Setting_TypeDef.Z_Axis 			=	(Measurement_Axis_Status_TypeDef)	0;//*(Receive_Data_Settings + 5);
 8002094:	4b31      	ldr	r3, [pc, #196]	; (800215c <Settings_Controll_Task+0x338>)
 8002096:	2200      	movs	r2, #0
 8002098:	719a      	strb	r2, [r3, #6]
		Setting_TypeDef.hadxl->hadxl.settings.data_rate
 800209a:	4b30      	ldr	r3, [pc, #192]	; (800215c <Settings_Controll_Task+0x338>)
 800209c:	6a1b      	ldr	r3, [r3, #32]
										=	(adxl345_data_rate_t) 				12;//*(Receive_Data_Settings + 6);
 800209e:	220c      	movs	r2, #12
 80020a0:	f883 2020 	strb.w	r2, [r3, #32]
		Setting_TypeDef.hadxl->hadxl.settings.meas_range
 80020a4:	4b2d      	ldr	r3, [pc, #180]	; (800215c <Settings_Controll_Task+0x338>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
										=	(adxl345_range_t) 					3;//*(Receive_Data_Settings + 7);
 80020a8:	2203      	movs	r2, #3
 80020aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		//-----------------------------------------------------------------------------------------------//
		//                                         FREE MEMORY                                           //
		//---------------------------------***************************-----------------------------------//
		//                                        STOP INTERUPT                                    	     //
		//***********************************************************************************************//
		taskENTER_CRITICAL();
 80020ae:	f00a f805 	bl	800c0bc <vPortEnterCritical>
		//				SIGNALS_BUFFER 				//
		Free_RTOS_Buffer((const void *) Setting_TypeDef.Signal_Data);
 80020b2:	4b2a      	ldr	r3, [pc, #168]	; (800215c <Settings_Controll_Task+0x338>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fd0a 	bl	8001ad0 <Free_RTOS_Buffer>
		Free_RTOS_Buffer((const void *) Setting_TypeDef.Furie_Compl);
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <Settings_Controll_Task+0x338>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fd05 	bl	8001ad0 <Free_RTOS_Buffer>
		Free_RTOS_Buffer((const void *) Setting_TypeDef.Furie);
 80020c6:	4b25      	ldr	r3, [pc, #148]	; (800215c <Settings_Controll_Task+0x338>)
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fd00 	bl	8001ad0 <Free_RTOS_Buffer>
		Free_RTOS_Buffer((const void *) Setting_TypeDef.Envelope);
 80020d0:	4b22      	ldr	r3, [pc, #136]	; (800215c <Settings_Controll_Task+0x338>)
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fcfb 	bl	8001ad0 <Free_RTOS_Buffer>

		//***********************************************************************************************//
		//                                 DELETE UART TRANSMIT TASK                                     //
		//***********************************************************************************************//
		uart_cobs_service_tx_free();
 80020da:	f005 fd25 	bl	8007b28 <uart_cobs_service_tx_free>
		Free_RTOS_Buffer((const void *) Cobs_UART.input_queue);
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <Settings_Controll_Task+0x340>)
 80020e0:	f8d3 300a 	ldr.w	r3, [r3, #10]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fcf3 	bl	8001ad0 <Free_RTOS_Buffer>
		if (Cobs_UART.Transmit_Ready != NULL)
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <Settings_Controll_Task+0x340>)
 80020ec:	f8d3 3012 	ldr.w	r3, [r3, #18]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <Settings_Controll_Task+0x2dc>
		{
			vSemaphoreDelete(Cobs_UART.Transmit_Ready);
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <Settings_Controll_Task+0x340>)
 80020f6:	f8d3 3012 	ldr.w	r3, [r3, #18]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f008 fadc 	bl	800a6b8 <vQueueDelete>
		}
		//***********************************************************************************************//
		//                                 DELETE ACCELEROMETER TASK                                     //
		//***********************************************************************************************//
		adxl345_task_free();
 8002100:	f004 fe5a 	bl	8006db8 <adxl345_task_free>
		if (hadxl_task.fifo_frame_ptr_queue != NULL)
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <Settings_Controll_Task+0x33c>)
 8002106:	f8d3 3039 	ldr.w	r3, [r3, #57]	; 0x39
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <Settings_Controll_Task+0x2f6>
		{
			vQueueDelete(hadxl_task.fifo_frame_ptr_queue);
 800210e:	4b14      	ldr	r3, [pc, #80]	; (8002160 <Settings_Controll_Task+0x33c>)
 8002110:	f8d3 3039 	ldr.w	r3, [r3, #57]	; 0x39
 8002114:	4618      	mov	r0, r3
 8002116:	f008 facf 	bl	800a6b8 <vQueueDelete>
		}
		if (hadxl_task.suspend_notify != NULL)
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <Settings_Controll_Task+0x33c>)
 800211c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211e:	2b00      	cmp	r3, #0
 8002120:	d004      	beq.n	800212c <Settings_Controll_Task+0x308>
		{
			vSemaphoreDelete(hadxl_task.suspend_notify);
 8002122:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <Settings_Controll_Task+0x33c>)
 8002124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002126:	4618      	mov	r0, r3
 8002128:	f008 fac6 	bl	800a6b8 <vQueueDelete>
		}
		//***********************************************************************************************//
		//                                    DELETE COLLECTOR TASK                                      //
		//***********************************************************************************************//
		Data_Collector_free();
 800212c:	f7ff fc42 	bl	80019b4 <Data_Collector_free>
		if (Setting_TypeDef.Status_Signal_Ready != NULL)
 8002130:	4b0a      	ldr	r3, [pc, #40]	; (800215c <Settings_Controll_Task+0x338>)
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	2b00      	cmp	r3, #0
 8002136:	d004      	beq.n	8002142 <Settings_Controll_Task+0x31e>
		{
			vSemaphoreDelete(Setting_TypeDef.Status_Signal_Ready);
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <Settings_Controll_Task+0x338>)
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	4618      	mov	r0, r3
 800213e:	f008 fabb 	bl	800a6b8 <vQueueDelete>
		}
		//***********************************************************************************************//
		//                                      DELETE FURIE TASK                                        //
		//***********************************************************************************************//
		Furie_Transform_free();
 8002142:	f7ff fc57 	bl	80019f4 <Furie_Transform_free>
		if (Setting_TypeDef.Status_Furie_Ready != NULL)
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <Settings_Controll_Task+0x338>)
 8002148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214a:	2b00      	cmp	r3, #0
 800214c:	d015      	beq.n	800217a <Settings_Controll_Task+0x356>
 800214e:	e00f      	b.n	8002170 <Settings_Controll_Task+0x34c>
 8002150:	20004334 	.word	0x20004334
 8002154:	20004324 	.word	0x20004324
 8002158:	20004234 	.word	0x20004234
 800215c:	200042f8 	.word	0x200042f8
 8002160:	20004368 	.word	0x20004368
 8002164:	20004430 	.word	0x20004430
 8002168:	200043a8 	.word	0x200043a8
 800216c:	0800db20 	.word	0x0800db20
		{
			vSemaphoreDelete(Setting_TypeDef.Status_Furie_Ready);
 8002170:	4b3f      	ldr	r3, [pc, #252]	; (8002270 <Settings_Controll_Task+0x44c>)
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	4618      	mov	r0, r3
 8002176:	f008 fa9f 	bl	800a6b8 <vQueueDelete>
		}
		//***********************************************************************************************//
		//                                  RESUME ENABLE INTERUPT                                       //
		//***********************************************************************************************//
		taskEXIT_CRITICAL();
 800217a:	f009 ffcf 	bl	800c11c <vPortExitCritical>
		//-----------------------------------------------------------------------------------------------//
		// 						    Configuration and create task transmit data                          //
		//-----------------------------------------------------------------------------------------------//
		Cobs_UART.queue_depth 			=	3;
 800217e:	4b3d      	ldr	r3, [pc, #244]	; (8002274 <Settings_Controll_Task+0x450>)
 8002180:	2203      	movs	r2, #3
 8002182:	721a      	strb	r2, [r3, #8]
		Cobs_UART.max_frame_size		=	4 * Setting_TypeDef.Length_Realization;
 8002184:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <Settings_Controll_Task+0x44c>)
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	461a      	mov	r2, r3
 800218c:	4b39      	ldr	r3, [pc, #228]	; (8002274 <Settings_Controll_Task+0x450>)
 800218e:	605a      	str	r2, [r3, #4]
		Cobs_UART.Transmit_Ready 		= 	xSemaphoreCreateBinary();
 8002190:	2203      	movs	r2, #3
 8002192:	2100      	movs	r1, #0
 8002194:	2001      	movs	r0, #1
 8002196:	f007 fe87 	bl	8009ea8 <xQueueGenericCreate>
 800219a:	4603      	mov	r3, r0
 800219c:	4a35      	ldr	r2, [pc, #212]	; (8002274 <Settings_Controll_Task+0x450>)
 800219e:	f8c2 3012 	str.w	r3, [r2, #18]
		uart_cobs_service_tx_create(	"Task_uart_cobs_service_tx",
 80021a2:	4b34      	ldr	r3, [pc, #208]	; (8002274 <Settings_Controll_Task+0x450>)
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	2200      	movs	r2, #0
 80021aa:	2100      	movs	r1, #0
 80021ac:	4832      	ldr	r0, [pc, #200]	; (8002278 <Settings_Controll_Task+0x454>)
 80021ae:	f005 fc87 	bl	8007ac0 <uart_cobs_service_tx_create>
										0,
										128,
										&Cobs_UART
									);

		if(Read_Mutex_Malloc_Failed() == pdPASS)
 80021b2:	f7ff fc7f 	bl	8001ab4 <Read_Mutex_Malloc_Failed>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d053      	beq.n	8002264 <Settings_Controll_Task+0x440>
			continue;
		}
		//-----------------------------------------------------------------------------------------------//
		//                           CREATE TASK AND INFORMATION FOR SIGNAL                              //
		//-----------------------------------------------------------------------------------------------//
		hadxl_task.fifo_frame_qty	 	=	2;
 80021bc:	4b2f      	ldr	r3, [pc, #188]	; (800227c <Settings_Controll_Task+0x458>)
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		hadxl_task.fifo_frame_size		=	(size_t) 	(0.25 * Setting_TypeDef.Length_Realization /
 80021c4:	4b2a      	ldr	r3, [pc, #168]	; (8002270 <Settings_Controll_Task+0x44c>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe f913 	bl	80003f4 <__aeabi_i2d>
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	4b2b      	ldr	r3, [pc, #172]	; (8002280 <Settings_Controll_Task+0x45c>)
 80021d4:	f7fe f978 	bl	80004c8 <__aeabi_dmul>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4614      	mov	r4, r2
 80021de:	461d      	mov	r5, r3
													    /*----------------------------------------*/
																 hadxl_task.fifo_frame_qty);
 80021e0:	4b26      	ldr	r3, [pc, #152]	; (800227c <Settings_Controll_Task+0x458>)
 80021e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
		hadxl_task.fifo_frame_size		=	(size_t) 	(0.25 * Setting_TypeDef.Length_Realization /
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f904 	bl	80003f4 <__aeabi_i2d>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4620      	mov	r0, r4
 80021f2:	4629      	mov	r1, r5
 80021f4:	f7fe fa92 	bl	800071c <__aeabi_ddiv>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4610      	mov	r0, r2
 80021fe:	4619      	mov	r1, r3
 8002200:	f7fe fc12 	bl	8000a28 <__aeabi_d2uiz>
 8002204:	4603      	mov	r3, r0
 8002206:	b2da      	uxtb	r2, r3
 8002208:	4b1c      	ldr	r3, [pc, #112]	; (800227c <Settings_Controll_Task+0x458>)
 800220a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		adxl345_task_create(			"Task_ADXL345_RTOS",
 800220e:	4b1b      	ldr	r3, [pc, #108]	; (800227c <Settings_Controll_Task+0x458>)
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	2200      	movs	r2, #0
 8002216:	2100      	movs	r1, #0
 8002218:	481a      	ldr	r0, [pc, #104]	; (8002284 <Settings_Controll_Task+0x460>)
 800221a:	f004 fd4b 	bl	8006cb4 <adxl345_task_create>
										osPriorityNormal,
										0,
										128,
										&hadxl_task);
		if(Read_Mutex_Malloc_Failed() == pdPASS)
 800221e:	f7ff fc49 	bl	8001ab4 <Read_Mutex_Malloc_Failed>
 8002222:	4603      	mov	r3, r0
 8002224:	2b01      	cmp	r3, #1
 8002226:	d01f      	beq.n	8002268 <Settings_Controll_Task+0x444>
		{
			continue;
		}
		Data_Collector_create(		"Task_Data_Collector_RTOS",
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <Settings_Controll_Task+0x44c>)
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	4815      	ldr	r0, [pc, #84]	; (8002288 <Settings_Controll_Task+0x464>)
 8002234:	f7ff fb5e 	bl	80018f4 <Data_Collector_create>
									osPriorityNormal,
									0,
									128,
									&Setting_TypeDef);
		if(Read_Mutex_Malloc_Failed() == pdPASS)
 8002238:	f7ff fc3c 	bl	8001ab4 <Read_Mutex_Malloc_Failed>
 800223c:	4603      	mov	r3, r0
 800223e:	2b01      	cmp	r3, #1
 8002240:	d014      	beq.n	800226c <Settings_Controll_Task+0x448>
			continue;
		}
		//-----------------------------------------------------------------------------------------------//
		//                           CREATE TASK AND INFORMATION FOR FURIE                               //
		//-----------------------------------------------------------------------------------------------//
		if (Setting_TypeDef.FStatus != Enable_Time)
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <Settings_Controll_Task+0x44c>)
 8002244:	789b      	ldrb	r3, [r3, #2]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d007      	beq.n	800225a <Settings_Controll_Task+0x436>
		{
			Furie_Transform_create(		"Task_Furei_Calculation_RTOS",
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <Settings_Controll_Task+0x44c>)
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	2200      	movs	r2, #0
 8002252:	2100      	movs	r1, #0
 8002254:	480d      	ldr	r0, [pc, #52]	; (800228c <Settings_Controll_Task+0x468>)
 8002256:	f7ff fb7d 	bl	8001954 <Furie_Transform_create>
										osPriorityNormal,
										0,
										128,
										&Setting_TypeDef);
		}
		osDelay(portMAX_DELAY);
 800225a:	f04f 30ff 	mov.w	r0, #4294967295
 800225e:	f007 fcf7 	bl	8009c50 <osDelay>
 8002262:	e708      	b.n	8002076 <Settings_Controll_Task+0x252>
			continue;
 8002264:	bf00      	nop
 8002266:	e706      	b.n	8002076 <Settings_Controll_Task+0x252>
			continue;
 8002268:	bf00      	nop
 800226a:	e704      	b.n	8002076 <Settings_Controll_Task+0x252>
			continue;
 800226c:	bf00      	nop
		Read_Mutex_Malloc_Failed();
 800226e:	e702      	b.n	8002076 <Settings_Controll_Task+0x252>
 8002270:	200042f8 	.word	0x200042f8
 8002274:	20004430 	.word	0x20004430
 8002278:	0800db3c 	.word	0x0800db3c
 800227c:	20004368 	.word	0x20004368
 8002280:	3fd00000 	.word	0x3fd00000
 8002284:	0800db58 	.word	0x0800db58
 8002288:	0800db6c 	.word	0x0800db6c
 800228c:	0800db88 	.word	0x0800db88

08002290 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022a2:	f000 fa23 	bl	80026ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40000800 	.word	0x40000800

080022b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022b8:	b672      	cpsid	i
}
 80022ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022bc:	e7fe      	b.n	80022bc <Error_Handler+0x8>
	...

080022c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022c6:	4b18      	ldr	r3, [pc, #96]	; (8002328 <HAL_MspInit+0x68>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	4a17      	ldr	r2, [pc, #92]	; (8002328 <HAL_MspInit+0x68>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6193      	str	r3, [r2, #24]
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <HAL_MspInit+0x68>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_MspInit+0x68>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	4a11      	ldr	r2, [pc, #68]	; (8002328 <HAL_MspInit+0x68>)
 80022e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e8:	61d3      	str	r3, [r2, #28]
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <HAL_MspInit+0x68>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	210f      	movs	r1, #15
 80022fa:	f06f 0001 	mvn.w	r0, #1
 80022fe:	f000 fac6 	bl	800288e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_MspInit+0x6c>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_MspInit+0x6c>)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000
 800232c:	40010000 	.word	0x40010000

08002330 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 0310 	add.w	r3, r7, #16
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a47      	ldr	r2, [pc, #284]	; (8002468 <HAL_SPI_MspInit+0x138>)
 800234c:	4293      	cmp	r3, r2
 800234e:	f040 8086 	bne.w	800245e <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002352:	4b46      	ldr	r3, [pc, #280]	; (800246c <HAL_SPI_MspInit+0x13c>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	4a45      	ldr	r2, [pc, #276]	; (800246c <HAL_SPI_MspInit+0x13c>)
 8002358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800235c:	61d3      	str	r3, [r2, #28]
 800235e:	4b43      	ldr	r3, [pc, #268]	; (800246c <HAL_SPI_MspInit+0x13c>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236a:	4b40      	ldr	r3, [pc, #256]	; (800246c <HAL_SPI_MspInit+0x13c>)
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	4a3f      	ldr	r2, [pc, #252]	; (800246c <HAL_SPI_MspInit+0x13c>)
 8002370:	f043 0308 	orr.w	r3, r3, #8
 8002374:	6193      	str	r3, [r2, #24]
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_SPI_MspInit+0x13c>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002382:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800238c:	2303      	movs	r3, #3
 800238e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002390:	f107 0310 	add.w	r3, r7, #16
 8002394:	4619      	mov	r1, r3
 8002396:	4836      	ldr	r0, [pc, #216]	; (8002470 <HAL_SPI_MspInit+0x140>)
 8002398:	f000 fd42 	bl	8002e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800239c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023aa:	f107 0310 	add.w	r3, r7, #16
 80023ae:	4619      	mov	r1, r3
 80023b0:	482f      	ldr	r0, [pc, #188]	; (8002470 <HAL_SPI_MspInit+0x140>)
 80023b2:	f000 fd35 	bl	8002e20 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80023b6:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <HAL_SPI_MspInit+0x144>)
 80023b8:	4a2f      	ldr	r2, [pc, #188]	; (8002478 <HAL_SPI_MspInit+0x148>)
 80023ba:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023bc:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <HAL_SPI_MspInit+0x144>)
 80023be:	2200      	movs	r2, #0
 80023c0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c2:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <HAL_SPI_MspInit+0x144>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023c8:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <HAL_SPI_MspInit+0x144>)
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ce:	4b29      	ldr	r3, [pc, #164]	; (8002474 <HAL_SPI_MspInit+0x144>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023d4:	4b27      	ldr	r3, [pc, #156]	; (8002474 <HAL_SPI_MspInit+0x144>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80023da:	4b26      	ldr	r3, [pc, #152]	; (8002474 <HAL_SPI_MspInit+0x144>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023e0:	4b24      	ldr	r3, [pc, #144]	; (8002474 <HAL_SPI_MspInit+0x144>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80023e6:	4823      	ldr	r0, [pc, #140]	; (8002474 <HAL_SPI_MspInit+0x144>)
 80023e8:	f000 fa7c 	bl	80028e4 <HAL_DMA_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 80023f2:	f7ff ff5f 	bl	80022b4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a1e      	ldr	r2, [pc, #120]	; (8002474 <HAL_SPI_MspInit+0x144>)
 80023fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80023fc:	4a1d      	ldr	r2, [pc, #116]	; (8002474 <HAL_SPI_MspInit+0x144>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002402:	4b1e      	ldr	r3, [pc, #120]	; (800247c <HAL_SPI_MspInit+0x14c>)
 8002404:	4a1e      	ldr	r2, [pc, #120]	; (8002480 <HAL_SPI_MspInit+0x150>)
 8002406:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002408:	4b1c      	ldr	r3, [pc, #112]	; (800247c <HAL_SPI_MspInit+0x14c>)
 800240a:	2210      	movs	r2, #16
 800240c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800240e:	4b1b      	ldr	r3, [pc, #108]	; (800247c <HAL_SPI_MspInit+0x14c>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <HAL_SPI_MspInit+0x14c>)
 8002416:	2280      	movs	r2, #128	; 0x80
 8002418:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800241a:	4b18      	ldr	r3, [pc, #96]	; (800247c <HAL_SPI_MspInit+0x14c>)
 800241c:	2200      	movs	r2, #0
 800241e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002420:	4b16      	ldr	r3, [pc, #88]	; (800247c <HAL_SPI_MspInit+0x14c>)
 8002422:	2200      	movs	r2, #0
 8002424:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002426:	4b15      	ldr	r3, [pc, #84]	; (800247c <HAL_SPI_MspInit+0x14c>)
 8002428:	2200      	movs	r2, #0
 800242a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <HAL_SPI_MspInit+0x14c>)
 800242e:	2200      	movs	r2, #0
 8002430:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002432:	4812      	ldr	r0, [pc, #72]	; (800247c <HAL_SPI_MspInit+0x14c>)
 8002434:	f000 fa56 	bl	80028e4 <HAL_DMA_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 800243e:	f7ff ff39 	bl	80022b4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a0d      	ldr	r2, [pc, #52]	; (800247c <HAL_SPI_MspInit+0x14c>)
 8002446:	649a      	str	r2, [r3, #72]	; 0x48
 8002448:	4a0c      	ldr	r2, [pc, #48]	; (800247c <HAL_SPI_MspInit+0x14c>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800244e:	2200      	movs	r2, #0
 8002450:	2105      	movs	r1, #5
 8002452:	2024      	movs	r0, #36	; 0x24
 8002454:	f000 fa1b 	bl	800288e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002458:	2024      	movs	r0, #36	; 0x24
 800245a:	f000 fa34 	bl	80028c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800245e:	bf00      	nop
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40003800 	.word	0x40003800
 800246c:	40021000 	.word	0x40021000
 8002470:	40010c00 	.word	0x40010c00
 8002474:	200042b4 	.word	0x200042b4
 8002478:	40020044 	.word	0x40020044
 800247c:	200043ec 	.word	0x200043ec
 8002480:	40020058 	.word	0x40020058

08002484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 0310 	add.w	r3, r7, #16
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a19      	ldr	r2, [pc, #100]	; (8002504 <HAL_UART_MspInit+0x80>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d12b      	bne.n	80024fc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024a4:	4b18      	ldr	r3, [pc, #96]	; (8002508 <HAL_UART_MspInit+0x84>)
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	4a17      	ldr	r2, [pc, #92]	; (8002508 <HAL_UART_MspInit+0x84>)
 80024aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ae:	61d3      	str	r3, [r2, #28]
 80024b0:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_UART_MspInit+0x84>)
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_UART_MspInit+0x84>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	4a11      	ldr	r2, [pc, #68]	; (8002508 <HAL_UART_MspInit+0x84>)
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	6193      	str	r3, [r2, #24]
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <HAL_UART_MspInit+0x84>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024d4:	230c      	movs	r3, #12
 80024d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2302      	movs	r3, #2
 80024de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	4619      	mov	r1, r3
 80024e6:	4809      	ldr	r0, [pc, #36]	; (800250c <HAL_UART_MspInit+0x88>)
 80024e8:	f000 fc9a 	bl	8002e20 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80024ec:	2200      	movs	r2, #0
 80024ee:	2105      	movs	r1, #5
 80024f0:	2026      	movs	r0, #38	; 0x26
 80024f2:	f000 f9cc 	bl	800288e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024f6:	2026      	movs	r0, #38	; 0x26
 80024f8:	f000 f9e5 	bl	80028c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024fc:	bf00      	nop
 80024fe:	3720      	adds	r7, #32
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40004400 	.word	0x40004400
 8002508:	40021000 	.word	0x40021000
 800250c:	40010800 	.word	0x40010800

08002510 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	; 0x30
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8002520:	2200      	movs	r2, #0
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	201e      	movs	r0, #30
 8002526:	f000 f9b2 	bl	800288e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800252a:	201e      	movs	r0, #30
 800252c:	f000 f9cb 	bl	80028c6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <HAL_InitTick+0xa0>)
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	4a1e      	ldr	r2, [pc, #120]	; (80025b0 <HAL_InitTick+0xa0>)
 8002536:	f043 0304 	orr.w	r3, r3, #4
 800253a:	61d3      	str	r3, [r2, #28]
 800253c:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_InitTick+0xa0>)
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002548:	f107 0210 	add.w	r2, r7, #16
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f001 fa14 	bl	8003980 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002558:	f001 f9ea 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 800255c:	4603      	mov	r3, r0
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002564:	4a13      	ldr	r2, [pc, #76]	; (80025b4 <HAL_InitTick+0xa4>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	0c9b      	lsrs	r3, r3, #18
 800256c:	3b01      	subs	r3, #1
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_InitTick+0xa8>)
 8002572:	4a12      	ldr	r2, [pc, #72]	; (80025bc <HAL_InitTick+0xac>)
 8002574:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_InitTick+0xa8>)
 8002578:	f240 32e7 	movw	r2, #999	; 0x3e7
 800257c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800257e:	4a0e      	ldr	r2, [pc, #56]	; (80025b8 <HAL_InitTick+0xa8>)
 8002580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002582:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_InitTick+0xa8>)
 8002586:	2200      	movs	r2, #0
 8002588:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_InitTick+0xa8>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002590:	4809      	ldr	r0, [pc, #36]	; (80025b8 <HAL_InitTick+0xa8>)
 8002592:	f002 fccd 	bl	8004f30 <HAL_TIM_Base_Init>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d104      	bne.n	80025a6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800259c:	4806      	ldr	r0, [pc, #24]	; (80025b8 <HAL_InitTick+0xa8>)
 800259e:	f002 fd1f 	bl	8004fe0 <HAL_TIM_Base_Start_IT>
 80025a2:	4603      	mov	r3, r0
 80025a4:	e000      	b.n	80025a8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3730      	adds	r7, #48	; 0x30
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	431bde83 	.word	0x431bde83
 80025b8:	20004448 	.word	0x20004448
 80025bc:	40000800 	.word	0x40000800

080025c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025c4:	e7fe      	b.n	80025c4 <NMI_Handler+0x4>

080025c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ca:	e7fe      	b.n	80025ca <HardFault_Handler+0x4>

080025cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <MemManage_Handler+0x4>

080025d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d6:	e7fe      	b.n	80025d6 <BusFault_Handler+0x4>

080025d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <UsageFault_Handler+0x4>

080025de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
	...

080025ec <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <DMA1_Channel4_IRQHandler+0x10>)
 80025f2:	f000 fae1 	bl	8002bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200042b4 	.word	0x200042b4

08002600 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <DMA1_Channel5_IRQHandler+0x10>)
 8002606:	f000 fad7 	bl	8002bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200043ec 	.word	0x200043ec

08002614 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <TIM4_IRQHandler+0x10>)
 800261a:	f002 fd33 	bl	8005084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20004448 	.word	0x20004448

08002628 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <SPI2_IRQHandler+0x10>)
 800262e:	f002 f91b 	bl	8004868 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20004234 	.word	0x20004234

0800263c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <USART2_IRQHandler+0x10>)
 8002642:	f003 f9bb 	bl	80059bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200043a8 	.word	0x200043a8

08002650 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002654:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002658:	f000 fd7e 	bl	8003158 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800265c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002660:	f000 fd7a 	bl	8003158 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}

08002668 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002674:	480c      	ldr	r0, [pc, #48]	; (80026a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002676:	490d      	ldr	r1, [pc, #52]	; (80026ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002678:	4a0d      	ldr	r2, [pc, #52]	; (80026b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800267a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800267c:	e002      	b.n	8002684 <LoopCopyDataInit>

0800267e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800267e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002682:	3304      	adds	r3, #4

08002684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002688:	d3f9      	bcc.n	800267e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800268a:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800268c:	4c0a      	ldr	r4, [pc, #40]	; (80026b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002690:	e001      	b.n	8002696 <LoopFillZerobss>

08002692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002694:	3204      	adds	r2, #4

08002696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002698:	d3fb      	bcc.n	8002692 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800269a:	f7ff ffe5 	bl	8002668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800269e:	f009 fff1 	bl	800c684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026a2:	f7ff fa3b 	bl	8001b1c <main>
  bx lr
 80026a6:	4770      	bx	lr
  ldr r0, =_sdata
 80026a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ac:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80026b0:	0800dc98 	.word	0x0800dc98
  ldr r2, =_sbss
 80026b4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80026b8:	200044e0 	.word	0x200044e0

080026bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026bc:	e7fe      	b.n	80026bc <ADC1_2_IRQHandler>
	...

080026c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HAL_Init+0x28>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <HAL_Init+0x28>)
 80026ca:	f043 0310 	orr.w	r3, r3, #16
 80026ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d0:	2003      	movs	r0, #3
 80026d2:	f000 f8d1 	bl	8002878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026d6:	200f      	movs	r0, #15
 80026d8:	f7ff ff1a 	bl	8002510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026dc:	f7ff fdf0 	bl	80022c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40022000 	.word	0x40022000

080026ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_IncTick+0x1c>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_IncTick+0x20>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	4a03      	ldr	r2, [pc, #12]	; (800270c <HAL_IncTick+0x20>)
 80026fe:	6013      	str	r3, [r2, #0]
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	20000008 	.word	0x20000008
 800270c:	20004490 	.word	0x20004490

08002710 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return uwTick;
 8002714:	4b02      	ldr	r3, [pc, #8]	; (8002720 <HAL_GetTick+0x10>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	20004490 	.word	0x20004490

08002724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002740:	4013      	ands	r3, r2
 8002742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800274c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002756:	4a04      	ldr	r2, [pc, #16]	; (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	60d3      	str	r3, [r2, #12]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <__NVIC_GetPriorityGrouping+0x18>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	f003 0307 	and.w	r3, r3, #7
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	2b00      	cmp	r3, #0
 8002798:	db0b      	blt.n	80027b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	4906      	ldr	r1, [pc, #24]	; (80027bc <__NVIC_EnableIRQ+0x34>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2001      	movs	r0, #1
 80027aa:	fa00 f202 	lsl.w	r2, r0, r2
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	e000e100 	.word	0xe000e100

080027c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	db0a      	blt.n	80027ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	490c      	ldr	r1, [pc, #48]	; (800280c <__NVIC_SetPriority+0x4c>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	0112      	lsls	r2, r2, #4
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	440b      	add	r3, r1
 80027e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e8:	e00a      	b.n	8002800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	4908      	ldr	r1, [pc, #32]	; (8002810 <__NVIC_SetPriority+0x50>)
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	3b04      	subs	r3, #4
 80027f8:	0112      	lsls	r2, r2, #4
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	440b      	add	r3, r1
 80027fe:	761a      	strb	r2, [r3, #24]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000e100 	.word	0xe000e100
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002814:	b480      	push	{r7}
 8002816:	b089      	sub	sp, #36	; 0x24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f1c3 0307 	rsb	r3, r3, #7
 800282e:	2b04      	cmp	r3, #4
 8002830:	bf28      	it	cs
 8002832:	2304      	movcs	r3, #4
 8002834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3304      	adds	r3, #4
 800283a:	2b06      	cmp	r3, #6
 800283c:	d902      	bls.n	8002844 <NVIC_EncodePriority+0x30>
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3b03      	subs	r3, #3
 8002842:	e000      	b.n	8002846 <NVIC_EncodePriority+0x32>
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	f04f 32ff 	mov.w	r2, #4294967295
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43da      	mvns	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	401a      	ands	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800285c:	f04f 31ff 	mov.w	r1, #4294967295
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	43d9      	mvns	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	4313      	orrs	r3, r2
         );
}
 800286e:	4618      	mov	r0, r3
 8002870:	3724      	adds	r7, #36	; 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ff4f 	bl	8002724 <__NVIC_SetPriorityGrouping>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800288e:	b580      	push	{r7, lr}
 8002890:	b086      	sub	sp, #24
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a0:	f7ff ff64 	bl	800276c <__NVIC_GetPriorityGrouping>
 80028a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	6978      	ldr	r0, [r7, #20]
 80028ac:	f7ff ffb2 	bl	8002814 <NVIC_EncodePriority>
 80028b0:	4602      	mov	r2, r0
 80028b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff81 	bl	80027c0 <__NVIC_SetPriority>
}
 80028be:	bf00      	nop
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff57 	bl	8002788 <__NVIC_EnableIRQ>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e043      	b.n	8002982 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	4b22      	ldr	r3, [pc, #136]	; (800298c <HAL_DMA_Init+0xa8>)
 8002902:	4413      	add	r3, r2
 8002904:	4a22      	ldr	r2, [pc, #136]	; (8002990 <HAL_DMA_Init+0xac>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	009a      	lsls	r2, r3, #2
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <HAL_DMA_Init+0xb0>)
 8002916:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800292e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002932:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800293c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002948:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002954:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	bffdfff8 	.word	0xbffdfff8
 8002990:	cccccccd 	.word	0xcccccccd
 8002994:	40020000 	.word	0x40020000

08002998 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_DMA_Start_IT+0x20>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e04a      	b.n	8002a4e <HAL_DMA_Start_IT+0xb6>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d13a      	bne.n	8002a40 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2202      	movs	r2, #2
 80029ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f9e8 	bl	8002dc4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 020e 	orr.w	r2, r2, #14
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	e00f      	b.n	8002a2e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0204 	bic.w	r2, r2, #4
 8002a1c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 020a 	orr.w	r2, r2, #10
 8002a2c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	e005      	b.n	8002a4c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b085      	sub	sp, #20
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d008      	beq.n	8002a7e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2204      	movs	r2, #4
 8002a70:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e020      	b.n	8002ac0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 020e 	bic.w	r2, r2, #14
 8002a8c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0201 	bic.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d005      	beq.n	8002aee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
 8002aec:	e051      	b.n	8002b92 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 020e 	bic.w	r2, r2, #14
 8002afc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <HAL_DMA_Abort_IT+0xd0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d029      	beq.n	8002b6c <HAL_DMA_Abort_IT+0xa0>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a20      	ldr	r2, [pc, #128]	; (8002ba0 <HAL_DMA_Abort_IT+0xd4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d022      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x9c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1f      	ldr	r2, [pc, #124]	; (8002ba4 <HAL_DMA_Abort_IT+0xd8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d01a      	beq.n	8002b62 <HAL_DMA_Abort_IT+0x96>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1d      	ldr	r2, [pc, #116]	; (8002ba8 <HAL_DMA_Abort_IT+0xdc>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d012      	beq.n	8002b5c <HAL_DMA_Abort_IT+0x90>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a1c      	ldr	r2, [pc, #112]	; (8002bac <HAL_DMA_Abort_IT+0xe0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00a      	beq.n	8002b56 <HAL_DMA_Abort_IT+0x8a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a1a      	ldr	r2, [pc, #104]	; (8002bb0 <HAL_DMA_Abort_IT+0xe4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d102      	bne.n	8002b50 <HAL_DMA_Abort_IT+0x84>
 8002b4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b4e:	e00e      	b.n	8002b6e <HAL_DMA_Abort_IT+0xa2>
 8002b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b54:	e00b      	b.n	8002b6e <HAL_DMA_Abort_IT+0xa2>
 8002b56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b5a:	e008      	b.n	8002b6e <HAL_DMA_Abort_IT+0xa2>
 8002b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b60:	e005      	b.n	8002b6e <HAL_DMA_Abort_IT+0xa2>
 8002b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b66:	e002      	b.n	8002b6e <HAL_DMA_Abort_IT+0xa2>
 8002b68:	2310      	movs	r3, #16
 8002b6a:	e000      	b.n	8002b6e <HAL_DMA_Abort_IT+0xa2>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	4a11      	ldr	r2, [pc, #68]	; (8002bb4 <HAL_DMA_Abort_IT+0xe8>)
 8002b70:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
    } 
  }
  return status;
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40020008 	.word	0x40020008
 8002ba0:	4002001c 	.word	0x4002001c
 8002ba4:	40020030 	.word	0x40020030
 8002ba8:	40020044 	.word	0x40020044
 8002bac:	40020058 	.word	0x40020058
 8002bb0:	4002006c 	.word	0x4002006c
 8002bb4:	40020000 	.word	0x40020000

08002bb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d04f      	beq.n	8002c80 <HAL_DMA_IRQHandler+0xc8>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d04a      	beq.n	8002c80 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d107      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0204 	bic.w	r2, r2, #4
 8002c06:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a66      	ldr	r2, [pc, #408]	; (8002da8 <HAL_DMA_IRQHandler+0x1f0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d029      	beq.n	8002c66 <HAL_DMA_IRQHandler+0xae>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a65      	ldr	r2, [pc, #404]	; (8002dac <HAL_DMA_IRQHandler+0x1f4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d022      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xaa>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a63      	ldr	r2, [pc, #396]	; (8002db0 <HAL_DMA_IRQHandler+0x1f8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01a      	beq.n	8002c5c <HAL_DMA_IRQHandler+0xa4>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a62      	ldr	r2, [pc, #392]	; (8002db4 <HAL_DMA_IRQHandler+0x1fc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d012      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x9e>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a60      	ldr	r2, [pc, #384]	; (8002db8 <HAL_DMA_IRQHandler+0x200>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00a      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x98>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a5f      	ldr	r2, [pc, #380]	; (8002dbc <HAL_DMA_IRQHandler+0x204>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d102      	bne.n	8002c4a <HAL_DMA_IRQHandler+0x92>
 8002c44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c48:	e00e      	b.n	8002c68 <HAL_DMA_IRQHandler+0xb0>
 8002c4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c4e:	e00b      	b.n	8002c68 <HAL_DMA_IRQHandler+0xb0>
 8002c50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c54:	e008      	b.n	8002c68 <HAL_DMA_IRQHandler+0xb0>
 8002c56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c5a:	e005      	b.n	8002c68 <HAL_DMA_IRQHandler+0xb0>
 8002c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c60:	e002      	b.n	8002c68 <HAL_DMA_IRQHandler+0xb0>
 8002c62:	2340      	movs	r3, #64	; 0x40
 8002c64:	e000      	b.n	8002c68 <HAL_DMA_IRQHandler+0xb0>
 8002c66:	2304      	movs	r3, #4
 8002c68:	4a55      	ldr	r2, [pc, #340]	; (8002dc0 <HAL_DMA_IRQHandler+0x208>)
 8002c6a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 8094 	beq.w	8002d9e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c7e:	e08e      	b.n	8002d9e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	2202      	movs	r2, #2
 8002c86:	409a      	lsls	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d056      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x186>
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d051      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10b      	bne.n	8002cc0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 020a 	bic.w	r2, r2, #10
 8002cb6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a38      	ldr	r2, [pc, #224]	; (8002da8 <HAL_DMA_IRQHandler+0x1f0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d029      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x166>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a37      	ldr	r2, [pc, #220]	; (8002dac <HAL_DMA_IRQHandler+0x1f4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d022      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x162>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a35      	ldr	r2, [pc, #212]	; (8002db0 <HAL_DMA_IRQHandler+0x1f8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d01a      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x15c>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a34      	ldr	r2, [pc, #208]	; (8002db4 <HAL_DMA_IRQHandler+0x1fc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d012      	beq.n	8002d0e <HAL_DMA_IRQHandler+0x156>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a32      	ldr	r2, [pc, #200]	; (8002db8 <HAL_DMA_IRQHandler+0x200>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00a      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x150>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a31      	ldr	r2, [pc, #196]	; (8002dbc <HAL_DMA_IRQHandler+0x204>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d102      	bne.n	8002d02 <HAL_DMA_IRQHandler+0x14a>
 8002cfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d00:	e00e      	b.n	8002d20 <HAL_DMA_IRQHandler+0x168>
 8002d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d06:	e00b      	b.n	8002d20 <HAL_DMA_IRQHandler+0x168>
 8002d08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d0c:	e008      	b.n	8002d20 <HAL_DMA_IRQHandler+0x168>
 8002d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d12:	e005      	b.n	8002d20 <HAL_DMA_IRQHandler+0x168>
 8002d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d18:	e002      	b.n	8002d20 <HAL_DMA_IRQHandler+0x168>
 8002d1a:	2320      	movs	r3, #32
 8002d1c:	e000      	b.n	8002d20 <HAL_DMA_IRQHandler+0x168>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	4a27      	ldr	r2, [pc, #156]	; (8002dc0 <HAL_DMA_IRQHandler+0x208>)
 8002d22:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d034      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d3c:	e02f      	b.n	8002d9e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2208      	movs	r2, #8
 8002d44:	409a      	lsls	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d028      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x1e8>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d023      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 020e 	bic.w	r2, r2, #14
 8002d66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d70:	2101      	movs	r1, #1
 8002d72:	fa01 f202 	lsl.w	r2, r1, r2
 8002d76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d004      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4798      	blx	r3
    }
  }
  return;
 8002d9e:	bf00      	nop
 8002da0:	bf00      	nop
}
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40020008 	.word	0x40020008
 8002dac:	4002001c 	.word	0x4002001c
 8002db0:	40020030 	.word	0x40020030
 8002db4:	40020044 	.word	0x40020044
 8002db8:	40020058 	.word	0x40020058
 8002dbc:	4002006c 	.word	0x4002006c
 8002dc0:	40020000 	.word	0x40020000

08002dc4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8002de0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b10      	cmp	r3, #16
 8002df0:	d108      	bne.n	8002e04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e02:	e007      	b.n	8002e14 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	60da      	str	r2, [r3, #12]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
	...

08002e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b08b      	sub	sp, #44	; 0x2c
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e32:	e169      	b.n	8003108 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e34:	2201      	movs	r2, #1
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	f040 8158 	bne.w	8003102 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4a9a      	ldr	r2, [pc, #616]	; (80030c0 <HAL_GPIO_Init+0x2a0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d05e      	beq.n	8002f1a <HAL_GPIO_Init+0xfa>
 8002e5c:	4a98      	ldr	r2, [pc, #608]	; (80030c0 <HAL_GPIO_Init+0x2a0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d875      	bhi.n	8002f4e <HAL_GPIO_Init+0x12e>
 8002e62:	4a98      	ldr	r2, [pc, #608]	; (80030c4 <HAL_GPIO_Init+0x2a4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d058      	beq.n	8002f1a <HAL_GPIO_Init+0xfa>
 8002e68:	4a96      	ldr	r2, [pc, #600]	; (80030c4 <HAL_GPIO_Init+0x2a4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d86f      	bhi.n	8002f4e <HAL_GPIO_Init+0x12e>
 8002e6e:	4a96      	ldr	r2, [pc, #600]	; (80030c8 <HAL_GPIO_Init+0x2a8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d052      	beq.n	8002f1a <HAL_GPIO_Init+0xfa>
 8002e74:	4a94      	ldr	r2, [pc, #592]	; (80030c8 <HAL_GPIO_Init+0x2a8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d869      	bhi.n	8002f4e <HAL_GPIO_Init+0x12e>
 8002e7a:	4a94      	ldr	r2, [pc, #592]	; (80030cc <HAL_GPIO_Init+0x2ac>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d04c      	beq.n	8002f1a <HAL_GPIO_Init+0xfa>
 8002e80:	4a92      	ldr	r2, [pc, #584]	; (80030cc <HAL_GPIO_Init+0x2ac>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d863      	bhi.n	8002f4e <HAL_GPIO_Init+0x12e>
 8002e86:	4a92      	ldr	r2, [pc, #584]	; (80030d0 <HAL_GPIO_Init+0x2b0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d046      	beq.n	8002f1a <HAL_GPIO_Init+0xfa>
 8002e8c:	4a90      	ldr	r2, [pc, #576]	; (80030d0 <HAL_GPIO_Init+0x2b0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d85d      	bhi.n	8002f4e <HAL_GPIO_Init+0x12e>
 8002e92:	2b12      	cmp	r3, #18
 8002e94:	d82a      	bhi.n	8002eec <HAL_GPIO_Init+0xcc>
 8002e96:	2b12      	cmp	r3, #18
 8002e98:	d859      	bhi.n	8002f4e <HAL_GPIO_Init+0x12e>
 8002e9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <HAL_GPIO_Init+0x80>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002f1b 	.word	0x08002f1b
 8002ea4:	08002ef5 	.word	0x08002ef5
 8002ea8:	08002f07 	.word	0x08002f07
 8002eac:	08002f49 	.word	0x08002f49
 8002eb0:	08002f4f 	.word	0x08002f4f
 8002eb4:	08002f4f 	.word	0x08002f4f
 8002eb8:	08002f4f 	.word	0x08002f4f
 8002ebc:	08002f4f 	.word	0x08002f4f
 8002ec0:	08002f4f 	.word	0x08002f4f
 8002ec4:	08002f4f 	.word	0x08002f4f
 8002ec8:	08002f4f 	.word	0x08002f4f
 8002ecc:	08002f4f 	.word	0x08002f4f
 8002ed0:	08002f4f 	.word	0x08002f4f
 8002ed4:	08002f4f 	.word	0x08002f4f
 8002ed8:	08002f4f 	.word	0x08002f4f
 8002edc:	08002f4f 	.word	0x08002f4f
 8002ee0:	08002f4f 	.word	0x08002f4f
 8002ee4:	08002efd 	.word	0x08002efd
 8002ee8:	08002f11 	.word	0x08002f11
 8002eec:	4a79      	ldr	r2, [pc, #484]	; (80030d4 <HAL_GPIO_Init+0x2b4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ef2:	e02c      	b.n	8002f4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	623b      	str	r3, [r7, #32]
          break;
 8002efa:	e029      	b.n	8002f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	3304      	adds	r3, #4
 8002f02:	623b      	str	r3, [r7, #32]
          break;
 8002f04:	e024      	b.n	8002f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	3308      	adds	r3, #8
 8002f0c:	623b      	str	r3, [r7, #32]
          break;
 8002f0e:	e01f      	b.n	8002f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	330c      	adds	r3, #12
 8002f16:	623b      	str	r3, [r7, #32]
          break;
 8002f18:	e01a      	b.n	8002f50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d102      	bne.n	8002f28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f22:	2304      	movs	r3, #4
 8002f24:	623b      	str	r3, [r7, #32]
          break;
 8002f26:	e013      	b.n	8002f50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d105      	bne.n	8002f3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f30:	2308      	movs	r3, #8
 8002f32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	611a      	str	r2, [r3, #16]
          break;
 8002f3a:	e009      	b.n	8002f50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f3c:	2308      	movs	r3, #8
 8002f3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	615a      	str	r2, [r3, #20]
          break;
 8002f46:	e003      	b.n	8002f50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	623b      	str	r3, [r7, #32]
          break;
 8002f4c:	e000      	b.n	8002f50 <HAL_GPIO_Init+0x130>
          break;
 8002f4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	2bff      	cmp	r3, #255	; 0xff
 8002f54:	d801      	bhi.n	8002f5a <HAL_GPIO_Init+0x13a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	e001      	b.n	8002f5e <HAL_GPIO_Init+0x13e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2bff      	cmp	r3, #255	; 0xff
 8002f64:	d802      	bhi.n	8002f6c <HAL_GPIO_Init+0x14c>
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	e002      	b.n	8002f72 <HAL_GPIO_Init+0x152>
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	3b08      	subs	r3, #8
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	210f      	movs	r1, #15
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	401a      	ands	r2, r3
 8002f84:	6a39      	ldr	r1, [r7, #32]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 80b1 	beq.w	8003102 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fa0:	4b4d      	ldr	r3, [pc, #308]	; (80030d8 <HAL_GPIO_Init+0x2b8>)
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	4a4c      	ldr	r2, [pc, #304]	; (80030d8 <HAL_GPIO_Init+0x2b8>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	6193      	str	r3, [r2, #24]
 8002fac:	4b4a      	ldr	r3, [pc, #296]	; (80030d8 <HAL_GPIO_Init+0x2b8>)
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fb8:	4a48      	ldr	r2, [pc, #288]	; (80030dc <HAL_GPIO_Init+0x2bc>)
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	089b      	lsrs	r3, r3, #2
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	220f      	movs	r2, #15
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a40      	ldr	r2, [pc, #256]	; (80030e0 <HAL_GPIO_Init+0x2c0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d013      	beq.n	800300c <HAL_GPIO_Init+0x1ec>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a3f      	ldr	r2, [pc, #252]	; (80030e4 <HAL_GPIO_Init+0x2c4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d00d      	beq.n	8003008 <HAL_GPIO_Init+0x1e8>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a3e      	ldr	r2, [pc, #248]	; (80030e8 <HAL_GPIO_Init+0x2c8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d007      	beq.n	8003004 <HAL_GPIO_Init+0x1e4>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a3d      	ldr	r2, [pc, #244]	; (80030ec <HAL_GPIO_Init+0x2cc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d101      	bne.n	8003000 <HAL_GPIO_Init+0x1e0>
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e006      	b.n	800300e <HAL_GPIO_Init+0x1ee>
 8003000:	2304      	movs	r3, #4
 8003002:	e004      	b.n	800300e <HAL_GPIO_Init+0x1ee>
 8003004:	2302      	movs	r3, #2
 8003006:	e002      	b.n	800300e <HAL_GPIO_Init+0x1ee>
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <HAL_GPIO_Init+0x1ee>
 800300c:	2300      	movs	r3, #0
 800300e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003010:	f002 0203 	and.w	r2, r2, #3
 8003014:	0092      	lsls	r2, r2, #2
 8003016:	4093      	lsls	r3, r2
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800301e:	492f      	ldr	r1, [pc, #188]	; (80030dc <HAL_GPIO_Init+0x2bc>)
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	089b      	lsrs	r3, r3, #2
 8003024:	3302      	adds	r3, #2
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d006      	beq.n	8003046 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003038:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <HAL_GPIO_Init+0x2d0>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	492c      	ldr	r1, [pc, #176]	; (80030f0 <HAL_GPIO_Init+0x2d0>)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	600b      	str	r3, [r1, #0]
 8003044:	e006      	b.n	8003054 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003046:	4b2a      	ldr	r3, [pc, #168]	; (80030f0 <HAL_GPIO_Init+0x2d0>)
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	43db      	mvns	r3, r3
 800304e:	4928      	ldr	r1, [pc, #160]	; (80030f0 <HAL_GPIO_Init+0x2d0>)
 8003050:	4013      	ands	r3, r2
 8003052:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d006      	beq.n	800306e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003060:	4b23      	ldr	r3, [pc, #140]	; (80030f0 <HAL_GPIO_Init+0x2d0>)
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	4922      	ldr	r1, [pc, #136]	; (80030f0 <HAL_GPIO_Init+0x2d0>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
 800306c:	e006      	b.n	800307c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800306e:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <HAL_GPIO_Init+0x2d0>)
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	43db      	mvns	r3, r3
 8003076:	491e      	ldr	r1, [pc, #120]	; (80030f0 <HAL_GPIO_Init+0x2d0>)
 8003078:	4013      	ands	r3, r2
 800307a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d006      	beq.n	8003096 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_GPIO_Init+0x2d0>)
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	4918      	ldr	r1, [pc, #96]	; (80030f0 <HAL_GPIO_Init+0x2d0>)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	4313      	orrs	r3, r2
 8003092:	608b      	str	r3, [r1, #8]
 8003094:	e006      	b.n	80030a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003096:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <HAL_GPIO_Init+0x2d0>)
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	43db      	mvns	r3, r3
 800309e:	4914      	ldr	r1, [pc, #80]	; (80030f0 <HAL_GPIO_Init+0x2d0>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d021      	beq.n	80030f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030b0:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <HAL_GPIO_Init+0x2d0>)
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	490e      	ldr	r1, [pc, #56]	; (80030f0 <HAL_GPIO_Init+0x2d0>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60cb      	str	r3, [r1, #12]
 80030bc:	e021      	b.n	8003102 <HAL_GPIO_Init+0x2e2>
 80030be:	bf00      	nop
 80030c0:	10320000 	.word	0x10320000
 80030c4:	10310000 	.word	0x10310000
 80030c8:	10220000 	.word	0x10220000
 80030cc:	10210000 	.word	0x10210000
 80030d0:	10120000 	.word	0x10120000
 80030d4:	10110000 	.word	0x10110000
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40010000 	.word	0x40010000
 80030e0:	40010800 	.word	0x40010800
 80030e4:	40010c00 	.word	0x40010c00
 80030e8:	40011000 	.word	0x40011000
 80030ec:	40011400 	.word	0x40011400
 80030f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_GPIO_Init+0x304>)
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	4909      	ldr	r1, [pc, #36]	; (8003124 <HAL_GPIO_Init+0x304>)
 80030fe:	4013      	ands	r3, r2
 8003100:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	3301      	adds	r3, #1
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	fa22 f303 	lsr.w	r3, r2, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	f47f ae8e 	bne.w	8002e34 <HAL_GPIO_Init+0x14>
  }
}
 8003118:	bf00      	nop
 800311a:	bf00      	nop
 800311c:	372c      	adds	r7, #44	; 0x2c
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr
 8003124:	40010400 	.word	0x40010400

08003128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	807b      	strh	r3, [r7, #2]
 8003134:	4613      	mov	r3, r2
 8003136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003138:	787b      	ldrb	r3, [r7, #1]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800313e:	887a      	ldrh	r2, [r7, #2]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003144:	e003      	b.n	800314e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003146:	887b      	ldrh	r3, [r7, #2]
 8003148:	041a      	lsls	r2, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	611a      	str	r2, [r3, #16]
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800316e:	4a05      	ldr	r2, [pc, #20]	; (8003184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	4618      	mov	r0, r3
 8003178:	f003 fef6 	bl	8006f68 <HAL_GPIO_EXTI_Callback>
  }
}
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40010400 	.word	0x40010400

08003188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e26c      	b.n	8003674 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8087 	beq.w	80032b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031a8:	4b92      	ldr	r3, [pc, #584]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d00c      	beq.n	80031ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031b4:	4b8f      	ldr	r3, [pc, #572]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 030c 	and.w	r3, r3, #12
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d112      	bne.n	80031e6 <HAL_RCC_OscConfig+0x5e>
 80031c0:	4b8c      	ldr	r3, [pc, #560]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031cc:	d10b      	bne.n	80031e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ce:	4b89      	ldr	r3, [pc, #548]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d06c      	beq.n	80032b4 <HAL_RCC_OscConfig+0x12c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d168      	bne.n	80032b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e246      	b.n	8003674 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x76>
 80031f0:	4b80      	ldr	r3, [pc, #512]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a7f      	ldr	r2, [pc, #508]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	e02e      	b.n	800325c <HAL_RCC_OscConfig+0xd4>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x98>
 8003206:	4b7b      	ldr	r3, [pc, #492]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a7a      	ldr	r2, [pc, #488]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 800320c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b78      	ldr	r3, [pc, #480]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a77      	ldr	r2, [pc, #476]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e01d      	b.n	800325c <HAL_RCC_OscConfig+0xd4>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0xbc>
 800322a:	4b72      	ldr	r3, [pc, #456]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a71      	ldr	r2, [pc, #452]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b6f      	ldr	r3, [pc, #444]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a6e      	ldr	r2, [pc, #440]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e00b      	b.n	800325c <HAL_RCC_OscConfig+0xd4>
 8003244:	4b6b      	ldr	r3, [pc, #428]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a6a      	ldr	r2, [pc, #424]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 800324a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b68      	ldr	r3, [pc, #416]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a67      	ldr	r2, [pc, #412]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800325a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d013      	beq.n	800328c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7ff fa54 	bl	8002710 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800326c:	f7ff fa50 	bl	8002710 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e1fa      	b.n	8003674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b5d      	ldr	r3, [pc, #372]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0xe4>
 800328a:	e014      	b.n	80032b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328c:	f7ff fa40 	bl	8002710 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003294:	f7ff fa3c 	bl	8002710 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	; 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e1e6      	b.n	8003674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	4b53      	ldr	r3, [pc, #332]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x10c>
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d063      	beq.n	800338a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032c2:	4b4c      	ldr	r3, [pc, #304]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032ce:	4b49      	ldr	r3, [pc, #292]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 030c 	and.w	r3, r3, #12
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d11c      	bne.n	8003314 <HAL_RCC_OscConfig+0x18c>
 80032da:	4b46      	ldr	r3, [pc, #280]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d116      	bne.n	8003314 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e6:	4b43      	ldr	r3, [pc, #268]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d005      	beq.n	80032fe <HAL_RCC_OscConfig+0x176>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d001      	beq.n	80032fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e1ba      	b.n	8003674 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fe:	4b3d      	ldr	r3, [pc, #244]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4939      	ldr	r1, [pc, #228]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003312:	e03a      	b.n	800338a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d020      	beq.n	800335e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800331c:	4b36      	ldr	r3, [pc, #216]	; (80033f8 <HAL_RCC_OscConfig+0x270>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003322:	f7ff f9f5 	bl	8002710 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332a:	f7ff f9f1 	bl	8002710 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e19b      	b.n	8003674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333c:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003348:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4927      	ldr	r1, [pc, #156]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003358:	4313      	orrs	r3, r2
 800335a:	600b      	str	r3, [r1, #0]
 800335c:	e015      	b.n	800338a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335e:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <HAL_RCC_OscConfig+0x270>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7ff f9d4 	bl	8002710 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336c:	f7ff f9d0 	bl	8002710 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e17a      	b.n	8003674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337e:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d03a      	beq.n	800340c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d019      	beq.n	80033d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339e:	4b17      	ldr	r3, [pc, #92]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a4:	f7ff f9b4 	bl	8002710 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ac:	f7ff f9b0 	bl	8002710 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e15a      	b.n	8003674 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033be:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033ca:	2001      	movs	r0, #1
 80033cc:	f000 fb08 	bl	80039e0 <RCC_Delay>
 80033d0:	e01c      	b.n	800340c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d8:	f7ff f99a 	bl	8002710 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033de:	e00f      	b.n	8003400 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e0:	f7ff f996 	bl	8002710 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d908      	bls.n	8003400 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e140      	b.n	8003674 <HAL_RCC_OscConfig+0x4ec>
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	42420000 	.word	0x42420000
 80033fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003400:	4b9e      	ldr	r3, [pc, #632]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e9      	bne.n	80033e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80a6 	beq.w	8003566 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341a:	2300      	movs	r3, #0
 800341c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341e:	4b97      	ldr	r3, [pc, #604]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10d      	bne.n	8003446 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342a:	4b94      	ldr	r3, [pc, #592]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	4a93      	ldr	r2, [pc, #588]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 8003430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003434:	61d3      	str	r3, [r2, #28]
 8003436:	4b91      	ldr	r3, [pc, #580]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003442:	2301      	movs	r3, #1
 8003444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003446:	4b8e      	ldr	r3, [pc, #568]	; (8003680 <HAL_RCC_OscConfig+0x4f8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d118      	bne.n	8003484 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003452:	4b8b      	ldr	r3, [pc, #556]	; (8003680 <HAL_RCC_OscConfig+0x4f8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a8a      	ldr	r2, [pc, #552]	; (8003680 <HAL_RCC_OscConfig+0x4f8>)
 8003458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345e:	f7ff f957 	bl	8002710 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003466:	f7ff f953 	bl	8002710 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b64      	cmp	r3, #100	; 0x64
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e0fd      	b.n	8003674 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003478:	4b81      	ldr	r3, [pc, #516]	; (8003680 <HAL_RCC_OscConfig+0x4f8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d106      	bne.n	800349a <HAL_RCC_OscConfig+0x312>
 800348c:	4b7b      	ldr	r3, [pc, #492]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	4a7a      	ldr	r2, [pc, #488]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6213      	str	r3, [r2, #32]
 8003498:	e02d      	b.n	80034f6 <HAL_RCC_OscConfig+0x36e>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0x334>
 80034a2:	4b76      	ldr	r3, [pc, #472]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	4a75      	ldr	r2, [pc, #468]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	6213      	str	r3, [r2, #32]
 80034ae:	4b73      	ldr	r3, [pc, #460]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	4a72      	ldr	r2, [pc, #456]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 80034b4:	f023 0304 	bic.w	r3, r3, #4
 80034b8:	6213      	str	r3, [r2, #32]
 80034ba:	e01c      	b.n	80034f6 <HAL_RCC_OscConfig+0x36e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b05      	cmp	r3, #5
 80034c2:	d10c      	bne.n	80034de <HAL_RCC_OscConfig+0x356>
 80034c4:	4b6d      	ldr	r3, [pc, #436]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	4a6c      	ldr	r2, [pc, #432]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 80034ca:	f043 0304 	orr.w	r3, r3, #4
 80034ce:	6213      	str	r3, [r2, #32]
 80034d0:	4b6a      	ldr	r3, [pc, #424]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	4a69      	ldr	r2, [pc, #420]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6213      	str	r3, [r2, #32]
 80034dc:	e00b      	b.n	80034f6 <HAL_RCC_OscConfig+0x36e>
 80034de:	4b67      	ldr	r3, [pc, #412]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	4a66      	ldr	r2, [pc, #408]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	6213      	str	r3, [r2, #32]
 80034ea:	4b64      	ldr	r3, [pc, #400]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	4a63      	ldr	r2, [pc, #396]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 80034f0:	f023 0304 	bic.w	r3, r3, #4
 80034f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d015      	beq.n	800352a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034fe:	f7ff f907 	bl	8002710 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003504:	e00a      	b.n	800351c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003506:	f7ff f903 	bl	8002710 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	f241 3288 	movw	r2, #5000	; 0x1388
 8003514:	4293      	cmp	r3, r2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e0ab      	b.n	8003674 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351c:	4b57      	ldr	r3, [pc, #348]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0ee      	beq.n	8003506 <HAL_RCC_OscConfig+0x37e>
 8003528:	e014      	b.n	8003554 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352a:	f7ff f8f1 	bl	8002710 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003530:	e00a      	b.n	8003548 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003532:	f7ff f8ed 	bl	8002710 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003540:	4293      	cmp	r3, r2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e095      	b.n	8003674 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003548:	4b4c      	ldr	r3, [pc, #304]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ee      	bne.n	8003532 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003554:	7dfb      	ldrb	r3, [r7, #23]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d105      	bne.n	8003566 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355a:	4b48      	ldr	r3, [pc, #288]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	4a47      	ldr	r2, [pc, #284]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 8003560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003564:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 8081 	beq.w	8003672 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003570:	4b42      	ldr	r3, [pc, #264]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b08      	cmp	r3, #8
 800357a:	d061      	beq.n	8003640 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d146      	bne.n	8003612 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003584:	4b3f      	ldr	r3, [pc, #252]	; (8003684 <HAL_RCC_OscConfig+0x4fc>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358a:	f7ff f8c1 	bl	8002710 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003592:	f7ff f8bd 	bl	8002710 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e067      	b.n	8003674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a4:	4b35      	ldr	r3, [pc, #212]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f0      	bne.n	8003592 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b8:	d108      	bne.n	80035cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035ba:	4b30      	ldr	r3, [pc, #192]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	492d      	ldr	r1, [pc, #180]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035cc:	4b2b      	ldr	r3, [pc, #172]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a19      	ldr	r1, [r3, #32]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	430b      	orrs	r3, r1
 80035de:	4927      	ldr	r1, [pc, #156]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e4:	4b27      	ldr	r3, [pc, #156]	; (8003684 <HAL_RCC_OscConfig+0x4fc>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ea:	f7ff f891 	bl	8002710 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f2:	f7ff f88d 	bl	8002710 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e037      	b.n	8003674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003604:	4b1d      	ldr	r3, [pc, #116]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x46a>
 8003610:	e02f      	b.n	8003672 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003612:	4b1c      	ldr	r3, [pc, #112]	; (8003684 <HAL_RCC_OscConfig+0x4fc>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7ff f87a 	bl	8002710 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003620:	f7ff f876 	bl	8002710 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e020      	b.n	8003674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003632:	4b12      	ldr	r3, [pc, #72]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x498>
 800363e:	e018      	b.n	8003672 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e013      	b.n	8003674 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCC_OscConfig+0x4f4>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	429a      	cmp	r2, r3
 800365e:	d106      	bne.n	800366e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	429a      	cmp	r2, r3
 800366c:	d001      	beq.n	8003672 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40021000 	.word	0x40021000
 8003680:	40007000 	.word	0x40007000
 8003684:	42420060 	.word	0x42420060

08003688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0d0      	b.n	800383e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800369c:	4b6a      	ldr	r3, [pc, #424]	; (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d910      	bls.n	80036cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b67      	ldr	r3, [pc, #412]	; (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 0207 	bic.w	r2, r3, #7
 80036b2:	4965      	ldr	r1, [pc, #404]	; (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b63      	ldr	r3, [pc, #396]	; (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0b8      	b.n	800383e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d020      	beq.n	800371a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e4:	4b59      	ldr	r3, [pc, #356]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4a58      	ldr	r2, [pc, #352]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 80036ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036fc:	4b53      	ldr	r3, [pc, #332]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	4a52      	ldr	r2, [pc, #328]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003706:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003708:	4b50      	ldr	r3, [pc, #320]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	494d      	ldr	r1, [pc, #308]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	4313      	orrs	r3, r2
 8003718:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d040      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d107      	bne.n	800373e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372e:	4b47      	ldr	r3, [pc, #284]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d115      	bne.n	8003766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e07f      	b.n	800383e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d107      	bne.n	8003756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003746:	4b41      	ldr	r3, [pc, #260]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e073      	b.n	800383e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003756:	4b3d      	ldr	r3, [pc, #244]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e06b      	b.n	800383e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003766:	4b39      	ldr	r3, [pc, #228]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f023 0203 	bic.w	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4936      	ldr	r1, [pc, #216]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003778:	f7fe ffca 	bl	8002710 <HAL_GetTick>
 800377c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377e:	e00a      	b.n	8003796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003780:	f7fe ffc6 	bl	8002710 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f241 3288 	movw	r2, #5000	; 0x1388
 800378e:	4293      	cmp	r3, r2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e053      	b.n	800383e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003796:	4b2d      	ldr	r3, [pc, #180]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 020c 	and.w	r2, r3, #12
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d1eb      	bne.n	8003780 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037a8:	4b27      	ldr	r3, [pc, #156]	; (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d210      	bcs.n	80037d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b6:	4b24      	ldr	r3, [pc, #144]	; (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 0207 	bic.w	r2, r3, #7
 80037be:	4922      	ldr	r1, [pc, #136]	; (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b20      	ldr	r3, [pc, #128]	; (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e032      	b.n	800383e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e4:	4b19      	ldr	r3, [pc, #100]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4916      	ldr	r1, [pc, #88]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003802:	4b12      	ldr	r3, [pc, #72]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	490e      	ldr	r1, [pc, #56]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003812:	4313      	orrs	r3, r2
 8003814:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003816:	f000 f821 	bl	800385c <HAL_RCC_GetSysClockFreq>
 800381a:	4602      	mov	r2, r0
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	490a      	ldr	r1, [pc, #40]	; (8003850 <HAL_RCC_ClockConfig+0x1c8>)
 8003828:	5ccb      	ldrb	r3, [r1, r3]
 800382a:	fa22 f303 	lsr.w	r3, r2, r3
 800382e:	4a09      	ldr	r2, [pc, #36]	; (8003854 <HAL_RCC_ClockConfig+0x1cc>)
 8003830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003832:	4b09      	ldr	r3, [pc, #36]	; (8003858 <HAL_RCC_ClockConfig+0x1d0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fe6a 	bl	8002510 <HAL_InitTick>

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40022000 	.word	0x40022000
 800384c:	40021000 	.word	0x40021000
 8003850:	0800dbbc 	.word	0x0800dbbc
 8003854:	20000000 	.word	0x20000000
 8003858:	20000004 	.word	0x20000004

0800385c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800385c:	b490      	push	{r4, r7}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003862:	4b2a      	ldr	r3, [pc, #168]	; (800390c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003864:	1d3c      	adds	r4, r7, #4
 8003866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003868:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800386c:	f240 2301 	movw	r3, #513	; 0x201
 8003870:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	2300      	movs	r3, #0
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	2300      	movs	r3, #0
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003886:	4b22      	ldr	r3, [pc, #136]	; (8003910 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b04      	cmp	r3, #4
 8003894:	d002      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0x40>
 8003896:	2b08      	cmp	r3, #8
 8003898:	d003      	beq.n	80038a2 <HAL_RCC_GetSysClockFreq+0x46>
 800389a:	e02d      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800389c:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <HAL_RCC_GetSysClockFreq+0xb8>)
 800389e:	623b      	str	r3, [r7, #32]
      break;
 80038a0:	e02d      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	0c9b      	lsrs	r3, r3, #18
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038ae:	4413      	add	r3, r2
 80038b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d013      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038c0:	4b13      	ldr	r3, [pc, #76]	; (8003910 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	0c5b      	lsrs	r3, r3, #17
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038ce:	4413      	add	r3, r2
 80038d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	4a0e      	ldr	r2, [pc, #56]	; (8003914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038da:	fb02 f203 	mul.w	r2, r2, r3
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
 80038e6:	e004      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	4a0b      	ldr	r2, [pc, #44]	; (8003918 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038ec:	fb02 f303 	mul.w	r3, r2, r3
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	623b      	str	r3, [r7, #32]
      break;
 80038f6:	e002      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038fa:	623b      	str	r3, [r7, #32]
      break;
 80038fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038fe:	6a3b      	ldr	r3, [r7, #32]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3728      	adds	r7, #40	; 0x28
 8003904:	46bd      	mov	sp, r7
 8003906:	bc90      	pop	{r4, r7}
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	0800dba4 	.word	0x0800dba4
 8003910:	40021000 	.word	0x40021000
 8003914:	007a1200 	.word	0x007a1200
 8003918:	003d0900 	.word	0x003d0900

0800391c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003920:	4b02      	ldr	r3, [pc, #8]	; (800392c <HAL_RCC_GetHCLKFreq+0x10>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr
 800392c:	20000000 	.word	0x20000000

08003930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003934:	f7ff fff2 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4903      	ldr	r1, [pc, #12]	; (8003954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000
 8003954:	0800dbcc 	.word	0x0800dbcc

08003958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800395c:	f7ff ffde 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	0adb      	lsrs	r3, r3, #11
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	4903      	ldr	r1, [pc, #12]	; (800397c <HAL_RCC_GetPCLK2Freq+0x24>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40021000 	.word	0x40021000
 800397c:	0800dbcc 	.word	0x0800dbcc

08003980 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	220f      	movs	r2, #15
 800398e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003990:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <HAL_RCC_GetClockConfig+0x58>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 0203 	and.w	r2, r3, #3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800399c:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <HAL_RCC_GetClockConfig+0x58>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCC_GetClockConfig+0x58>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80039b4:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <HAL_RCC_GetClockConfig+0x58>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	08db      	lsrs	r3, r3, #3
 80039ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039c2:	4b06      	ldr	r3, [pc, #24]	; (80039dc <HAL_RCC_GetClockConfig+0x5c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0207 	and.w	r2, r3, #7
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40022000 	.word	0x40022000

080039e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039e8:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <RCC_Delay+0x34>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <RCC_Delay+0x38>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	0a5b      	lsrs	r3, r3, #9
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	fb02 f303 	mul.w	r3, r2, r3
 80039fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039fc:	bf00      	nop
  }
  while (Delay --);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1e5a      	subs	r2, r3, #1
 8003a02:	60fa      	str	r2, [r7, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f9      	bne.n	80039fc <RCC_Delay+0x1c>
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	20000000 	.word	0x20000000
 8003a18:	10624dd3 	.word	0x10624dd3

08003a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e096      	b.n	8003b5c <HAL_SPI_Init+0x140>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d108      	bne.n	8003a48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a3e:	d009      	beq.n	8003a54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	61da      	str	r2, [r3, #28]
 8003a46:	e005      	b.n	8003a54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d126      	bne.n	8003ab4 <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a3c      	ldr	r2, [pc, #240]	; (8003b64 <HAL_SPI_Init+0x148>)
 8003a72:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a3c      	ldr	r2, [pc, #240]	; (8003b68 <HAL_SPI_Init+0x14c>)
 8003a78:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a3b      	ldr	r2, [pc, #236]	; (8003b6c <HAL_SPI_Init+0x150>)
 8003a7e:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a3b      	ldr	r2, [pc, #236]	; (8003b70 <HAL_SPI_Init+0x154>)
 8003a84:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a3a      	ldr	r2, [pc, #232]	; (8003b74 <HAL_SPI_Init+0x158>)
 8003a8a:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a3a      	ldr	r2, [pc, #232]	; (8003b78 <HAL_SPI_Init+0x15c>)
 8003a90:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a39      	ldr	r2, [pc, #228]	; (8003b7c <HAL_SPI_Init+0x160>)
 8003a96:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a39      	ldr	r2, [pc, #228]	; (8003b80 <HAL_SPI_Init+0x164>)
 8003a9c:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d102      	bne.n	8003aac <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a36      	ldr	r2, [pc, #216]	; (8003b84 <HAL_SPI_Init+0x168>)
 8003aaa:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b18:	ea42 0103 	orr.w	r1, r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	0c1a      	lsrs	r2, r3, #16
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f002 0204 	and.w	r2, r2, #4
 8003b3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69da      	ldr	r2, [r3, #28]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	08007635 	.word	0x08007635
 8003b68:	080075e5 	.word	0x080075e5
 8003b6c:	08007685 	.word	0x08007685
 8003b70:	08004a39 	.word	0x08004a39
 8003b74:	08004a4b 	.word	0x08004a4b
 8003b78:	08004a5d 	.word	0x08004a5d
 8003b7c:	08004a6f 	.word	0x08004a6f
 8003b80:	08004a81 	.word	0x08004a81
 8003b84:	08002331 	.word	0x08002331

08003b88 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	4613      	mov	r3, r2
 8003b96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_SPI_Transmit+0x22>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e126      	b.n	8003df8 <HAL_SPI_Transmit+0x270>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bb2:	f7fe fdad 	bl	8002710 <HAL_GetTick>
 8003bb6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d002      	beq.n	8003bce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bcc:	e10b      	b.n	8003de6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_SPI_Transmit+0x52>
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d102      	bne.n	8003be0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bde:	e102      	b.n	8003de6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2203      	movs	r2, #3
 8003be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	88fa      	ldrh	r2, [r7, #6]
 8003bf8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	88fa      	ldrh	r2, [r7, #6]
 8003bfe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c26:	d10f      	bne.n	8003c48 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c52:	2b40      	cmp	r3, #64	; 0x40
 8003c54:	d007      	beq.n	8003c66 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6e:	d14b      	bne.n	8003d08 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_SPI_Transmit+0xf6>
 8003c78:	8afb      	ldrh	r3, [r7, #22]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d13e      	bne.n	8003cfc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	881a      	ldrh	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	1c9a      	adds	r2, r3, #2
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ca2:	e02b      	b.n	8003cfc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d112      	bne.n	8003cd8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	881a      	ldrh	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	1c9a      	adds	r2, r3, #2
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cd6:	e011      	b.n	8003cfc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cd8:	f7fe fd1a 	bl	8002710 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d803      	bhi.n	8003cf0 <HAL_SPI_Transmit+0x168>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cee:	d102      	bne.n	8003cf6 <HAL_SPI_Transmit+0x16e>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d102      	bne.n	8003cfc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cfa:	e074      	b.n	8003de6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1ce      	bne.n	8003ca4 <HAL_SPI_Transmit+0x11c>
 8003d06:	e04c      	b.n	8003da2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_SPI_Transmit+0x18e>
 8003d10:	8afb      	ldrh	r3, [r7, #22]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d140      	bne.n	8003d98 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	330c      	adds	r3, #12
 8003d20:	7812      	ldrb	r2, [r2, #0]
 8003d22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d3c:	e02c      	b.n	8003d98 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d113      	bne.n	8003d74 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	330c      	adds	r3, #12
 8003d56:	7812      	ldrb	r2, [r2, #0]
 8003d58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d72:	e011      	b.n	8003d98 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d74:	f7fe fccc 	bl	8002710 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d803      	bhi.n	8003d8c <HAL_SPI_Transmit+0x204>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8a:	d102      	bne.n	8003d92 <HAL_SPI_Transmit+0x20a>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d102      	bne.n	8003d98 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d96:	e026      	b.n	8003de6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1cd      	bne.n	8003d3e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	6839      	ldr	r1, [r7, #0]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f001 f8a4 	bl	8004ef4 <SPI_EndRxTxTransaction>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	77fb      	strb	r3, [r7, #31]
 8003de2:	e000      	b.n	8003de6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003de4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003df6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3720      	adds	r7, #32
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e1c:	d112      	bne.n	8003e44 <HAL_SPI_Receive+0x44>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10e      	bne.n	8003e44 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2204      	movs	r2, #4
 8003e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e2e:	88fa      	ldrh	r2, [r7, #6]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	4613      	mov	r3, r2
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 f8f1 	bl	8004022 <HAL_SPI_TransmitReceive>
 8003e40:	4603      	mov	r3, r0
 8003e42:	e0ea      	b.n	800401a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d101      	bne.n	8003e52 <HAL_SPI_Receive+0x52>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e0e3      	b.n	800401a <HAL_SPI_Receive+0x21a>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e5a:	f7fe fc59 	bl	8002710 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d002      	beq.n	8003e72 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e70:	e0ca      	b.n	8004008 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_SPI_Receive+0x7e>
 8003e78:	88fb      	ldrh	r3, [r7, #6]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d102      	bne.n	8003e84 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e82:	e0c1      	b.n	8004008 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2204      	movs	r2, #4
 8003e88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	88fa      	ldrh	r2, [r7, #6]
 8003e9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	88fa      	ldrh	r2, [r7, #6]
 8003ea2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eca:	d10f      	bne.n	8003eec <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003eea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef6:	2b40      	cmp	r3, #64	; 0x40
 8003ef8:	d007      	beq.n	8003f0a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f08:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d162      	bne.n	8003fd8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f12:	e02e      	b.n	8003f72 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d115      	bne.n	8003f4e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f103 020c 	add.w	r2, r3, #12
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2e:	7812      	ldrb	r2, [r2, #0]
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f4c:	e011      	b.n	8003f72 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f4e:	f7fe fbdf 	bl	8002710 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d803      	bhi.n	8003f66 <HAL_SPI_Receive+0x166>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f64:	d102      	bne.n	8003f6c <HAL_SPI_Receive+0x16c>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d102      	bne.n	8003f72 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f70:	e04a      	b.n	8004008 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1cb      	bne.n	8003f14 <HAL_SPI_Receive+0x114>
 8003f7c:	e031      	b.n	8003fe2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d113      	bne.n	8003fb4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	b292      	uxth	r2, r2
 8003f98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	1c9a      	adds	r2, r3, #2
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fb2:	e011      	b.n	8003fd8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fb4:	f7fe fbac 	bl	8002710 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d803      	bhi.n	8003fcc <HAL_SPI_Receive+0x1cc>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fca:	d102      	bne.n	8003fd2 <HAL_SPI_Receive+0x1d2>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d102      	bne.n	8003fd8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003fd6:	e017      	b.n	8004008 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1cd      	bne.n	8003f7e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	6839      	ldr	r1, [r7, #0]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 ff32 	bl	8004e50 <SPI_EndRxTransaction>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	75fb      	strb	r3, [r7, #23]
 8004004:	e000      	b.n	8004008 <HAL_SPI_Receive+0x208>
  }

error :
 8004006:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004018:	7dfb      	ldrb	r3, [r7, #23]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b08c      	sub	sp, #48	; 0x30
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	607a      	str	r2, [r7, #4]
 800402e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004030:	2301      	movs	r3, #1
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_SPI_TransmitReceive+0x26>
 8004044:	2302      	movs	r3, #2
 8004046:	e18a      	b.n	800435e <HAL_SPI_TransmitReceive+0x33c>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004050:	f7fe fb5e 	bl	8002710 <HAL_GetTick>
 8004054:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800405c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004066:	887b      	ldrh	r3, [r7, #2]
 8004068:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800406a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800406e:	2b01      	cmp	r3, #1
 8004070:	d00f      	beq.n	8004092 <HAL_SPI_TransmitReceive+0x70>
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004078:	d107      	bne.n	800408a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d103      	bne.n	800408a <HAL_SPI_TransmitReceive+0x68>
 8004082:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004086:	2b04      	cmp	r3, #4
 8004088:	d003      	beq.n	8004092 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800408a:	2302      	movs	r3, #2
 800408c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004090:	e15b      	b.n	800434a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <HAL_SPI_TransmitReceive+0x82>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HAL_SPI_TransmitReceive+0x82>
 800409e:	887b      	ldrh	r3, [r7, #2]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d103      	bne.n	80040ac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80040aa:	e14e      	b.n	800434a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d003      	beq.n	80040c0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2205      	movs	r2, #5
 80040bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	887a      	ldrh	r2, [r7, #2]
 80040d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	887a      	ldrh	r2, [r7, #2]
 80040d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	887a      	ldrh	r2, [r7, #2]
 80040e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	887a      	ldrh	r2, [r7, #2]
 80040e8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004100:	2b40      	cmp	r3, #64	; 0x40
 8004102:	d007      	beq.n	8004114 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004112:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800411c:	d178      	bne.n	8004210 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_SPI_TransmitReceive+0x10a>
 8004126:	8b7b      	ldrh	r3, [r7, #26]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d166      	bne.n	80041fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	881a      	ldrh	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	1c9a      	adds	r2, r3, #2
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004150:	e053      	b.n	80041fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b02      	cmp	r3, #2
 800415e:	d11b      	bne.n	8004198 <HAL_SPI_TransmitReceive+0x176>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d016      	beq.n	8004198 <HAL_SPI_TransmitReceive+0x176>
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d113      	bne.n	8004198 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	881a      	ldrh	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	1c9a      	adds	r2, r3, #2
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d119      	bne.n	80041da <HAL_SPI_TransmitReceive+0x1b8>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d014      	beq.n	80041da <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	b292      	uxth	r2, r2
 80041bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	1c9a      	adds	r2, r3, #2
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041d6:	2301      	movs	r3, #1
 80041d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041da:	f7fe fa99 	bl	8002710 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d807      	bhi.n	80041fa <HAL_SPI_TransmitReceive+0x1d8>
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d003      	beq.n	80041fa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041f8:	e0a7      	b.n	800434a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1a6      	bne.n	8004152 <HAL_SPI_TransmitReceive+0x130>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1a1      	bne.n	8004152 <HAL_SPI_TransmitReceive+0x130>
 800420e:	e07c      	b.n	800430a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_SPI_TransmitReceive+0x1fc>
 8004218:	8b7b      	ldrh	r3, [r7, #26]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d16b      	bne.n	80042f6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	330c      	adds	r3, #12
 8004228:	7812      	ldrb	r2, [r2, #0]
 800422a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004244:	e057      	b.n	80042f6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b02      	cmp	r3, #2
 8004252:	d11c      	bne.n	800428e <HAL_SPI_TransmitReceive+0x26c>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d017      	beq.n	800428e <HAL_SPI_TransmitReceive+0x26c>
 800425e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004260:	2b01      	cmp	r3, #1
 8004262:	d114      	bne.n	800428e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	7812      	ldrb	r2, [r2, #0]
 8004270:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b01      	cmp	r3, #1
 800429a:	d119      	bne.n	80042d0 <HAL_SPI_TransmitReceive+0x2ae>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d014      	beq.n	80042d0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042cc:	2301      	movs	r3, #1
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042d0:	f7fe fa1e 	bl	8002710 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042dc:	429a      	cmp	r2, r3
 80042de:	d803      	bhi.n	80042e8 <HAL_SPI_TransmitReceive+0x2c6>
 80042e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e6:	d102      	bne.n	80042ee <HAL_SPI_TransmitReceive+0x2cc>
 80042e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d103      	bne.n	80042f6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80042f4:	e029      	b.n	800434a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1a2      	bne.n	8004246 <HAL_SPI_TransmitReceive+0x224>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d19d      	bne.n	8004246 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800430a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 fdf0 	bl	8004ef4 <SPI_EndRxTxTransaction>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d006      	beq.n	8004328 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004326:	e010      	b.n	800434a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10b      	bne.n	8004348 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	e000      	b.n	800434a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004348:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800435a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800435e:	4618      	mov	r0, r3
 8004360:	3730      	adds	r7, #48	; 0x30
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	4613      	mov	r3, r2
 8004374:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_SPI_Transmit_DMA+0x20>
 8004384:	2302      	movs	r3, #2
 8004386:	e09b      	b.n	80044c0 <HAL_SPI_Transmit_DMA+0x158>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b01      	cmp	r3, #1
 800439a:	d002      	beq.n	80043a2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800439c:	2302      	movs	r3, #2
 800439e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043a0:	e089      	b.n	80044b6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_SPI_Transmit_DMA+0x46>
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043b2:	e080      	b.n	80044b6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2203      	movs	r2, #3
 80043b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	88fa      	ldrh	r2, [r7, #6]
 80043cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	88fa      	ldrh	r2, [r7, #6]
 80043d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043fa:	d10f      	bne.n	800441c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800440a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800441a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004420:	4a29      	ldr	r2, [pc, #164]	; (80044c8 <HAL_SPI_Transmit_DMA+0x160>)
 8004422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004428:	4a28      	ldr	r2, [pc, #160]	; (80044cc <HAL_SPI_Transmit_DMA+0x164>)
 800442a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004430:	4a27      	ldr	r2, [pc, #156]	; (80044d0 <HAL_SPI_Transmit_DMA+0x168>)
 8004432:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004438:	2200      	movs	r2, #0
 800443a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	4619      	mov	r1, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	330c      	adds	r3, #12
 800444c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004452:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004454:	f7fe faa0 	bl	8002998 <HAL_DMA_Start_IT>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00c      	beq.n	8004478 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004462:	f043 0210 	orr.w	r2, r3, #16
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004476:	e01e      	b.n	80044b6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004482:	2b40      	cmp	r3, #64	; 0x40
 8004484:	d007      	beq.n	8004496 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004494:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0220 	orr.w	r2, r2, #32
 80044a4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 0202 	orr.w	r2, r2, #2
 80044b4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044be:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	08004c79 	.word	0x08004c79
 80044cc:	08004a93 	.word	0x08004a93
 80044d0:	08004cd3 	.word	0x08004cd3

080044d4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	4613      	mov	r3, r2
 80044e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d110      	bne.n	8004510 <HAL_SPI_Receive_DMA+0x3c>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044f6:	d10b      	bne.n	8004510 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2204      	movs	r2, #4
 80044fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 f8ac 	bl	8004664 <HAL_SPI_TransmitReceive_DMA>
 800450c:	4603      	mov	r3, r0
 800450e:	e09f      	b.n	8004650 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_SPI_Receive_DMA+0x4a>
 800451a:	2302      	movs	r3, #2
 800451c:	e098      	b.n	8004650 <HAL_SPI_Receive_DMA+0x17c>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b01      	cmp	r3, #1
 8004530:	d002      	beq.n	8004538 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004532:	2302      	movs	r3, #2
 8004534:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004536:	e086      	b.n	8004646 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <HAL_SPI_Receive_DMA+0x70>
 800453e:	88fb      	ldrh	r3, [r7, #6]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004548:	e07d      	b.n	8004646 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2204      	movs	r2, #4
 800454e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	88fa      	ldrh	r2, [r7, #6]
 8004562:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	88fa      	ldrh	r2, [r7, #6]
 8004568:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800458a:	d10f      	bne.n	80045ac <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800459a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b0:	4a29      	ldr	r2, [pc, #164]	; (8004658 <HAL_SPI_Receive_DMA+0x184>)
 80045b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b8:	4a28      	ldr	r2, [pc, #160]	; (800465c <HAL_SPI_Receive_DMA+0x188>)
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c0:	4a27      	ldr	r2, [pc, #156]	; (8004660 <HAL_SPI_Receive_DMA+0x18c>)
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c8:	2200      	movs	r2, #0
 80045ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	330c      	adds	r3, #12
 80045d6:	4619      	mov	r1, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80045e4:	f7fe f9d8 	bl	8002998 <HAL_DMA_Start_IT>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00c      	beq.n	8004608 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f2:	f043 0210 	orr.w	r2, r3, #16
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004606:	e01e      	b.n	8004646 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b40      	cmp	r3, #64	; 0x40
 8004614:	d007      	beq.n	8004626 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004624:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0220 	orr.w	r2, r2, #32
 8004634:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 0201 	orr.w	r2, r2, #1
 8004644:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800464e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	08004c97 	.word	0x08004c97
 800465c:	08004b3d 	.word	0x08004b3d
 8004660:	08004cd3 	.word	0x08004cd3

08004664 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_SPI_TransmitReceive_DMA+0x20>
 8004680:	2302      	movs	r3, #2
 8004682:	e0e3      	b.n	800484c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004692:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800469a:	7dbb      	ldrb	r3, [r7, #22]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d00d      	beq.n	80046bc <HAL_SPI_TransmitReceive_DMA+0x58>
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046a6:	d106      	bne.n	80046b6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d102      	bne.n	80046b6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80046b0:	7dbb      	ldrb	r3, [r7, #22]
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d002      	beq.n	80046bc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80046b6:	2302      	movs	r3, #2
 80046b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046ba:	e0c2      	b.n	8004842 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <HAL_SPI_TransmitReceive_DMA+0x6a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <HAL_SPI_TransmitReceive_DMA+0x6a>
 80046c8:	887b      	ldrh	r3, [r7, #2]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d102      	bne.n	80046d4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046d2:	e0b6      	b.n	8004842 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d003      	beq.n	80046e8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2205      	movs	r2, #5
 80046e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	887a      	ldrh	r2, [r7, #2]
 80046f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	887a      	ldrh	r2, [r7, #2]
 80046fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	887a      	ldrh	r2, [r7, #2]
 800470a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	887a      	ldrh	r2, [r7, #2]
 8004710:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b04      	cmp	r3, #4
 8004728:	d108      	bne.n	800473c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472e:	4a49      	ldr	r2, [pc, #292]	; (8004854 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8004730:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004736:	4a48      	ldr	r2, [pc, #288]	; (8004858 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004738:	629a      	str	r2, [r3, #40]	; 0x28
 800473a:	e007      	b.n	800474c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004740:	4a46      	ldr	r2, [pc, #280]	; (800485c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8004742:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004748:	4a45      	ldr	r2, [pc, #276]	; (8004860 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800474a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004750:	4a44      	ldr	r2, [pc, #272]	; (8004864 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8004752:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004758:	2200      	movs	r2, #0
 800475a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	330c      	adds	r3, #12
 8004766:	4619      	mov	r1, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004772:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004774:	f7fe f910 	bl	8002998 <HAL_DMA_Start_IT>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00c      	beq.n	8004798 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004782:	f043 0210 	orr.w	r2, r3, #16
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004796:	e054      	b.n	8004842 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ac:	2200      	movs	r2, #0
 80047ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b4:	2200      	movs	r2, #0
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047bc:	2200      	movs	r2, #0
 80047be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c4:	2200      	movs	r2, #0
 80047c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	4619      	mov	r1, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	330c      	adds	r3, #12
 80047d8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80047e0:	f7fe f8da 	bl	8002998 <HAL_DMA_Start_IT>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00c      	beq.n	8004804 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	f043 0210 	orr.w	r2, r3, #16
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004802:	e01e      	b.n	8004842 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480e:	2b40      	cmp	r3, #64	; 0x40
 8004810:	d007      	beq.n	8004822 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004820:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0220 	orr.w	r2, r2, #32
 8004830:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0202 	orr.w	r2, r2, #2
 8004840:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800484a:	7dfb      	ldrb	r3, [r7, #23]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	08004c97 	.word	0x08004c97
 8004858:	08004b3d 	.word	0x08004b3d
 800485c:	08004cb5 	.word	0x08004cb5
 8004860:	08004be7 	.word	0x08004be7
 8004864:	08004cd3 	.word	0x08004cd3

08004868 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	099b      	lsrs	r3, r3, #6
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10f      	bne.n	80048ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	099b      	lsrs	r3, r3, #6
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d004      	beq.n	80048ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	4798      	blx	r3
    return;
 80048aa:	e0bf      	b.n	8004a2c <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	085b      	lsrs	r3, r3, #1
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <HAL_SPI_IRQHandler+0x66>
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	09db      	lsrs	r3, r3, #7
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d004      	beq.n	80048ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	4798      	blx	r3
    return;
 80048cc:	e0ae      	b.n	8004a2c <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_SPI_IRQHandler+0x80>
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	099b      	lsrs	r3, r3, #6
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 80a2 	beq.w	8004a2c <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 809b 	beq.w	8004a2c <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	099b      	lsrs	r3, r3, #6
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d023      	beq.n	800494a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b03      	cmp	r3, #3
 800490c:	d011      	beq.n	8004932 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004912:	f043 0204 	orr.w	r2, r3, #4
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800491a:	2300      	movs	r3, #0
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	e00b      	b.n	800494a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004932:	2300      	movs	r3, #0
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	693b      	ldr	r3, [r7, #16]
        return;
 8004948:	e070      	b.n	8004a2c <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d014      	beq.n	8004980 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	f043 0201 	orr.w	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004984:	2b00      	cmp	r3, #0
 8004986:	d050      	beq.n	8004a2a <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004996:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d104      	bne.n	80049b4 <HAL_SPI_IRQHandler+0x14c>
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d034      	beq.n	8004a1e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0203 	bic.w	r2, r2, #3
 80049c2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d011      	beq.n	80049f0 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d0:	4a18      	ldr	r2, [pc, #96]	; (8004a34 <HAL_SPI_IRQHandler+0x1cc>)
 80049d2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fe f877 	bl	8002acc <HAL_DMA_Abort_IT>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d017      	beq.n	8004a28 <HAL_SPI_IRQHandler+0x1c0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049fc:	4a0d      	ldr	r2, [pc, #52]	; (8004a34 <HAL_SPI_IRQHandler+0x1cc>)
 80049fe:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fe f861 	bl	8002acc <HAL_DMA_Abort_IT>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <HAL_SPI_IRQHandler+0x1c0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004a1c:	e004      	b.n	8004a28 <HAL_SPI_IRQHandler+0x1c0>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004a26:	e000      	b.n	8004a2a <HAL_SPI_IRQHandler+0x1c2>
        if (hspi->hdmatx != NULL)
 8004a28:	bf00      	nop
    return;
 8004a2a:	bf00      	nop
  }
}
 8004a2c:	3720      	adds	r7, #32
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	08004d15 	.word	0x08004d15

08004a38 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr

08004a4a <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr

08004a5c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc80      	pop	{r7}
 8004a6c:	4770      	bx	lr

08004a6e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr

08004a80 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr

08004a92 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b086      	sub	sp, #24
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aa0:	f7fd fe36 	bl	8002710 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d03c      	beq.n	8004b2e <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0220 	bic.w	r2, r2, #32
 8004ac2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0202 	bic.w	r2, r2, #2
 8004ad2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	2164      	movs	r1, #100	; 0x64
 8004ad8:	6978      	ldr	r0, [r7, #20]
 8004ada:	f000 fa0b 	bl	8004ef4 <SPI_EndRxTxTransaction>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae8:	f043 0220 	orr.w	r2, r3, #32
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2200      	movs	r2, #0
 8004b12:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b28:	6978      	ldr	r0, [r7, #20]
 8004b2a:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004b2c:	e003      	b.n	8004b36 <SPI_DMATransmitCplt+0xa4>
    }
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b32:	6978      	ldr	r0, [r7, #20]
 8004b34:	4798      	blx	r3
#else
  HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b4a:	f7fd fde1 	bl	8002710 <HAL_GetTick>
 8004b4e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b20      	cmp	r3, #32
 8004b5c:	d03c      	beq.n	8004bd8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0220 	bic.w	r2, r2, #32
 8004b6c:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10d      	bne.n	8004b92 <SPI_DMAReceiveCplt+0x56>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b7e:	d108      	bne.n	8004b92 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0203 	bic.w	r2, r2, #3
 8004b8e:	605a      	str	r2, [r3, #4]
 8004b90:	e007      	b.n	8004ba2 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0201 	bic.w	r2, r2, #1
 8004ba0:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	2164      	movs	r1, #100	; 0x64
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f952 	bl	8004e50 <SPI_EndRxTransaction>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d004      	beq.n	8004bd8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004bd6:	e003      	b.n	8004be0 <SPI_DMAReceiveCplt+0xa4>
    }
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	4798      	blx	r3
#else
  HAL_SPI_RxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bf4:	f7fd fd8c 	bl	8002710 <HAL_GetTick>
 8004bf8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d030      	beq.n	8004c6a <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0220 	bic.w	r2, r2, #32
 8004c16:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	2164      	movs	r1, #100	; 0x64
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 f969 	bl	8004ef4 <SPI_EndRxTxTransaction>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2c:	f043 0220 	orr.w	r2, r3, #32
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0203 	bic.w	r2, r2, #3
 8004c42:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d004      	beq.n	8004c6a <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004c68:	e003      	b.n	8004c72 <SPI_DMATransmitReceiveCplt+0x8c>
    }
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	4798      	blx	r3
#else
  HAL_SPI_TxRxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	4798      	blx	r3
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c8e:	bf00      	nop
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	4798      	blx	r3
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0203 	bic.w	r2, r2, #3
 8004cee:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf4:	f043 0210 	orr.w	r2, r3, #16
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d0c:	bf00      	nop
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d50:	f7fd fcde 	bl	8002710 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d60:	f7fd fcd6 	bl	8002710 <HAL_GetTick>
 8004d64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d66:	4b39      	ldr	r3, [pc, #228]	; (8004e4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	015b      	lsls	r3, r3, #5
 8004d6c:	0d1b      	lsrs	r3, r3, #20
 8004d6e:	69fa      	ldr	r2, [r7, #28]
 8004d70:	fb02 f303 	mul.w	r3, r2, r3
 8004d74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d76:	e054      	b.n	8004e22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7e:	d050      	beq.n	8004e22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d80:	f7fd fcc6 	bl	8002710 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d902      	bls.n	8004d96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d13d      	bne.n	8004e12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004da4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dae:	d111      	bne.n	8004dd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db8:	d004      	beq.n	8004dc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc2:	d107      	bne.n	8004dd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ddc:	d10f      	bne.n	8004dfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e017      	b.n	8004e42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	bf0c      	ite	eq
 8004e32:	2301      	moveq	r3, #1
 8004e34:	2300      	movne	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d19b      	bne.n	8004d78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3720      	adds	r7, #32
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000000 	.word	0x20000000

08004e50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e64:	d111      	bne.n	8004e8a <SPI_EndRxTransaction+0x3a>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e6e:	d004      	beq.n	8004e7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e78:	d107      	bne.n	8004e8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e88:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e92:	d117      	bne.n	8004ec4 <SPI_EndRxTransaction+0x74>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9c:	d112      	bne.n	8004ec4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f7ff ff49 	bl	8004d40 <SPI_WaitFlagStateUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01a      	beq.n	8004eea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb8:	f043 0220 	orr.w	r2, r3, #32
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e013      	b.n	8004eec <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2180      	movs	r1, #128	; 0x80
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f7ff ff36 	bl	8004d40 <SPI_WaitFlagStateUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d007      	beq.n	8004eea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ede:	f043 0220 	orr.w	r2, r3, #32
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e000      	b.n	8004eec <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2200      	movs	r2, #0
 8004f08:	2180      	movs	r1, #128	; 0x80
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f7ff ff18 	bl	8004d40 <SPI_WaitFlagStateUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d007      	beq.n	8004f26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	f043 0220 	orr.w	r2, r3, #32
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e000      	b.n	8004f28 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e041      	b.n	8004fc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f839 	bl	8004fce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4610      	mov	r0, r2
 8004f70:	f000 f9b4 	bl	80052dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d001      	beq.n	8004ff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e03a      	b.n	800506e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a18      	ldr	r2, [pc, #96]	; (8005078 <HAL_TIM_Base_Start_IT+0x98>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00e      	beq.n	8005038 <HAL_TIM_Base_Start_IT+0x58>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005022:	d009      	beq.n	8005038 <HAL_TIM_Base_Start_IT+0x58>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a14      	ldr	r2, [pc, #80]	; (800507c <HAL_TIM_Base_Start_IT+0x9c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d004      	beq.n	8005038 <HAL_TIM_Base_Start_IT+0x58>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a13      	ldr	r2, [pc, #76]	; (8005080 <HAL_TIM_Base_Start_IT+0xa0>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d111      	bne.n	800505c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b06      	cmp	r3, #6
 8005048:	d010      	beq.n	800506c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f042 0201 	orr.w	r2, r2, #1
 8005058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505a:	e007      	b.n	800506c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr
 8005078:	40012c00 	.word	0x40012c00
 800507c:	40000400 	.word	0x40000400
 8005080:	40000800 	.word	0x40000800

08005084 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b02      	cmp	r3, #2
 8005098:	d122      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d11b      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0202 	mvn.w	r2, #2
 80050b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f8ed 	bl	80052a6 <HAL_TIM_IC_CaptureCallback>
 80050cc:	e005      	b.n	80050da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f8e0 	bl	8005294 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f8ef 	bl	80052b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d122      	bne.n	8005134 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d11b      	bne.n	8005134 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0204 	mvn.w	r2, #4
 8005104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2202      	movs	r2, #2
 800510a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f8c3 	bl	80052a6 <HAL_TIM_IC_CaptureCallback>
 8005120:	e005      	b.n	800512e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f8b6 	bl	8005294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f8c5 	bl	80052b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b08      	cmp	r3, #8
 8005140:	d122      	bne.n	8005188 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b08      	cmp	r3, #8
 800514e:	d11b      	bne.n	8005188 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0208 	mvn.w	r2, #8
 8005158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2204      	movs	r2, #4
 800515e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f899 	bl	80052a6 <HAL_TIM_IC_CaptureCallback>
 8005174:	e005      	b.n	8005182 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f88c 	bl	8005294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f89b 	bl	80052b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f003 0310 	and.w	r3, r3, #16
 8005192:	2b10      	cmp	r3, #16
 8005194:	d122      	bne.n	80051dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d11b      	bne.n	80051dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0210 	mvn.w	r2, #16
 80051ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2208      	movs	r2, #8
 80051b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f86f 	bl	80052a6 <HAL_TIM_IC_CaptureCallback>
 80051c8:	e005      	b.n	80051d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f862 	bl	8005294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f871 	bl	80052b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d10e      	bne.n	8005208 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d107      	bne.n	8005208 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0201 	mvn.w	r2, #1
 8005200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fd f844 	bl	8002290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005212:	2b80      	cmp	r3, #128	; 0x80
 8005214:	d10e      	bne.n	8005234 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005220:	2b80      	cmp	r3, #128	; 0x80
 8005222:	d107      	bne.n	8005234 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800522c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f8bf 	bl	80053b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523e:	2b40      	cmp	r3, #64	; 0x40
 8005240:	d10e      	bne.n	8005260 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b40      	cmp	r3, #64	; 0x40
 800524e:	d107      	bne.n	8005260 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f835 	bl	80052ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b20      	cmp	r3, #32
 800526c:	d10e      	bne.n	800528c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b20      	cmp	r3, #32
 800527a:	d107      	bne.n	800528c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0220 	mvn.w	r2, #32
 8005284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f88a 	bl	80053a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800528c:	bf00      	nop
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr

080052a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bc80      	pop	{r7}
 80052c8:	4770      	bx	lr

080052ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr

080052dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a29      	ldr	r2, [pc, #164]	; (8005394 <TIM_Base_SetConfig+0xb8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00b      	beq.n	800530c <TIM_Base_SetConfig+0x30>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fa:	d007      	beq.n	800530c <TIM_Base_SetConfig+0x30>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a26      	ldr	r2, [pc, #152]	; (8005398 <TIM_Base_SetConfig+0xbc>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d003      	beq.n	800530c <TIM_Base_SetConfig+0x30>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a25      	ldr	r2, [pc, #148]	; (800539c <TIM_Base_SetConfig+0xc0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d108      	bne.n	800531e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a1c      	ldr	r2, [pc, #112]	; (8005394 <TIM_Base_SetConfig+0xb8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00b      	beq.n	800533e <TIM_Base_SetConfig+0x62>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532c:	d007      	beq.n	800533e <TIM_Base_SetConfig+0x62>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a19      	ldr	r2, [pc, #100]	; (8005398 <TIM_Base_SetConfig+0xbc>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d003      	beq.n	800533e <TIM_Base_SetConfig+0x62>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a18      	ldr	r2, [pc, #96]	; (800539c <TIM_Base_SetConfig+0xc0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d108      	bne.n	8005350 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a07      	ldr	r2, [pc, #28]	; (8005394 <TIM_Base_SetConfig+0xb8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d103      	bne.n	8005384 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	691a      	ldr	r2, [r3, #16]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	615a      	str	r2, [r3, #20]
}
 800538a:	bf00      	nop
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr
 8005394:	40012c00 	.word	0x40012c00
 8005398:	40000400 	.word	0x40000400
 800539c:	40000800 	.word	0x40000800

080053a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc80      	pop	{r7}
 80053b0:	4770      	bx	lr

080053b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr

080053c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e03f      	b.n	8005456 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d106      	bne.n	80053f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fd f84a 	bl	8002484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2224      	movs	r2, #36	; 0x24
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005406:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fffd 	bl	8006408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800541c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695a      	ldr	r2, [r3, #20]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800542c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800543c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b08a      	sub	sp, #40	; 0x28
 8005462:	af02      	add	r7, sp, #8
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	603b      	str	r3, [r7, #0]
 800546a:	4613      	mov	r3, r2
 800546c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b20      	cmp	r3, #32
 800547c:	d17c      	bne.n	8005578 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <HAL_UART_Transmit+0x2c>
 8005484:	88fb      	ldrh	r3, [r7, #6]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e075      	b.n	800557a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_UART_Transmit+0x3e>
 8005498:	2302      	movs	r3, #2
 800549a:	e06e      	b.n	800557a <HAL_UART_Transmit+0x11c>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2221      	movs	r2, #33	; 0x21
 80054ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054b2:	f7fd f92d 	bl	8002710 <HAL_GetTick>
 80054b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	88fa      	ldrh	r2, [r7, #6]
 80054bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	88fa      	ldrh	r2, [r7, #6]
 80054c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054cc:	d108      	bne.n	80054e0 <HAL_UART_Transmit+0x82>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	e003      	b.n	80054e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80054f0:	e02a      	b.n	8005548 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2200      	movs	r2, #0
 80054fa:	2180      	movs	r1, #128	; 0x80
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 fd1d 	bl	8005f3c <UART_WaitOnFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e036      	b.n	800557a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10b      	bne.n	800552a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005520:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	3302      	adds	r3, #2
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	e007      	b.n	800553a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	781a      	ldrb	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	3301      	adds	r3, #1
 8005538:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1cf      	bne.n	80054f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2200      	movs	r2, #0
 800555a:	2140      	movs	r1, #64	; 0x40
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 fced 	bl	8005f3c <UART_WaitOnFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e006      	b.n	800557a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	e000      	b.n	800557a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005578:	2302      	movs	r3, #2
  }
}
 800557a:	4618      	mov	r0, r3
 800557c:	3720      	adds	r7, #32
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b08a      	sub	sp, #40	; 0x28
 8005586:	af02      	add	r7, sp, #8
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	603b      	str	r3, [r7, #0]
 800558e:	4613      	mov	r3, r2
 8005590:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b20      	cmp	r3, #32
 80055a0:	f040 808c 	bne.w	80056bc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <HAL_UART_Receive+0x2e>
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e084      	b.n	80056be <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d101      	bne.n	80055c2 <HAL_UART_Receive+0x40>
 80055be:	2302      	movs	r3, #2
 80055c0:	e07d      	b.n	80056be <HAL_UART_Receive+0x13c>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2222      	movs	r2, #34	; 0x22
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055de:	f7fd f897 	bl	8002710 <HAL_GetTick>
 80055e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	88fa      	ldrh	r2, [r7, #6]
 80055e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	88fa      	ldrh	r2, [r7, #6]
 80055ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f8:	d108      	bne.n	800560c <HAL_UART_Receive+0x8a>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d104      	bne.n	800560c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005602:	2300      	movs	r3, #0
 8005604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	e003      	b.n	8005614 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005610:	2300      	movs	r3, #0
 8005612:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800561c:	e043      	b.n	80056a6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2200      	movs	r2, #0
 8005626:	2120      	movs	r1, #32
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 fc87 	bl	8005f3c <UART_WaitOnFlagUntilTimeout>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e042      	b.n	80056be <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10c      	bne.n	8005658 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	b29b      	uxth	r3, r3
 8005646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800564a:	b29a      	uxth	r2, r3
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	3302      	adds	r3, #2
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	e01f      	b.n	8005698 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005660:	d007      	beq.n	8005672 <HAL_UART_Receive+0xf0>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10a      	bne.n	8005680 <HAL_UART_Receive+0xfe>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	b2da      	uxtb	r2, r3
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	701a      	strb	r2, [r3, #0]
 800567e:	e008      	b.n	8005692 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800568c:	b2da      	uxtb	r2, r3
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	3301      	adds	r3, #1
 8005696:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1b6      	bne.n	800561e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80056b8:	2300      	movs	r3, #0
 80056ba:	e000      	b.n	80056be <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80056bc:	2302      	movs	r3, #2
  }
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	4613      	mov	r3, r2
 80056d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b20      	cmp	r3, #32
 80056de:	d130      	bne.n	8005742 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <HAL_UART_Transmit_IT+0x26>
 80056e6:	88fb      	ldrh	r3, [r7, #6]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e029      	b.n	8005744 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_UART_Transmit_IT+0x38>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e022      	b.n	8005744 <HAL_UART_Transmit_IT+0x7e>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	88fa      	ldrh	r2, [r7, #6]
 8005710:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	88fa      	ldrh	r2, [r7, #6]
 8005716:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2221      	movs	r2, #33	; 0x21
 8005722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800573c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	e000      	b.n	8005744 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005742:	2302      	movs	r3, #2
  }
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	bc80      	pop	{r7}
 800574c:	4770      	bx	lr

0800574e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	60b9      	str	r1, [r7, #8]
 8005758:	4613      	mov	r3, r2
 800575a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b20      	cmp	r3, #32
 8005766:	d11d      	bne.n	80057a4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <HAL_UART_Receive_IT+0x26>
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e016      	b.n	80057a6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800577e:	2b01      	cmp	r3, #1
 8005780:	d101      	bne.n	8005786 <HAL_UART_Receive_IT+0x38>
 8005782:	2302      	movs	r3, #2
 8005784:	e00f      	b.n	80057a6 <HAL_UART_Receive_IT+0x58>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	461a      	mov	r2, r3
 8005798:	68b9      	ldr	r1, [r7, #8]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 fc18 	bl	8005fd0 <UART_Start_Receive_IT>
 80057a0:	4603      	mov	r3, r0
 80057a2:	e000      	b.n	80057a6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80057a4:	2302      	movs	r3, #2
  }
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	4613      	mov	r3, r2
 80057bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	d153      	bne.n	8005872 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <HAL_UART_Transmit_DMA+0x26>
 80057d0:	88fb      	ldrh	r3, [r7, #6]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e04c      	b.n	8005874 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_UART_Transmit_DMA+0x38>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e045      	b.n	8005874 <HAL_UART_Transmit_DMA+0xc4>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	88fa      	ldrh	r2, [r7, #6]
 80057fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	88fa      	ldrh	r2, [r7, #6]
 8005800:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2221      	movs	r2, #33	; 0x21
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005814:	4a19      	ldr	r2, [pc, #100]	; (800587c <HAL_UART_Transmit_DMA+0xcc>)
 8005816:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581c:	4a18      	ldr	r2, [pc, #96]	; (8005880 <HAL_UART_Transmit_DMA+0xd0>)
 800581e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005824:	4a17      	ldr	r2, [pc, #92]	; (8005884 <HAL_UART_Transmit_DMA+0xd4>)
 8005826:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800582c:	2200      	movs	r2, #0
 800582e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8005830:	f107 0308 	add.w	r3, r7, #8
 8005834:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	6819      	ldr	r1, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3304      	adds	r3, #4
 8005844:	461a      	mov	r2, r3
 8005846:	88fb      	ldrh	r3, [r7, #6]
 8005848:	f7fd f8a6 	bl	8002998 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005854:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695a      	ldr	r2, [r3, #20]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800586c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	e000      	b.n	8005874 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005872:	2302      	movs	r3, #2
  }
}
 8005874:	4618      	mov	r0, r3
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	08005d6f 	.word	0x08005d6f
 8005880:	08005dc1 	.word	0x08005dc1
 8005884:	08005ea9 	.word	0x08005ea9

08005888 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	4613      	mov	r3, r2
 8005894:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b20      	cmp	r3, #32
 80058a0:	d11d      	bne.n	80058de <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <HAL_UART_Receive_DMA+0x26>
 80058a8:	88fb      	ldrh	r3, [r7, #6]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e016      	b.n	80058e0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_UART_Receive_DMA+0x38>
 80058bc:	2302      	movs	r3, #2
 80058be:	e00f      	b.n	80058e0 <HAL_UART_Receive_DMA+0x58>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80058ce:	88fb      	ldrh	r3, [r7, #6]
 80058d0:	461a      	mov	r2, r3
 80058d2:	68b9      	ldr	r1, [r7, #8]
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 fbb5 	bl	8006044 <UART_Start_Receive_DMA>
 80058da:	4603      	mov	r3, r0
 80058dc:	e000      	b.n	80058e0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80058de:	2302      	movs	r3, #2
  }
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695a      	ldr	r2, [r3, #20]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0201 	bic.w	r2, r2, #1
 800590e:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005914:	2b01      	cmp	r3, #1
 8005916:	d107      	bne.n	8005928 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0210 	bic.w	r2, r2, #16
 8005926:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005932:	2b00      	cmp	r3, #0
 8005934:	d02d      	beq.n	8005992 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695a      	ldr	r2, [r3, #20]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005944:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	2b00      	cmp	r3, #0
 800594c:	d013      	beq.n	8005976 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005952:	4a19      	ldr	r2, [pc, #100]	; (80059b8 <HAL_UART_AbortReceive_IT+0xd0>)
 8005954:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	4618      	mov	r0, r3
 800595c:	f7fd f8b6 	bl	8002acc <HAL_DMA_Abort_IT>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d022      	beq.n	80059ac <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005970:	4610      	mov	r0, r2
 8005972:	4798      	blx	r3
 8005974:	e01a      	b.n	80059ac <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f9db 	bl	8005d46 <HAL_UART_AbortReceiveCpltCallback>
 8005990:	e00c      	b.n	80059ac <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f9cd 	bl	8005d46 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	080061b7 	.word	0x080061b7

080059bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08a      	sub	sp, #40	; 0x28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80059dc:	2300      	movs	r3, #0
 80059de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10d      	bne.n	8005a0e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d008      	beq.n	8005a0e <HAL_UART_IRQHandler+0x52>
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fc54 	bl	80062b4 <UART_Receive_IT>
      return;
 8005a0c:	e17b      	b.n	8005d06 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 80b1 	beq.w	8005b78 <HAL_UART_IRQHandler+0x1bc>
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d105      	bne.n	8005a2c <HAL_UART_IRQHandler+0x70>
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 80a6 	beq.w	8005b78 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <HAL_UART_IRQHandler+0x90>
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a44:	f043 0201 	orr.w	r2, r3, #1
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	f003 0304 	and.w	r3, r3, #4
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <HAL_UART_IRQHandler+0xb0>
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	f043 0202 	orr.w	r2, r3, #2
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <HAL_UART_IRQHandler+0xd0>
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	f043 0204 	orr.w	r2, r3, #4
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00f      	beq.n	8005ab6 <HAL_UART_IRQHandler+0xfa>
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	f003 0320 	and.w	r3, r3, #32
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <HAL_UART_IRQHandler+0xee>
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d005      	beq.n	8005ab6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	f043 0208 	orr.w	r2, r3, #8
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 811e 	beq.w	8005cfc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	f003 0320 	and.w	r3, r3, #32
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d007      	beq.n	8005ada <HAL_UART_IRQHandler+0x11e>
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	f003 0320 	and.w	r3, r3, #32
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fbed 	bl	80062b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	bf14      	ite	ne
 8005ae8:	2301      	movne	r3, #1
 8005aea:	2300      	moveq	r3, #0
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d102      	bne.n	8005b02 <HAL_UART_IRQHandler+0x146>
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d031      	beq.n	8005b66 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fb17 	bl	8006136 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d023      	beq.n	8005b5e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695a      	ldr	r2, [r3, #20]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b24:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d013      	beq.n	8005b56 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	4a76      	ldr	r2, [pc, #472]	; (8005d0c <HAL_UART_IRQHandler+0x350>)
 8005b34:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fc ffc6 	bl	8002acc <HAL_DMA_Abort_IT>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d016      	beq.n	8005b74 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b50:	4610      	mov	r0, r2
 8005b52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b54:	e00e      	b.n	8005b74 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f8ec 	bl	8005d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5c:	e00a      	b.n	8005b74 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f8e8 	bl	8005d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b64:	e006      	b.n	8005b74 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f8e4 	bl	8005d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b72:	e0c3      	b.n	8005cfc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b74:	bf00      	nop
    return;
 8005b76:	e0c1      	b.n	8005cfc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	f040 80a1 	bne.w	8005cc4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 809b 	beq.w	8005cc4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 8095 	beq.w	8005cc4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d04e      	beq.n	8005c5c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005bc8:	8a3b      	ldrh	r3, [r7, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 8098 	beq.w	8005d00 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bd4:	8a3a      	ldrh	r2, [r7, #16]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	f080 8092 	bcs.w	8005d00 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	8a3a      	ldrh	r2, [r7, #16]
 8005be0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d02b      	beq.n	8005c44 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bfa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695a      	ldr	r2, [r3, #20]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0201 	bic.w	r2, r2, #1
 8005c0a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695a      	ldr	r2, [r3, #20]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c1a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0210 	bic.w	r2, r2, #16
 8005c38:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fc ff09 	bl	8002a56 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	4619      	mov	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f87f 	bl	8005d58 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c5a:	e051      	b.n	8005d00 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d047      	beq.n	8005d04 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005c74:	8a7b      	ldrh	r3, [r7, #18]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d044      	beq.n	8005d04 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c88:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0201 	bic.w	r2, r2, #1
 8005c98:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0210 	bic.w	r2, r2, #16
 8005cb6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cb8:	8a7b      	ldrh	r3, [r7, #18]
 8005cba:	4619      	mov	r1, r3
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f84b 	bl	8005d58 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005cc2:	e01f      	b.n	8005d04 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d008      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x324>
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fa84 	bl	80061e6 <UART_Transmit_IT>
    return;
 8005cde:	e012      	b.n	8005d06 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00d      	beq.n	8005d06 <HAL_UART_IRQHandler+0x34a>
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d008      	beq.n	8005d06 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fac5 	bl	8006284 <UART_EndTransmit_IT>
    return;
 8005cfa:	e004      	b.n	8005d06 <HAL_UART_IRQHandler+0x34a>
    return;
 8005cfc:	bf00      	nop
 8005cfe:	e002      	b.n	8005d06 <HAL_UART_IRQHandler+0x34a>
      return;
 8005d00:	bf00      	nop
 8005d02:	e000      	b.n	8005d06 <HAL_UART_IRQHandler+0x34a>
      return;
 8005d04:	bf00      	nop
  }
}
 8005d06:	3728      	adds	r7, #40	; 0x28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	0800618f 	.word	0x0800618f

08005d10 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bc80      	pop	{r7}
 8005d20:	4770      	bx	lr

08005d22 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr

08005d34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bc80      	pop	{r7}
 8005d44:	4770      	bx	lr

08005d46 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bc80      	pop	{r7}
 8005d56:	4770      	bx	lr

08005d58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	460b      	mov	r3, r1
 8005d62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bc80      	pop	{r7}
 8005d6c:	4770      	bx	lr

08005d6e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b084      	sub	sp, #16
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d113      	bne.n	8005db2 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695a      	ldr	r2, [r3, #20]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d9e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dae:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005db0:	e002      	b.n	8005db8 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f002 f9d2 	bl	800815c <HAL_UART_TxCpltCallback>
}
 8005db8:	bf00      	nop
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7ff ff9e 	bl	8005d10 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dd4:	bf00      	nop
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d12a      	bne.n	8005e4e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e0c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695a      	ldr	r2, [r3, #20]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0201 	bic.w	r2, r2, #1
 8005e1c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695a      	ldr	r2, [r3, #20]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e2c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2220      	movs	r2, #32
 8005e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d107      	bne.n	8005e4e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0210 	bic.w	r2, r2, #16
 8005e4c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d106      	bne.n	8005e64 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f7ff ff7b 	bl	8005d58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e62:	e002      	b.n	8005e6a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f002 f951 	bl	800810c <HAL_UART_RxCpltCallback>
}
 8005e6a:	bf00      	nop
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d108      	bne.n	8005e9a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e8c:	085b      	lsrs	r3, r3, #1
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	4619      	mov	r1, r3
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff ff60 	bl	8005d58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e98:	e002      	b.n	8005ea0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f7ff ff41 	bl	8005d22 <HAL_UART_RxHalfCpltCallback>
}
 8005ea0:	bf00      	nop
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	bf14      	ite	ne
 8005ec8:	2301      	movne	r3, #1
 8005eca:	2300      	moveq	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b21      	cmp	r3, #33	; 0x21
 8005eda:	d108      	bne.n	8005eee <UART_DMAError+0x46>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d005      	beq.n	8005eee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005ee8:	68b8      	ldr	r0, [r7, #8]
 8005eea:	f000 f90f 	bl	800610c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	bf14      	ite	ne
 8005efc:	2301      	movne	r3, #1
 8005efe:	2300      	moveq	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b22      	cmp	r3, #34	; 0x22
 8005f0e:	d108      	bne.n	8005f22 <UART_DMAError+0x7a>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005f1c:	68b8      	ldr	r0, [r7, #8]
 8005f1e:	f000 f90a 	bl	8006136 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	f043 0210 	orr.w	r2, r3, #16
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f2e:	68b8      	ldr	r0, [r7, #8]
 8005f30:	f7ff ff00 	bl	8005d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f34:	bf00      	nop
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f4c:	e02c      	b.n	8005fa8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f54:	d028      	beq.n	8005fa8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d007      	beq.n	8005f6c <UART_WaitOnFlagUntilTimeout+0x30>
 8005f5c:	f7fc fbd8 	bl	8002710 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d21d      	bcs.n	8005fa8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f7a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695a      	ldr	r2, [r3, #20]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0201 	bic.w	r2, r2, #1
 8005f8a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e00f      	b.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	bf0c      	ite	eq
 8005fb8:	2301      	moveq	r3, #1
 8005fba:	2300      	movne	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	79fb      	ldrb	r3, [r7, #7]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d0c3      	beq.n	8005f4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	88fa      	ldrh	r2, [r7, #6]
 8005fe8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	88fa      	ldrh	r2, [r7, #6]
 8005fee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2222      	movs	r2, #34	; 0x22
 8005ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006014:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	695a      	ldr	r2, [r3, #20]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0201 	orr.w	r2, r2, #1
 8006024:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f042 0220 	orr.w	r2, r2, #32
 8006034:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	bc80      	pop	{r7}
 8006040:	4770      	bx	lr
	...

08006044 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	4613      	mov	r3, r2
 8006050:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	88fa      	ldrh	r2, [r7, #6]
 800605c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2222      	movs	r2, #34	; 0x22
 8006068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	4a23      	ldr	r2, [pc, #140]	; (8006100 <UART_Start_Receive_DMA+0xbc>)
 8006072:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006078:	4a22      	ldr	r2, [pc, #136]	; (8006104 <UART_Start_Receive_DMA+0xc0>)
 800607a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	4a21      	ldr	r2, [pc, #132]	; (8006108 <UART_Start_Receive_DMA+0xc4>)
 8006082:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	2200      	movs	r2, #0
 800608a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800608c:	f107 0308 	add.w	r3, r7, #8
 8006090:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3304      	adds	r3, #4
 800609c:	4619      	mov	r1, r3
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	f7fc fc78 	bl	8002998 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80060a8:	2300      	movs	r3, #0
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	613b      	str	r3, [r7, #16]
 80060bc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060d4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695a      	ldr	r2, [r3, #20]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f042 0201 	orr.w	r2, r2, #1
 80060e4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695a      	ldr	r2, [r3, #20]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060f4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	08005ddd 	.word	0x08005ddd
 8006104:	08005e73 	.word	0x08005e73
 8006108:	08005ea9 	.word	0x08005ea9

0800610c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006122:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	bc80      	pop	{r7}
 8006134:	4770      	bx	lr

08006136 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68da      	ldr	r2, [r3, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800614c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	695a      	ldr	r2, [r3, #20]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0201 	bic.w	r2, r2, #1
 800615c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006162:	2b01      	cmp	r3, #1
 8006164:	d107      	bne.n	8006176 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0210 	bic.w	r2, r2, #16
 8006174:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	4770      	bx	lr

0800618e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b084      	sub	sp, #16
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f7ff fdc3 	bl	8005d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ae:	bf00      	nop
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f7ff fdb4 	bl	8005d46 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061de:	bf00      	nop
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b21      	cmp	r3, #33	; 0x21
 80061f8:	d13e      	bne.n	8006278 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006202:	d114      	bne.n	800622e <UART_Transmit_IT+0x48>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d110      	bne.n	800622e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006220:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	1c9a      	adds	r2, r3, #2
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	621a      	str	r2, [r3, #32]
 800622c:	e008      	b.n	8006240 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	1c59      	adds	r1, r3, #1
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6211      	str	r1, [r2, #32]
 8006238:	781a      	ldrb	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006244:	b29b      	uxth	r3, r3
 8006246:	3b01      	subs	r3, #1
 8006248:	b29b      	uxth	r3, r3
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	4619      	mov	r1, r3
 800624e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10f      	bne.n	8006274 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006262:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006272:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006274:	2300      	movs	r3, #0
 8006276:	e000      	b.n	800627a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006278:	2302      	movs	r3, #2
  }
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	bc80      	pop	{r7}
 8006282:	4770      	bx	lr

08006284 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800629a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 ff59 	bl	800815c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b22      	cmp	r3, #34	; 0x22
 80062c6:	f040 8099 	bne.w	80063fc <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d2:	d117      	bne.n	8006304 <UART_Receive_IT+0x50>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d113      	bne.n	8006304 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062dc:	2300      	movs	r3, #0
 80062de:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fc:	1c9a      	adds	r2, r3, #2
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	629a      	str	r2, [r3, #40]	; 0x28
 8006302:	e026      	b.n	8006352 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006308:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800630a:	2300      	movs	r3, #0
 800630c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006316:	d007      	beq.n	8006328 <UART_Receive_IT+0x74>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10a      	bne.n	8006336 <UART_Receive_IT+0x82>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d106      	bne.n	8006336 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	b2da      	uxtb	r2, r3
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	701a      	strb	r2, [r3, #0]
 8006334:	e008      	b.n	8006348 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006342:	b2da      	uxtb	r2, r3
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006356:	b29b      	uxth	r3, r3
 8006358:	3b01      	subs	r3, #1
 800635a:	b29b      	uxth	r3, r3
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	4619      	mov	r1, r3
 8006360:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006362:	2b00      	cmp	r3, #0
 8006364:	d148      	bne.n	80063f8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 0220 	bic.w	r2, r2, #32
 8006374:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006384:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695a      	ldr	r2, [r3, #20]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0201 	bic.w	r2, r2, #1
 8006394:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d123      	bne.n	80063ee <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68da      	ldr	r2, [r3, #12]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0210 	bic.w	r2, r2, #16
 80063ba:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0310 	and.w	r3, r3, #16
 80063c6:	2b10      	cmp	r3, #16
 80063c8:	d10a      	bne.n	80063e0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063e4:	4619      	mov	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff fcb6 	bl	8005d58 <HAL_UARTEx_RxEventCallback>
 80063ec:	e002      	b.n	80063f4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 fe8c 	bl	800810c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	e002      	b.n	80063fe <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	e000      	b.n	80063fe <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80063fc:	2302      	movs	r3, #2
  }
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	4313      	orrs	r3, r2
 8006436:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006442:	f023 030c 	bic.w	r3, r3, #12
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6812      	ldr	r2, [r2, #0]
 800644a:	68b9      	ldr	r1, [r7, #8]
 800644c:	430b      	orrs	r3, r1
 800644e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	699a      	ldr	r2, [r3, #24]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a2c      	ldr	r2, [pc, #176]	; (800651c <UART_SetConfig+0x114>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d103      	bne.n	8006478 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006470:	f7fd fa72 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	e002      	b.n	800647e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006478:	f7fd fa5a 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 800647c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	009a      	lsls	r2, r3, #2
 8006488:	441a      	add	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	fbb2 f3f3 	udiv	r3, r2, r3
 8006494:	4a22      	ldr	r2, [pc, #136]	; (8006520 <UART_SetConfig+0x118>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	095b      	lsrs	r3, r3, #5
 800649c:	0119      	lsls	r1, r3, #4
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4613      	mov	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	009a      	lsls	r2, r3, #2
 80064a8:	441a      	add	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80064b4:	4b1a      	ldr	r3, [pc, #104]	; (8006520 <UART_SetConfig+0x118>)
 80064b6:	fba3 0302 	umull	r0, r3, r3, r2
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	2064      	movs	r0, #100	; 0x64
 80064be:	fb00 f303 	mul.w	r3, r0, r3
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	011b      	lsls	r3, r3, #4
 80064c6:	3332      	adds	r3, #50	; 0x32
 80064c8:	4a15      	ldr	r2, [pc, #84]	; (8006520 <UART_SetConfig+0x118>)
 80064ca:	fba2 2303 	umull	r2, r3, r2, r3
 80064ce:	095b      	lsrs	r3, r3, #5
 80064d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064d4:	4419      	add	r1, r3
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	4613      	mov	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	009a      	lsls	r2, r3, #2
 80064e0:	441a      	add	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80064ec:	4b0c      	ldr	r3, [pc, #48]	; (8006520 <UART_SetConfig+0x118>)
 80064ee:	fba3 0302 	umull	r0, r3, r3, r2
 80064f2:	095b      	lsrs	r3, r3, #5
 80064f4:	2064      	movs	r0, #100	; 0x64
 80064f6:	fb00 f303 	mul.w	r3, r0, r3
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	3332      	adds	r3, #50	; 0x32
 8006500:	4a07      	ldr	r2, [pc, #28]	; (8006520 <UART_SetConfig+0x118>)
 8006502:	fba2 2303 	umull	r2, r3, r2, r3
 8006506:	095b      	lsrs	r3, r3, #5
 8006508:	f003 020f 	and.w	r2, r3, #15
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	440a      	add	r2, r1
 8006512:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006514:	bf00      	nop
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	40013800 	.word	0x40013800
 8006520:	51eb851f 	.word	0x51eb851f
 8006524:	00000000 	.word	0x00000000

08006528 <adxl345_convert_float_mpss>:
{
	return (float) u * ADXL345_MG2G_MULTIPLIER;
}
/* convert data to float in m/s^2 */
float adxl345_convert_float_mpss(int16_t u)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	80fb      	strh	r3, [r7, #6]
	return (float) u * ADXL345_MG2G_MULTIPLIER * 9.81f;
 8006532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006536:	4618      	mov	r0, r3
 8006538:	f7fa fba0 	bl	8000c7c <__aeabi_i2f>
 800653c:	4603      	mov	r3, r0
 800653e:	4618      	mov	r0, r3
 8006540:	f7f9 ff6a 	bl	8000418 <__aeabi_f2d>
 8006544:	a30c      	add	r3, pc, #48	; (adr r3, 8006578 <adxl345_convert_float_mpss+0x50>)
 8006546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654a:	f7f9 ffbd 	bl	80004c8 <__aeabi_dmul>
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	4610      	mov	r0, r2
 8006554:	4619      	mov	r1, r3
 8006556:	a30a      	add	r3, pc, #40	; (adr r3, 8006580 <adxl345_convert_float_mpss+0x58>)
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f7f9 ffb4 	bl	80004c8 <__aeabi_dmul>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4610      	mov	r0, r2
 8006566:	4619      	mov	r1, r3
 8006568:	f7fa fa7e 	bl	8000a68 <__aeabi_d2f>
 800656c:	4603      	mov	r3, r0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	d2f1a9fc 	.word	0xd2f1a9fc
 800657c:	3f70624d 	.word	0x3f70624d
 8006580:	60000000 	.word	0x60000000
 8006584:	40239eb8 	.word	0x40239eb8

08006588 <adxl345_init>:
  High-level functions
----------------------------------------------------------------------*/

/* Init the device*/
adxl345_status adxl345_init(adxl345_handle_t* hadxl)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
	/* register callback for check SPI configuration */
	spi_freertos_set_check_config_callback(&(hadxl->spi),
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	495e      	ldr	r1, [pc, #376]	; (800670c <adxl345_init+0x184>)
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fde1 	bl	800715c <spi_freertos_set_check_config_callback>
		adxl345_spi_check_config);
	
	uint8_t reg;
	adxl345_status ret = ADXL345_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	73fb      	strb	r3, [r7, #15]
	/* set up NSS into inactive state */
	spi_freertos_nss_high(&(hadxl->spi));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 fff4 	bl	800758e <spi_freertos_nss_high>
	
	/* Read Device ID */
	ret = adxl345_read_spi(hadxl, ADXL345_REG_DEVID,
 80065a6:	f107 020e 	add.w	r2, r7, #14
 80065aa:	2301      	movs	r3, #1
 80065ac:	2100      	movs	r1, #0
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f962 	bl	8006878 <adxl345_read_spi>
 80065b4:	4603      	mov	r3, r0
 80065b6:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <adxl345_init+0x3a>
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	e09f      	b.n	8006702 <adxl345_init+0x17a>
	if(reg != ADXL345_ID) return ADXL345_NODEV;
 80065c2:	7bbb      	ldrb	r3, [r7, #14]
 80065c4:	2be5      	cmp	r3, #229	; 0xe5
 80065c6:	d001      	beq.n	80065cc <adxl345_init+0x44>
 80065c8:	2302      	movs	r3, #2
 80065ca:	e09a      	b.n	8006702 <adxl345_init+0x17a>
	
	/* Disable device operation */
	reg = 0;
 80065cc:	2300      	movs	r3, #0
 80065ce:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi(hadxl, ADXL345_REG_POWER_CTL,
 80065d0:	f107 020e 	add.w	r2, r7, #14
 80065d4:	2301      	movs	r3, #1
 80065d6:	212d      	movs	r1, #45	; 0x2d
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f927 	bl	800682c <adxl345_write_spi>
 80065de:	4603      	mov	r3, r0
 80065e0:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <adxl345_init+0x64>
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	e08a      	b.n	8006702 <adxl345_init+0x17a>
	
	/* Clear interrupts */
	reg = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_ENABLE,
 80065f0:	f107 020e 	add.w	r2, r7, #14
 80065f4:	2301      	movs	r3, #1
 80065f6:	212e      	movs	r1, #46	; 0x2e
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f917 	bl	800682c <adxl345_write_spi>
 80065fe:	4603      	mov	r3, r0
 8006600:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <adxl345_init+0x84>
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	e07a      	b.n	8006702 <adxl345_init+0x17a>

	/* Write device settings */
	/* Data rate */
	ret = adxl345_write_spi(hadxl, ADXL345_REG_BW_RATE,
		(void *) &(hadxl->settings.data_rate),
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f103 0220 	add.w	r2, r3, #32
	ret = adxl345_write_spi(hadxl, ADXL345_REG_BW_RATE,
 8006612:	2301      	movs	r3, #1
 8006614:	212c      	movs	r1, #44	; 0x2c
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f908 	bl	800682c <adxl345_write_spi>
 800661c:	4603      	mov	r3, r0
 800661e:	73fb      	strb	r3, [r7, #15]
		sizeof(hadxl->settings.data_rate));
	if(ret != ADXL345_OK) return ret;
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <adxl345_init+0xa2>
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	e06b      	b.n	8006702 <adxl345_init+0x17a>
	/* Data format */
	reg = 	hadxl->settings.meas_range | hadxl->settings.align |
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006636:	4313      	orrs	r3, r2
 8006638:	b2da      	uxtb	r2, r3
			hadxl->settings.resolution;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
	reg = 	hadxl->settings.meas_range | hadxl->settings.align |
 8006640:	4313      	orrs	r3, r2
 8006642:	b2db      	uxtb	r3, r3
 8006644:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi(hadxl, ADXL345_REG_DATA_FORMAT,
 8006646:	f107 020e 	add.w	r2, r7, #14
 800664a:	2301      	movs	r3, #1
 800664c:	2131      	movs	r1, #49	; 0x31
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f8ec 	bl	800682c <adxl345_write_spi>
 8006654:	4603      	mov	r3, r0
 8006656:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <adxl345_init+0xda>
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	e04f      	b.n	8006702 <adxl345_init+0x17a>
	
	/* Acc offset */
	ret = adxl345_write_spi(hadxl, ADXL345_REG_OFSX,
		(void *) &(hadxl->settings.offset),
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f103 0224 	add.w	r2, r3, #36	; 0x24
	ret = adxl345_write_spi(hadxl, ADXL345_REG_OFSX,
 8006668:	2303      	movs	r3, #3
 800666a:	211e      	movs	r1, #30
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f8dd 	bl	800682c <adxl345_write_spi>
 8006672:	4603      	mov	r3, r0
 8006674:	73fb      	strb	r3, [r7, #15]
		sizeof(hadxl->settings.offset));
	if(ret != ADXL345_OK) return ret;
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <adxl345_init+0xf8>
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	e040      	b.n	8006702 <adxl345_init+0x17a>
	
	/* FIFO */
	reg = 	hadxl->settings.fifo_mode | hadxl->settings.fifo_trigger |
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800668c:	4313      	orrs	r3, r2
 800668e:	b2db      	uxtb	r3, r3
 8006690:	b25a      	sxtb	r2, r3
		(hadxl->settings.fifo_watermark&ADXL345_FIFO_CTL_SAMPLES_MASK);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006698:	b25b      	sxtb	r3, r3
 800669a:	f003 031f 	and.w	r3, r3, #31
 800669e:	b25b      	sxtb	r3, r3
	reg = 	hadxl->settings.fifo_mode | hadxl->settings.fifo_trigger |
 80066a0:	4313      	orrs	r3, r2
 80066a2:	b25b      	sxtb	r3, r3
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi(hadxl, ADXL345_REG_FIFO_CTL,
 80066a8:	f107 020e 	add.w	r2, r7, #14
 80066ac:	2301      	movs	r3, #1
 80066ae:	2138      	movs	r1, #56	; 0x38
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f8bb 	bl	800682c <adxl345_write_spi>
 80066b6:	4603      	mov	r3, r0
 80066b8:	73fb      	strb	r3, [r7, #15]
		(void *) &reg, sizeof(reg));
	if(ret != ADXL345_OK) return ret;
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <adxl345_init+0x13c>
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
 80066c2:	e01e      	b.n	8006702 <adxl345_init+0x17a>
	
	/* Interrupts */
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_MAP,
		(void *) &(hadxl->settings.map_to_int2),
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f103 0228 	add.w	r2, r3, #40	; 0x28
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_MAP,
 80066ca:	2301      	movs	r3, #1
 80066cc:	212f      	movs	r1, #47	; 0x2f
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f8ac 	bl	800682c <adxl345_write_spi>
 80066d4:	4603      	mov	r3, r0
 80066d6:	73fb      	strb	r3, [r7, #15]
		sizeof(hadxl->settings.map_to_int2));
	if(ret != ADXL345_OK) return ret;
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <adxl345_init+0x15a>
 80066de:	7bfb      	ldrb	r3, [r7, #15]
 80066e0:	e00f      	b.n	8006702 <adxl345_init+0x17a>
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_ENABLE,
		(void *) &(hadxl->settings.int_en),
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f103 0227 	add.w	r2, r3, #39	; 0x27
	ret = adxl345_write_spi(hadxl, ADXL345_REG_INT_ENABLE,
 80066e8:	2301      	movs	r3, #1
 80066ea:	212e      	movs	r1, #46	; 0x2e
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f89d 	bl	800682c <adxl345_write_spi>
 80066f2:	4603      	mov	r3, r0
 80066f4:	73fb      	strb	r3, [r7, #15]
		sizeof(hadxl->settings.int_en));
	if(ret != ADXL345_OK) return ret;
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <adxl345_init+0x178>
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
 80066fe:	e000      	b.n	8006702 <adxl345_init+0x17a>
	
	return ret;
 8006700:	7bfb      	ldrb	r3, [r7, #15]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	08006949 	.word	0x08006949

08006710 <adxl345_start>:
		offset, sizeof(adxl345_acc_offset_t));
}

/* Start acceleration measurements */
adxl345_status adxl345_start(adxl345_handle_t* hadxl)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
	uint8_t data;
	adxl345_status ret = ADXL345_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]
	ret = adxl345_read_spi_dma(hadxl, ADXL345_REG_POWER_CTL,
 800671c:	f107 020e 	add.w	r2, r7, #14
 8006720:	2301      	movs	r3, #1
 8006722:	212d      	movs	r1, #45	; 0x2d
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f8ee 	bl	8006906 <adxl345_read_spi_dma>
 800672a:	4603      	mov	r3, r0
 800672c:	73fb      	strb	r3, [r7, #15]
							&data, sizeof(data));
	if(ret != ADXL345_OK) return ret;
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <adxl345_start+0x28>
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	e00e      	b.n	8006756 <adxl345_start+0x46>
	data |= ADXL345_MEASURE;
 8006738:	7bbb      	ldrb	r3, [r7, #14]
 800673a:	f043 0308 	orr.w	r3, r3, #8
 800673e:	b2db      	uxtb	r3, r3
 8006740:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi_dma(hadxl, ADXL345_REG_POWER_CTL,
 8006742:	f107 020e 	add.w	r2, r7, #14
 8006746:	2301      	movs	r3, #1
 8006748:	212d      	movs	r1, #45	; 0x2d
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f8b5 	bl	80068ba <adxl345_write_spi_dma>
 8006750:	4603      	mov	r3, r0
 8006752:	73fb      	strb	r3, [r7, #15]
							&data, sizeof(data));
	return ret;
 8006754:	7bfb      	ldrb	r3, [r7, #15]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <adxl345_stop>:

/* Stop acceleration measurements */
adxl345_status adxl345_stop(adxl345_handle_t* hadxl)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b084      	sub	sp, #16
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
	uint8_t data;
	adxl345_status ret = ADXL345_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	73fb      	strb	r3, [r7, #15]
	ret = adxl345_read_spi_dma(hadxl, ADXL345_REG_POWER_CTL,
 800676a:	f107 020e 	add.w	r2, r7, #14
 800676e:	2301      	movs	r3, #1
 8006770:	212d      	movs	r1, #45	; 0x2d
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f8c7 	bl	8006906 <adxl345_read_spi_dma>
 8006778:	4603      	mov	r3, r0
 800677a:	73fb      	strb	r3, [r7, #15]
							&data, sizeof(data));
	if(ret != ADXL345_OK) return ret;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <adxl345_stop+0x28>
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	e00e      	b.n	80067a4 <adxl345_stop+0x46>
	data &= (~ADXL345_MEASURE);
 8006786:	7bbb      	ldrb	r3, [r7, #14]
 8006788:	f023 0308 	bic.w	r3, r3, #8
 800678c:	b2db      	uxtb	r3, r3
 800678e:	73bb      	strb	r3, [r7, #14]
	ret = adxl345_write_spi_dma(hadxl, ADXL345_REG_POWER_CTL,
 8006790:	f107 020e 	add.w	r2, r7, #14
 8006794:	2301      	movs	r3, #1
 8006796:	212d      	movs	r1, #45	; 0x2d
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f88e 	bl	80068ba <adxl345_write_spi_dma>
 800679e:	4603      	mov	r3, r0
 80067a0:	73fb      	strb	r3, [r7, #15]
							&data, sizeof(data));
	return ret;
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <adxl345_get_data>:

/* Get the acceleration data for all axes */
adxl345_status adxl345_get_data(adxl345_handle_t* hadxl,
	adxl345_acc_data_t* data)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
	return adxl345_read_spi_dma(hadxl, ADXL345_REG_DATAX0,
 80067b6:	2306      	movs	r3, #6
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	2132      	movs	r1, #50	; 0x32
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f8a2 	bl	8006906 <adxl345_read_spi_dma>
 80067c2:	4603      	mov	r3, r0
		data, sizeof(adxl345_acc_data_t));
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <adxl345_fifo_flush>:

/* Flush internal FIFO */
adxl345_status adxl345_fifo_flush(adxl345_handle_t* hadxl)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
	adxl345_acc_data_t tmp;
	uint8_t sample_cnt = 0;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]
	while(adxl345_get_int_src(hadxl) & ADXL345_INT_DATA_READY)
 80067d8:	e00c      	b.n	80067f4 <adxl345_fifo_flush+0x28>
	{
		if(sample_cnt++ > ADXL345_FLUSH_THESHOLD)
 80067da:	7bfb      	ldrb	r3, [r7, #15]
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	73fa      	strb	r2, [r7, #15]
 80067e0:	2b40      	cmp	r3, #64	; 0x40
 80067e2:	d901      	bls.n	80067e8 <adxl345_fifo_flush+0x1c>
			return ADXL345_ERR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e00d      	b.n	8006804 <adxl345_fifo_flush+0x38>
		adxl345_get_data(hadxl, &tmp);
 80067e8:	f107 0308 	add.w	r3, r7, #8
 80067ec:	4619      	mov	r1, r3
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7ff ffdc 	bl	80067ac <adxl345_get_data>
	while(adxl345_get_int_src(hadxl) & ADXL345_INT_DATA_READY)
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f809 	bl	800680c <adxl345_get_int_src>
 80067fa:	4603      	mov	r3, r0
 80067fc:	b25b      	sxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	dbeb      	blt.n	80067da <adxl345_fifo_flush+0xe>
	}
	return ADXL345_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <adxl345_get_int_src>:
	return id;
}

/* Read the INT_SOURCE register */
uint8_t adxl345_get_int_src(adxl345_handle_t* hadxl)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
	uint8_t reg;
	adxl345_read_spi(hadxl, ADXL345_REG_INT_SOURCE,
 8006814:	f107 020f 	add.w	r2, r7, #15
 8006818:	2301      	movs	r3, #1
 800681a:	2130      	movs	r1, #48	; 0x30
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 f82b 	bl	8006878 <adxl345_read_spi>
		(void *) &reg, sizeof(reg));
	return reg;
 8006822:	7bfb      	ldrb	r3, [r7, #15]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <adxl345_write_spi>:
----------------------------------------------------------------------*/

/* Write registers through SPI */
adxl345_status adxl345_write_spi(adxl345_handle_t* hadxl,
	uint8_t addr, void* buf, size_t size)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08a      	sub	sp, #40	; 0x28
 8006830:	af04      	add	r7, sp, #16
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	607a      	str	r2, [r7, #4]
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	460b      	mov	r3, r1
 800683a:	72fb      	strb	r3, [r7, #11]
	/* Command - write multiple bytes */
	uint8_t cmd = ADXL345_SPI_MB | (addr & ADXL345_SPI_ADDR_MASK);
 800683c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006844:	b25b      	sxtb	r3, r3
 8006846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800684a:	b25b      	sxtb	r3, r3
 800684c:	b2db      	uxtb	r3, r3
 800684e:	75fb      	strb	r3, [r7, #23]
	
	return (adxl345_status) spi_freertos_write(&(hadxl->spi), &cmd, sizeof(cmd),
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		buf, size, hadxl->mutex_timeout, (uint32_t) hadxl->transfer_timeout);
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	6b12      	ldr	r2, [r2, #48]	; 0x30
	return (adxl345_status) spi_freertos_write(&(hadxl->spi), &cmd, sizeof(cmd),
 800685a:	f107 0117 	add.w	r1, r7, #23
 800685e:	9202      	str	r2, [sp, #8]
 8006860:	9301      	str	r3, [sp, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f000 fc84 	bl	8007176 <spi_freertos_write>
 800686e:	4603      	mov	r3, r0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <adxl345_read_spi>:

/* Read registers through SPI */
adxl345_status adxl345_read_spi(adxl345_handle_t* hadxl,
	uint8_t addr, void* buf, size_t size)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08a      	sub	sp, #40	; 0x28
 800687c:	af04      	add	r7, sp, #16
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	607a      	str	r2, [r7, #4]
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	460b      	mov	r3, r1
 8006886:	72fb      	strb	r3, [r7, #11]
	/* Command - read multiple bytes */
	uint8_t cmd = ADXL345_SPI_READ |
				ADXL345_SPI_MB | (addr&ADXL345_SPI_ADDR_MASK);
 8006888:	7afb      	ldrb	r3, [r7, #11]
 800688a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800688e:	b2db      	uxtb	r3, r3
	uint8_t cmd = ADXL345_SPI_READ |
 8006890:	75fb      	strb	r3, [r7, #23]
	
	return (adxl345_status) spi_freertos_read(&(hadxl->spi), &cmd, sizeof(cmd),
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		buf, size, hadxl->mutex_timeout, (uint32_t) hadxl->transfer_timeout);
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	6b12      	ldr	r2, [r2, #48]	; 0x30
	return (adxl345_status) spi_freertos_read(&(hadxl->spi), &cmd, sizeof(cmd),
 800689c:	f107 0117 	add.w	r1, r7, #23
 80068a0:	9202      	str	r2, [sp, #8]
 80068a2:	9301      	str	r3, [sp, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f000 fcdf 	bl	800726e <spi_freertos_read>
 80068b0:	4603      	mov	r3, r0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <adxl345_write_spi_dma>:

/* Write registers through SPI using DMA */
adxl345_status adxl345_write_spi_dma(adxl345_handle_t* hadxl,
	uint8_t addr, void* buf, size_t size)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b08a      	sub	sp, #40	; 0x28
 80068be:	af04      	add	r7, sp, #16
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	607a      	str	r2, [r7, #4]
 80068c4:	603b      	str	r3, [r7, #0]
 80068c6:	460b      	mov	r3, r1
 80068c8:	72fb      	strb	r3, [r7, #11]
	/* Command - write multiple bytes */
	uint8_t cmd = ADXL345_SPI_MB | (addr & ADXL345_SPI_ADDR_MASK);
 80068ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80068ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068d2:	b25b      	sxtb	r3, r3
 80068d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068d8:	b25b      	sxtb	r3, r3
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	75fb      	strb	r3, [r7, #23]
	
	return (adxl345_status) spi_freertos_write_dma(&(hadxl->spi),
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80068e8:	f107 0117 	add.w	r1, r7, #23
 80068ec:	9202      	str	r2, [sp, #8]
 80068ee:	9301      	str	r3, [sp, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f000 fd35 	bl	8007366 <spi_freertos_write_dma>
 80068fc:	4603      	mov	r3, r0
		&cmd, sizeof(cmd), buf, size,
		hadxl->mutex_timeout, hadxl->transfer_timeout);
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <adxl345_read_spi_dma>:

/* Read registers through SPI using DMA */
adxl345_status adxl345_read_spi_dma(adxl345_handle_t* hadxl,
	uint8_t addr, void* buf, size_t size)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b08a      	sub	sp, #40	; 0x28
 800690a:	af04      	add	r7, sp, #16
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
 8006912:	460b      	mov	r3, r1
 8006914:	72fb      	strb	r3, [r7, #11]
	uint8_t cmd = ADXL345_SPI_READ |
				ADXL345_SPI_MB | (addr&ADXL345_SPI_ADDR_MASK);
 8006916:	7afb      	ldrb	r3, [r7, #11]
 8006918:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800691c:	b2db      	uxtb	r3, r3
	uint8_t cmd = ADXL345_SPI_READ |
 800691e:	75fb      	strb	r3, [r7, #23]
	
	return (adxl345_status) spi_freertos_read_dma(&(hadxl->spi),
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800692a:	f107 0117 	add.w	r1, r7, #23
 800692e:	9202      	str	r2, [sp, #8]
 8006930:	9301      	str	r3, [sp, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f000 fd9e 	bl	800747a <spi_freertos_read_dma>
 800693e:	4603      	mov	r3, r0
		&cmd, sizeof(cmd), buf, size,
		hadxl->mutex_timeout, hadxl->transfer_timeout);
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <adxl345_spi_check_config>:

/* Check and change SPI configuration */
void adxl345_spi_check_config(SPI_HandleTypeDef* hspi)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
	/* Check configuration */
	if( (hspi->Init.CLKPhase    != ADXL345_SPI_CPHA)       ||
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d10f      	bne.n	8006978 <adxl345_spi_check_config+0x30>
		(hspi->Init.CLKPolarity != ADXL345_SPI_CPOL)       ||
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
	if( (hspi->Init.CLKPhase    != ADXL345_SPI_CPHA)       ||
 800695c:	2b02      	cmp	r3, #2
 800695e:	d10b      	bne.n	8006978 <adxl345_spi_check_config+0x30>
		(hspi->Init.DataSize    != ADXL345_SPI_DATASIZE)   ||
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
		(hspi->Init.CLKPolarity != ADXL345_SPI_CPOL)       ||
 8006964:	2b00      	cmp	r3, #0
 8006966:	d107      	bne.n	8006978 <adxl345_spi_check_config+0x30>
		(hspi->Init.Direction   != ADXL345_SPI_DIRECTION)  ||
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
		(hspi->Init.DataSize    != ADXL345_SPI_DATASIZE)   ||
 800696c:	2b00      	cmp	r3, #0
 800696e:	d103      	bne.n	8006978 <adxl345_spi_check_config+0x30>
		(hspi->Init.FirstBit    != ADXL345_SPI_BIT_ORDER))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a1b      	ldr	r3, [r3, #32]
		(hspi->Init.Direction   != ADXL345_SPI_DIRECTION)  ||
 8006974:	2b00      	cmp	r3, #0
 8006976:	d016      	beq.n	80069a6 <adxl345_spi_check_config+0x5e>
	{
		hspi->Init.CLKPhase     = ADXL345_SPI_CPHA;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	615a      	str	r2, [r3, #20]
		hspi->Init.CLKPolarity  = ADXL345_SPI_CPOL;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2202      	movs	r2, #2
 8006982:	611a      	str	r2, [r3, #16]
		hspi->Init.DataSize     = ADXL345_SPI_DATASIZE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	60da      	str	r2, [r3, #12]
		hspi->Init.Direction    = ADXL345_SPI_DIRECTION;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	609a      	str	r2, [r3, #8]
		hspi->Init.FirstBit     = ADXL345_SPI_BIT_ORDER;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	621a      	str	r2, [r3, #32]
		if (HAL_SPI_Init(hspi) != HAL_OK)
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7fd f840 	bl	8003a1c <HAL_SPI_Init>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <adxl345_spi_check_config+0x5e>
		{
			Error_Handler();
 80069a2:	f7fb fc87 	bl	80022b4 <Error_Handler>
		}
	}
}
 80069a6:	bf00      	nop
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
	...

080069b0 <adxl345_task>:
static osThreadId adxl345_task_id = NULL;
static adxl345_task_handle_t* htask;
static adxl345_acc_data_t  *fifo_accelerometer_rx;

void adxl345_task(void const * argument)
{	
 80069b0:	b590      	push	{r4, r7, lr}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
	htask = (adxl345_task_handle_t *) argument;
 80069b8:	4ab9      	ldr	r2, [pc, #740]	; (8006ca0 <adxl345_task+0x2f0>)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6013      	str	r3, [r2, #0]
	adxl345_power_state_t state = ADXL345_STANDBY;
 80069be:	2301      	movs	r3, #1
 80069c0:	75fb      	strb	r3, [r7, #23]

	uint32_t event;
	uint8_t sample_idx = 0;
 80069c2:	2300      	movs	r3, #0
 80069c4:	75bb      	strb	r3, [r7, #22]
	uint8_t frame_idx = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	757b      	strb	r3, [r7, #21]
	uint8_t i = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	753b      	strb	r3, [r7, #20]
	
	/* Initializing ADXL345 */
	if(adxl345_init(&(htask->hadxl)) != ADXL345_OK)
 80069ce:	4bb4      	ldr	r3, [pc, #720]	; (8006ca0 <adxl345_task+0x2f0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff fdd8 	bl	8006588 <adxl345_init>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <adxl345_task+0x32>
		Error_Handler();
 80069de:	f7fb fc69 	bl	80022b4 <Error_Handler>

	/* Allocating FIFO memory  */
	fifo_accelerometer_rx = pvPortMalloc(htask->fifo_frame_size*
 80069e2:	4baf      	ldr	r3, [pc, #700]	; (8006ca0 <adxl345_task+0x2f0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069ea:	461a      	mov	r2, r3
		htask->fifo_frame_qty*sizeof(adxl345_acc_data_t));
 80069ec:	4bac      	ldr	r3, [pc, #688]	; (8006ca0 <adxl345_task+0x2f0>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
	fifo_accelerometer_rx = pvPortMalloc(htask->fifo_frame_size*
 80069f4:	fb03 f302 	mul.w	r3, r3, r2
 80069f8:	461a      	mov	r2, r3
 80069fa:	4613      	mov	r3, r2
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	4413      	add	r3, r2
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	4618      	mov	r0, r3
 8006a04:	f005 fc5a 	bl	800c2bc <pvPortMalloc>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	4aa6      	ldr	r2, [pc, #664]	; (8006ca4 <adxl345_task+0x2f4>)
 8006a0c:	6013      	str	r3, [r2, #0]

	if(fifo_accelerometer_rx == NULL)
 8006a0e:	4ba5      	ldr	r3, [pc, #660]	; (8006ca4 <adxl345_task+0x2f4>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <adxl345_task+0x6a>
		Error_Handler();
 8006a16:	f7fb fc4d 	bl	80022b4 <Error_Handler>
	adxl345_acc_data_t *ptr_to_send = NULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]
	
	/* Flush ADXL345 internal FIFO */
	if(adxl345_fifo_flush(&(htask->hadxl)) != ADXL345_OK)
 8006a1e:	4ba0      	ldr	r3, [pc, #640]	; (8006ca0 <adxl345_task+0x2f0>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff fed2 	bl	80067cc <adxl345_fifo_flush>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <adxl345_task+0x82>
		Error_Handler();
 8006a2e:	f7fb fc41 	bl	80022b4 <Error_Handler>
	/* Suspend acc */
	if(adxl345_stop(&(htask->hadxl)) != ADXL345_OK)
 8006a32:	4b9b      	ldr	r3, [pc, #620]	; (8006ca0 <adxl345_task+0x2f0>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7ff fe91 	bl	800675e <adxl345_stop>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <adxl345_task+0x96>
						Error_Handler();
 8006a42:	f7fb fc37 	bl	80022b4 <Error_Handler>
	
	/* Registering interrupt handlers */
	if(exti_freertos_register(htask->hadxl.int1.pin, adxl345_int1) != pdTRUE)
 8006a46:	4b96      	ldr	r3, [pc, #600]	; (8006ca0 <adxl345_task+0x2f0>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	8a9b      	ldrh	r3, [r3, #20]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	4996      	ldr	r1, [pc, #600]	; (8006ca8 <adxl345_task+0x2f8>)
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 fa6b 	bl	8006f2c <exti_freertos_register>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d001      	beq.n	8006a60 <adxl345_task+0xb0>
		Error_Handler();
 8006a5c:	f7fb fc2a 	bl	80022b4 <Error_Handler>
	if(exti_freertos_register(htask->hadxl.int2.pin, adxl345_int2) != pdTRUE)
 8006a60:	4b8f      	ldr	r3, [pc, #572]	; (8006ca0 <adxl345_task+0x2f0>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	8b9b      	ldrh	r3, [r3, #28]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	4990      	ldr	r1, [pc, #576]	; (8006cac <adxl345_task+0x2fc>)
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 fa5e 	bl	8006f2c <exti_freertos_register>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d001      	beq.n	8006a7a <adxl345_task+0xca>
		Error_Handler();
 8006a76:	f7fb fc1d 	bl	80022b4 <Error_Handler>

	/* Notify than init complete */
	xSemaphoreGive(htask->suspend_notify);
 8006a7a:	4b89      	ldr	r3, [pc, #548]	; (8006ca0 <adxl345_task+0x2f0>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006a80:	2300      	movs	r3, #0
 8006a82:	2200      	movs	r2, #0
 8006a84:	2100      	movs	r1, #0
 8006a86:	f003 fa9f 	bl	8009fc8 <xQueueGenericSend>

	/* Event loop */
	while(1)
	{
		xTaskNotifyWait(pdFALSE, UINT32_MAX, &event, portMAX_DELAY);
 8006a8a:	f107 0210 	add.w	r2, r7, #16
 8006a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a92:	f04f 31ff 	mov.w	r1, #4294967295
 8006a96:	2000      	movs	r0, #0
 8006a98:	f004 ffe2 	bl	800ba60 <xTaskNotifyWait>

		switch(state)
 8006a9c:	7dfb      	ldrb	r3, [r7, #23]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <adxl345_task+0xfa>
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	f000 80e2 	beq.w	8006c6c <adxl345_task+0x2bc>
 8006aa8:	e0f9      	b.n	8006c9e <adxl345_task+0x2ee>
		{
		case ADXL345_RUN:
			/* Suspend request */
			if(event & ADXL345_SUSPEND)
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f003 0304 	and.w	r3, r3, #4
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d01e      	beq.n	8006af2 <adxl345_task+0x142>
			{
				/* Stop ADXL345 */
				if(adxl345_stop(&(htask->hadxl)) != ADXL345_OK)
 8006ab4:	4b7a      	ldr	r3, [pc, #488]	; (8006ca0 <adxl345_task+0x2f0>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7ff fe50 	bl	800675e <adxl345_stop>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <adxl345_task+0x118>
					Error_Handler();
 8006ac4:	f7fb fbf6 	bl	80022b4 <Error_Handler>
				/* Flush ADXL345 internal FIFO */
				if(adxl345_fifo_flush(&(htask->hadxl)) != ADXL345_OK)
 8006ac8:	4b75      	ldr	r3, [pc, #468]	; (8006ca0 <adxl345_task+0x2f0>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7ff fe7d 	bl	80067cc <adxl345_fifo_flush>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <adxl345_task+0x12c>
					Error_Handler();
 8006ad8:	f7fb fbec 	bl	80022b4 <Error_Handler>
				xSemaphoreGive(htask->suspend_notify);
 8006adc:	4b70      	ldr	r3, [pc, #448]	; (8006ca0 <adxl345_task+0x2f0>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	f003 fa6e 	bl	8009fc8 <xQueueGenericSend>
				state = ADXL345_STANDBY;
 8006aec:	2301      	movs	r3, #1
 8006aee:	75fb      	strb	r3, [r7, #23]
				break;
 8006af0:	e0d5      	b.n	8006c9e <adxl345_task+0x2ee>
			}
			/* ADXL345 internal FIFO overflow */
			if(event & ADXL345_EXTI2)
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d048      	beq.n	8006b8e <adxl345_task+0x1de>
			{
				if(!adxl345_get_int_src(&(htask->hadxl)) & ADXL345_INT_OVERRUN)
 8006afc:	4b68      	ldr	r3, [pc, #416]	; (8006ca0 <adxl345_task+0x2f0>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff fe83 	bl	800680c <adxl345_get_int_src>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 80c1 	beq.w	8006c90 <adxl345_task+0x2e0>
					break;
				/* Stop ADXL345 */
				if(adxl345_stop(&(htask->hadxl)) != ADXL345_OK)
 8006b0e:	4b64      	ldr	r3, [pc, #400]	; (8006ca0 <adxl345_task+0x2f0>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7ff fe23 	bl	800675e <adxl345_stop>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <adxl345_task+0x172>
					Error_Handler();
 8006b1e:	f7fb fbc9 	bl	80022b4 <Error_Handler>
				/* Flush ADXL345 internal FIFO */
				if(adxl345_fifo_flush(&(htask->hadxl)) != ADXL345_OK)
 8006b22:	4b5f      	ldr	r3, [pc, #380]	; (8006ca0 <adxl345_task+0x2f0>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff fe50 	bl	80067cc <adxl345_fifo_flush>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <adxl345_task+0x186>
					Error_Handler();
 8006b32:	f7fb fbbf 	bl	80022b4 <Error_Handler>
				/* ADXL345 hard fault */
				if(!(event & ADXL345_EXTI1))
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d109      	bne.n	8006b54 <adxl345_task+0x1a4>
					if(adxl345_init(&(htask->hadxl)) != ADXL345_OK)
 8006b40:	4b57      	ldr	r3, [pc, #348]	; (8006ca0 <adxl345_task+0x2f0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff fd1f 	bl	8006588 <adxl345_init>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d001      	beq.n	8006b54 <adxl345_task+0x1a4>
						Error_Handler();
 8006b50:	f7fb fbb0 	bl	80022b4 <Error_Handler>
				/* Start ADXL345 again */
				if(adxl345_start(&(htask->hadxl)) != ADXL345_OK)
 8006b54:	4b52      	ldr	r3, [pc, #328]	; (8006ca0 <adxl345_task+0x2f0>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7ff fdd9 	bl	8006710 <adxl345_start>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <adxl345_task+0x1b8>
					Error_Handler();
 8006b64:	f7fb fba6 	bl	80022b4 <Error_Handler>
				if(adxl345_get_int_src(&(htask->hadxl)) & ADXL345_INT_OVERRUN)
 8006b68:	4b4d      	ldr	r3, [pc, #308]	; (8006ca0 <adxl345_task+0x2f0>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7ff fe4d 	bl	800680c <adxl345_get_int_src>
 8006b72:	4603      	mov	r3, r0
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 808b 	beq.w	8006c94 <adxl345_task+0x2e4>
					xTaskNotify(adxl345_task_id, ADXL345_EXTI2, eSetBits);
 8006b7e:	4b4c      	ldr	r3, [pc, #304]	; (8006cb0 <adxl345_task+0x300>)
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	2300      	movs	r3, #0
 8006b84:	2201      	movs	r2, #1
 8006b86:	2102      	movs	r1, #2
 8006b88:	f004 ffca 	bl	800bb20 <xTaskGenericNotify>
				break;
 8006b8c:	e082      	b.n	8006c94 <adxl345_task+0x2e4>
			}
			/* ADXL345 internal FIFO watermark is exceeded */
			if(event & ADXL345_EXTI1)
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d07f      	beq.n	8006c98 <adxl345_task+0x2e8>
			{
				/* Get burst of data from ADXL345 internal FIFO */

				for(i = 0; i < htask->hadxl.settings.fifo_watermark; i++)
 8006b98:	2300      	movs	r3, #0
 8006b9a:	753b      	strb	r3, [r7, #20]
 8006b9c:	e01c      	b.n	8006bd8 <adxl345_task+0x228>
					adxl345_get_data(&(htask->hadxl),
 8006b9e:	4b40      	ldr	r3, [pc, #256]	; (8006ca0 <adxl345_task+0x2f0>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	461c      	mov	r4, r3
 8006ba4:	4b3f      	ldr	r3, [pc, #252]	; (8006ca4 <adxl345_task+0x2f4>)
 8006ba6:	681a      	ldr	r2, [r3, #0]
						&(fifo_accelerometer_rx[frame_idx*htask->hadxl.settings.fifo_watermark +
 8006ba8:	7d7b      	ldrb	r3, [r7, #21]
 8006baa:	493d      	ldr	r1, [pc, #244]	; (8006ca0 <adxl345_task+0x2f0>)
 8006bac:	6809      	ldr	r1, [r1, #0]
 8006bae:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
 8006bb2:	fb01 f103 	mul.w	r1, r1, r3
							sample_idx++]));
 8006bb6:	7dbb      	ldrb	r3, [r7, #22]
 8006bb8:	1c58      	adds	r0, r3, #1
 8006bba:	75b8      	strb	r0, [r7, #22]
						&(fifo_accelerometer_rx[frame_idx*htask->hadxl.settings.fifo_watermark +
 8006bbc:	440b      	add	r3, r1
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	440b      	add	r3, r1
 8006bc6:	005b      	lsls	r3, r3, #1
					adxl345_get_data(&(htask->hadxl),
 8006bc8:	4413      	add	r3, r2
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f7ff fded 	bl	80067ac <adxl345_get_data>
				for(i = 0; i < htask->hadxl.settings.fifo_watermark; i++)
 8006bd2:	7d3b      	ldrb	r3, [r7, #20]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	753b      	strb	r3, [r7, #20]
 8006bd8:	4b31      	ldr	r3, [pc, #196]	; (8006ca0 <adxl345_task+0x2f0>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006be0:	7d3a      	ldrb	r2, [r7, #20]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d3db      	bcc.n	8006b9e <adxl345_task+0x1ee>
				/* Generate interrupt event if FIFO watermark is still exceeded */
				if(adxl345_get_int_src(&(htask->hadxl)) & ADXL345_INT_WATERMARK)
 8006be6:	4b2e      	ldr	r3, [pc, #184]	; (8006ca0 <adxl345_task+0x2f0>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7ff fe0e 	bl	800680c <adxl345_get_int_src>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d006      	beq.n	8006c08 <adxl345_task+0x258>
					xTaskNotify(adxl345_task_id, ADXL345_EXTI1, eSetBits);
 8006bfa:	4b2d      	ldr	r3, [pc, #180]	; (8006cb0 <adxl345_task+0x300>)
 8006bfc:	6818      	ldr	r0, [r3, #0]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	2201      	movs	r2, #1
 8006c02:	2101      	movs	r1, #1
 8006c04:	f004 ff8c 	bl	800bb20 <xTaskGenericNotify>
				/* Send frame pointer to queue if frame is full, switch to next */
				if(sample_idx >= htask->fifo_frame_size)
 8006c08:	4b25      	ldr	r3, [pc, #148]	; (8006ca0 <adxl345_task+0x2f0>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c10:	7dba      	ldrb	r2, [r7, #22]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d340      	bcc.n	8006c98 <adxl345_task+0x2e8>
				{
					sample_idx = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	75bb      	strb	r3, [r7, #22]
					sample_idx=1;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	75bb      	strb	r3, [r7, #22]
					ptr_to_send = &(fifo_accelerometer_rx[frame_idx*htask->hadxl.settings.fifo_watermark]);
 8006c1e:	4b21      	ldr	r3, [pc, #132]	; (8006ca4 <adxl345_task+0x2f4>)
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	7d7b      	ldrb	r3, [r7, #21]
 8006c24:	491e      	ldr	r1, [pc, #120]	; (8006ca0 <adxl345_task+0x2f0>)
 8006c26:	6809      	ldr	r1, [r1, #0]
 8006c28:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
 8006c2c:	fb01 f303 	mul.w	r3, r1, r3
 8006c30:	4619      	mov	r1, r3
 8006c32:	460b      	mov	r3, r1
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	440b      	add	r3, r1
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	4413      	add	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]
					xQueueSend(htask->fifo_frame_ptr_queue, &ptr_to_send, 0);
 8006c3e:	4b18      	ldr	r3, [pc, #96]	; (8006ca0 <adxl345_task+0x2f0>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f8d3 0039 	ldr.w	r0, [r3, #57]	; 0x39
 8006c46:	f107 010c 	add.w	r1, r7, #12
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f003 f9bb 	bl	8009fc8 <xQueueGenericSend>
					if(++frame_idx >= htask->fifo_frame_qty)
 8006c52:	7d7b      	ldrb	r3, [r7, #21]
 8006c54:	3301      	adds	r3, #1
 8006c56:	757b      	strb	r3, [r7, #21]
 8006c58:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <adxl345_task+0x2f0>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c60:	7d7a      	ldrb	r2, [r7, #21]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d318      	bcc.n	8006c98 <adxl345_task+0x2e8>
						frame_idx = 0;
 8006c66:	2300      	movs	r3, #0
 8006c68:	757b      	strb	r3, [r7, #21]
				}
			}
			break;
 8006c6a:	e015      	b.n	8006c98 <adxl345_task+0x2e8>
		case ADXL345_STANDBY:
			/* Resume request */
			if(event & ADXL345_RESUME)
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f003 0308 	and.w	r3, r3, #8
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d012      	beq.n	8006c9c <adxl345_task+0x2ec>
			{
				/* Start ADXL345 */
				if(adxl345_start(&(htask->hadxl)) != ADXL345_OK)
 8006c76:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <adxl345_task+0x2f0>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7ff fd48 	bl	8006710 <adxl345_start>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <adxl345_task+0x2da>
					Error_Handler();
 8006c86:	f7fb fb15 	bl	80022b4 <Error_Handler>
				state = ADXL345_RUN;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8006c8e:	e005      	b.n	8006c9c <adxl345_task+0x2ec>
					break;
 8006c90:	bf00      	nop
 8006c92:	e6fa      	b.n	8006a8a <adxl345_task+0xda>
				break;
 8006c94:	bf00      	nop
 8006c96:	e6f8      	b.n	8006a8a <adxl345_task+0xda>
			break;
 8006c98:	bf00      	nop
 8006c9a:	e6f6      	b.n	8006a8a <adxl345_task+0xda>
			break;
 8006c9c:	bf00      	nop
		xTaskNotifyWait(pdFALSE, UINT32_MAX, &event, portMAX_DELAY);
 8006c9e:	e6f4      	b.n	8006a8a <adxl345_task+0xda>
 8006ca0:	20000364 	.word	0x20000364
 8006ca4:	20000368 	.word	0x20000368
 8006ca8:	08006d61 	.word	0x08006d61
 8006cac:	08006d8d 	.word	0x08006d8d
 8006cb0:	20000360 	.word	0x20000360

08006cb4 <adxl345_task_create>:
}

osThreadId adxl345_task_create(char *name, osPriority priority,
	uint32_t instances, uint32_t stack_size,
	adxl345_task_handle_t* htask)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b08c      	sub	sp, #48	; 0x30
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	607a      	str	r2, [r7, #4]
 8006cbe:	603b      	str	r3, [r7, #0]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	817b      	strh	r3, [r7, #10]
	/* create semaphores, mutexes and queues */
	htask->fifo_frame_ptr_queue = xQueueCreate(htask->fifo_frame_qty,
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2104      	movs	r1, #4
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f003 f8ea 	bl	8009ea8 <xQueueGenericCreate>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd8:	f8c3 2039 	str.w	r2, [r3, #57]	; 0x39
		sizeof(adxl345_acc_data_t*));
	htask->suspend_notify = xSemaphoreCreateBinary();
 8006cdc:	2203      	movs	r2, #3
 8006cde:	2100      	movs	r1, #0
 8006ce0:	2001      	movs	r0, #1
 8006ce2:	f003 f8e1 	bl	8009ea8 <xQueueGenericCreate>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cea:	635a      	str	r2, [r3, #52]	; 0x34
	
	/* create tread */
	osThreadDef_t thread = {
 8006cec:	f107 0314 	add.w	r3, r7, #20
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	605a      	str	r2, [r3, #4]
 8006cf6:	609a      	str	r2, [r3, #8]
 8006cf8:	60da      	str	r2, [r3, #12]
 8006cfa:	611a      	str	r2, [r3, #16]
 8006cfc:	615a      	str	r2, [r3, #20]
 8006cfe:	619a      	str	r2, [r3, #24]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	617b      	str	r3, [r7, #20]
 8006d04:	4b0d      	ldr	r3, [pc, #52]	; (8006d3c <adxl345_task_create+0x88>)
 8006d06:	61bb      	str	r3, [r7, #24]
 8006d08:	897b      	ldrh	r3, [r7, #10]
 8006d0a:	83bb      	strh	r3, [r7, #28]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	623b      	str	r3, [r7, #32]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	627b      	str	r3, [r7, #36]	; 0x24
		.pthread	= adxl345_task,
		.tpriority	= priority,
		.instances	= instances,
		.stacksize	= stack_size
	};
	taskENTER_CRITICAL();
 8006d14:	f005 f9d2 	bl	800c0bc <vPortEnterCritical>
	adxl345_task_id = osThreadCreate(&thread, (void *) htask);
 8006d18:	f107 0314 	add.w	r3, r7, #20
 8006d1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f002 ff3e 	bl	8009ba0 <osThreadCreate>
 8006d24:	4603      	mov	r3, r0
 8006d26:	4a06      	ldr	r2, [pc, #24]	; (8006d40 <adxl345_task_create+0x8c>)
 8006d28:	6013      	str	r3, [r2, #0]
	taskEXIT_CRITICAL();
 8006d2a:	f005 f9f7 	bl	800c11c <vPortExitCritical>
	return adxl345_task_id;
 8006d2e:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <adxl345_task_create+0x8c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3730      	adds	r7, #48	; 0x30
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	080069b1 	.word	0x080069b1
 8006d40:	20000360 	.word	0x20000360

08006d44 <adxl345_resume>:
{
	return xSemaphoreTake(htask->suspend_notify, timeout);
}

void adxl345_resume(void)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	af00      	add	r7, sp, #0
	xTaskNotify(adxl345_task_id, ADXL345_RESUME, eSetBits);
 8006d48:	4b04      	ldr	r3, [pc, #16]	; (8006d5c <adxl345_resume+0x18>)
 8006d4a:	6818      	ldr	r0, [r3, #0]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	2201      	movs	r2, #1
 8006d50:	2108      	movs	r1, #8
 8006d52:	f004 fee5 	bl	800bb20 <xTaskGenericNotify>
}
 8006d56:	bf00      	nop
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000360 	.word	0x20000360

08006d60 <adxl345_int1>:

static void adxl345_int1(uint16_t pin, BaseType_t* pxHigherPriorityTaskWoken)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af02      	add	r7, sp, #8
 8006d66:	4603      	mov	r3, r0
 8006d68:	6039      	str	r1, [r7, #0]
 8006d6a:	80fb      	strh	r3, [r7, #6]
	xTaskNotifyFromISR(adxl345_task_id, ADXL345_EXTI1, eSetBits,
 8006d6c:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <adxl345_int1+0x28>)
 8006d6e:	6818      	ldr	r0, [r3, #0]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	2300      	movs	r3, #0
 8006d76:	2201      	movs	r2, #1
 8006d78:	2101      	movs	r1, #1
 8006d7a:	f004 ff7b 	bl	800bc74 <xTaskGenericNotifyFromISR>
		pxHigherPriorityTaskWoken);
}
 8006d7e:	bf00      	nop
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20000360 	.word	0x20000360

08006d8c <adxl345_int2>:

static void adxl345_int2(uint16_t pin, BaseType_t* pxHigherPriorityTaskWoken)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af02      	add	r7, sp, #8
 8006d92:	4603      	mov	r3, r0
 8006d94:	6039      	str	r1, [r7, #0]
 8006d96:	80fb      	strh	r3, [r7, #6]
	xTaskNotifyFromISR(adxl345_task_id, ADXL345_EXTI2, eSetBits,
 8006d98:	4b06      	ldr	r3, [pc, #24]	; (8006db4 <adxl345_int2+0x28>)
 8006d9a:	6818      	ldr	r0, [r3, #0]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	2300      	movs	r3, #0
 8006da2:	2201      	movs	r2, #1
 8006da4:	2102      	movs	r1, #2
 8006da6:	f004 ff65 	bl	800bc74 <xTaskGenericNotifyFromISR>
		pxHigherPriorityTaskWoken);
}
 8006daa:	bf00      	nop
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20000360 	.word	0x20000360

08006db8 <adxl345_task_free>:

void adxl345_task_free(void)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
	if (fifo_accelerometer_rx != NULL)
 8006dbc:	4b0b      	ldr	r3, [pc, #44]	; (8006dec <adxl345_task_free+0x34>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d004      	beq.n	8006dce <adxl345_task_free+0x16>
	{
		vPortFree(fifo_accelerometer_rx);
 8006dc4:	4b09      	ldr	r3, [pc, #36]	; (8006dec <adxl345_task_free+0x34>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f005 fb41 	bl	800c450 <vPortFree>
	}
	if (adxl345_task_id != NULL)
 8006dce:	4b08      	ldr	r3, [pc, #32]	; (8006df0 <adxl345_task_free+0x38>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d007      	beq.n	8006de6 <adxl345_task_free+0x2e>
	{
		osThreadTerminate(adxl345_task_id);
 8006dd6:	4b06      	ldr	r3, [pc, #24]	; (8006df0 <adxl345_task_free+0x38>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f002 ff2c 	bl	8009c38 <osThreadTerminate>
		adxl345_task_id = NULL;
 8006de0:	4b03      	ldr	r3, [pc, #12]	; (8006df0 <adxl345_task_free+0x38>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]
	}
}
 8006de6:	bf00      	nop
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20000368 	.word	0x20000368
 8006df0:	20000360 	.word	0x20000360

08006df4 <cobs_encode>:
 * Remove the "restrict" qualifiers if compiling with a
 * pre-C99 C dialect.
 */
size_t cobs_encode(const uint8_t * restrict input, size_t length,
	uint8_t * restrict output)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b089      	sub	sp, #36	; 0x24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
    size_t read_index = 0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	61fb      	str	r3, [r7, #28]
    size_t write_index = 1;
 8006e04:	2301      	movs	r3, #1
 8006e06:	61bb      	str	r3, [r7, #24]
    size_t code_index = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	617b      	str	r3, [r7, #20]
    uint8_t code = 1;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	74fb      	strb	r3, [r7, #19]

    while(read_index < length)
 8006e10:	e031      	b.n	8006e76 <cobs_encode+0x82>
    {
        if(input[read_index] == 0)
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	4413      	add	r3, r2
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10e      	bne.n	8006e3c <cobs_encode+0x48>
        {
            output[code_index] = code;
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	4413      	add	r3, r2
 8006e24:	7cfa      	ldrb	r2, [r7, #19]
 8006e26:	701a      	strb	r2, [r3, #0]
            code = 1;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	74fb      	strb	r3, [r7, #19]
            code_index = write_index++;
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	61ba      	str	r2, [r7, #24]
 8006e32:	617b      	str	r3, [r7, #20]
            read_index++;
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	3301      	adds	r3, #1
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	e01c      	b.n	8006e76 <cobs_encode+0x82>
        }
        else
        {
            output[write_index++] = input[read_index++];
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	61fa      	str	r2, [r7, #28]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	441a      	add	r2, r3
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	1c59      	adds	r1, r3, #1
 8006e4a:	61b9      	str	r1, [r7, #24]
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	440b      	add	r3, r1
 8006e50:	7812      	ldrb	r2, [r2, #0]
 8006e52:	701a      	strb	r2, [r3, #0]
            code++;
 8006e54:	7cfb      	ldrb	r3, [r7, #19]
 8006e56:	3301      	adds	r3, #1
 8006e58:	74fb      	strb	r3, [r7, #19]
            if(code == 0xFF)
 8006e5a:	7cfb      	ldrb	r3, [r7, #19]
 8006e5c:	2bff      	cmp	r3, #255	; 0xff
 8006e5e:	d10a      	bne.n	8006e76 <cobs_encode+0x82>
            {
                output[code_index] = code;
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	4413      	add	r3, r2
 8006e66:	7cfa      	ldrb	r2, [r7, #19]
 8006e68:	701a      	strb	r2, [r3, #0]
                code = 1;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	74fb      	strb	r3, [r7, #19]
                code_index = write_index++;
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	61ba      	str	r2, [r7, #24]
 8006e74:	617b      	str	r3, [r7, #20]
    while(read_index < length)
 8006e76:	69fa      	ldr	r2, [r7, #28]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d3c9      	bcc.n	8006e12 <cobs_encode+0x1e>
            }
        }
    }

    output[code_index] = code;
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	4413      	add	r3, r2
 8006e84:	7cfa      	ldrb	r2, [r7, #19]
 8006e86:	701a      	strb	r2, [r3, #0]

    return write_index;
 8006e88:	69bb      	ldr	r3, [r7, #24]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3724      	adds	r7, #36	; 0x24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bc80      	pop	{r7}
 8006e92:	4770      	bx	lr

08006e94 <cobs_decode>:
 * Remove the "restrict" qualifiers if compiling with a
 * pre-C99 C dialect.
 */
size_t cobs_decode(const uint8_t * restrict input, size_t length,
	uint8_t * restrict output)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b089      	sub	sp, #36	; 0x24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
    size_t read_index = 0;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	61fb      	str	r3, [r7, #28]
    size_t write_index = 0;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	61bb      	str	r3, [r7, #24]
    uint8_t code;
    uint8_t i;

    while(read_index < length)
 8006ea8:	e036      	b.n	8006f18 <cobs_decode+0x84>
    {
        code = input[read_index];
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	4413      	add	r3, r2
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	75bb      	strb	r3, [r7, #22]

        if(read_index + code > length && code != 1)
 8006eb4:	7dba      	ldrb	r2, [r7, #22]
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	4413      	add	r3, r2
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d204      	bcs.n	8006eca <cobs_decode+0x36>
 8006ec0:	7dbb      	ldrb	r3, [r7, #22]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d001      	beq.n	8006eca <cobs_decode+0x36>
        {
            return 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	e02b      	b.n	8006f22 <cobs_decode+0x8e>
        }

        read_index++;
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	61fb      	str	r3, [r7, #28]

        for(i = 1; i < code; i++)
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	75fb      	strb	r3, [r7, #23]
 8006ed4:	e00e      	b.n	8006ef4 <cobs_decode+0x60>
        {
            output[write_index++] = input[read_index++];
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	61fa      	str	r2, [r7, #28]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	441a      	add	r2, r3
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	1c59      	adds	r1, r3, #1
 8006ee4:	61b9      	str	r1, [r7, #24]
 8006ee6:	6879      	ldr	r1, [r7, #4]
 8006ee8:	440b      	add	r3, r1
 8006eea:	7812      	ldrb	r2, [r2, #0]
 8006eec:	701a      	strb	r2, [r3, #0]
        for(i = 1; i < code; i++)
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	75fb      	strb	r3, [r7, #23]
 8006ef4:	7dfa      	ldrb	r2, [r7, #23]
 8006ef6:	7dbb      	ldrb	r3, [r7, #22]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d3ec      	bcc.n	8006ed6 <cobs_decode+0x42>
        }
        if(code != 0xFF && read_index != length)
 8006efc:	7dbb      	ldrb	r3, [r7, #22]
 8006efe:	2bff      	cmp	r3, #255	; 0xff
 8006f00:	d00a      	beq.n	8006f18 <cobs_decode+0x84>
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d006      	beq.n	8006f18 <cobs_decode+0x84>
        {
            output[write_index++] = '\0';
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	61ba      	str	r2, [r7, #24]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	4413      	add	r3, r2
 8006f14:	2200      	movs	r2, #0
 8006f16:	701a      	strb	r2, [r3, #0]
    while(read_index < length)
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d3c4      	bcc.n	8006eaa <cobs_decode+0x16>
        }
    }

    return write_index;
 8006f20:	69bb      	ldr	r3, [r7, #24]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3724      	adds	r7, #36	; 0x24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bc80      	pop	{r7}
 8006f2a:	4770      	bx	lr

08006f2c <exti_freertos_register>:


/* register handler on EXTI GPIO pin */
BaseType_t exti_freertos_register(uint16_t pin,
	void (*handler)(uint16_t pin, BaseType_t* pxHigherPriorityTaskWoken))
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	4603      	mov	r3, r0
 8006f34:	6039      	str	r1, [r7, #0]
 8006f36:	80fb      	strh	r3, [r7, #6]
	if(exti_freertos_find_item(pin) != NULL)
 8006f38:	88fb      	ldrh	r3, [r7, #6]
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 f86c 	bl	8007018 <exti_freertos_find_item>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <exti_freertos_register+0x1e>
		return pdFALSE;
 8006f46:	2300      	movs	r3, #0
 8006f48:	e009      	b.n	8006f5e <exti_freertos_register+0x32>
	taskENTER_CRITICAL();
 8006f4a:	f005 f8b7 	bl	800c0bc <vPortEnterCritical>
	exti_freertos_list_append(pin, handler);
 8006f4e:	88fb      	ldrh	r3, [r7, #6]
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 f830 	bl	8006fb8 <exti_freertos_list_append>
	taskEXIT_CRITICAL();
 8006f58:	f005 f8e0 	bl	800c11c <vPortExitCritical>
	return pdTRUE;
 8006f5c:	2301      	movs	r3, #1
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <HAL_GPIO_EXTI_Callback>:
	taskEXIT_CRITICAL();
}

/* EXTI ISR */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006f72:	2300      	movs	r3, #0
 8006f74:	60bb      	str	r3, [r7, #8]
	exti_freertos_list_t *service = exti_freertos_find_item(GPIO_Pin);
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 f84d 	bl	8007018 <exti_freertos_find_item>
 8006f7e:	60f8      	str	r0, [r7, #12]
	if(service == NULL) return;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d012      	beq.n	8006fac <HAL_GPIO_EXTI_Callback+0x44>
	service->handler(GPIO_Pin, &xHigherPriorityTaskWoken);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f107 0108 	add.w	r1, r7, #8
 8006f8e:	88fa      	ldrh	r2, [r7, #6]
 8006f90:	4610      	mov	r0, r2
 8006f92:	4798      	blx	r3
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d009      	beq.n	8006fae <HAL_GPIO_EXTI_Callback+0x46>
 8006f9a:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8006f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	e000      	b.n	8006fae <HAL_GPIO_EXTI_Callback+0x46>
	if(service == NULL) return;
 8006fac:	bf00      	nop
}
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	e000ed04 	.word	0xe000ed04

08006fb8 <exti_freertos_list_append>:
static exti_freertos_list_t* exti_freertos_list_begin = NULL;

/* Append the item at the end of list */
static exti_freertos_list_t* exti_freertos_list_append(uint16_t pin,
	void (*handler)(uint16_t pin, BaseType_t* pxHigherPriorityTaskWoken))
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	6039      	str	r1, [r7, #0]
 8006fc2:	80fb      	strh	r3, [r7, #6]
	/* creating item */
	exti_freertos_list_t* new_item = (exti_freertos_list_t*)
		pvPortMalloc(sizeof(exti_freertos_list_t));
 8006fc4:	200c      	movs	r0, #12
 8006fc6:	f005 f979 	bl	800c2bc <pvPortMalloc>
 8006fca:	60b8      	str	r0, [r7, #8]
	new_item->pin = pin;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	88fa      	ldrh	r2, [r7, #6]
 8006fd0:	801a      	strh	r2, [r3, #0]
	new_item->handler = handler;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	605a      	str	r2, [r3, #4]
	new_item->next = NULL;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	609a      	str	r2, [r3, #8]
	/* if list is empty, create and return the begin of list */
	if(exti_freertos_list_begin == NULL)
 8006fde:	4b0d      	ldr	r3, [pc, #52]	; (8007014 <exti_freertos_list_append+0x5c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d103      	bne.n	8006fee <exti_freertos_list_append+0x36>
		exti_freertos_list_begin = new_item;
 8006fe6:	4a0b      	ldr	r2, [pc, #44]	; (8007014 <exti_freertos_list_append+0x5c>)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	e00d      	b.n	800700a <exti_freertos_list_append+0x52>
	/* else find end of list and append item at the end of list */
	else
	{
		exti_freertos_list_t *item = exti_freertos_list_begin;
 8006fee:	4b09      	ldr	r3, [pc, #36]	; (8007014 <exti_freertos_list_append+0x5c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60fb      	str	r3, [r7, #12]
		while(item->next != NULL)
 8006ff4:	e002      	b.n	8006ffc <exti_freertos_list_append+0x44>
			item = (exti_freertos_list_t *) item->next;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	60fb      	str	r3, [r7, #12]
		while(item->next != NULL)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1f8      	bne.n	8006ff6 <exti_freertos_list_append+0x3e>
		item->next = (struct exti_freertos_list_t *) new_item;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	609a      	str	r2, [r3, #8]
	}
	return new_item;
 800700a:	68bb      	ldr	r3, [r7, #8]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	2000036c 	.word	0x2000036c

08007018 <exti_freertos_find_item>:
	return item;
}

/* Find item in list with mached pin */
exti_freertos_list_t* exti_freertos_find_item(uint16_t pin)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	80fb      	strh	r3, [r7, #6]
	exti_freertos_list_t *item = exti_freertos_list_begin;
 8007022:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <exti_freertos_find_item+0x38>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 8007028:	e007      	b.n	800703a <exti_freertos_find_item+0x22>
	{
		if(item->pin == pin)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	88fa      	ldrh	r2, [r7, #6]
 8007030:	429a      	cmp	r2, r3
 8007032:	d006      	beq.n	8007042 <exti_freertos_find_item+0x2a>
			break;
		item = (exti_freertos_list_t *) item->next;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1f4      	bne.n	800702a <exti_freertos_find_item+0x12>
 8007040:	e000      	b.n	8007044 <exti_freertos_find_item+0x2c>
			break;
 8007042:	bf00      	nop
	}
	return item;
 8007044:	68fb      	ldr	r3, [r7, #12]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	bc80      	pop	{r7}
 800704e:	4770      	bx	lr
 8007050:	2000036c 	.word	0x2000036c

08007054 <spi_rtos_list_append>:
/* Root of SPI FreeRTOS list */
static struct spi_rtos_list *spi_rtos_list_begin = NULL;

/* Append the item at the end of SPI FreeRTOS list */
static struct spi_rtos_list* spi_rtos_list_append(spi_freertos_t *spi_rtos)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
	/* if list is empty, create and return the begin of list */
	if(spi_rtos_list_begin == NULL)
 800705c:	4b19      	ldr	r3, [pc, #100]	; (80070c4 <spi_rtos_list_append+0x70>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d110      	bne.n	8007086 <spi_rtos_list_append+0x32>
	{
		spi_rtos_list_begin = (struct spi_rtos_list*)
			pvPortMalloc(sizeof(struct spi_rtos_list));
 8007064:	2008      	movs	r0, #8
 8007066:	f005 f929 	bl	800c2bc <pvPortMalloc>
 800706a:	4603      	mov	r3, r0
		spi_rtos_list_begin = (struct spi_rtos_list*)
 800706c:	4a15      	ldr	r2, [pc, #84]	; (80070c4 <spi_rtos_list_append+0x70>)
 800706e:	6013      	str	r3, [r2, #0]
		spi_rtos_list_begin->spi_rtos = spi_rtos;
 8007070:	4b14      	ldr	r3, [pc, #80]	; (80070c4 <spi_rtos_list_append+0x70>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	601a      	str	r2, [r3, #0]
		spi_rtos_list_begin->next = NULL;
 8007078:	4b12      	ldr	r3, [pc, #72]	; (80070c4 <spi_rtos_list_append+0x70>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2200      	movs	r2, #0
 800707e:	605a      	str	r2, [r3, #4]
		return spi_rtos_list_begin;
 8007080:	4b10      	ldr	r3, [pc, #64]	; (80070c4 <spi_rtos_list_append+0x70>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	e01a      	b.n	80070bc <spi_rtos_list_append+0x68>
	}
	/* else find end of list */
	struct spi_rtos_list *item = spi_rtos_list_begin;
 8007086:	4b0f      	ldr	r3, [pc, #60]	; (80070c4 <spi_rtos_list_append+0x70>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	60fb      	str	r3, [r7, #12]
	while(item->next != NULL)
 800708c:	e002      	b.n	8007094 <spi_rtos_list_append+0x40>
		item = item->next;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	60fb      	str	r3, [r7, #12]
	while(item->next != NULL)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1f8      	bne.n	800708e <spi_rtos_list_append+0x3a>
	/* and create and append item at the end of list */
	item->next = (struct spi_rtos_list*)
		pvPortMalloc(sizeof(struct spi_rtos_list));
 800709c:	2008      	movs	r0, #8
 800709e:	f005 f90d 	bl	800c2bc <pvPortMalloc>
 80070a2:	4602      	mov	r2, r0
	item->next = (struct spi_rtos_list*)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	605a      	str	r2, [r3, #4]
	item->next->spi_rtos = spi_rtos;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	601a      	str	r2, [r3, #0]
	item->next->next = NULL;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	605a      	str	r2, [r3, #4]
	return item->next;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	685b      	ldr	r3, [r3, #4]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20000370 	.word	0x20000370

080070c8 <spi_rtos_list_find_item>:
}

/* Find item in SPI FreeRTOS list with mached SPI_HandleTypeDef */
static struct spi_rtos_list* spi_rtos_list_find_item
	(SPI_HandleTypeDef* hspi)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
	struct spi_rtos_list *item = spi_rtos_list_begin;
 80070d0:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <spi_rtos_list_find_item+0x38>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 80070d6:	e008      	b.n	80070ea <spi_rtos_list_find_item+0x22>
	{
		if(item->spi_rtos->hspi == hspi)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d006      	beq.n	80070f2 <spi_rtos_list_find_item+0x2a>
			break;
		else
			item = item->next;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1f3      	bne.n	80070d8 <spi_rtos_list_find_item+0x10>
 80070f0:	e000      	b.n	80070f4 <spi_rtos_list_find_item+0x2c>
			break;
 80070f2:	bf00      	nop
	}
	return item;
 80070f4:	68fb      	ldr	r3, [r7, #12]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bc80      	pop	{r7}
 80070fe:	4770      	bx	lr
 8007100:	20000370 	.word	0x20000370

08007104 <spi_freertos_init>:

/* Initialize SPI with FreeRTOS mutexes and semaphores */
spi_freertos_status spi_freertos_init(spi_freertos_t* spi_rtos)
{	
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
	/* find hspi into list */
	if(spi_rtos_list_find_item(spi_rtos->hspi) != NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4618      	mov	r0, r3
 8007112:	f7ff ffd9 	bl	80070c8 <spi_rtos_list_find_item>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <spi_freertos_init+0x1c>
		return SPI_FREERTOS_EXIST;
 800711c:	2305      	movs	r3, #5
 800711e:	e019      	b.n	8007154 <spi_freertos_init+0x50>
	
	/* if hspi not found, create semaphores and mutexes */
	spi_rtos->mutex = xSemaphoreCreateMutex();
 8007120:	2001      	movs	r0, #1
 8007122:	f002 ff38 	bl	8009f96 <xQueueCreateMutex>
 8007126:	4602      	mov	r2, r0
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	605a      	str	r2, [r3, #4]
	spi_rtos->tx_complete = xSemaphoreCreateBinary();
 800712c:	2203      	movs	r2, #3
 800712e:	2100      	movs	r1, #0
 8007130:	2001      	movs	r0, #1
 8007132:	f002 feb9 	bl	8009ea8 <xQueueGenericCreate>
 8007136:	4602      	mov	r2, r0
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	60da      	str	r2, [r3, #12]
	spi_rtos->rx_complete = xSemaphoreCreateBinary();
 800713c:	2203      	movs	r2, #3
 800713e:	2100      	movs	r1, #0
 8007140:	2001      	movs	r0, #1
 8007142:	f002 feb1 	bl	8009ea8 <xQueueGenericCreate>
 8007146:	4602      	mov	r2, r0
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	609a      	str	r2, [r3, #8]
	
	/* register spi_freertos_base into list */
	spi_rtos_list_append(spi_rtos);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7ff ff81 	bl	8007054 <spi_rtos_list_append>
	return SPI_FREERTOS_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <spi_freertos_set_check_config_callback>:

/* Set callback for check SPI configuration (CPHA, CPOL, rate, etc.)
 * before transaction */
void spi_freertos_set_check_config_callback(spi_freertos_nss_t* spi,
	void (*check_spi_conf_callback)(SPI_HandleTypeDef *hspi))
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
	spi->check_spi_conf_callback = check_spi_conf_callback;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	60da      	str	r2, [r3, #12]
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	bc80      	pop	{r7}
 8007174:	4770      	bx	lr

08007176 <spi_freertos_write>:
/* Write registers through SPI */
spi_freertos_status spi_freertos_write(spi_freertos_nss_t* spi,
	const void* cmd,  size_t cmd_size,
	const void* data, size_t data_size,
	TickType_t mutex_timeout, uint32_t transfer_timeout)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b086      	sub	sp, #24
 800717a:	af00      	add	r7, sp, #0
 800717c:	60f8      	str	r0, [r7, #12]
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	607a      	str	r2, [r7, #4]
 8007182:	603b      	str	r3, [r7, #0]
	spi_freertos_status ret = SPI_FREERTOS_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef hal_ret;
	/* Take SPI mutex */
	if(xSemaphoreTake(spi->spi_rtos->mutex, mutex_timeout) == pdFALSE)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007190:	4618      	mov	r0, r3
 8007192:	f003 f985 	bl	800a4a0 <xQueueSemaphoreTake>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d102      	bne.n	80071a2 <spi_freertos_write+0x2c>
	{
		ret = SPI_FREERTOS_BUSY;
 800719c:	2303      	movs	r3, #3
 800719e:	75fb      	strb	r3, [r7, #23]
		goto exit;
 80071a0:	e060      	b.n	8007264 <spi_freertos_write+0xee>
	}
	
	/* Check and change SPI configuration if nessessary */
	if(spi->check_spi_conf_callback != NULL)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d006      	beq.n	80071b8 <spi_freertos_write+0x42>
		spi->check_spi_conf_callback(spi->spi_rtos->hspi);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	6812      	ldr	r2, [r2, #0]
 80071b2:	6812      	ldr	r2, [r2, #0]
 80071b4:	4610      	mov	r0, r2
 80071b6:	4798      	blx	r3
	
	/* NSS to low - start of transaction */
	spi_freertos_nss_low(spi);
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 f9fd 	bl	80075b8 <spi_freertos_nss_low>
	
	/* Command data write from buffer */
	if(cmd_size == 0) goto data_stage;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d01d      	beq.n	8007200 <spi_freertos_write+0x8a>
	hal_ret = HAL_SPI_Transmit(spi->spi_rtos->hspi,
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d0:	68b9      	ldr	r1, [r7, #8]
 80071d2:	f7fc fcd9 	bl	8003b88 <HAL_SPI_Transmit>
 80071d6:	4603      	mov	r3, r0
 80071d8:	75bb      	strb	r3, [r7, #22]
		(void *) cmd, cmd_size, transfer_timeout);
	switch(hal_ret)
 80071da:	7dbb      	ldrb	r3, [r7, #22]
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d00c      	beq.n	80071fa <spi_freertos_write+0x84>
 80071e0:	2b03      	cmp	r3, #3
 80071e2:	dc0f      	bgt.n	8007204 <spi_freertos_write+0x8e>
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d002      	beq.n	80071ee <spi_freertos_write+0x78>
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d003      	beq.n	80071f4 <spi_freertos_write+0x7e>
			goto end_of_transaction;
		case HAL_TIMEOUT:
			ret = SPI_FREERTOS_TIMEOUT;
			goto end_of_transaction;
		default:
			break;
 80071ec:	e00a      	b.n	8007204 <spi_freertos_write+0x8e>
			ret = SPI_FREERTOS_ERR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 80071f2:	e02c      	b.n	800724e <spi_freertos_write+0xd8>
			ret = SPI_FREERTOS_BUSY;
 80071f4:	2303      	movs	r3, #3
 80071f6:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 80071f8:	e029      	b.n	800724e <spi_freertos_write+0xd8>
			ret = SPI_FREERTOS_TIMEOUT;
 80071fa:	2304      	movs	r3, #4
 80071fc:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 80071fe:	e026      	b.n	800724e <spi_freertos_write+0xd8>
	if(cmd_size == 0) goto data_stage;
 8007200:	bf00      	nop
 8007202:	e000      	b.n	8007206 <spi_freertos_write+0x90>
			break;
 8007204:	bf00      	nop
	}
	
	data_stage:
	if(data_size == 0) goto end_of_transaction;
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01d      	beq.n	8007248 <spi_freertos_write+0xd2>
	
	/* Data write from buffer */
	hal_ret = HAL_SPI_Transmit(spi->spi_rtos->hspi,
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6818      	ldr	r0, [r3, #0]
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	b29a      	uxth	r2, r3
 8007216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	f7fc fcb5 	bl	8003b88 <HAL_SPI_Transmit>
 800721e:	4603      	mov	r3, r0
 8007220:	75bb      	strb	r3, [r7, #22]
		(void *) data, data_size, transfer_timeout);
	switch(hal_ret)
 8007222:	7dbb      	ldrb	r3, [r7, #22]
 8007224:	2b03      	cmp	r3, #3
 8007226:	d00c      	beq.n	8007242 <spi_freertos_write+0xcc>
 8007228:	2b03      	cmp	r3, #3
 800722a:	dc0f      	bgt.n	800724c <spi_freertos_write+0xd6>
 800722c:	2b01      	cmp	r3, #1
 800722e:	d002      	beq.n	8007236 <spi_freertos_write+0xc0>
 8007230:	2b02      	cmp	r3, #2
 8007232:	d003      	beq.n	800723c <spi_freertos_write+0xc6>
			goto end_of_transaction;
		case HAL_TIMEOUT:
			ret = SPI_FREERTOS_TIMEOUT;
			goto end_of_transaction;
		default:
			break;
 8007234:	e00a      	b.n	800724c <spi_freertos_write+0xd6>
			ret = SPI_FREERTOS_ERR;
 8007236:	2301      	movs	r3, #1
 8007238:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 800723a:	e008      	b.n	800724e <spi_freertos_write+0xd8>
			ret = SPI_FREERTOS_BUSY;
 800723c:	2303      	movs	r3, #3
 800723e:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 8007240:	e005      	b.n	800724e <spi_freertos_write+0xd8>
			ret = SPI_FREERTOS_TIMEOUT;
 8007242:	2304      	movs	r3, #4
 8007244:	75fb      	strb	r3, [r7, #23]
			goto end_of_transaction;
 8007246:	e002      	b.n	800724e <spi_freertos_write+0xd8>
	if(data_size == 0) goto end_of_transaction;
 8007248:	bf00      	nop
 800724a:	e000      	b.n	800724e <spi_freertos_write+0xd8>
			break;
 800724c:	bf00      	nop
	}

	end_of_transaction:
	/* NSS to high - end of transaction */
	spi_freertos_nss_high(spi);
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 f99d 	bl	800758e <spi_freertos_nss_high>
	
	/* Give back SPI mutex */
	xSemaphoreGive(spi->spi_rtos->mutex);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6858      	ldr	r0, [r3, #4]
 800725a:	2300      	movs	r3, #0
 800725c:	2200      	movs	r2, #0
 800725e:	2100      	movs	r1, #0
 8007260:	f002 feb2 	bl	8009fc8 <xQueueGenericSend>
	
	exit:
	return ret;
 8007264:	7dfb      	ldrb	r3, [r7, #23]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <spi_freertos_read>:
/* Read registers through SPI */
spi_freertos_status spi_freertos_read(spi_freertos_nss_t* spi,
	const void* cmd,  size_t cmd_size,
	const void* data, size_t data_size,
	TickType_t mutex_timeout, uint32_t transfer_timeout)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b086      	sub	sp, #24
 8007272:	af00      	add	r7, sp, #0
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	607a      	str	r2, [r7, #4]
 800727a:	603b      	str	r3, [r7, #0]
	spi_freertos_status ret = SPI_FREERTOS_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef hal_ret;
	/* Take SPI mutex */
	if(xSemaphoreTake(spi->spi_rtos->mutex, mutex_timeout) == pdFALSE)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007288:	4618      	mov	r0, r3
 800728a:	f003 f909 	bl	800a4a0 <xQueueSemaphoreTake>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d102      	bne.n	800729a <spi_freertos_read+0x2c>
	{
		ret = SPI_FREERTOS_BUSY;
 8007294:	2303      	movs	r3, #3
 8007296:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8007298:	e060      	b.n	800735c <spi_freertos_read+0xee>
	}
	
	/* Check and change SPI configuration if nessessary */
	if(spi->check_spi_conf_callback != NULL)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d006      	beq.n	80072b0 <spi_freertos_read+0x42>
		spi->check_spi_conf_callback(spi->spi_rtos->hspi);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	6812      	ldr	r2, [r2, #0]
 80072aa:	6812      	ldr	r2, [r2, #0]
 80072ac:	4610      	mov	r0, r2
 80072ae:	4798      	blx	r3
	
	/* NSS to low - start of transaction */
	spi_freertos_nss_low(spi);
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 f981 	bl	80075b8 <spi_freertos_nss_low>
	
	/* Command data write from buffer */
	if(cmd_size == 0) goto data_stage;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d01d      	beq.n	80072f8 <spi_freertos_read+0x8a>
	hal_ret = HAL_SPI_Transmit(spi->spi_rtos->hspi,
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	68b9      	ldr	r1, [r7, #8]
 80072ca:	f7fc fc5d 	bl	8003b88 <HAL_SPI_Transmit>
 80072ce:	4603      	mov	r3, r0
 80072d0:	75bb      	strb	r3, [r7, #22]
		(void *) cmd, cmd_size, transfer_timeout);
	switch(hal_ret)
 80072d2:	7dbb      	ldrb	r3, [r7, #22]
 80072d4:	2b03      	cmp	r3, #3
 80072d6:	d00c      	beq.n	80072f2 <spi_freertos_read+0x84>
 80072d8:	2b03      	cmp	r3, #3
 80072da:	dc0f      	bgt.n	80072fc <spi_freertos_read+0x8e>
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d002      	beq.n	80072e6 <spi_freertos_read+0x78>
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d003      	beq.n	80072ec <spi_freertos_read+0x7e>
		goto end_of_transaction;
	case HAL_TIMEOUT:
		ret = SPI_FREERTOS_TIMEOUT;
		goto end_of_transaction;
	default:
		break;
 80072e4:	e00a      	b.n	80072fc <spi_freertos_read+0x8e>
		ret = SPI_FREERTOS_ERR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 80072ea:	e02c      	b.n	8007346 <spi_freertos_read+0xd8>
		ret = SPI_FREERTOS_BUSY;
 80072ec:	2303      	movs	r3, #3
 80072ee:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 80072f0:	e029      	b.n	8007346 <spi_freertos_read+0xd8>
		ret = SPI_FREERTOS_TIMEOUT;
 80072f2:	2304      	movs	r3, #4
 80072f4:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 80072f6:	e026      	b.n	8007346 <spi_freertos_read+0xd8>
	if(cmd_size == 0) goto data_stage;
 80072f8:	bf00      	nop
 80072fa:	e000      	b.n	80072fe <spi_freertos_read+0x90>
		break;
 80072fc:	bf00      	nop
	}
	
	data_stage:
	if(data_size == 0) goto end_of_transaction;
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01d      	beq.n	8007340 <spi_freertos_read+0xd2>
	
	/* Data read to buffer */
	hal_ret = HAL_SPI_Receive(spi->spi_rtos->hspi,
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6818      	ldr	r0, [r3, #0]
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	b29a      	uxth	r2, r3
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	f7fc fd75 	bl	8003e00 <HAL_SPI_Receive>
 8007316:	4603      	mov	r3, r0
 8007318:	75bb      	strb	r3, [r7, #22]
		(void *) data, data_size, transfer_timeout);
	switch(hal_ret)
 800731a:	7dbb      	ldrb	r3, [r7, #22]
 800731c:	2b03      	cmp	r3, #3
 800731e:	d00c      	beq.n	800733a <spi_freertos_read+0xcc>
 8007320:	2b03      	cmp	r3, #3
 8007322:	dc0f      	bgt.n	8007344 <spi_freertos_read+0xd6>
 8007324:	2b01      	cmp	r3, #1
 8007326:	d002      	beq.n	800732e <spi_freertos_read+0xc0>
 8007328:	2b02      	cmp	r3, #2
 800732a:	d003      	beq.n	8007334 <spi_freertos_read+0xc6>
		goto end_of_transaction;
	case HAL_TIMEOUT:
		ret = SPI_FREERTOS_TIMEOUT;
		goto end_of_transaction;
	default:
		break;
 800732c:	e00a      	b.n	8007344 <spi_freertos_read+0xd6>
		ret = SPI_FREERTOS_ERR;
 800732e:	2301      	movs	r3, #1
 8007330:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8007332:	e008      	b.n	8007346 <spi_freertos_read+0xd8>
		ret = SPI_FREERTOS_BUSY;
 8007334:	2303      	movs	r3, #3
 8007336:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8007338:	e005      	b.n	8007346 <spi_freertos_read+0xd8>
		ret = SPI_FREERTOS_TIMEOUT;
 800733a:	2304      	movs	r3, #4
 800733c:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 800733e:	e002      	b.n	8007346 <spi_freertos_read+0xd8>
	if(data_size == 0) goto end_of_transaction;
 8007340:	bf00      	nop
 8007342:	e000      	b.n	8007346 <spi_freertos_read+0xd8>
		break;
 8007344:	bf00      	nop
	}

	end_of_transaction:
	/* NSS to high - end of transaction */
	spi_freertos_nss_high(spi);
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 f921 	bl	800758e <spi_freertos_nss_high>
	
	/* Give back SPI mutex */
	xSemaphoreGive(spi->spi_rtos->mutex);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6858      	ldr	r0, [r3, #4]
 8007352:	2300      	movs	r3, #0
 8007354:	2200      	movs	r2, #0
 8007356:	2100      	movs	r1, #0
 8007358:	f002 fe36 	bl	8009fc8 <xQueueGenericSend>
	
	exit:
	return ret;
 800735c:	7dfb      	ldrb	r3, [r7, #23]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <spi_freertos_write_dma>:
/* Write registers through SPI using DMA */
spi_freertos_status spi_freertos_write_dma(spi_freertos_nss_t* spi,
	const void* cmd,  size_t cmd_size,
	const void* data, size_t data_size,
	TickType_t mutex_timeout, TickType_t transfer_timeout)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b086      	sub	sp, #24
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	607a      	str	r2, [r7, #4]
 8007372:	603b      	str	r3, [r7, #0]
	spi_freertos_status ret = SPI_FREERTOS_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef hal_ret;
	/* Take SPI mutex */
	if(xSemaphoreTake(spi->spi_rtos->mutex, mutex_timeout) == pdFALSE)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007380:	4618      	mov	r0, r3
 8007382:	f003 f88d 	bl	800a4a0 <xQueueSemaphoreTake>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d102      	bne.n	8007392 <spi_freertos_write_dma+0x2c>
	{
		ret = SPI_FREERTOS_BUSY;
 800738c:	2303      	movs	r3, #3
 800738e:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8007390:	e06e      	b.n	8007470 <spi_freertos_write_dma+0x10a>
	}
	
	/* Check and change SPI configuration if nessessary */
	if(spi->check_spi_conf_callback != NULL)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d006      	beq.n	80073a8 <spi_freertos_write_dma+0x42>
		spi->check_spi_conf_callback(spi->spi_rtos->hspi);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	6812      	ldr	r2, [r2, #0]
 80073a2:	6812      	ldr	r2, [r2, #0]
 80073a4:	4610      	mov	r0, r2
 80073a6:	4798      	blx	r3
	
	/* NSS to low - start of transaction */
	spi_freertos_nss_low(spi);
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f905 	bl	80075b8 <spi_freertos_nss_low>
	
	/* Command data DMA write from buffer */
	if(cmd_size == 0) goto data_stage;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d024      	beq.n	80073fe <spi_freertos_write_dma+0x98>
	hal_ret = HAL_SPI_Transmit_DMA(spi->spi_rtos->hspi,
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	b292      	uxth	r2, r2
 80073be:	68b9      	ldr	r1, [r7, #8]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fc ffd1 	bl	8004368 <HAL_SPI_Transmit_DMA>
 80073c6:	4603      	mov	r3, r0
 80073c8:	75bb      	strb	r3, [r7, #22]
		(void *) cmd, cmd_size);
	switch(hal_ret)
 80073ca:	7dbb      	ldrb	r3, [r7, #22]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d00d      	beq.n	80073ec <spi_freertos_write_dma+0x86>
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d00e      	beq.n	80073f2 <spi_freertos_write_dma+0x8c>
		goto end_of_transaction;
	case HAL_BUSY:
		ret = SPI_FREERTOS_BUSY;
		goto end_of_transaction;
	default:
		break;
 80073d4:	bf00      	nop
	}
	
	/* Waiting for transfer complete */
	if(xSemaphoreTake(spi->spi_rtos->tx_complete, transfer_timeout)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073de:	4618      	mov	r0, r3
 80073e0:	f003 f85e 	bl	800a4a0 <xQueueSemaphoreTake>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10b      	bne.n	8007402 <spi_freertos_write_dma+0x9c>
 80073ea:	e005      	b.n	80073f8 <spi_freertos_write_dma+0x92>
		ret = SPI_FREERTOS_ERR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 80073f0:	e033      	b.n	800745a <spi_freertos_write_dma+0xf4>
		ret = SPI_FREERTOS_BUSY;
 80073f2:	2303      	movs	r3, #3
 80073f4:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 80073f6:	e030      	b.n	800745a <spi_freertos_write_dma+0xf4>
		== pdFALSE)
	{
		ret = SPI_FREERTOS_TIMEOUT;
 80073f8:	2304      	movs	r3, #4
 80073fa:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 80073fc:	e02d      	b.n	800745a <spi_freertos_write_dma+0xf4>
	if(cmd_size == 0) goto data_stage;
 80073fe:	bf00      	nop
 8007400:	e000      	b.n	8007404 <spi_freertos_write_dma+0x9e>
	}
	
	data_stage:
 8007402:	bf00      	nop
	if(data_size == 0) goto end_of_transaction;
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d024      	beq.n	8007454 <spi_freertos_write_dma+0xee>
	
	/* Data DMA write from buffer */
	hal_ret = HAL_SPI_Transmit_DMA(spi->spi_rtos->hspi,
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6a3a      	ldr	r2, [r7, #32]
 8007412:	b292      	uxth	r2, r2
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	4618      	mov	r0, r3
 8007418:	f7fc ffa6 	bl	8004368 <HAL_SPI_Transmit_DMA>
 800741c:	4603      	mov	r3, r0
 800741e:	75bb      	strb	r3, [r7, #22]
		(void *) data, data_size);
	switch(hal_ret)
 8007420:	7dbb      	ldrb	r3, [r7, #22]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d00d      	beq.n	8007442 <spi_freertos_write_dma+0xdc>
 8007426:	2b02      	cmp	r3, #2
 8007428:	d00e      	beq.n	8007448 <spi_freertos_write_dma+0xe2>
		goto end_of_transaction;
	case HAL_BUSY:
		ret = SPI_FREERTOS_BUSY;
		goto end_of_transaction;
	default:
		break;
 800742a:	bf00      	nop
	}
	
	/* Waiting for transfer complete */
	if(xSemaphoreTake(spi->spi_rtos->tx_complete, transfer_timeout)	== pdFALSE)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007434:	4618      	mov	r0, r3
 8007436:	f003 f833 	bl	800a4a0 <xQueueSemaphoreTake>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10b      	bne.n	8007458 <spi_freertos_write_dma+0xf2>
 8007440:	e005      	b.n	800744e <spi_freertos_write_dma+0xe8>
		ret = SPI_FREERTOS_ERR;
 8007442:	2301      	movs	r3, #1
 8007444:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8007446:	e008      	b.n	800745a <spi_freertos_write_dma+0xf4>
		ret = SPI_FREERTOS_BUSY;
 8007448:	2303      	movs	r3, #3
 800744a:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 800744c:	e005      	b.n	800745a <spi_freertos_write_dma+0xf4>
	{
		ret = SPI_FREERTOS_TIMEOUT;
 800744e:	2304      	movs	r3, #4
 8007450:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8007452:	e002      	b.n	800745a <spi_freertos_write_dma+0xf4>
	if(data_size == 0) goto end_of_transaction;
 8007454:	bf00      	nop
 8007456:	e000      	b.n	800745a <spi_freertos_write_dma+0xf4>
	}
	
	end_of_transaction:
 8007458:	bf00      	nop
	/* NSS to high - end of transaction */
	spi_freertos_nss_high(spi);
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 f897 	bl	800758e <spi_freertos_nss_high>
	
	/* Give back SPI mutex */
	xSemaphoreGive(spi->spi_rtos->mutex);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6858      	ldr	r0, [r3, #4]
 8007466:	2300      	movs	r3, #0
 8007468:	2200      	movs	r2, #0
 800746a:	2100      	movs	r1, #0
 800746c:	f002 fdac 	bl	8009fc8 <xQueueGenericSend>
	
	exit:
	return ret;
 8007470:	7dfb      	ldrb	r3, [r7, #23]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <spi_freertos_read_dma>:
/* Read registers through SPI using DMA */
spi_freertos_status spi_freertos_read_dma(spi_freertos_nss_t* spi,
	const void* cmd,  size_t cmd_size,
	const void* data, size_t data_size,
	TickType_t mutex_timeout, TickType_t transfer_timeout)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b086      	sub	sp, #24
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	60b9      	str	r1, [r7, #8]
 8007484:	607a      	str	r2, [r7, #4]
 8007486:	603b      	str	r3, [r7, #0]
	spi_freertos_status ret = SPI_FREERTOS_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef hal_ret;
	/* Take SPI mutex */
	if(xSemaphoreTake(spi->spi_rtos->mutex, mutex_timeout) == pdFALSE)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007494:	4618      	mov	r0, r3
 8007496:	f003 f803 	bl	800a4a0 <xQueueSemaphoreTake>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d102      	bne.n	80074a6 <spi_freertos_read_dma+0x2c>
	{
		ret = SPI_FREERTOS_BUSY;
 80074a0:	2303      	movs	r3, #3
 80074a2:	75fb      	strb	r3, [r7, #23]
		goto exit;
 80074a4:	e06e      	b.n	8007584 <spi_freertos_read_dma+0x10a>
	}
	
	/* Check and change SPI configuration if nessessary */
	if(spi->check_spi_conf_callback != NULL)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d006      	beq.n	80074bc <spi_freertos_read_dma+0x42>
		spi->check_spi_conf_callback(spi->spi_rtos->hspi);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	6812      	ldr	r2, [r2, #0]
 80074b6:	6812      	ldr	r2, [r2, #0]
 80074b8:	4610      	mov	r0, r2
 80074ba:	4798      	blx	r3
	
	/* NSS to low - start of transaction */
	spi_freertos_nss_low(spi);
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f87b 	bl	80075b8 <spi_freertos_nss_low>
	
	/* Command data DMA write from buffer */
	if(cmd_size == 0) goto data_stage;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d024      	beq.n	8007512 <spi_freertos_read_dma+0x98>
	hal_ret = HAL_SPI_Transmit_DMA(spi->spi_rtos->hspi,
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	b292      	uxth	r2, r2
 80074d2:	68b9      	ldr	r1, [r7, #8]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fc ff47 	bl	8004368 <HAL_SPI_Transmit_DMA>
 80074da:	4603      	mov	r3, r0
 80074dc:	75bb      	strb	r3, [r7, #22]
		(void *) cmd, cmd_size);
	switch(hal_ret)
 80074de:	7dbb      	ldrb	r3, [r7, #22]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d00d      	beq.n	8007500 <spi_freertos_read_dma+0x86>
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d00e      	beq.n	8007506 <spi_freertos_read_dma+0x8c>
		goto end_of_transaction;
	case HAL_BUSY:
		ret = SPI_FREERTOS_BUSY;
		goto end_of_transaction;
	default:
		break;
 80074e8:	bf00      	nop
	}
	
	/* Waiting for transfer complete */
	if(xSemaphoreTake(spi->spi_rtos->tx_complete, transfer_timeout)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074f2:	4618      	mov	r0, r3
 80074f4:	f002 ffd4 	bl	800a4a0 <xQueueSemaphoreTake>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10b      	bne.n	8007516 <spi_freertos_read_dma+0x9c>
 80074fe:	e005      	b.n	800750c <spi_freertos_read_dma+0x92>
		ret = SPI_FREERTOS_ERR;
 8007500:	2301      	movs	r3, #1
 8007502:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8007504:	e033      	b.n	800756e <spi_freertos_read_dma+0xf4>
		ret = SPI_FREERTOS_BUSY;
 8007506:	2303      	movs	r3, #3
 8007508:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 800750a:	e030      	b.n	800756e <spi_freertos_read_dma+0xf4>
		== pdFALSE)
	{
		ret = SPI_FREERTOS_TIMEOUT;
 800750c:	2304      	movs	r3, #4
 800750e:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8007510:	e02d      	b.n	800756e <spi_freertos_read_dma+0xf4>
	if(cmd_size == 0) goto data_stage;
 8007512:	bf00      	nop
 8007514:	e000      	b.n	8007518 <spi_freertos_read_dma+0x9e>
	}
	
	data_stage:
 8007516:	bf00      	nop
	if(data_size == 0) goto end_of_transaction;
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d024      	beq.n	8007568 <spi_freertos_read_dma+0xee>
	
	/* Data DMA read to buffer */
	hal_ret = HAL_SPI_Receive_DMA(spi->spi_rtos->hspi,
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6a3a      	ldr	r2, [r7, #32]
 8007526:	b292      	uxth	r2, r2
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	4618      	mov	r0, r3
 800752c:	f7fc ffd2 	bl	80044d4 <HAL_SPI_Receive_DMA>
 8007530:	4603      	mov	r3, r0
 8007532:	75bb      	strb	r3, [r7, #22]
		(void *) data, data_size);
	switch(hal_ret)
 8007534:	7dbb      	ldrb	r3, [r7, #22]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d00d      	beq.n	8007556 <spi_freertos_read_dma+0xdc>
 800753a:	2b02      	cmp	r3, #2
 800753c:	d00e      	beq.n	800755c <spi_freertos_read_dma+0xe2>
		goto end_of_transaction;
	case HAL_BUSY:
		ret = SPI_FREERTOS_BUSY;
		goto end_of_transaction;
	default:
		break;
 800753e:	bf00      	nop
	}
	
	/* Waiting for transfer complete */
	if(xSemaphoreTake(spi->spi_rtos->rx_complete, transfer_timeout)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007548:	4618      	mov	r0, r3
 800754a:	f002 ffa9 	bl	800a4a0 <xQueueSemaphoreTake>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10b      	bne.n	800756c <spi_freertos_read_dma+0xf2>
 8007554:	e005      	b.n	8007562 <spi_freertos_read_dma+0xe8>
		ret = SPI_FREERTOS_ERR;
 8007556:	2301      	movs	r3, #1
 8007558:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 800755a:	e008      	b.n	800756e <spi_freertos_read_dma+0xf4>
		ret = SPI_FREERTOS_BUSY;
 800755c:	2303      	movs	r3, #3
 800755e:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8007560:	e005      	b.n	800756e <spi_freertos_read_dma+0xf4>
		== pdFALSE)
	{
		ret = SPI_FREERTOS_TIMEOUT;
 8007562:	2304      	movs	r3, #4
 8007564:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8007566:	e002      	b.n	800756e <spi_freertos_read_dma+0xf4>
	if(data_size == 0) goto end_of_transaction;
 8007568:	bf00      	nop
 800756a:	e000      	b.n	800756e <spi_freertos_read_dma+0xf4>
	}
	
	end_of_transaction:
 800756c:	bf00      	nop
	/* NSS to high - end of transaction */
	spi_freertos_nss_high(spi);
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 f80d 	bl	800758e <spi_freertos_nss_high>
	
	/* Give back SPI mutex */
	xSemaphoreGive(spi->spi_rtos->mutex);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6858      	ldr	r0, [r3, #4]
 800757a:	2300      	movs	r3, #0
 800757c:	2200      	movs	r2, #0
 800757e:	2100      	movs	r1, #0
 8007580:	f002 fd22 	bl	8009fc8 <xQueueGenericSend>
	
	exit:
	return ret;
 8007584:	7dfb      	ldrb	r3, [r7, #23]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <spi_freertos_nss_high>:
	return ret;
}

/* Set NSS pin to high */
inline void spi_freertos_nss_high(spi_freertos_nss_t* spi)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
	if(spi->nss.port != NULL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d008      	beq.n	80075b0 <spi_freertos_nss_high+0x22>
		HAL_GPIO_WritePin(spi->nss.port, spi->nss.pin, GPIO_PIN_SET);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6858      	ldr	r0, [r3, #4]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	891b      	ldrh	r3, [r3, #8]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	2201      	movs	r2, #1
 80075aa:	4619      	mov	r1, r3
 80075ac:	f7fb fdbc 	bl	8003128 <HAL_GPIO_WritePin>
}
 80075b0:	bf00      	nop
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <spi_freertos_nss_low>:

/* Set NSS pin to low */
inline void spi_freertos_nss_low(spi_freertos_nss_t* spi)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
	if(spi->nss.port != NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d008      	beq.n	80075da <spi_freertos_nss_low+0x22>
		HAL_GPIO_WritePin(spi->nss.port, spi->nss.pin, GPIO_PIN_RESET);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6858      	ldr	r0, [r3, #4]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	891b      	ldrh	r3, [r3, #8]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2200      	movs	r2, #0
 80075d4:	4619      	mov	r1, r3
 80075d6:	f7fb fda7 	bl	8003128 <HAL_GPIO_WritePin>
}
 80075da:	bf00      	nop
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi);
*/

/* RX complete */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80075ec:	2300      	movs	r3, #0
 80075ee:	60bb      	str	r3, [r7, #8]
	struct spi_rtos_list *item = spi_rtos_list_find_item(hspi);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7ff fd69 	bl	80070c8 <spi_rtos_list_find_item>
 80075f6:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d014      	beq.n	8007628 <HAL_SPI_RxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->spi_rtos->rx_complete,
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f107 0208 	add.w	r2, r7, #8
 8007608:	4611      	mov	r1, r2
 800760a:	4618      	mov	r0, r3
 800760c:	f002 fdda 	bl	800a1c4 <xQueueGiveFromISR>
		&xHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d009      	beq.n	800762a <HAL_SPI_RxCpltCallback+0x46>
 8007616:	4b06      	ldr	r3, [pc, #24]	; (8007630 <HAL_SPI_RxCpltCallback+0x4c>)
 8007618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	e000      	b.n	800762a <HAL_SPI_RxCpltCallback+0x46>
	if(item == NULL) return;
 8007628:	bf00      	nop
}
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	e000ed04 	.word	0xe000ed04

08007634 <HAL_SPI_TxCpltCallback>:

/* TX complete */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800763c:	2300      	movs	r3, #0
 800763e:	60bb      	str	r3, [r7, #8]
	struct spi_rtos_list *item = spi_rtos_list_find_item(hspi);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7ff fd41 	bl	80070c8 <spi_rtos_list_find_item>
 8007646:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d014      	beq.n	8007678 <HAL_SPI_TxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->spi_rtos->tx_complete,
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f107 0208 	add.w	r2, r7, #8
 8007658:	4611      	mov	r1, r2
 800765a:	4618      	mov	r0, r3
 800765c:	f002 fdb2 	bl	800a1c4 <xQueueGiveFromISR>
		&xHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d009      	beq.n	800767a <HAL_SPI_TxCpltCallback+0x46>
 8007666:	4b06      	ldr	r3, [pc, #24]	; (8007680 <HAL_SPI_TxCpltCallback+0x4c>)
 8007668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	e000      	b.n	800767a <HAL_SPI_TxCpltCallback+0x46>
	if(item == NULL) return;
 8007678:	bf00      	nop
}
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	e000ed04 	.word	0xe000ed04

08007684 <HAL_SPI_TxRxCpltCallback>:

/* Full-duplex complete - rx_complete semaphore is used*/
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800768c:	2300      	movs	r3, #0
 800768e:	60bb      	str	r3, [r7, #8]
	struct spi_rtos_list *item = spi_rtos_list_find_item(hspi);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7ff fd19 	bl	80070c8 <spi_rtos_list_find_item>
 8007696:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d014      	beq.n	80076c8 <HAL_SPI_TxRxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->spi_rtos->rx_complete,
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f107 0208 	add.w	r2, r7, #8
 80076a8:	4611      	mov	r1, r2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f002 fd8a 	bl	800a1c4 <xQueueGiveFromISR>
		&xHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d009      	beq.n	80076ca <HAL_SPI_TxRxCpltCallback+0x46>
 80076b6:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <HAL_SPI_TxRxCpltCallback+0x4c>)
 80076b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	e000      	b.n	80076ca <HAL_SPI_TxRxCpltCallback+0x46>
	if(item == NULL) return;
 80076c8:	bf00      	nop
}
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	e000ed04 	.word	0xe000ed04

080076d4 <uart_cobs_send>:
#include "cobs.h"
#include "uart_cobs_service.h"

size_t uart_cobs_send(uart_cobs_service_t* h, void* data, size_t size,
	TickType_t timeout)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
	if(h->input_queue == NULL)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f8d3 300a 	ldr.w	r3, [r3, #10]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <uart_cobs_send+0x1c>
		return 0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	e012      	b.n	8007716 <uart_cobs_send+0x42>
	uart_cobs_frame_t frame;
	frame.data = data;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	613b      	str	r3, [r7, #16]
	frame.size = size;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	617b      	str	r3, [r7, #20]
	if(xQueueSend(h->input_queue, &frame, timeout) == pdFALSE)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8d3 000a 	ldr.w	r0, [r3, #10]
 80076fe:	f107 0110 	add.w	r1, r7, #16
 8007702:	2300      	movs	r3, #0
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	f002 fc5f 	bl	8009fc8 <xQueueGenericSend>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <uart_cobs_send+0x40>
		return 0;
 8007710:	2300      	movs	r3, #0
 8007712:	e000      	b.n	8007716 <uart_cobs_send+0x42>
	else
		return size;
 8007714:	687b      	ldr	r3, [r7, #4]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <uart_cobs_service_rx_task>:
static uint8_t *framebuffer_rx;
static uint8_t *buf_rx;
static osThreadId uart_cobs_service_rx_task_id = NULL;

void uart_cobs_service_rx_task(void const * argument)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08a      	sub	sp, #40	; 0x28
 8007724:	af02      	add	r7, sp, #8
 8007726:	6078      	str	r0, [r7, #4]
	uart_cobs_service_t* h = (uart_cobs_service_t *) argument;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	61bb      	str	r3, [r7, #24]
	h->output_queue = xQueueCreate(h->queue_depth, sizeof(uart_cobs_frame_t));
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	7a1b      	ldrb	r3, [r3, #8]
 8007730:	2200      	movs	r2, #0
 8007732:	2108      	movs	r1, #8
 8007734:	4618      	mov	r0, r3
 8007736:	f002 fbb7 	bl	8009ea8 <xQueueGenericCreate>
 800773a:	4602      	mov	r2, r0
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	f8c3 200e 	str.w	r2, [r3, #14]
	/* Frame buffer */
	framebuffer_rx = pvPortMalloc(h->queue_depth*h->max_frame_size);
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	7a1b      	ldrb	r3, [r3, #8]
 8007746:	461a      	mov	r2, r3
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	fb03 f302 	mul.w	r3, r3, r2
 8007750:	4618      	mov	r0, r3
 8007752:	f004 fdb3 	bl	800c2bc <pvPortMalloc>
 8007756:	4603      	mov	r3, r0
 8007758:	4a6f      	ldr	r2, [pc, #444]	; (8007918 <uart_cobs_service_rx_task+0x1f8>)
 800775a:	6013      	str	r3, [r2, #0]
	if(!framebuffer_rx) Error_Handler();
 800775c:	4b6e      	ldr	r3, [pc, #440]	; (8007918 <uart_cobs_service_rx_task+0x1f8>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <uart_cobs_service_rx_task+0x48>
 8007764:	f7fa fda6 	bl	80022b4 <Error_Handler>
	/* Buffer for COBS */
	size_t cobs_buffer_size = h->max_frame_size + h->max_frame_size/254 + 2;
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	085b      	lsrs	r3, r3, #1
 8007772:	496a      	ldr	r1, [pc, #424]	; (800791c <uart_cobs_service_rx_task+0x1fc>)
 8007774:	fba1 1303 	umull	r1, r3, r1, r3
 8007778:	099b      	lsrs	r3, r3, #6
 800777a:	4413      	add	r3, r2
 800777c:	3302      	adds	r3, #2
 800777e:	617b      	str	r3, [r7, #20]
	buf_rx = pvPortMalloc(cobs_buffer_size);
 8007780:	6978      	ldr	r0, [r7, #20]
 8007782:	f004 fd9b 	bl	800c2bc <pvPortMalloc>
 8007786:	4603      	mov	r3, r0
 8007788:	4a65      	ldr	r2, [pc, #404]	; (8007920 <uart_cobs_service_rx_task+0x200>)
 800778a:	6013      	str	r3, [r2, #0]
	if(!buf_rx) Error_Handler();
 800778c:	4b64      	ldr	r3, [pc, #400]	; (8007920 <uart_cobs_service_rx_task+0x200>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <uart_cobs_service_rx_task+0x78>
 8007794:	f7fa fd8e 	bl	80022b4 <Error_Handler>
	uart_freertos_status_t status = {0};
 8007798:	f107 0310 	add.w	r3, r7, #16
 800779c:	2100      	movs	r1, #0
 800779e:	460a      	mov	r2, r1
 80077a0:	801a      	strh	r2, [r3, #0]
 80077a2:	460a      	mov	r2, r1
 80077a4:	709a      	strb	r2, [r3, #2]
	size_t size = 0;
 80077a6:	2300      	movs	r3, #0
 80077a8:	61fb      	str	r3, [r7, #28]
	/* Data frame handler */
	uart_cobs_frame_t frame = {.data = NULL, .size = 0};
 80077aa:	2300      	movs	r3, #0
 80077ac:	60bb      	str	r3, [r7, #8]
 80077ae:	2300      	movs	r3, #0
 80077b0:	60fb      	str	r3, [r7, #12]
	frame.data = (void *) framebuffer_rx;
 80077b2:	4b59      	ldr	r3, [pc, #356]	; (8007918 <uart_cobs_service_rx_task+0x1f8>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		size = 0;
 80077b8:	2300      	movs	r3, #0
 80077ba:	61fb      	str	r3, [r7, #28]
		do
		{
			switch(h->mode)
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	7a5b      	ldrb	r3, [r3, #9]
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d044      	beq.n	800784e <uart_cobs_service_rx_task+0x12e>
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	dc69      	bgt.n	800789c <uart_cobs_service_rx_task+0x17c>
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <uart_cobs_service_rx_task+0xb2>
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d01f      	beq.n	8007810 <uart_cobs_service_rx_task+0xf0>
				default:
					break;
				}
				break;
			default:
				break;
 80077d0:	e064      	b.n	800789c <uart_cobs_service_rx_task+0x17c>
				status = uart_freertos_rx(h->huart, &(buf_rx[size]),
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	4b52      	ldr	r3, [pc, #328]	; (8007920 <uart_cobs_service_rx_task+0x200>)
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	18d1      	adds	r1, r2, r3
 80077de:	f04f 33ff 	mov.w	r3, #4294967295
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	f04f 33ff 	mov.w	r3, #4294967295
 80077e8:	2201      	movs	r2, #1
 80077ea:	f000 fa8c 	bl	8007d06 <uart_freertos_rx>
 80077ee:	4603      	mov	r3, r0
 80077f0:	461a      	mov	r2, r3
 80077f2:	743a      	strb	r2, [r7, #16]
 80077f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80077f8:	747a      	strb	r2, [r7, #17]
 80077fa:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80077fe:	74bb      	strb	r3, [r7, #18]
				switch(status.status)
 8007800:	7cbb      	ldrb	r3, [r7, #18]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d102      	bne.n	800780c <uart_cobs_service_rx_task+0xec>
					size++;
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	3301      	adds	r3, #1
 800780a:	61fb      	str	r3, [r7, #28]
					break;
 800780c:	bf00      	nop
				break;
 800780e:	e046      	b.n	800789e <uart_cobs_service_rx_task+0x17e>
				status = uart_freertos_rx_it(h->huart, &(buf_rx[size]),
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	6818      	ldr	r0, [r3, #0]
 8007814:	4b42      	ldr	r3, [pc, #264]	; (8007920 <uart_cobs_service_rx_task+0x200>)
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	18d1      	adds	r1, r2, r3
 800781c:	f04f 33ff 	mov.w	r3, #4294967295
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	f04f 33ff 	mov.w	r3, #4294967295
 8007826:	2201      	movs	r2, #1
 8007828:	f000 fb08 	bl	8007e3c <uart_freertos_rx_it>
 800782c:	4603      	mov	r3, r0
 800782e:	461a      	mov	r2, r3
 8007830:	743a      	strb	r2, [r7, #16]
 8007832:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007836:	747a      	strb	r2, [r7, #17]
 8007838:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800783c:	74bb      	strb	r3, [r7, #18]
				switch(status.status)
 800783e:	7cbb      	ldrb	r3, [r7, #18]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d102      	bne.n	800784a <uart_cobs_service_rx_task+0x12a>
					size++;
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	3301      	adds	r3, #1
 8007848:	61fb      	str	r3, [r7, #28]
					break;
 800784a:	bf00      	nop
				break;
 800784c:	e027      	b.n	800789e <uart_cobs_service_rx_task+0x17e>
				status = uart_freertos_rx_dma_idle(h->huart, &(buf_rx[size]),
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	6818      	ldr	r0, [r3, #0]
 8007852:	4b33      	ldr	r3, [pc, #204]	; (8007920 <uart_cobs_service_rx_task+0x200>)
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	18d1      	adds	r1, r2, r3
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	1ad2      	subs	r2, r2, r3
 8007860:	2301      	movs	r3, #1
 8007862:	9301      	str	r3, [sp, #4]
 8007864:	f04f 33ff 	mov.w	r3, #4294967295
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	f04f 33ff 	mov.w	r3, #4294967295
 800786e:	f000 fb98 	bl	8007fa2 <uart_freertos_rx_dma_idle>
 8007872:	4603      	mov	r3, r0
 8007874:	461a      	mov	r2, r3
 8007876:	743a      	strb	r2, [r7, #16]
 8007878:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800787c:	747a      	strb	r2, [r7, #17]
 800787e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007882:	74bb      	strb	r3, [r7, #18]
				switch(status.status)
 8007884:	7cbb      	ldrb	r3, [r7, #18]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <uart_cobs_service_rx_task+0x16e>
 800788a:	2b06      	cmp	r3, #6
 800788c:	d104      	bne.n	8007898 <uart_cobs_service_rx_task+0x178>
					size += status.rx_size;
 800788e:	8a3b      	ldrh	r3, [r7, #16]
 8007890:	461a      	mov	r2, r3
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	4413      	add	r3, r2
 8007896:	61fb      	str	r3, [r7, #28]
					break;
 8007898:	bf00      	nop
				break;
 800789a:	e000      	b.n	800789e <uart_cobs_service_rx_task+0x17e>
				break;
 800789c:	bf00      	nop
			}
			if(size >= cobs_buffer_size) size = 0;
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d301      	bcc.n	80078aa <uart_cobs_service_rx_task+0x18a>
 80078a6:	2300      	movs	r3, #0
 80078a8:	61fb      	str	r3, [r7, #28]
		} while(buf_rx[size-1] != 0x00);
 80078aa:	4b1d      	ldr	r3, [pc, #116]	; (8007920 <uart_cobs_service_rx_task+0x200>)
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	3b01      	subs	r3, #1
 80078b2:	4413      	add	r3, r2
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d180      	bne.n	80077bc <uart_cobs_service_rx_task+0x9c>
		size--;
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	3b01      	subs	r3, #1
 80078be:	61fb      	str	r3, [r7, #28]
		frame.size = cobs_decode(buf_rx, size, frame.data);
 80078c0:	4b17      	ldr	r3, [pc, #92]	; (8007920 <uart_cobs_service_rx_task+0x200>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	69f9      	ldr	r1, [r7, #28]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7ff fae3 	bl	8006e94 <cobs_decode>
 80078ce:	4603      	mov	r3, r0
 80078d0:	60fb      	str	r3, [r7, #12]
		xQueueSend(h->output_queue, &frame, portMAX_DELAY);
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	f8d3 000e 	ldr.w	r0, [r3, #14]
 80078d8:	f107 0108 	add.w	r1, r7, #8
 80078dc:	2300      	movs	r3, #0
 80078de:	f04f 32ff 	mov.w	r2, #4294967295
 80078e2:	f002 fb71 	bl	8009fc8 <xQueueGenericSend>
		frame.data += h->max_frame_size;
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	4413      	add	r3, r2
 80078ee:	60bb      	str	r3, [r7, #8]
		if(frame.data-((void *)framebuffer_rx) >= h->queue_depth*h->max_frame_size)
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	4b09      	ldr	r3, [pc, #36]	; (8007918 <uart_cobs_service_rx_task+0x1f8>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	461a      	mov	r2, r3
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	7a1b      	ldrb	r3, [r3, #8]
 80078fe:	4619      	mov	r1, r3
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	fb03 f301 	mul.w	r3, r3, r1
 8007908:	429a      	cmp	r2, r3
 800790a:	f4ff af55 	bcc.w	80077b8 <uart_cobs_service_rx_task+0x98>
			frame.data = (void *) framebuffer_rx;
 800790e:	4b02      	ldr	r3, [pc, #8]	; (8007918 <uart_cobs_service_rx_task+0x1f8>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	60bb      	str	r3, [r7, #8]
		size = 0;
 8007914:	e750      	b.n	80077b8 <uart_cobs_service_rx_task+0x98>
 8007916:	bf00      	nop
 8007918:	20000374 	.word	0x20000374
 800791c:	81020409 	.word	0x81020409
 8007920:	20000378 	.word	0x20000378

08007924 <uart_cobs_service_tx_task>:

static uint8_t *buf_tx;
static osThreadId uart_cobs_service_tx_task_id = NULL;

void uart_cobs_service_tx_task(void const * argument)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b08a      	sub	sp, #40	; 0x28
 8007928:	af02      	add	r7, sp, #8
 800792a:	6078      	str	r0, [r7, #4]
	uart_cobs_service_t* h = (uart_cobs_service_t *) argument;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	61fb      	str	r3, [r7, #28]
	h->input_queue = xQueueCreate(h->queue_depth, sizeof(uart_cobs_frame_t));
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	7a1b      	ldrb	r3, [r3, #8]
 8007934:	2200      	movs	r2, #0
 8007936:	2108      	movs	r1, #8
 8007938:	4618      	mov	r0, r3
 800793a:	f002 fab5 	bl	8009ea8 <xQueueGenericCreate>
 800793e:	4602      	mov	r2, r0
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	f8c3 200a 	str.w	r2, [r3, #10]
	/* Data frame handler */
	uart_cobs_frame_t frame = {.data = NULL, .size = 0};
 8007946:	2300      	movs	r3, #0
 8007948:	60fb      	str	r3, [r7, #12]
 800794a:	2300      	movs	r3, #0
 800794c:	613b      	str	r3, [r7, #16]
	/* Buffer for COBS */
	size_t cobs_buffer_size = h->max_frame_size + h->max_frame_size/254 + 2;
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	085b      	lsrs	r3, r3, #1
 8007958:	493d      	ldr	r1, [pc, #244]	; (8007a50 <uart_cobs_service_tx_task+0x12c>)
 800795a:	fba1 1303 	umull	r1, r3, r1, r3
 800795e:	099b      	lsrs	r3, r3, #6
 8007960:	4413      	add	r3, r2
 8007962:	3302      	adds	r3, #2
 8007964:	61bb      	str	r3, [r7, #24]
	buf_tx = pvPortMalloc(cobs_buffer_size);
 8007966:	69b8      	ldr	r0, [r7, #24]
 8007968:	f004 fca8 	bl	800c2bc <pvPortMalloc>
 800796c:	4603      	mov	r3, r0
 800796e:	4a39      	ldr	r2, [pc, #228]	; (8007a54 <uart_cobs_service_tx_task+0x130>)
 8007970:	6013      	str	r3, [r2, #0]
	if(!buf_tx) Error_Handler();
 8007972:	4b38      	ldr	r3, [pc, #224]	; (8007a54 <uart_cobs_service_tx_task+0x130>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <uart_cobs_service_tx_task+0x5a>
 800797a:	f7fa fc9b 	bl	80022b4 <Error_Handler>
	size_t size = 0;
 800797e:	2300      	movs	r3, #0
 8007980:	617b      	str	r3, [r7, #20]
	while(1)
	{
		xQueueReceive(h->input_queue, &frame, portMAX_DELAY);
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8007988:	f107 010c 	add.w	r1, r7, #12
 800798c:	f04f 32ff 	mov.w	r2, #4294967295
 8007990:	4618      	mov	r0, r3
 8007992:	f002 fca5 	bl	800a2e0 <xQueueReceive>
		size = cobs_encode((uint8_t *) frame.data, frame.size, buf_tx);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6939      	ldr	r1, [r7, #16]
 800799a:	4a2e      	ldr	r2, [pc, #184]	; (8007a54 <uart_cobs_service_tx_task+0x130>)
 800799c:	6812      	ldr	r2, [r2, #0]
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff fa28 	bl	8006df4 <cobs_encode>
 80079a4:	6178      	str	r0, [r7, #20]
		buf_tx[size++] = 0;
 80079a6:	4b2b      	ldr	r3, [pc, #172]	; (8007a54 <uart_cobs_service_tx_task+0x130>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	1c59      	adds	r1, r3, #1
 80079ae:	6179      	str	r1, [r7, #20]
 80079b0:	4413      	add	r3, r2
 80079b2:	2200      	movs	r2, #0
 80079b4:	701a      	strb	r2, [r3, #0]
		switch(h->mode)
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	7a5b      	ldrb	r3, [r3, #9]
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d030      	beq.n	8007a20 <uart_cobs_service_tx_task+0xfc>
 80079be:	2b02      	cmp	r3, #2
 80079c0:	dc43      	bgt.n	8007a4a <uart_cobs_service_tx_task+0x126>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d002      	beq.n	80079cc <uart_cobs_service_tx_task+0xa8>
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d015      	beq.n	80079f6 <uart_cobs_service_tx_task+0xd2>
			uart_freertos_tx_dma(h->huart, buf_tx, size,
			    portMAX_DELAY, portMAX_DELAY);
			xSemaphoreGive(h->Transmit_Ready);
			break;
		default:
			break;
 80079ca:	e03e      	b.n	8007a4a <uart_cobs_service_tx_task+0x126>
			uart_freertos_tx(h->huart, buf_tx, size,
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	6818      	ldr	r0, [r3, #0]
 80079d0:	4b20      	ldr	r3, [pc, #128]	; (8007a54 <uart_cobs_service_tx_task+0x130>)
 80079d2:	6819      	ldr	r1, [r3, #0]
 80079d4:	f04f 33ff 	mov.w	r3, #4294967295
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	f04f 33ff 	mov.w	r3, #4294967295
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	f000 f965 	bl	8007cae <uart_freertos_tx>
			xSemaphoreGive(h->Transmit_Ready);
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	f8d3 0012 	ldr.w	r0, [r3, #18]
 80079ea:	2300      	movs	r3, #0
 80079ec:	2200      	movs	r2, #0
 80079ee:	2100      	movs	r1, #0
 80079f0:	f002 faea 	bl	8009fc8 <xQueueGenericSend>
			break;
 80079f4:	e02a      	b.n	8007a4c <uart_cobs_service_tx_task+0x128>
			uart_freertos_tx_it(h->huart, buf_tx, size,
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	4b16      	ldr	r3, [pc, #88]	; (8007a54 <uart_cobs_service_tx_task+0x130>)
 80079fc:	6819      	ldr	r1, [r3, #0]
 80079fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	f04f 33ff 	mov.w	r3, #4294967295
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	f000 f9d3 	bl	8007db4 <uart_freertos_tx_it>
			xSemaphoreGive(h->Transmit_Ready);
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	f8d3 0012 	ldr.w	r0, [r3, #18]
 8007a14:	2300      	movs	r3, #0
 8007a16:	2200      	movs	r2, #0
 8007a18:	2100      	movs	r1, #0
 8007a1a:	f002 fad5 	bl	8009fc8 <xQueueGenericSend>
			break;
 8007a1e:	e015      	b.n	8007a4c <uart_cobs_service_tx_task+0x128>
			uart_freertos_tx_dma(h->huart, buf_tx, size,
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	6818      	ldr	r0, [r3, #0]
 8007a24:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <uart_cobs_service_tx_task+0x130>)
 8007a26:	6819      	ldr	r1, [r3, #0]
 8007a28:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	f000 fa71 	bl	8007f1a <uart_freertos_tx_dma>
			xSemaphoreGive(h->Transmit_Ready);
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	f8d3 0012 	ldr.w	r0, [r3, #18]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	2200      	movs	r2, #0
 8007a42:	2100      	movs	r1, #0
 8007a44:	f002 fac0 	bl	8009fc8 <xQueueGenericSend>
			break;
 8007a48:	e000      	b.n	8007a4c <uart_cobs_service_tx_task+0x128>
			break;
 8007a4a:	bf00      	nop
		xQueueReceive(h->input_queue, &frame, portMAX_DELAY);
 8007a4c:	e799      	b.n	8007982 <uart_cobs_service_tx_task+0x5e>
 8007a4e:	bf00      	nop
 8007a50:	81020409 	.word	0x81020409
 8007a54:	20000380 	.word	0x20000380

08007a58 <uart_cobs_service_rx_create>:
	}
}

osThreadId uart_cobs_service_rx_create(char *name, osPriority priority,
	uint32_t instances, uint32_t stack_size, uart_cobs_service_t* h)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08c      	sub	sp, #48	; 0x30
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	607a      	str	r2, [r7, #4]
 8007a62:	603b      	str	r3, [r7, #0]
 8007a64:	460b      	mov	r3, r1
 8007a66:	817b      	strh	r3, [r7, #10]

	/* create treads */
	osThreadDef_t thread = {
 8007a68:	f107 0314 	add.w	r3, r7, #20
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	605a      	str	r2, [r3, #4]
 8007a72:	609a      	str	r2, [r3, #8]
 8007a74:	60da      	str	r2, [r3, #12]
 8007a76:	611a      	str	r2, [r3, #16]
 8007a78:	615a      	str	r2, [r3, #20]
 8007a7a:	619a      	str	r2, [r3, #24]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	617b      	str	r3, [r7, #20]
 8007a80:	4b0d      	ldr	r3, [pc, #52]	; (8007ab8 <uart_cobs_service_rx_create+0x60>)
 8007a82:	61bb      	str	r3, [r7, #24]
 8007a84:	897b      	ldrh	r3, [r7, #10]
 8007a86:	83bb      	strh	r3, [r7, #28]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	623b      	str	r3, [r7, #32]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	627b      	str	r3, [r7, #36]	; 0x24
		.tpriority	= priority,
		.instances	= instances,
		.stacksize	= stack_size
	};

	taskENTER_CRITICAL();
 8007a90:	f004 fb14 	bl	800c0bc <vPortEnterCritical>
	uart_cobs_service_rx_task_id = osThreadCreate(&thread, (void *) h);
 8007a94:	f107 0314 	add.w	r3, r7, #20
 8007a98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f002 f880 	bl	8009ba0 <osThreadCreate>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	4a06      	ldr	r2, [pc, #24]	; (8007abc <uart_cobs_service_rx_create+0x64>)
 8007aa4:	6013      	str	r3, [r2, #0]
	taskEXIT_CRITICAL();
 8007aa6:	f004 fb39 	bl	800c11c <vPortExitCritical>
	return (uart_cobs_service_rx_task_id);
 8007aaa:	4b04      	ldr	r3, [pc, #16]	; (8007abc <uart_cobs_service_rx_create+0x64>)
 8007aac:	681b      	ldr	r3, [r3, #0]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3730      	adds	r7, #48	; 0x30
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	08007721 	.word	0x08007721
 8007abc:	2000037c 	.word	0x2000037c

08007ac0 <uart_cobs_service_tx_create>:

osThreadId uart_cobs_service_tx_create(char *name, osPriority priority,
	uint32_t instances, uint32_t stack_size, uart_cobs_service_t* h)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08c      	sub	sp, #48	; 0x30
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	607a      	str	r2, [r7, #4]
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	460b      	mov	r3, r1
 8007ace:	817b      	strh	r3, [r7, #10]

	/* create treads */
	osThreadDef_t thread = {
 8007ad0:	f107 0314 	add.w	r3, r7, #20
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	605a      	str	r2, [r3, #4]
 8007ada:	609a      	str	r2, [r3, #8]
 8007adc:	60da      	str	r2, [r3, #12]
 8007ade:	611a      	str	r2, [r3, #16]
 8007ae0:	615a      	str	r2, [r3, #20]
 8007ae2:	619a      	str	r2, [r3, #24]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	4b0d      	ldr	r3, [pc, #52]	; (8007b20 <uart_cobs_service_tx_create+0x60>)
 8007aea:	61bb      	str	r3, [r7, #24]
 8007aec:	897b      	ldrh	r3, [r7, #10]
 8007aee:	83bb      	strh	r3, [r7, #28]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	623b      	str	r3, [r7, #32]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	627b      	str	r3, [r7, #36]	; 0x24
		.tpriority	= priority,
		.instances	= instances,
		.stacksize	= stack_size
	};

	taskENTER_CRITICAL();
 8007af8:	f004 fae0 	bl	800c0bc <vPortEnterCritical>
	uart_cobs_service_tx_task_id = osThreadCreate(&thread, (void *) h);
 8007afc:	f107 0314 	add.w	r3, r7, #20
 8007b00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b02:	4618      	mov	r0, r3
 8007b04:	f002 f84c 	bl	8009ba0 <osThreadCreate>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	4a06      	ldr	r2, [pc, #24]	; (8007b24 <uart_cobs_service_tx_create+0x64>)
 8007b0c:	6013      	str	r3, [r2, #0]
	taskEXIT_CRITICAL();
 8007b0e:	f004 fb05 	bl	800c11c <vPortExitCritical>
		return (uart_cobs_service_tx_task_id);
 8007b12:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <uart_cobs_service_tx_create+0x64>)
 8007b14:	681b      	ldr	r3, [r3, #0]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3730      	adds	r7, #48	; 0x30
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	08007925 	.word	0x08007925
 8007b24:	20000384 	.word	0x20000384

08007b28 <uart_cobs_service_tx_free>:
		uart_cobs_service_rx_task_id = NULL;
	}
}

void uart_cobs_service_tx_free(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	af00      	add	r7, sp, #0
	if (buf_tx != NULL)
 8007b2c:	4b0b      	ldr	r3, [pc, #44]	; (8007b5c <uart_cobs_service_tx_free+0x34>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d004      	beq.n	8007b3e <uart_cobs_service_tx_free+0x16>
	{
		vPortFree(buf_tx);
 8007b34:	4b09      	ldr	r3, [pc, #36]	; (8007b5c <uart_cobs_service_tx_free+0x34>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f004 fc89 	bl	800c450 <vPortFree>
	}
	if (uart_cobs_service_tx_task_id != NULL)
 8007b3e:	4b08      	ldr	r3, [pc, #32]	; (8007b60 <uart_cobs_service_tx_free+0x38>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d007      	beq.n	8007b56 <uart_cobs_service_tx_free+0x2e>
	{
		osThreadTerminate(uart_cobs_service_tx_task_id);
 8007b46:	4b06      	ldr	r3, [pc, #24]	; (8007b60 <uart_cobs_service_tx_free+0x38>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f002 f874 	bl	8009c38 <osThreadTerminate>
		uart_cobs_service_tx_task_id = NULL;
 8007b50:	4b03      	ldr	r3, [pc, #12]	; (8007b60 <uart_cobs_service_tx_free+0x38>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]
	}
}
 8007b56:	bf00      	nop
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	20000380 	.word	0x20000380
 8007b60:	20000384 	.word	0x20000384

08007b64 <uart_rtos_list_append>:
/* Root of UART FreeRTOS list */
static struct uart_rtos_list *uart_rtos_list_begin = NULL;

/* Append the item at the end of UART FreeRTOS list */
static struct uart_rtos_list* uart_rtos_list_append(uart_freertos_t *uart_rtos)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
	/* if list is empty, create and return the begin of list */
	if(uart_rtos_list_begin == NULL)
 8007b6c:	4b19      	ldr	r3, [pc, #100]	; (8007bd4 <uart_rtos_list_append+0x70>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d110      	bne.n	8007b96 <uart_rtos_list_append+0x32>
	{
		uart_rtos_list_begin = (struct uart_rtos_list*)
			pvPortMalloc(sizeof(struct uart_rtos_list));
 8007b74:	2008      	movs	r0, #8
 8007b76:	f004 fba1 	bl	800c2bc <pvPortMalloc>
 8007b7a:	4603      	mov	r3, r0
		uart_rtos_list_begin = (struct uart_rtos_list*)
 8007b7c:	4a15      	ldr	r2, [pc, #84]	; (8007bd4 <uart_rtos_list_append+0x70>)
 8007b7e:	6013      	str	r3, [r2, #0]
		uart_rtos_list_begin->uart_rtos = uart_rtos;
 8007b80:	4b14      	ldr	r3, [pc, #80]	; (8007bd4 <uart_rtos_list_append+0x70>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	601a      	str	r2, [r3, #0]
		uart_rtos_list_begin->next = NULL;
 8007b88:	4b12      	ldr	r3, [pc, #72]	; (8007bd4 <uart_rtos_list_append+0x70>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	605a      	str	r2, [r3, #4]
		return uart_rtos_list_begin;
 8007b90:	4b10      	ldr	r3, [pc, #64]	; (8007bd4 <uart_rtos_list_append+0x70>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	e01a      	b.n	8007bcc <uart_rtos_list_append+0x68>
	}
	/* else find end of list */
	struct uart_rtos_list *item = uart_rtos_list_begin;
 8007b96:	4b0f      	ldr	r3, [pc, #60]	; (8007bd4 <uart_rtos_list_append+0x70>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60fb      	str	r3, [r7, #12]
	while(item->next != NULL)
 8007b9c:	e002      	b.n	8007ba4 <uart_rtos_list_append+0x40>
		item = item->next;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	60fb      	str	r3, [r7, #12]
	while(item->next != NULL)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1f8      	bne.n	8007b9e <uart_rtos_list_append+0x3a>
	/* and create and append item at the end of list */
	item->next = (struct uart_rtos_list*)
		pvPortMalloc(sizeof(struct uart_rtos_list));
 8007bac:	2008      	movs	r0, #8
 8007bae:	f004 fb85 	bl	800c2bc <pvPortMalloc>
 8007bb2:	4602      	mov	r2, r0
	item->next = (struct uart_rtos_list*)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	605a      	str	r2, [r3, #4]
	item->next->uart_rtos = uart_rtos;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	601a      	str	r2, [r3, #0]
	item->next->next = NULL;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	605a      	str	r2, [r3, #4]
	return item->next;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	685b      	ldr	r3, [r3, #4]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	20000388 	.word	0x20000388

08007bd8 <uart_rtos_list_find_item>:
}

/* Find item in SPI FreeRTOS list with mached SPI_HandleTypeDef */
static struct uart_rtos_list* uart_rtos_list_find_item
	(UART_HandleTypeDef* huart)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]

	struct uart_rtos_list *item = uart_rtos_list_begin;
 8007be0:	4b0b      	ldr	r3, [pc, #44]	; (8007c10 <uart_rtos_list_find_item+0x38>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 8007be6:	e008      	b.n	8007bfa <uart_rtos_list_find_item+0x22>
	{
		if(item->uart_rtos->huart == huart)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d006      	beq.n	8007c02 <uart_rtos_list_find_item+0x2a>
			break;
		else
			item = item->next;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1f3      	bne.n	8007be8 <uart_rtos_list_find_item+0x10>
 8007c00:	e000      	b.n	8007c04 <uart_rtos_list_find_item+0x2c>
			break;
 8007c02:	bf00      	nop
	}
	return item;
 8007c04:	68fb      	ldr	r3, [r7, #12]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bc80      	pop	{r7}
 8007c0e:	4770      	bx	lr
 8007c10:	20000388 	.word	0x20000388

08007c14 <uart_freertos_init>:

/* Initialize UART with FreeRTOS mutexes and semaphores */
uart_freertos_status uart_freertos_init(uart_freertos_t* uart_rtos)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
	/* find hspi into list */
	if(uart_rtos_list_find_item(uart_rtos->huart) != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7ff ffd9 	bl	8007bd8 <uart_rtos_list_find_item>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <uart_freertos_init+0x1c>
		return UART_FREERTOS_EXIST;
 8007c2c:	2305      	movs	r3, #5
 8007c2e:	e01f      	b.n	8007c70 <uart_freertos_init+0x5c>
	/* if hspi not found, create semaphores and mutexes */
	uart_rtos->tx_mutex = xSemaphoreCreateMutex();
 8007c30:	2001      	movs	r0, #1
 8007c32:	f002 f9b0 	bl	8009f96 <xQueueCreateMutex>
 8007c36:	4602      	mov	r2, r0
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	609a      	str	r2, [r3, #8]
	uart_rtos->rx_mutex = xSemaphoreCreateMutex();
 8007c3c:	2001      	movs	r0, #1
 8007c3e:	f002 f9aa 	bl	8009f96 <xQueueCreateMutex>
 8007c42:	4602      	mov	r2, r0
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	605a      	str	r2, [r3, #4]
	uart_rtos->tx_complete = xSemaphoreCreateBinary();
 8007c48:	2203      	movs	r2, #3
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	2001      	movs	r0, #1
 8007c4e:	f002 f92b 	bl	8009ea8 <xQueueGenericCreate>
 8007c52:	4602      	mov	r2, r0
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	611a      	str	r2, [r3, #16]
	uart_rtos->rx_complete = xSemaphoreCreateBinary();
 8007c58:	2203      	movs	r2, #3
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	2001      	movs	r0, #1
 8007c5e:	f002 f923 	bl	8009ea8 <xQueueGenericCreate>
 8007c62:	4602      	mov	r2, r0
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	60da      	str	r2, [r3, #12]

	/* register spi_freertos_base into list */
	uart_rtos_list_append(uart_rtos);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff ff7b 	bl	8007b64 <uart_rtos_list_append>
	return UART_FREERTOS_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <parse_hal_status>:
	uart_rtos_list_delete(uart_rtos);
}

/* Parse HAL status */
static inline uart_freertos_status parse_hal_status(HAL_StatusTypeDef status)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	71fb      	strb	r3, [r7, #7]
  switch(status)
 8007c82:	79fb      	ldrb	r3, [r7, #7]
 8007c84:	2b03      	cmp	r3, #3
 8007c86:	d00a      	beq.n	8007c9e <parse_hal_status+0x26>
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	dc0a      	bgt.n	8007ca2 <parse_hal_status+0x2a>
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d002      	beq.n	8007c96 <parse_hal_status+0x1e>
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d002      	beq.n	8007c9a <parse_hal_status+0x22>
 8007c94:	e005      	b.n	8007ca2 <parse_hal_status+0x2a>
  {
  case HAL_ERROR:
    return UART_FREERTOS_ERR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e004      	b.n	8007ca4 <parse_hal_status+0x2c>
  case HAL_BUSY:
    return UART_FREERTOS_BUSY;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e002      	b.n	8007ca4 <parse_hal_status+0x2c>
  case HAL_TIMEOUT:
    return UART_FREERTOS_TIMEOUT;
 8007c9e:	2304      	movs	r3, #4
 8007ca0:	e000      	b.n	8007ca4 <parse_hal_status+0x2c>
  default:
    return UART_FREERTOS_OK;
 8007ca2:	2300      	movs	r3, #0
  }
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bc80      	pop	{r7}
 8007cac:	4770      	bx	lr

08007cae <uart_freertos_tx>:

/* Transmit data through UART whithout interupts */
uart_freertos_status uart_freertos_tx (uart_freertos_t* uart, const void* data, size_t data_size, TickType_t mutex_timeout, uint32_t transfer_timeout)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b086      	sub	sp, #24
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	607a      	str	r2, [r7, #4]
 8007cba:	603b      	str	r3, [r7, #0]
	uart_freertos_status rtn;

	if(xSemaphoreTake(uart->tx_mutex, mutex_timeout) == pdFALSE)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	6839      	ldr	r1, [r7, #0]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f002 fbec 	bl	800a4a0 <xQueueSemaphoreTake>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <uart_freertos_tx+0x24>
	{
		return UART_FREERTOS_BUSY;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e015      	b.n	8007cfe <uart_freertos_tx+0x50>
	}

	rtn = parse_hal_status (HAL_UART_Transmit(uart->huart,(void*) data, data_size, transfer_timeout));
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6818      	ldr	r0, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	68b9      	ldr	r1, [r7, #8]
 8007cde:	f7fd fbbe 	bl	800545e <HAL_UART_Transmit>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7ff ffc7 	bl	8007c78 <parse_hal_status>
 8007cea:	4603      	mov	r3, r0
 8007cec:	75fb      	strb	r3, [r7, #23]

	/* Give back UART mutex */
	xSemaphoreGive(uart->tx_mutex);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6898      	ldr	r0, [r3, #8]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	f002 f966 	bl	8009fc8 <xQueueGenericSend>

	return rtn;
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <uart_freertos_rx>:

/* Recieve data through UART whithout interupts */
uart_freertos_status_t uart_freertos_rx (uart_freertos_t* uart, const void* data, size_t data_size, TickType_t mutex_timeout, uint32_t transfer_timeout)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b086      	sub	sp, #24
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	607a      	str	r2, [r7, #4]
 8007d12:	603b      	str	r3, [r7, #0]
	uart_freertos_status_t rtn;
	rtn.status = UART_FREERTOS_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	74bb      	strb	r3, [r7, #18]
	rtn.rx_size = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	823b      	strh	r3, [r7, #16]

	if(xSemaphoreTake(uart->rx_mutex, mutex_timeout) == pdFALSE)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f002 fbbc 	bl	800a4a0 <xQueueSemaphoreTake>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10c      	bne.n	8007d48 <uart_freertos_rx+0x42>
	{
		rtn.status = UART_FREERTOS_BUSY;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	74bb      	strb	r3, [r7, #18]
		return rtn;
 8007d32:	f107 0314 	add.w	r3, r7, #20
 8007d36:	f107 0210 	add.w	r2, r7, #16
 8007d3a:	6812      	ldr	r2, [r2, #0]
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	8019      	strh	r1, [r3, #0]
 8007d40:	3302      	adds	r3, #2
 8007d42:	0c12      	lsrs	r2, r2, #16
 8007d44:	701a      	strb	r2, [r3, #0]
 8007d46:	e027      	b.n	8007d98 <uart_freertos_rx+0x92>
	}
	rtn.status = parse_hal_status (HAL_UART_Receive(uart->huart,(void*) data, data_size, transfer_timeout));
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6818      	ldr	r0, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	68b9      	ldr	r1, [r7, #8]
 8007d54:	f7fd fc15 	bl	8005582 <HAL_UART_Receive>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7ff ff8c 	bl	8007c78 <parse_hal_status>
 8007d60:	4603      	mov	r3, r0
 8007d62:	74bb      	strb	r3, [r7, #18]
	rtn.rx_size = data_size - uart->huart->RxXferCount;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	823b      	strh	r3, [r7, #16]
	/* Give back UART mutex */
	xSemaphoreGive(uart->rx_mutex);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6858      	ldr	r0, [r3, #4]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2100      	movs	r1, #0
 8007d80:	f002 f922 	bl	8009fc8 <xQueueGenericSend>

	return rtn;
 8007d84:	f107 0314 	add.w	r3, r7, #20
 8007d88:	f107 0210 	add.w	r2, r7, #16
 8007d8c:	6812      	ldr	r2, [r2, #0]
 8007d8e:	4611      	mov	r1, r2
 8007d90:	8019      	strh	r1, [r3, #0]
 8007d92:	3302      	adds	r3, #2
 8007d94:	0c12      	lsrs	r2, r2, #16
 8007d96:	701a      	strb	r2, [r3, #0]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	7d3a      	ldrb	r2, [r7, #20]
 8007d9c:	f362 0307 	bfi	r3, r2, #0, #8
 8007da0:	7d7a      	ldrb	r2, [r7, #21]
 8007da2:	f362 230f 	bfi	r3, r2, #8, #8
 8007da6:	7dba      	ldrb	r2, [r7, #22]
 8007da8:	f362 4317 	bfi	r3, r2, #16, #8
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <uart_freertos_tx_it>:


/* Transmit data through UART with interupts */
uart_freertos_status uart_freertos_tx_it (uart_freertos_t* uart, const void* data, size_t data_size, TickType_t mutex_timeout, TickType_t transfer_timeout)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	603b      	str	r3, [r7, #0]
	uart_freertos_status rtn = UART_FREERTOS_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	75fb      	strb	r3, [r7, #23]

	if(xSemaphoreTake(uart->tx_mutex, mutex_timeout) == pdFALSE)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f002 fb67 	bl	800a4a0 <xQueueSemaphoreTake>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d102      	bne.n	8007dde <uart_freertos_tx_it+0x2a>
	{
		rtn = UART_FREERTOS_BUSY;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8007ddc:	e029      	b.n	8007e32 <uart_freertos_tx_it+0x7e>
	}

	rtn =  parse_hal_status ( HAL_UART_Transmit_IT(uart->huart,(void*) data, data_size));
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	b292      	uxth	r2, r2
 8007de6:	68b9      	ldr	r1, [r7, #8]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fd fc6c 	bl	80056c6 <HAL_UART_Transmit_IT>
 8007dee:	4603      	mov	r3, r0
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7ff ff41 	bl	8007c78 <parse_hal_status>
 8007df6:	4603      	mov	r3, r0
 8007df8:	75fb      	strb	r3, [r7, #23]

	if ((rtn == UART_FREERTOS_ERR) || (rtn == UART_FREERTOS_BUSY) ) goto end_of_transaction;
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d00e      	beq.n	8007e1e <uart_freertos_tx_it+0x6a>
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d00b      	beq.n	8007e1e <uart_freertos_tx_it+0x6a>

	/* Waiting for tx complete */
	if(xSemaphoreTake(uart->tx_complete,transfer_timeout) == pdFALSE)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	6a39      	ldr	r1, [r7, #32]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f002 fb47 	bl	800a4a0 <xQueueSemaphoreTake>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d104      	bne.n	8007e22 <uart_freertos_tx_it+0x6e>
	{
		rtn = UART_FREERTOS_TIMEOUT;
 8007e18:	2304      	movs	r3, #4
 8007e1a:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8007e1c:	e002      	b.n	8007e24 <uart_freertos_tx_it+0x70>
	if ((rtn == UART_FREERTOS_ERR) || (rtn == UART_FREERTOS_BUSY) ) goto end_of_transaction;
 8007e1e:	bf00      	nop
 8007e20:	e000      	b.n	8007e24 <uart_freertos_tx_it+0x70>
	}

	end_of_transaction:
 8007e22:	bf00      	nop

	/* Give back UART mutex */
	xSemaphoreGive(uart->tx_mutex);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6898      	ldr	r0, [r3, #8]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	f002 f8cb 	bl	8009fc8 <xQueueGenericSend>

	exit:
	return rtn;
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <uart_freertos_rx_it>:

/* Recieve data through UART with interupts */
uart_freertos_status_t uart_freertos_rx_it (uart_freertos_t* uart, const void* data, size_t data_size,
		TickType_t mutex_timeout, TickType_t transfer_timeout)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	603b      	str	r3, [r7, #0]
	uart_freertos_status_t rtn;
	rtn.status = UART_FREERTOS_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	74bb      	strb	r3, [r7, #18]
	rtn.rx_size = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	823b      	strh	r3, [r7, #16]

	if(xSemaphoreTake(uart->rx_mutex, mutex_timeout) == pdFALSE)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f002 fb21 	bl	800a4a0 <xQueueSemaphoreTake>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d102      	bne.n	8007e6a <uart_freertos_rx_it+0x2e>
	{
		rtn.status = UART_FREERTOS_BUSY;
 8007e64:	2303      	movs	r3, #3
 8007e66:	74bb      	strb	r3, [r7, #18]
		goto exit;
 8007e68:	e03f      	b.n	8007eea <uart_freertos_rx_it+0xae>
	}

	rtn.status =  parse_hal_status ( HAL_UART_Receive_IT(uart->huart,(void*) data, data_size));
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	b292      	uxth	r2, r2
 8007e72:	68b9      	ldr	r1, [r7, #8]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7fd fc6a 	bl	800574e <HAL_UART_Receive_IT>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7ff fefb 	bl	8007c78 <parse_hal_status>
 8007e82:	4603      	mov	r3, r0
 8007e84:	74bb      	strb	r3, [r7, #18]

	if ((rtn.status == UART_FREERTOS_ERR) || (rtn.status == UART_FREERTOS_BUSY) ) goto end_of_transaction;
 8007e86:	7cbb      	ldrb	r3, [r7, #18]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d026      	beq.n	8007eda <uart_freertos_rx_it+0x9e>
 8007e8c:	7cbb      	ldrb	r3, [r7, #18]
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d023      	beq.n	8007eda <uart_freertos_rx_it+0x9e>

	/* Waiting for tx complete */
	if(xSemaphoreTake(uart->rx_complete,transfer_timeout) == pdFALSE)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	6a39      	ldr	r1, [r7, #32]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f002 fb01 	bl	800a4a0 <xQueueSemaphoreTake>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d110      	bne.n	8007ec6 <uart_freertos_rx_it+0x8a>
	{
		rtn.status = UART_FREERTOS_TIMEOUT;
 8007ea4:	2304      	movs	r3, #4
 8007ea6:	74bb      	strb	r3, [r7, #18]
		rtn.rx_size = data_size -uart->huart->RxXferCount;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	823b      	strh	r3, [r7, #16]
		HAL_UART_AbortReceive_IT(uart->huart);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fd fd12 	bl	80058e8 <HAL_UART_AbortReceive_IT>
 8007ec4:	e00a      	b.n	8007edc <uart_freertos_rx_it+0xa0>
	}
	else
	{
		rtn.rx_size = data_size -uart->huart->RxXferCount;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	823b      	strh	r3, [r7, #16]
 8007ed8:	e000      	b.n	8007edc <uart_freertos_rx_it+0xa0>
	if ((rtn.status == UART_FREERTOS_ERR) || (rtn.status == UART_FREERTOS_BUSY) ) goto end_of_transaction;
 8007eda:	bf00      	nop
	}

	end_of_transaction:

	/* Give back UART mutex */
	xSemaphoreGive(uart->rx_mutex);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6858      	ldr	r0, [r3, #4]
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	f002 f86f 	bl	8009fc8 <xQueueGenericSend>

	exit:
	return rtn;
 8007eea:	f107 0314 	add.w	r3, r7, #20
 8007eee:	f107 0210 	add.w	r2, r7, #16
 8007ef2:	6812      	ldr	r2, [r2, #0]
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	8019      	strh	r1, [r3, #0]
 8007ef8:	3302      	adds	r3, #2
 8007efa:	0c12      	lsrs	r2, r2, #16
 8007efc:	701a      	strb	r2, [r3, #0]
 8007efe:	2300      	movs	r3, #0
 8007f00:	7d3a      	ldrb	r2, [r7, #20]
 8007f02:	f362 0307 	bfi	r3, r2, #0, #8
 8007f06:	7d7a      	ldrb	r2, [r7, #21]
 8007f08:	f362 230f 	bfi	r3, r2, #8, #8
 8007f0c:	7dba      	ldrb	r2, [r7, #22]
 8007f0e:	f362 4317 	bfi	r3, r2, #16, #8
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <uart_freertos_tx_dma>:


/* Transmit data through UART whithout interupts */
uart_freertos_status uart_freertos_tx_dma (uart_freertos_t* uart, const void* data, size_t data_size, TickType_t mutex_timeout, TickType_t transfer_timeout)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b086      	sub	sp, #24
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	60b9      	str	r1, [r7, #8]
 8007f24:	607a      	str	r2, [r7, #4]
 8007f26:	603b      	str	r3, [r7, #0]
	uart_freertos_status rtn = UART_FREERTOS_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	75fb      	strb	r3, [r7, #23]

	if(xSemaphoreTake(uart->tx_mutex, mutex_timeout) == pdFALSE)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f002 fab4 	bl	800a4a0 <xQueueSemaphoreTake>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d102      	bne.n	8007f44 <uart_freertos_tx_dma+0x2a>
	{
		rtn = UART_FREERTOS_BUSY;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8007f42:	e029      	b.n	8007f98 <uart_freertos_tx_dma+0x7e>
	}

	rtn =  parse_hal_status ( HAL_UART_Transmit_DMA(uart->huart,(void*) data, data_size));
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	b292      	uxth	r2, r2
 8007f4c:	68b9      	ldr	r1, [r7, #8]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fd fc2e 	bl	80057b0 <HAL_UART_Transmit_DMA>
 8007f54:	4603      	mov	r3, r0
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7ff fe8e 	bl	8007c78 <parse_hal_status>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	75fb      	strb	r3, [r7, #23]

	if ((rtn == UART_FREERTOS_ERR) || (rtn == UART_FREERTOS_BUSY) ) goto end_of_transaction;
 8007f60:	7dfb      	ldrb	r3, [r7, #23]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d00e      	beq.n	8007f84 <uart_freertos_tx_dma+0x6a>
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d00b      	beq.n	8007f84 <uart_freertos_tx_dma+0x6a>

	/* Waiting for tx complete */
	if(xSemaphoreTake(uart->tx_complete,transfer_timeout) == pdFALSE)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	6a39      	ldr	r1, [r7, #32]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f002 fa94 	bl	800a4a0 <xQueueSemaphoreTake>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d104      	bne.n	8007f88 <uart_freertos_tx_dma+0x6e>
	{
		rtn = UART_FREERTOS_TIMEOUT;
 8007f7e:	2304      	movs	r3, #4
 8007f80:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8007f82:	e002      	b.n	8007f8a <uart_freertos_tx_dma+0x70>
	if ((rtn == UART_FREERTOS_ERR) || (rtn == UART_FREERTOS_BUSY) ) goto end_of_transaction;
 8007f84:	bf00      	nop
 8007f86:	e000      	b.n	8007f8a <uart_freertos_tx_dma+0x70>
	}

	end_of_transaction:
 8007f88:	bf00      	nop

	/* Give back UART mutex */
	xSemaphoreGive(uart->tx_mutex);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6898      	ldr	r0, [r3, #8]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	2200      	movs	r2, #0
 8007f92:	2100      	movs	r1, #0
 8007f94:	f002 f818 	bl	8009fc8 <xQueueGenericSend>

	exit:
	return rtn;
 8007f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <uart_freertos_rx_dma_idle>:
}

/* Recieve data through UART whithout interupts */
uart_freertos_status_t uart_freertos_rx_dma_idle (uart_freertos_t* uart, const void* data, size_t data_size,
		TickType_t mutex_timeout,TickType_t expectation_timeout, TickType_t idle_timeout)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b088      	sub	sp, #32
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	60f8      	str	r0, [r7, #12]
 8007faa:	60b9      	str	r1, [r7, #8]
 8007fac:	607a      	str	r2, [r7, #4]
 8007fae:	603b      	str	r3, [r7, #0]
	uart_freertos_status_t rtn ;
	rtn.status = UART_FREERTOS_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	75bb      	strb	r3, [r7, #22]
	rtn.rx_size = 0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	82bb      	strh	r3, [r7, #20]
	TickType_t timeout;

	if(xSemaphoreTake(uart->rx_mutex, mutex_timeout) == pdFALSE)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f002 fa6e 	bl	800a4a0 <xQueueSemaphoreTake>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d102      	bne.n	8007fd0 <uart_freertos_rx_dma_idle+0x2e>
	{
		rtn.status = UART_FREERTOS_BUSY;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	75bb      	strb	r3, [r7, #22]
		goto exit;
 8007fce:	e084      	b.n	80080da <uart_freertos_rx_dma_idle+0x138>
	}

	/* Turn IDLE interrupt*/
	SET_BIT(uart->huart->Instance->CR1,USART_CR1_IDLEIE);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68da      	ldr	r2, [r3, #12]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f042 0210 	orr.w	r2, r2, #16
 8007fe2:	60da      	str	r2, [r3, #12]
	rtn.status =  parse_hal_status ( HAL_UART_Receive_DMA(uart->huart,(void*) data, data_size));
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	b292      	uxth	r2, r2
 8007fec:	68b9      	ldr	r1, [r7, #8]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fd fc4a 	bl	8005888 <HAL_UART_Receive_DMA>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7ff fe3e 	bl	8007c78 <parse_hal_status>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	75bb      	strb	r3, [r7, #22]

	if ((rtn.status == UART_FREERTOS_ERR) || (rtn.status == UART_FREERTOS_BUSY) ) goto end_of_transaction;
 8008000:	7dbb      	ldrb	r3, [r7, #22]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d047      	beq.n	8008096 <uart_freertos_rx_dma_idle+0xf4>
 8008006:	7dbb      	ldrb	r3, [r7, #22]
 8008008:	2b03      	cmp	r3, #3
 800800a:	d044      	beq.n	8008096 <uart_freertos_rx_dma_idle+0xf4>

	/* Waiting for tx complete */

	timeout = expectation_timeout;
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	61fb      	str	r3, [r7, #28]

	do
	{
		rtn.rx_size = data_size -__HAL_DMA_GET_COUNTER(uart->huart->hdmarx);	//	current count rx bytes
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	b29a      	uxth	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	b29b      	uxth	r3, r3
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	b29b      	uxth	r3, r3
 8008024:	82bb      	strh	r3, [r7, #20]

		if (xSemaphoreTake(uart->rx_complete,timeout) == pdFALSE)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	69f9      	ldr	r1, [r7, #28]
 800802c:	4618      	mov	r0, r3
 800802e:	f002 fa37 	bl	800a4a0 <xQueueSemaphoreTake>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d117      	bne.n	8008068 <uart_freertos_rx_dma_idle+0xc6>
		{
			if( __HAL_DMA_GET_COUNTER(uart->huart->hdmarx) == data_size)	// if receive not start
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	429a      	cmp	r2, r3
 8008046:	d102      	bne.n	800804e <uart_freertos_rx_dma_idle+0xac>
			{
				rtn.status = UART_FREERTOS_TIMEOUT;
 8008048:	2304      	movs	r3, #4
 800804a:	75bb      	strb	r3, [r7, #22]
				goto end_of_transaction;
 800804c:	e024      	b.n	8008098 <uart_freertos_rx_dma_idle+0xf6>
			}
			else if( data_size -__HAL_DMA_GET_COUNTER(uart->huart->hdmarx) == rtn.rx_size)	// if IDLE timeout stop
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	8aba      	ldrh	r2, [r7, #20]
 800805e:	4293      	cmp	r3, r2
 8008060:	d10c      	bne.n	800807c <uart_freertos_rx_dma_idle+0xda>
			{
				rtn.status = UART_FREERTOS_IDLE;
 8008062:	2306      	movs	r3, #6
 8008064:	75bb      	strb	r3, [r7, #22]
				goto end_of_transaction;
 8008066:	e017      	b.n	8008098 <uart_freertos_rx_dma_idle+0xf6>
			}
		}
		else
		{
			if(__HAL_DMA_GET_COUNTER(uart->huart->hdmarx) == 0) // buffer is empty, It is DMA interrupt
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d102      	bne.n	800807c <uart_freertos_rx_dma_idle+0xda>
			{
				rtn.status = UART_FREERTOS_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	75bb      	strb	r3, [r7, #22]
				goto end_of_transaction;
 800807a:	e00d      	b.n	8008098 <uart_freertos_rx_dma_idle+0xf6>
			}
		}
		timeout = idle_timeout;	//
 800807c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807e:	61fb      	str	r3, [r7, #28]
	}while ((data_size - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx)) - rtn.rx_size ); // if we have receive data do again
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	8aba      	ldrh	r2, [r7, #20]
 8008090:	4293      	cmp	r3, r2
 8008092:	d1bd      	bne.n	8008010 <uart_freertos_rx_dma_idle+0x6e>

	end_of_transaction:
 8008094:	e000      	b.n	8008098 <uart_freertos_rx_dma_idle+0xf6>
	if ((rtn.status == UART_FREERTOS_ERR) || (rtn.status == UART_FREERTOS_BUSY) ) goto end_of_transaction;
 8008096:	bf00      	nop

	HAL_UART_AbortReceive_IT(uart->huart);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4618      	mov	r0, r3
 800809e:	f7fd fc23 	bl	80058e8 <HAL_UART_AbortReceive_IT>
	rtn.rx_size = data_size - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);	// size of rx data
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	82bb      	strh	r3, [r7, #20]

	CLEAR_BIT(uart->huart->Instance->CR1,USART_CR1_IDLEIE); // turn off IDLE interrupt
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68da      	ldr	r2, [r3, #12]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 0210 	bic.w	r2, r2, #16
 80080ca:	60da      	str	r2, [r3, #12]

	/* Give back UART mutex */
	xSemaphoreGive(uart->rx_mutex);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6858      	ldr	r0, [r3, #4]
 80080d0:	2300      	movs	r3, #0
 80080d2:	2200      	movs	r2, #0
 80080d4:	2100      	movs	r1, #0
 80080d6:	f001 ff77 	bl	8009fc8 <xQueueGenericSend>

	exit:
	return rtn;
 80080da:	f107 0318 	add.w	r3, r7, #24
 80080de:	f107 0214 	add.w	r2, r7, #20
 80080e2:	6812      	ldr	r2, [r2, #0]
 80080e4:	4611      	mov	r1, r2
 80080e6:	8019      	strh	r1, [r3, #0]
 80080e8:	3302      	adds	r3, #2
 80080ea:	0c12      	lsrs	r2, r2, #16
 80080ec:	701a      	strb	r2, [r3, #0]
 80080ee:	2300      	movs	r3, #0
 80080f0:	7e3a      	ldrb	r2, [r7, #24]
 80080f2:	f362 0307 	bfi	r3, r2, #0, #8
 80080f6:	7e7a      	ldrb	r2, [r7, #25]
 80080f8:	f362 230f 	bfi	r3, r2, #8, #8
 80080fc:	7eba      	ldrb	r2, [r7, #26]
 80080fe:	f362 4317 	bfi	r3, r2, #16, #8
}
 8008102:	4618      	mov	r0, r3
 8008104:	3720      	adds	r7, #32
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <HAL_UART_RxCpltCallback>:

/* USART RX complete inperrupt */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008114:	2300      	movs	r3, #0
 8008116:	60bb      	str	r3, [r7, #8]
	struct uart_rtos_list *item = uart_rtos_list_find_item(huart);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7ff fd5d 	bl	8007bd8 <uart_rtos_list_find_item>
 800811e:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d014      	beq.n	8008150 <HAL_UART_RxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->uart_rtos->rx_complete,	&xHigherPriorityTaskWoken);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f107 0208 	add.w	r2, r7, #8
 8008130:	4611      	mov	r1, r2
 8008132:	4618      	mov	r0, r3
 8008134:	f002 f846 	bl	800a1c4 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d009      	beq.n	8008152 <HAL_UART_RxCpltCallback+0x46>
 800813e:	4b06      	ldr	r3, [pc, #24]	; (8008158 <HAL_UART_RxCpltCallback+0x4c>)
 8008140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008144:	601a      	str	r2, [r3, #0]
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	e000      	b.n	8008152 <HAL_UART_RxCpltCallback+0x46>
	if(item == NULL) return;
 8008150:	bf00      	nop
}
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	e000ed04 	.word	0xe000ed04

0800815c <HAL_UART_TxCpltCallback>:

/* USART TX complete inperrupt */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008164:	2300      	movs	r3, #0
 8008166:	60bb      	str	r3, [r7, #8]
	struct uart_rtos_list *item = uart_rtos_list_find_item(huart);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7ff fd35 	bl	8007bd8 <uart_rtos_list_find_item>
 800816e:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d014      	beq.n	80081a0 <HAL_UART_TxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->uart_rtos->tx_complete,	&xHigherPriorityTaskWoken);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	f107 0208 	add.w	r2, r7, #8
 8008180:	4611      	mov	r1, r2
 8008182:	4618      	mov	r0, r3
 8008184:	f002 f81e 	bl	800a1c4 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d009      	beq.n	80081a2 <HAL_UART_TxCpltCallback+0x46>
 800818e:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <HAL_UART_TxCpltCallback+0x4c>)
 8008190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	e000      	b.n	80081a2 <HAL_UART_TxCpltCallback+0x46>
	if(item == NULL) return;
 80081a0:	bf00      	nop
}
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	e000ed04 	.word	0xe000ed04

080081ac <Compl_Sum>:
/********************************************************************************/
/*						Function Complex Operation 								*/
/********************************************************************************/

compl_t Compl_Sum(compl_t *Item_1, compl_t *Item_2)
{
 80081ac:	b590      	push	{r4, r7, lr}
 80081ae:	b089      	sub	sp, #36	; 0x24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]

	compl_t	Sum 						= 	{0, 0};
 80081b8:	f107 0314 	add.w	r3, r7, #20
 80081bc:	2200      	movs	r2, #0
 80081be:	601a      	str	r2, [r3, #0]
 80081c0:	605a      	str	r2, [r3, #4]
 80081c2:	609a      	str	r2, [r3, #8]

	Sum.Real							=	Item_1->Real + Item_2->Real;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4619      	mov	r1, r3
 80081ce:	4610      	mov	r0, r2
 80081d0:	f7f8 fca0 	bl	8000b14 <__addsf3>
 80081d4:	4603      	mov	r3, r0
 80081d6:	617b      	str	r3, [r7, #20]

	Sum.Imag							=	Item_1->Imag + Item_2->Imag;
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	4619      	mov	r1, r3
 80081e2:	4610      	mov	r0, r2
 80081e4:	f7f8 fc96 	bl	8000b14 <__addsf3>
 80081e8:	4603      	mov	r3, r0
 80081ea:	61bb      	str	r3, [r7, #24]

	return(Sum);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	461c      	mov	r4, r3
 80081f0:	f107 0314 	add.w	r3, r7, #20
 80081f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80081f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}

}
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	3724      	adds	r7, #36	; 0x24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd90      	pop	{r4, r7, pc}

08008204 <Compl_Product>:

compl_t Compl_Product(compl_t *Item_1, compl_t *Item_2)
{
 8008204:	b590      	push	{r4, r7, lr}
 8008206:	b089      	sub	sp, #36	; 0x24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
	compl_t Prod 						= 	{0, 0};
 8008210:	f107 0314 	add.w	r3, r7, #20
 8008214:	2200      	movs	r2, #0
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	605a      	str	r2, [r3, #4]
 800821a:	609a      	str	r2, [r3, #8]

	Prod.Real							=	(Item_1->Real * Item_2->Real) - (Item_1->Imag * Item_2->Imag);
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4619      	mov	r1, r3
 8008226:	4610      	mov	r0, r2
 8008228:	f7f8 fd7c 	bl	8000d24 <__aeabi_fmul>
 800822c:	4603      	mov	r3, r0
 800822e:	461c      	mov	r4, r3
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	4619      	mov	r1, r3
 800823a:	4610      	mov	r0, r2
 800823c:	f7f8 fd72 	bl	8000d24 <__aeabi_fmul>
 8008240:	4603      	mov	r3, r0
 8008242:	4619      	mov	r1, r3
 8008244:	4620      	mov	r0, r4
 8008246:	f7f8 fc63 	bl	8000b10 <__aeabi_fsub>
 800824a:	4603      	mov	r3, r0
 800824c:	617b      	str	r3, [r7, #20]

	Prod.Imag							=	(Item_1->Real * Item_2->Imag) + (Item_1->Imag * Item_2->Real);
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	4619      	mov	r1, r3
 8008258:	4610      	mov	r0, r2
 800825a:	f7f8 fd63 	bl	8000d24 <__aeabi_fmul>
 800825e:	4603      	mov	r3, r0
 8008260:	461c      	mov	r4, r3
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4619      	mov	r1, r3
 800826c:	4610      	mov	r0, r2
 800826e:	f7f8 fd59 	bl	8000d24 <__aeabi_fmul>
 8008272:	4603      	mov	r3, r0
 8008274:	4619      	mov	r1, r3
 8008276:	4620      	mov	r0, r4
 8008278:	f7f8 fc4c 	bl	8000b14 <__addsf3>
 800827c:	4603      	mov	r3, r0
 800827e:	61bb      	str	r3, [r7, #24]

	return(Prod);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	461c      	mov	r4, r3
 8008284:	f107 0314 	add.w	r3, r7, #20
 8008288:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800828c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	3724      	adds	r7, #36	; 0x24
 8008294:	46bd      	mov	sp, r7
 8008296:	bd90      	pop	{r4, r7, pc}

08008298 <fCompl_Product>:

compl_t fCompl_Product(float *Item_1, compl_t *Item_2)
{
 8008298:	b590      	push	{r4, r7, lr}
 800829a:	b089      	sub	sp, #36	; 0x24
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
	compl_t Prod 						= 	{0, 0};
 80082a4:	f107 0314 	add.w	r3, r7, #20
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	605a      	str	r2, [r3, #4]
 80082ae:	609a      	str	r2, [r3, #8]

	Prod.Real							=	Item_2 -> Real * (*Item_1);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4619      	mov	r1, r3
 80082ba:	4610      	mov	r0, r2
 80082bc:	f7f8 fd32 	bl	8000d24 <__aeabi_fmul>
 80082c0:	4603      	mov	r3, r0
 80082c2:	617b      	str	r3, [r7, #20]

	Prod.Imag							=	Item_2 -> Imag * (*Item_1);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4619      	mov	r1, r3
 80082ce:	4610      	mov	r0, r2
 80082d0:	f7f8 fd28 	bl	8000d24 <__aeabi_fmul>
 80082d4:	4603      	mov	r3, r0
 80082d6:	61bb      	str	r3, [r7, #24]

	return(Prod);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	461c      	mov	r4, r3
 80082dc:	f107 0314 	add.w	r3, r7, #20
 80082e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80082e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	3724      	adds	r7, #36	; 0x24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd90      	pop	{r4, r7, pc}

080082f0 <Compl_Pairing>:
	return (Exp2Algebraic(&Exp));

}

void Compl_Pairing(compl_t *Item_1)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]

	Item_1 -> Imag = -Item_1 -> Imag;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	605a      	str	r2, [r3, #4]

	return;
 8008304:	bf00      	nop

}
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	bc80      	pop	{r7}
 800830c:	4770      	bx	lr
	...

08008310 <Compl_Sin>:
/********************************************************************************/
/*						Function Trigonometrick Operation 						*/
/********************************************************************************/

float Compl_Sin(float *Arg)
{
 8008310:	b5b0      	push	{r4, r5, r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]

	float Sin_Current					=	0;
 8008318:	f04f 0300 	mov.w	r3, #0
 800831c:	617b      	str	r3, [r7, #20]
	float Sin_Previous 					=	1;
 800831e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008322:	613b      	str	r3, [r7, #16]

	float Eps 							=	1e-3;
 8008324:	4b42      	ldr	r3, [pc, #264]	; (8008430 <Compl_Sin+0x120>)
 8008326:	60bb      	str	r3, [r7, #8]

	uint32_t Iter 						=	0;
 8008328:	2300      	movs	r3, #0
 800832a:	60fb      	str	r3, [r7, #12]

	if (*Arg > M_2PI || *Arg < - M_2PI)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4940      	ldr	r1, [pc, #256]	; (8008434 <Compl_Sin+0x124>)
 8008332:	4618      	mov	r0, r3
 8008334:	f7f8 feb2 	bl	800109c <__aeabi_fcmpgt>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d108      	bne.n	8008350 <Compl_Sin+0x40>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	493d      	ldr	r1, [pc, #244]	; (8008438 <Compl_Sin+0x128>)
 8008344:	4618      	mov	r0, r3
 8008346:	f7f8 fe8b 	bl	8001060 <__aeabi_fcmplt>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d012      	beq.n	8008376 <Compl_Sin+0x66>
	{
		*Arg  							=	fmod(*Arg, M_2PI);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4618      	mov	r0, r3
 8008356:	f7f8 f85f 	bl	8000418 <__aeabi_f2d>
 800835a:	a333      	add	r3, pc, #204	; (adr r3, 8008428 <Compl_Sin+0x118>)
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	f004 fab0 	bl	800c8c4 <fmod>
 8008364:	4602      	mov	r2, r0
 8008366:	460b      	mov	r3, r1
 8008368:	4610      	mov	r0, r2
 800836a:	4619      	mov	r1, r3
 800836c:	f7f8 fb7c 	bl	8000a68 <__aeabi_d2f>
 8008370:	4602      	mov	r2, r0
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	601a      	str	r2, [r3, #0]
	}

	while (fabs(Sin_Current - Sin_Previous) > Eps)
 8008376:	e042      	b.n	80083fe <Compl_Sin+0xee>
	{


		Sin_Previous 					=	Sin_Current;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	613b      	str	r3, [r7, #16]

		Sin_Current 					+=	(Iter % 2 == 0 ? 1: -1) * BinaryPower(*Arg, 2 * Iter + 1) /
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f003 0301 	and.w	r3, r3, #1
 8008382:	2b00      	cmp	r3, #0
 8008384:	d102      	bne.n	800838c <Compl_Sin+0x7c>
 8008386:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 800838a:	e000      	b.n	800838e <Compl_Sin+0x7e>
 800838c:	4c2b      	ldr	r4, [pc, #172]	; (800843c <Compl_Sin+0x12c>)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	3301      	adds	r3, #1
 8008398:	4619      	mov	r1, r3
 800839a:	4610      	mov	r0, r2
 800839c:	f000 f948 	bl	8008630 <BinaryPower>
 80083a0:	4603      	mov	r3, r0
 80083a2:	4619      	mov	r1, r3
 80083a4:	4620      	mov	r0, r4
 80083a6:	f7f8 fcbd 	bl	8000d24 <__aeabi_fmul>
 80083aa:	4603      	mov	r3, r0
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7f8 f833 	bl	8000418 <__aeabi_f2d>
 80083b2:	4604      	mov	r4, r0
 80083b4:	460d      	mov	r5, r1
											/*-------------------------------------------------------*/
																fact(2 * Iter + 1);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	005b      	lsls	r3, r3, #1
 80083ba:	3301      	adds	r3, #1
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 f907 	bl	80085d0 <fact>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
		Sin_Current 					+=	(Iter % 2 == 0 ? 1: -1) * BinaryPower(*Arg, 2 * Iter + 1) /
 80083c6:	4620      	mov	r0, r4
 80083c8:	4629      	mov	r1, r5
 80083ca:	f7f8 f9a7 	bl	800071c <__aeabi_ddiv>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	4614      	mov	r4, r2
 80083d4:	461d      	mov	r5, r3
 80083d6:	6978      	ldr	r0, [r7, #20]
 80083d8:	f7f8 f81e 	bl	8000418 <__aeabi_f2d>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	4620      	mov	r0, r4
 80083e2:	4629      	mov	r1, r5
 80083e4:	f7f7 feba 	bl	800015c <__adddf3>
 80083e8:	4602      	mov	r2, r0
 80083ea:	460b      	mov	r3, r1
 80083ec:	4610      	mov	r0, r2
 80083ee:	4619      	mov	r1, r3
 80083f0:	f7f8 fb3a 	bl	8000a68 <__aeabi_d2f>
 80083f4:	4603      	mov	r3, r0
 80083f6:	617b      	str	r3, [r7, #20]

		Iter++;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3301      	adds	r3, #1
 80083fc:	60fb      	str	r3, [r7, #12]
	while (fabs(Sin_Current - Sin_Previous) > Eps)
 80083fe:	6939      	ldr	r1, [r7, #16]
 8008400:	6978      	ldr	r0, [r7, #20]
 8008402:	f7f8 fb85 	bl	8000b10 <__aeabi_fsub>
 8008406:	4603      	mov	r3, r0
 8008408:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800840c:	4619      	mov	r1, r3
 800840e:	68b8      	ldr	r0, [r7, #8]
 8008410:	f7f8 fe26 	bl	8001060 <__aeabi_fcmplt>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1ae      	bne.n	8008378 <Compl_Sin+0x68>

	}

	return(Sin_Current);
 800841a:	697b      	ldr	r3, [r7, #20]

}
 800841c:	4618      	mov	r0, r3
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bdb0      	pop	{r4, r5, r7, pc}
 8008424:	f3af 8000 	nop.w
 8008428:	60000000 	.word	0x60000000
 800842c:	401921fb 	.word	0x401921fb
 8008430:	3a83126f 	.word	0x3a83126f
 8008434:	40c90fdb 	.word	0x40c90fdb
 8008438:	c0c90fdb 	.word	0xc0c90fdb
 800843c:	bf800000 	.word	0xbf800000

08008440 <Compl_Cos>:

float Compl_Cos(float *Arg)
{
 8008440:	b5b0      	push	{r4, r5, r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]

	float Cos_Current					=	0;
 8008448:	f04f 0300 	mov.w	r3, #0
 800844c:	617b      	str	r3, [r7, #20]
	float Cos_Previous 					=	1;
 800844e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008452:	613b      	str	r3, [r7, #16]

	float Eps 							=	1e-3;
 8008454:	4b40      	ldr	r3, [pc, #256]	; (8008558 <Compl_Cos+0x118>)
 8008456:	60bb      	str	r3, [r7, #8]

	uint32_t Iter 						=	0;
 8008458:	2300      	movs	r3, #0
 800845a:	60fb      	str	r3, [r7, #12]

	if (*Arg > M_2PI || *Arg < - M_2PI)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	493e      	ldr	r1, [pc, #248]	; (800855c <Compl_Cos+0x11c>)
 8008462:	4618      	mov	r0, r3
 8008464:	f7f8 fe1a 	bl	800109c <__aeabi_fcmpgt>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d108      	bne.n	8008480 <Compl_Cos+0x40>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	493b      	ldr	r1, [pc, #236]	; (8008560 <Compl_Cos+0x120>)
 8008474:	4618      	mov	r0, r3
 8008476:	f7f8 fdf3 	bl	8001060 <__aeabi_fcmplt>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d012      	beq.n	80084a6 <Compl_Cos+0x66>
	{
		*Arg  							=	fmod(*Arg, M_2PI);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4618      	mov	r0, r3
 8008486:	f7f7 ffc7 	bl	8000418 <__aeabi_f2d>
 800848a:	a331      	add	r3, pc, #196	; (adr r3, 8008550 <Compl_Cos+0x110>)
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	f004 fa18 	bl	800c8c4 <fmod>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	4610      	mov	r0, r2
 800849a:	4619      	mov	r1, r3
 800849c:	f7f8 fae4 	bl	8000a68 <__aeabi_d2f>
 80084a0:	4602      	mov	r2, r0
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	601a      	str	r2, [r3, #0]
	}

	while (fabs(Cos_Current - Cos_Previous) > Eps)
 80084a6:	e040      	b.n	800852a <Compl_Cos+0xea>
	{



		Cos_Previous 					=	Cos_Current;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	613b      	str	r3, [r7, #16]

		Cos_Current 					+=	(Iter % 2 < 1e-10 ? 1: -1) * BinaryPower(*Arg, 2 * Iter) /
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f003 0301 	and.w	r3, r3, #1
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d102      	bne.n	80084bc <Compl_Cos+0x7c>
 80084b6:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 80084ba:	e000      	b.n	80084be <Compl_Cos+0x7e>
 80084bc:	4c29      	ldr	r4, [pc, #164]	; (8008564 <Compl_Cos+0x124>)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	005b      	lsls	r3, r3, #1
 80084c6:	4619      	mov	r1, r3
 80084c8:	4610      	mov	r0, r2
 80084ca:	f000 f8b1 	bl	8008630 <BinaryPower>
 80084ce:	4603      	mov	r3, r0
 80084d0:	4619      	mov	r1, r3
 80084d2:	4620      	mov	r0, r4
 80084d4:	f7f8 fc26 	bl	8000d24 <__aeabi_fmul>
 80084d8:	4603      	mov	r3, r0
 80084da:	4618      	mov	r0, r3
 80084dc:	f7f7 ff9c 	bl	8000418 <__aeabi_f2d>
 80084e0:	4604      	mov	r4, r0
 80084e2:	460d      	mov	r5, r1
											/*---------------------------------------------------*/
															    fact(2 * Iter);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 f871 	bl	80085d0 <fact>
 80084ee:	4602      	mov	r2, r0
 80084f0:	460b      	mov	r3, r1
		Cos_Current 					+=	(Iter % 2 < 1e-10 ? 1: -1) * BinaryPower(*Arg, 2 * Iter) /
 80084f2:	4620      	mov	r0, r4
 80084f4:	4629      	mov	r1, r5
 80084f6:	f7f8 f911 	bl	800071c <__aeabi_ddiv>
 80084fa:	4602      	mov	r2, r0
 80084fc:	460b      	mov	r3, r1
 80084fe:	4614      	mov	r4, r2
 8008500:	461d      	mov	r5, r3
 8008502:	6978      	ldr	r0, [r7, #20]
 8008504:	f7f7 ff88 	bl	8000418 <__aeabi_f2d>
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	4620      	mov	r0, r4
 800850e:	4629      	mov	r1, r5
 8008510:	f7f7 fe24 	bl	800015c <__adddf3>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	4610      	mov	r0, r2
 800851a:	4619      	mov	r1, r3
 800851c:	f7f8 faa4 	bl	8000a68 <__aeabi_d2f>
 8008520:	4603      	mov	r3, r0
 8008522:	617b      	str	r3, [r7, #20]
		Iter++;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3301      	adds	r3, #1
 8008528:	60fb      	str	r3, [r7, #12]
	while (fabs(Cos_Current - Cos_Previous) > Eps)
 800852a:	6939      	ldr	r1, [r7, #16]
 800852c:	6978      	ldr	r0, [r7, #20]
 800852e:	f7f8 faef 	bl	8000b10 <__aeabi_fsub>
 8008532:	4603      	mov	r3, r0
 8008534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008538:	4619      	mov	r1, r3
 800853a:	68b8      	ldr	r0, [r7, #8]
 800853c:	f7f8 fd90 	bl	8001060 <__aeabi_fcmplt>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1b0      	bne.n	80084a8 <Compl_Cos+0x68>

	}

	return(Cos_Current);
 8008546:	697b      	ldr	r3, [r7, #20]

}
 8008548:	4618      	mov	r0, r3
 800854a:	3718      	adds	r7, #24
 800854c:	46bd      	mov	sp, r7
 800854e:	bdb0      	pop	{r4, r5, r7, pc}
 8008550:	60000000 	.word	0x60000000
 8008554:	401921fb 	.word	0x401921fb
 8008558:	3a83126f 	.word	0x3a83126f
 800855c:	40c90fdb 	.word	0x40c90fdb
 8008560:	c0c90fdb 	.word	0xc0c90fdb
 8008564:	bf800000 	.word	0xbf800000

08008568 <Compl_Abs>:
	return(ATan_Current);

}

float Compl_Abs(compl_t *Value)
{
 8008568:	b5b0      	push	{r4, r5, r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]

	return ( sqrt( pow(Value->Real, 2) + pow(Value->Imag, 2) ) );
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4618      	mov	r0, r3
 8008576:	f7f7 ff4f 	bl	8000418 <__aeabi_f2d>
 800857a:	f04f 0200 	mov.w	r2, #0
 800857e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008582:	f004 f9d5 	bl	800c930 <pow>
 8008586:	4604      	mov	r4, r0
 8008588:	460d      	mov	r5, r1
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	4618      	mov	r0, r3
 8008590:	f7f7 ff42 	bl	8000418 <__aeabi_f2d>
 8008594:	f04f 0200 	mov.w	r2, #0
 8008598:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800859c:	f004 f9c8 	bl	800c930 <pow>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	4620      	mov	r0, r4
 80085a6:	4629      	mov	r1, r5
 80085a8:	f7f7 fdd8 	bl	800015c <__adddf3>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	4610      	mov	r0, r2
 80085b2:	4619      	mov	r1, r3
 80085b4:	f004 fa68 	bl	800ca88 <sqrt>
 80085b8:	4602      	mov	r2, r0
 80085ba:	460b      	mov	r3, r1
 80085bc:	4610      	mov	r0, r2
 80085be:	4619      	mov	r1, r3
 80085c0:	f7f8 fa52 	bl	8000a68 <__aeabi_d2f>
 80085c4:	4603      	mov	r3, r0

}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080085d0 <fact>:

double fact(uint32_t Value)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
	double Fact 					    =	1;
 80085d8:	f04f 0200 	mov.w	r2, #0
 80085dc:	4b13      	ldr	r3, [pc, #76]	; (800862c <fact+0x5c>)
 80085de:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint16_t Iter 						=	1;
 80085e2:	2301      	movs	r3, #1
 80085e4:	81fb      	strh	r3, [r7, #14]

	if (Value == 0)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d114      	bne.n	8008616 <fact+0x46>
	{
		return( (uint16_t) 1 );
 80085ec:	f04f 0200 	mov.w	r2, #0
 80085f0:	4b0e      	ldr	r3, [pc, #56]	; (800862c <fact+0x5c>)
 80085f2:	e016      	b.n	8008622 <fact+0x52>
	}

	while (Iter <= Value)
	{

		Fact 							*=	Iter;
 80085f4:	89fb      	ldrh	r3, [r7, #14]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7f7 fefc 	bl	80003f4 <__aeabi_i2d>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008604:	f7f7 ff60 	bl	80004c8 <__aeabi_dmul>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	e9c7 2304 	strd	r2, r3, [r7, #16]

		Iter++;
 8008610:	89fb      	ldrh	r3, [r7, #14]
 8008612:	3301      	adds	r3, #1
 8008614:	81fb      	strh	r3, [r7, #14]
	while (Iter <= Value)
 8008616:	89fb      	ldrh	r3, [r7, #14]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	429a      	cmp	r2, r3
 800861c:	d2ea      	bcs.n	80085f4 <fact+0x24>

	}

	return (Fact);
 800861e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]

}
 8008622:	4610      	mov	r0, r2
 8008624:	4619      	mov	r1, r3
 8008626:	3718      	adds	r7, #24
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	3ff00000 	.word	0x3ff00000

08008630 <BinaryPower>:

float BinaryPower(float Power, uint32_t Exponent)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
	double Result = 1.0;
 800863a:	f04f 0200 	mov.w	r2, #0
 800863e:	4b15      	ldr	r3, [pc, #84]	; (8008694 <BinaryPower+0x64>)
 8008640:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while(Exponent != 0)
 8008644:	e01a      	b.n	800867c <BinaryPower+0x4c>
	{
		if((Exponent & 1) != 0)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00c      	beq.n	800866a <BinaryPower+0x3a>
		{
			Result *= Power;
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f7f7 fee1 	bl	8000418 <__aeabi_f2d>
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800865e:	f7f7 ff33 	bl	80004c8 <__aeabi_dmul>
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}
		Power *= Power;
 800866a:	6879      	ldr	r1, [r7, #4]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7f8 fb59 	bl	8000d24 <__aeabi_fmul>
 8008672:	4603      	mov	r3, r0
 8008674:	607b      	str	r3, [r7, #4]
		Exponent >>= 1;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	085b      	lsrs	r3, r3, #1
 800867a:	603b      	str	r3, [r7, #0]
	while(Exponent != 0)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1e1      	bne.n	8008646 <BinaryPower+0x16>
   }
   return ((float) Result);
 8008682:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008686:	f7f8 f9ef 	bl	8000a68 <__aeabi_d2f>
 800868a:	4603      	mov	r3, r0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	3ff00000 	.word	0x3ff00000

08008698 <FastFurieTransform>:
#include "FFT_FREERTOS.h"
void FastFurieTransform(compl_t *Furie_Transform, uint32_t Length_Realization)
{
 8008698:	b5b0      	push	{r4, r5, r7, lr}
 800869a:	b09a      	sub	sp, #104	; 0x68
 800869c:	af00      	add	r7, sp, #0
 800869e:	6178      	str	r0, [r7, #20]
 80086a0:	6139      	str	r1, [r7, #16]
	uint32_t Length_End_Vector				=	Length_Realization;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	667b      	str	r3, [r7, #100]	; 0x64

	uint32_t Number_Elements				=	0;
 80086a6:	2300      	movs	r3, #0
 80086a8:	663b      	str	r3, [r7, #96]	; 0x60
	uint32_t Number_Vectors					=	1;
 80086aa:	2301      	movs	r3, #1
 80086ac:	65fb      	str	r3, [r7, #92]	; 0x5c
	compl_t  Assistive_Variable;
	compl_t  Assistive_Sum;

	float Arg_Exp;

	float Quantity_Vectors = 1;
 80086ae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80086b2:	61bb      	str	r3, [r7, #24]

    while(Length_End_Vector > 2)
 80086b4:	e0d8      	b.n	8008868 <FastFurieTransform+0x1d0>
	{
		Arg_Exp								=	M_2PI / Length_End_Vector * Number_Elements;
 80086b6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80086b8:	f7f8 fadc 	bl	8000c74 <__aeabi_ui2f>
 80086bc:	4603      	mov	r3, r0
 80086be:	4619      	mov	r1, r3
 80086c0:	48b5      	ldr	r0, [pc, #724]	; (8008998 <FastFurieTransform+0x300>)
 80086c2:	f7f8 fbe3 	bl	8000e8c <__aeabi_fdiv>
 80086c6:	4603      	mov	r3, r0
 80086c8:	461c      	mov	r4, r3
 80086ca:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80086cc:	f7f8 fad2 	bl	8000c74 <__aeabi_ui2f>
 80086d0:	4603      	mov	r3, r0
 80086d2:	4619      	mov	r1, r3
 80086d4:	4620      	mov	r0, r4
 80086d6:	f7f8 fb25 	bl	8000d24 <__aeabi_fmul>
 80086da:	4603      	mov	r3, r0
 80086dc:	61fb      	str	r3, [r7, #28]

		Exponential.Real					=	Compl_Cos(&Arg_Exp);
 80086de:	f107 031c 	add.w	r3, r7, #28
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7ff feac 	bl	8008440 <Compl_Cos>
 80086e8:	4603      	mov	r3, r0
 80086ea:	63bb      	str	r3, [r7, #56]	; 0x38
		Exponential.Imag					=  -Compl_Sin(&Arg_Exp);
 80086ec:	f107 031c 	add.w	r3, r7, #28
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7ff fe0d 	bl	8008310 <Compl_Sin>
 80086f6:	4603      	mov	r3, r0
 80086f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80086fc:	63fb      	str	r3, [r7, #60]	; 0x3c

		First_Index_Vector					=	Number_Elements + (Number_Vectors - 1) * Length_End_Vector;
 80086fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008700:	3b01      	subs	r3, #1
 8008702:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008704:	fb02 f303 	mul.w	r3, r2, r3
 8008708:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800870a:	4413      	add	r3, r2
 800870c:	64bb      	str	r3, [r7, #72]	; 0x48
		Half_Index_Vector 					=	First_Index_Vector + Length_End_Vector / 2;
 800870e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008710:	085b      	lsrs	r3, r3, #1
 8008712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008714:	4413      	add	r3, r2
 8008716:	647b      	str	r3, [r7, #68]	; 0x44

		Assistive_Variable.Real				=  -(Furie_Transform + Half_Index_Vector) -> Real;
 8008718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800871a:	4613      	mov	r3, r2
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	461a      	mov	r2, r3
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	4413      	add	r3, r2
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800872e:	62fb      	str	r3, [r7, #44]	; 0x2c
		Assistive_Variable.Imag				=  -(Furie_Transform + Half_Index_Vector) -> Imag;
 8008730:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008732:	4613      	mov	r3, r2
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	4413      	add	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	461a      	mov	r2, r3
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	4413      	add	r3, r2
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008746:	633b      	str	r3, [r7, #48]	; 0x30
		Assistive_Sum 						=	Compl_Sum((Furie_Transform + First_Index_Vector),
 8008748:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800874a:	4613      	mov	r3, r2
 800874c:	005b      	lsls	r3, r3, #1
 800874e:	4413      	add	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	461a      	mov	r2, r3
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	1899      	adds	r1, r3, r2
 8008758:	463b      	mov	r3, r7
 800875a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800875e:	4618      	mov	r0, r3
 8008760:	f7ff fd24 	bl	80081ac <Compl_Sum>
 8008764:	f107 0320 	add.w	r3, r7, #32
 8008768:	463a      	mov	r2, r7
 800876a:	ca07      	ldmia	r2, {r0, r1, r2}
 800876c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
														  &Assistive_Variable);

		*(Furie_Transform + Half_Index_Vector)
 8008770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008772:	4613      	mov	r3, r2
 8008774:	005b      	lsls	r3, r3, #1
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	461a      	mov	r2, r3
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	189c      	adds	r4, r3, r2
											=	Compl_Product(&Assistive_Sum,
 8008780:	463b      	mov	r3, r7
 8008782:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008786:	f107 0120 	add.w	r1, r7, #32
 800878a:	4618      	mov	r0, r3
 800878c:	f7ff fd3a 	bl	8008204 <Compl_Product>
 8008790:	463b      	mov	r3, r7
 8008792:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008796:	e884 0007 	stmia.w	r4, {r0, r1, r2}
															  &Exponential);

		Assistive_Variable.Real				=  -Assistive_Variable.Real;
 800879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80087a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		Assistive_Variable.Imag				=  -Assistive_Variable.Imag;
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80087a8:	633b      	str	r3, [r7, #48]	; 0x30

		*(Furie_Transform + First_Index_Vector)
											=	Compl_Sum((Furie_Transform + First_Index_Vector),
 80087aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087ac:	4613      	mov	r3, r2
 80087ae:	005b      	lsls	r3, r3, #1
 80087b0:	4413      	add	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	461a      	mov	r2, r3
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	1899      	adds	r1, r3, r2
		*(Furie_Transform + First_Index_Vector)
 80087ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087bc:	4613      	mov	r3, r2
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	4413      	add	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	461a      	mov	r2, r3
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	189c      	adds	r4, r3, r2
											=	Compl_Sum((Furie_Transform + First_Index_Vector),
 80087ca:	463b      	mov	r3, r7
 80087cc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7ff fceb 	bl	80081ac <Compl_Sum>
 80087d6:	463b      	mov	r3, r7
 80087d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80087dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
														  &Assistive_Variable);

		Number_Elements 					=	Number_Elements + 1;
 80087e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087e2:	3301      	adds	r3, #1
 80087e4:	663b      	str	r3, [r7, #96]	; 0x60

        if (fmod((float) Number_Elements, Length_End_Vector / 2) < 1e-10)
 80087e6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80087e8:	f7f8 fa44 	bl	8000c74 <__aeabi_ui2f>
 80087ec:	4603      	mov	r3, r0
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7f7 fe12 	bl	8000418 <__aeabi_f2d>
 80087f4:	4604      	mov	r4, r0
 80087f6:	460d      	mov	r5, r1
 80087f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087fa:	085b      	lsrs	r3, r3, #1
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7f7 fde9 	bl	80003d4 <__aeabi_ui2d>
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	4620      	mov	r0, r4
 8008808:	4629      	mov	r1, r5
 800880a:	f004 f85b 	bl	800c8c4 <fmod>
 800880e:	a360      	add	r3, pc, #384	; (adr r3, 8008990 <FastFurieTransform+0x2f8>)
 8008810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008814:	f7f8 f8ca 	bl	80009ac <__aeabi_dcmplt>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d100      	bne.n	8008820 <FastFurieTransform+0x188>
 800881e:	e023      	b.n	8008868 <FastFurieTransform+0x1d0>
		{
			Number_Elements 				=	0;
 8008820:	2300      	movs	r3, #0
 8008822:	663b      	str	r3, [r7, #96]	; 0x60

            if (Number_Vectors == Quantity_Vectors)
 8008824:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008826:	f7f8 fa25 	bl	8000c74 <__aeabi_ui2f>
 800882a:	4602      	mov	r2, r0
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	4619      	mov	r1, r3
 8008830:	4610      	mov	r0, r2
 8008832:	f7f8 fc0b 	bl	800104c <__aeabi_fcmpeq>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d012      	beq.n	8008862 <FastFurieTransform+0x1ca>
			{    
				Length_End_Vector 			=	Length_End_Vector / 2;
 800883c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800883e:	085b      	lsrs	r3, r3, #1
 8008840:	667b      	str	r3, [r7, #100]	; 0x64

				modff(Length_Realization/Length_End_Vector, &Quantity_Vectors);
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008846:	fbb2 f3f3 	udiv	r3, r2, r3
 800884a:	4618      	mov	r0, r3
 800884c:	f7f8 fa12 	bl	8000c74 <__aeabi_ui2f>
 8008850:	4602      	mov	r2, r0
 8008852:	f107 0318 	add.w	r3, r7, #24
 8008856:	4619      	mov	r1, r3
 8008858:	4610      	mov	r0, r2
 800885a:	f003 ffb9 	bl	800c7d0 <modff>

				Number_Vectors 				=   0;
 800885e:	2300      	movs	r3, #0
 8008860:	65fb      	str	r3, [r7, #92]	; 0x5c
			}
			Number_Vectors					=	Number_Vectors + 1;
 8008862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008864:	3301      	adds	r3, #1
 8008866:	65fb      	str	r3, [r7, #92]	; 0x5c
    while(Length_End_Vector > 2)
 8008868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800886a:	2b02      	cmp	r3, #2
 800886c:	f63f af23 	bhi.w	80086b6 <FastFurieTransform+0x1e>
		}
	}
    
    Exponential.Real                        =	1;
 8008870:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008874:	63bb      	str	r3, [r7, #56]	; 0x38
    Exponential.Imag                        =   0;
 8008876:	f04f 0300 	mov.w	r3, #0
 800887a:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Operation NOT COMPLEX PRODUCT
    while(Length_End_Vector > 1)
 800887c:	e076      	b.n	800896c <FastFurieTransform+0x2d4>
	{
		First_Index_Vector					=	Number_Elements + (Number_Vectors - 1) * Length_End_Vector;
 800887e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008880:	3b01      	subs	r3, #1
 8008882:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008884:	fb02 f303 	mul.w	r3, r2, r3
 8008888:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800888a:	4413      	add	r3, r2
 800888c:	64bb      	str	r3, [r7, #72]	; 0x48
		Half_Index_Vector 					=	First_Index_Vector + Length_End_Vector / 2;
 800888e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008890:	085b      	lsrs	r3, r3, #1
 8008892:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008894:	4413      	add	r3, r2
 8008896:	647b      	str	r3, [r7, #68]	; 0x44

		Assistive_Variable.Real				=  -(Furie_Transform + Half_Index_Vector) -> Real;
 8008898:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800889a:	4613      	mov	r3, r2
 800889c:	005b      	lsls	r3, r3, #1
 800889e:	4413      	add	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	461a      	mov	r2, r3
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	4413      	add	r3, r2
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80088ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		Assistive_Variable.Imag				=  -(Furie_Transform + Half_Index_Vector) -> Imag;
 80088b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088b2:	4613      	mov	r3, r2
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	4413      	add	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	461a      	mov	r2, r3
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	4413      	add	r3, r2
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80088c6:	633b      	str	r3, [r7, #48]	; 0x30

		*(Furie_Transform + Half_Index_Vector)
											=	Compl_Sum((Furie_Transform + First_Index_Vector),
 80088c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088ca:	4613      	mov	r3, r2
 80088cc:	005b      	lsls	r3, r3, #1
 80088ce:	4413      	add	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	461a      	mov	r2, r3
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	1899      	adds	r1, r3, r2
		*(Furie_Transform + Half_Index_Vector)
 80088d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088da:	4613      	mov	r3, r2
 80088dc:	005b      	lsls	r3, r3, #1
 80088de:	4413      	add	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	461a      	mov	r2, r3
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	189c      	adds	r4, r3, r2
											=	Compl_Sum((Furie_Transform + First_Index_Vector),
 80088e8:	463b      	mov	r3, r7
 80088ea:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7ff fc5c 	bl	80081ac <Compl_Sum>
 80088f4:	463b      	mov	r3, r7
 80088f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80088fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
														  &Assistive_Variable);

		Assistive_Variable.Real				=  -Assistive_Variable.Real;
 80088fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008900:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008904:	62fb      	str	r3, [r7, #44]	; 0x2c
		Assistive_Variable.Imag				=  -Assistive_Variable.Imag;
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800890c:	633b      	str	r3, [r7, #48]	; 0x30

		*(Furie_Transform + First_Index_Vector)
											=	Compl_Sum((Furie_Transform + First_Index_Vector),
 800890e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008910:	4613      	mov	r3, r2
 8008912:	005b      	lsls	r3, r3, #1
 8008914:	4413      	add	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	461a      	mov	r2, r3
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	1899      	adds	r1, r3, r2
		*(Furie_Transform + First_Index_Vector)
 800891e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008920:	4613      	mov	r3, r2
 8008922:	005b      	lsls	r3, r3, #1
 8008924:	4413      	add	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	461a      	mov	r2, r3
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	189c      	adds	r4, r3, r2
											=	Compl_Sum((Furie_Transform + First_Index_Vector),
 800892e:	463b      	mov	r3, r7
 8008930:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008934:	4618      	mov	r0, r3
 8008936:	f7ff fc39 	bl	80081ac <Compl_Sum>
 800893a:	463b      	mov	r3, r7
 800893c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008940:	e884 0007 	stmia.w	r4, {r0, r1, r2}
														  &Assistive_Variable);

        if (Number_Vectors == Quantity_Vectors)
 8008944:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008946:	f7f8 f995 	bl	8000c74 <__aeabi_ui2f>
 800894a:	4602      	mov	r2, r0
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	4619      	mov	r1, r3
 8008950:	4610      	mov	r0, r2
 8008952:	f7f8 fb7b 	bl	800104c <__aeabi_fcmpeq>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d004      	beq.n	8008966 <FastFurieTransform+0x2ce>
		{
            Length_End_Vector 				=	Length_End_Vector / 2;
 800895c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800895e:	085b      	lsrs	r3, r3, #1
 8008960:	667b      	str	r3, [r7, #100]	; 0x64

            Number_Vectors 					=   0;
 8008962:	2300      	movs	r3, #0
 8008964:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
        Number_Vectors						=	Number_Vectors + 1;
 8008966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008968:	3301      	adds	r3, #1
 800896a:	65fb      	str	r3, [r7, #92]	; 0x5c
    while(Length_End_Vector > 1)
 800896c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800896e:	2b01      	cmp	r3, #1
 8008970:	d885      	bhi.n	800887e <FastFurieTransform+0x1e6>
	}
    Length_End_Vector   =   4;
 8008972:	2304      	movs	r3, #4
 8008974:	667b      	str	r3, [r7, #100]	; 0x64
    uint8_t Flag_Half_Vectors;
    uint32_t Index, Save_Ind, Offset_Vectors;
    while (Length_End_Vector <= Length_Realization)
 8008976:	e128      	b.n	8008bca <FastFurieTransform+0x532>
	{
        Number_Elements                		=   1;
 8008978:	2301      	movs	r3, #1
 800897a:	663b      	str	r3, [r7, #96]	; 0x60
        Number_Vectors                 		=   1;
 800897c:	2301      	movs	r3, #1
 800897e:	65fb      	str	r3, [r7, #92]	; 0x5c
        Save_Ind                    		=   0;
 8008980:	2300      	movs	r3, #0
 8008982:	657b      	str	r3, [r7, #84]	; 0x54
        Flag_Half_Vectors           		=   0;
 8008984:	2300      	movs	r3, #0
 8008986:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        Offset_Vectors 						=	0;
 800898a:	2300      	movs	r3, #0
 800898c:	653b      	str	r3, [r7, #80]	; 0x50

        while (Number_Elements < Length_Realization - 1)
 800898e:	e113      	b.n	8008bb8 <FastFurieTransform+0x520>
 8008990:	d9d7bdbb 	.word	0xd9d7bdbb
 8008994:	3ddb7cdf 	.word	0x3ddb7cdf
 8008998:	40c90fdb 	.word	0x40c90fdb
		{
            Index                           =   Number_Elements - Offset_Vectors;
 800899c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800899e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	64fb      	str	r3, [r7, #76]	; 0x4c

            if (Save_Ind == 0)
 80089a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <FastFurieTransform+0x316>
			{
                Save_Ind                    =   Number_Elements;
 80089aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089ac:	657b      	str	r3, [r7, #84]	; 0x54
			}

            if (Index < Length_End_Vector / 2)
 80089ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089b0:	085b      	lsrs	r3, r3, #1
 80089b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d255      	bcs.n	8008a64 <FastFurieTransform+0x3cc>
			{
                Assistive_Variable          =   *(Furie_Transform + Index * 2  + Offset_Vectors);
 80089b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089ba:	4613      	mov	r3, r2
 80089bc:	005b      	lsls	r3, r3, #1
 80089be:	4413      	add	r3, r2
 80089c0:	00db      	lsls	r3, r3, #3
 80089c2:	4619      	mov	r1, r3
 80089c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089c6:	4613      	mov	r3, r2
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	4413      	add	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	440b      	add	r3, r1
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	441a      	add	r2, r3
 80089d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80089d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80089da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                *(Furie_Transform + Index * 2  + Offset_Vectors)
											=   *(Furie_Transform + Save_Ind);
 80089de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089e0:	4613      	mov	r3, r2
 80089e2:	005b      	lsls	r3, r3, #1
 80089e4:	4413      	add	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	461a      	mov	r2, r3
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	1899      	adds	r1, r3, r2
                *(Furie_Transform + Index * 2  + Offset_Vectors)
 80089ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089f0:	4613      	mov	r3, r2
 80089f2:	005b      	lsls	r3, r3, #1
 80089f4:	4413      	add	r3, r2
 80089f6:	00db      	lsls	r3, r3, #3
 80089f8:	4618      	mov	r0, r3
 80089fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089fc:	4613      	mov	r3, r2
 80089fe:	005b      	lsls	r3, r3, #1
 8008a00:	4413      	add	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4403      	add	r3, r0
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	4413      	add	r3, r2
											=   *(Furie_Transform + Save_Ind);
 8008a0a:	460a      	mov	r2, r1
 8008a0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8008a0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                *(Furie_Transform + Save_Ind)
 8008a12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a14:	4613      	mov	r3, r2
 8008a16:	005b      	lsls	r3, r3, #1
 8008a18:	4413      	add	r3, r2
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	4413      	add	r3, r2
											=   Assistive_Variable;
 8008a22:	461c      	mov	r4, r3
 8008a24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a28:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                Number_Elements             =   (2 * Number_Elements - Offset_Vectors);
 8008a30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a32:	005a      	lsls	r2, r3, #1
 8008a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	663b      	str	r3, [r7, #96]	; 0x60
                /*	Средство обхода элементов, которые прошёл алгоритм
                 *   после половины массива*/
                if (Flag_Half_Vectors == 1)
 8008a3a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	f040 80ba 	bne.w	8008bb8 <FastFurieTransform+0x520>
				{
                    (Furie_Transform + Index + Offset_Vectors) -> Blocked = 1;
 8008a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a48:	441a      	add	r2, r3
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	005b      	lsls	r3, r3, #1
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	461a      	mov	r2, r3
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	4413      	add	r3, r2
 8008a58:	2201      	movs	r2, #1
 8008a5a:	721a      	strb	r2, [r3, #8]
                    Flag_Half_Vectors       =   0;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8008a62:	e0a9      	b.n	8008bb8 <FastFurieTransform+0x520>
				}
			}
            else if (((1 - Length_End_Vector + Index * 2) != Save_Ind - Offset_Vectors) &&
 8008a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a66:	005a      	lsls	r2, r3, #1
 8008a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	1c5a      	adds	r2, r3, #1
 8008a6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a72:	1acb      	subs	r3, r1, r3
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d05c      	beq.n	8008b32 <FastFurieTransform+0x49a>
                    (Save_Ind - Offset_Vectors < Length_End_Vector / 2))
 8008a78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a7c:	1ad2      	subs	r2, r2, r3
 8008a7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a80:	085b      	lsrs	r3, r3, #1
            else if (((1 - Length_End_Vector + Index * 2) != Save_Ind - Offset_Vectors) &&
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d255      	bcs.n	8008b32 <FastFurieTransform+0x49a>
			{
                Assistive_Variable          =   *(Furie_Transform + (1 - Length_End_Vector + Index * 2) + 
 8008a86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008a88:	4613      	mov	r3, r2
 8008a8a:	0092      	lsls	r2, r2, #2
 8008a8c:	1a9b      	subs	r3, r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4619      	mov	r1, r3
 8008a92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a94:	4613      	mov	r3, r2
 8008a96:	005b      	lsls	r3, r3, #1
 8008a98:	4413      	add	r3, r2
 8008a9a:	00db      	lsls	r3, r3, #3
 8008a9c:	4419      	add	r1, r3
 8008a9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	4413      	add	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	440b      	add	r3, r1
 8008aaa:	330c      	adds	r3, #12
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	441a      	add	r2, r3
 8008ab0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ab4:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ab6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                													Offset_Vectors);
                *(Furie_Transform + (1 - Length_End_Vector + Index * 2) + 
                					Offset_Vectors)
                                            =   *(Furie_Transform + Save_Ind);
 8008aba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008abc:	4613      	mov	r3, r2
 8008abe:	005b      	lsls	r3, r3, #1
 8008ac0:	4413      	add	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	1898      	adds	r0, r3, r2
                *(Furie_Transform + (1 - Length_End_Vector + Index * 2) + 
 8008aca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008acc:	4613      	mov	r3, r2
 8008ace:	0092      	lsls	r2, r2, #2
 8008ad0:	1a9b      	subs	r3, r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ad8:	4613      	mov	r3, r2
 8008ada:	005b      	lsls	r3, r3, #1
 8008adc:	4413      	add	r3, r2
 8008ade:	00db      	lsls	r3, r3, #3
 8008ae0:	4419      	add	r1, r3
 8008ae2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	005b      	lsls	r3, r3, #1
 8008ae8:	4413      	add	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	440b      	add	r3, r1
 8008aee:	330c      	adds	r3, #12
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	4413      	add	r3, r2
                                            =   *(Furie_Transform + Save_Ind);
 8008af4:	4602      	mov	r2, r0
 8008af6:	ca07      	ldmia	r2, {r0, r1, r2}
 8008af8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                *(Furie_Transform + Save_Ind)
 8008afc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008afe:	4613      	mov	r3, r2
 8008b00:	005b      	lsls	r3, r3, #1
 8008b02:	4413      	add	r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	461a      	mov	r2, r3
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	4413      	add	r3, r2
											=   Assistive_Variable;
 8008b0c:	461c      	mov	r4, r3
 8008b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                Number_Elements             =   (1 - Length_End_Vector + Number_Elements * 2 - 
 8008b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b1c:	005a      	lsls	r2, r3, #1
 8008b1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b20:	1ad2      	subs	r2, r2, r3
 8008b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	3301      	adds	r3, #1
 8008b28:	663b      	str	r3, [r7, #96]	; 0x60
                														 Offset_Vectors);
                Flag_Half_Vectors           =   1;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8008b30:	e042      	b.n	8008bb8 <FastFurieTransform+0x520>
			}
            else if (Save_Ind - Offset_Vectors < Length_End_Vector / 2)
 8008b32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b36:	1ad2      	subs	r2, r2, r3
 8008b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b3a:	085b      	lsrs	r3, r3, #1
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d229      	bcs.n	8008b94 <FastFurieTransform+0x4fc>
			{    
                Flag_Half_Vectors           =   1;
 8008b40:	2301      	movs	r3, #1
 8008b42:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
                Number_Elements             =   Save_Ind + 2;
 8008b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b48:	3302      	adds	r3, #2
 8008b4a:	663b      	str	r3, [r7, #96]	; 0x60
                while (Flag_Half_Vectors == 1)
 8008b4c:	e01b      	b.n	8008b86 <FastFurieTransform+0x4ee>
				{
                    if ((Furie_Transform + Number_Elements) -> Blocked == 1)
 8008b4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b50:	4613      	mov	r3, r2
 8008b52:	005b      	lsls	r3, r3, #1
 8008b54:	4413      	add	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	461a      	mov	r2, r3
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	7a1b      	ldrb	r3, [r3, #8]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d10d      	bne.n	8008b80 <FastFurieTransform+0x4e8>
					{
                        (Furie_Transform + Number_Elements) -> Blocked = 0;
 8008b64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b66:	4613      	mov	r3, r2
 8008b68:	005b      	lsls	r3, r3, #1
 8008b6a:	4413      	add	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	461a      	mov	r2, r3
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	4413      	add	r3, r2
 8008b74:	2200      	movs	r2, #0
 8008b76:	721a      	strb	r2, [r3, #8]
                        Number_Elements     =   Number_Elements + 2;
 8008b78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b7a:	3302      	adds	r3, #2
 8008b7c:	663b      	str	r3, [r7, #96]	; 0x60
 8008b7e:	e002      	b.n	8008b86 <FastFurieTransform+0x4ee>
					}
                    else
					{
                        Flag_Half_Vectors       =   0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
                while (Flag_Half_Vectors == 1)
 8008b86:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d0df      	beq.n	8008b4e <FastFurieTransform+0x4b6>
					}
				}
                Save_Ind                    =   Number_Elements;
 8008b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b90:	657b      	str	r3, [r7, #84]	; 0x54
 8008b92:	e011      	b.n	8008bb8 <FastFurieTransform+0x520>
			}
            else
			{
                Number_Vectors              =   Number_Vectors + 1;
 8008b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b96:	3301      	adds	r3, #1
 8008b98:	65fb      	str	r3, [r7, #92]	; 0x5c
            	Offset_Vectors 				=	(Number_Vectors - 1) * Length_End_Vector;
 8008b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b9c:	1e5a      	subs	r2, r3, #1
 8008b9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ba0:	fb02 f303 	mul.w	r3, r2, r3
 8008ba4:	653b      	str	r3, [r7, #80]	; 0x50
                Number_Elements             =   Offset_Vectors + 1;
 8008ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ba8:	3301      	adds	r3, #1
 8008baa:	663b      	str	r3, [r7, #96]	; 0x60
                Save_Ind                    =   0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	657b      	str	r3, [r7, #84]	; 0x54
                Flag_Half_Vectors           =   0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
                continue;
 8008bb6:	bf00      	nop
        while (Number_Elements < Length_Realization - 1)
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	f4ff aeec 	bcc.w	800899c <FastFurieTransform+0x304>
			}
                
		}

        Length_End_Vector                   =   Length_End_Vector * 2;
 8008bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bc6:	005b      	lsls	r3, r3, #1
 8008bc8:	667b      	str	r3, [r7, #100]	; 0x64
    while (Length_End_Vector <= Length_Realization)
 8008bca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	f67f aed2 	bls.w	8008978 <FastFurieTransform+0x2e0>
	}

}
 8008bd4:	bf00      	nop
 8008bd6:	bf00      	nop
 8008bd8:	3768      	adds	r7, #104	; 0x68
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8008bde:	bf00      	nop

08008be0 <SignalFastFurieTransform>:

void SignalFastFurieTransform(float *Signal, compl_t *Furie_Transform, uint32_t Length_Realization)
{
 8008be0:	b5b0      	push	{r4, r5, r7, lr}
 8008be2:	b09e      	sub	sp, #120	; 0x78
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	61f8      	str	r0, [r7, #28]
 8008be8:	61b9      	str	r1, [r7, #24]
 8008bea:	617a      	str	r2, [r7, #20]
	uint32_t Length_End_Vector				=	Length_Realization;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	677b      	str	r3, [r7, #116]	; 0x74

	uint32_t Number_Elements				=	0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t Number_Vectors					=	1;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	66fb      	str	r3, [r7, #108]	; 0x6c
	compl_t  Assistive_Sum;
	float    Assistive_fSum;

	float Arg_Exp;

	float Quantity_Vectors = 1;
 8008bf8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008bfc:	627b      	str	r3, [r7, #36]	; 0x24

	while(fmod((float) Number_Elements, Length_End_Vector / 2) < 1e-10)
 8008bfe:	e08c      	b.n	8008d1a <SignalFastFurieTransform+0x13a>
	{
		Arg_Exp								=	M_2PI / Length_End_Vector * Number_Elements;
 8008c00:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8008c02:	f7f8 f837 	bl	8000c74 <__aeabi_ui2f>
 8008c06:	4603      	mov	r3, r0
 8008c08:	4619      	mov	r1, r3
 8008c0a:	48b9      	ldr	r0, [pc, #740]	; (8008ef0 <SignalFastFurieTransform+0x310>)
 8008c0c:	f7f8 f93e 	bl	8000e8c <__aeabi_fdiv>
 8008c10:	4603      	mov	r3, r0
 8008c12:	461c      	mov	r4, r3
 8008c14:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008c16:	f7f8 f82d 	bl	8000c74 <__aeabi_ui2f>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f7f8 f880 	bl	8000d24 <__aeabi_fmul>
 8008c24:	4603      	mov	r3, r0
 8008c26:	62bb      	str	r3, [r7, #40]	; 0x28

		Exponential.Real					=	Compl_Cos(&Arg_Exp);
 8008c28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7ff fc07 	bl	8008440 <Compl_Cos>
 8008c32:	4603      	mov	r3, r0
 8008c34:	64bb      	str	r3, [r7, #72]	; 0x48
		Exponential.Imag					=  -Compl_Sin(&Arg_Exp);
 8008c36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7ff fb68 	bl	8008310 <Compl_Sin>
 8008c40:	4603      	mov	r3, r0
 8008c42:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008c46:	64fb      	str	r3, [r7, #76]	; 0x4c

		First_Index_Vector					=	Number_Elements + (Number_Vectors - 1) * Length_End_Vector;
 8008c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008c4e:	fb02 f303 	mul.w	r3, r2, r3
 8008c52:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008c54:	4413      	add	r3, r2
 8008c56:	65bb      	str	r3, [r7, #88]	; 0x58
		Half_Index_Vector 					=	First_Index_Vector + Length_End_Vector / 2;
 8008c58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c5a:	085b      	lsrs	r3, r3, #1
 8008c5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c5e:	4413      	add	r3, r2
 8008c60:	657b      	str	r3, [r7, #84]	; 0x54

		Assistive_fSum 						=	*(Signal + First_Index_Vector) -
 8008c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	69fa      	ldr	r2, [r7, #28]
 8008c68:	4413      	add	r3, r2
 8008c6a:	6818      	ldr	r0, [r3, #0]
												*(Signal + Half_Index_Vector);
 8008c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	69fa      	ldr	r2, [r7, #28]
 8008c72:	4413      	add	r3, r2
 8008c74:	681b      	ldr	r3, [r3, #0]
		Assistive_fSum 						=	*(Signal + First_Index_Vector) -
 8008c76:	4619      	mov	r1, r3
 8008c78:	f7f7 ff4a 	bl	8000b10 <__aeabi_fsub>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		*(Furie_Transform + Half_Index_Vector)
 8008c80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c82:	4613      	mov	r3, r2
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	4413      	add	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	189c      	adds	r4, r3, r2
											=	fCompl_Product(&Assistive_fSum,
 8008c90:	463b      	mov	r3, r7
 8008c92:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008c96:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7ff fafc 	bl	8008298 <fCompl_Product>
 8008ca0:	463b      	mov	r3, r7
 8008ca2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ca6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
															   &Exponential);

		(Furie_Transform + Half_Index_Vector) -> Blocked 	= 	0;
 8008caa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cac:	4613      	mov	r3, r2
 8008cae:	005b      	lsls	r3, r3, #1
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	4413      	add	r3, r2
 8008cba:	2200      	movs	r2, #0
 8008cbc:	721a      	strb	r2, [r3, #8]

		(Furie_Transform + First_Index_Vector) -> Real
											=	*(Signal + First_Index_Vector) +
 8008cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	69fa      	ldr	r2, [r7, #28]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	6818      	ldr	r0, [r3, #0]
												*(Signal + Half_Index_Vector);
 8008cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	69fa      	ldr	r2, [r7, #28]
 8008cce:	4413      	add	r3, r2
 8008cd0:	6819      	ldr	r1, [r3, #0]
		(Furie_Transform + First_Index_Vector) -> Real
 8008cd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	005b      	lsls	r3, r3, #1
 8008cd8:	4413      	add	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	461a      	mov	r2, r3
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	189c      	adds	r4, r3, r2
											=	*(Signal + First_Index_Vector) +
 8008ce2:	f7f7 ff17 	bl	8000b14 <__addsf3>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	6023      	str	r3, [r4, #0]

		(Furie_Transform + First_Index_Vector) -> Imag  	=	0;
 8008cea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cec:	4613      	mov	r3, r2
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	4413      	add	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f04f 0200 	mov.w	r2, #0
 8008cfe:	605a      	str	r2, [r3, #4]
		(Furie_Transform + First_Index_Vector) -> Blocked 	= 	0;
 8008d00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d02:	4613      	mov	r3, r2
 8008d04:	005b      	lsls	r3, r3, #1
 8008d06:	4413      	add	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	4413      	add	r3, r2
 8008d10:	2200      	movs	r2, #0
 8008d12:	721a      	strb	r2, [r3, #8]

		Number_Elements 					=	Number_Elements + 1;
 8008d14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d16:	3301      	adds	r3, #1
 8008d18:	673b      	str	r3, [r7, #112]	; 0x70
	while(fmod((float) Number_Elements, Length_End_Vector / 2) < 1e-10)
 8008d1a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008d1c:	f7f7 ffaa 	bl	8000c74 <__aeabi_ui2f>
 8008d20:	4603      	mov	r3, r0
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7f7 fb78 	bl	8000418 <__aeabi_f2d>
 8008d28:	4604      	mov	r4, r0
 8008d2a:	460d      	mov	r5, r1
 8008d2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d2e:	085b      	lsrs	r3, r3, #1
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7f7 fb4f 	bl	80003d4 <__aeabi_ui2d>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	f003 fdc1 	bl	800c8c4 <fmod>
 8008d42:	a369      	add	r3, pc, #420	; (adr r3, 8008ee8 <SignalFastFurieTransform+0x308>)
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	f7f7 fe30 	bl	80009ac <__aeabi_dcmplt>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f47f af56 	bne.w	8008c00 <SignalFastFurieTransform+0x20>

	}

	Length_End_Vector 						=	Length_End_Vector / 2;
 8008d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d56:	085b      	lsrs	r3, r3, #1
 8008d58:	677b      	str	r3, [r7, #116]	; 0x74

	modff(Length_Realization/Length_End_Vector, &Quantity_Vectors);
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7f7 ff86 	bl	8000c74 <__aeabi_ui2f>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d6e:	4619      	mov	r1, r3
 8008d70:	4610      	mov	r0, r2
 8008d72:	f003 fd2d 	bl	800c7d0 <modff>

    while(Length_End_Vector > 2)
 8008d76:	e0e1      	b.n	8008f3c <SignalFastFurieTransform+0x35c>
	{
		Arg_Exp								=	M_2PI / Length_End_Vector * Number_Elements;
 8008d78:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8008d7a:	f7f7 ff7b 	bl	8000c74 <__aeabi_ui2f>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	4619      	mov	r1, r3
 8008d82:	485b      	ldr	r0, [pc, #364]	; (8008ef0 <SignalFastFurieTransform+0x310>)
 8008d84:	f7f8 f882 	bl	8000e8c <__aeabi_fdiv>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	461c      	mov	r4, r3
 8008d8c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008d8e:	f7f7 ff71 	bl	8000c74 <__aeabi_ui2f>
 8008d92:	4603      	mov	r3, r0
 8008d94:	4619      	mov	r1, r3
 8008d96:	4620      	mov	r0, r4
 8008d98:	f7f7 ffc4 	bl	8000d24 <__aeabi_fmul>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	62bb      	str	r3, [r7, #40]	; 0x28

		Exponential.Real					=	Compl_Cos(&Arg_Exp);
 8008da0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7ff fb4b 	bl	8008440 <Compl_Cos>
 8008daa:	4603      	mov	r3, r0
 8008dac:	64bb      	str	r3, [r7, #72]	; 0x48
		Exponential.Imag					=  -Compl_Sin(&Arg_Exp);
 8008dae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7ff faac 	bl	8008310 <Compl_Sin>
 8008db8:	4603      	mov	r3, r0
 8008dba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008dbe:	64fb      	str	r3, [r7, #76]	; 0x4c

		First_Index_Vector					=	Number_Elements + (Number_Vectors - 1) * Length_End_Vector;
 8008dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008dc6:	fb02 f303 	mul.w	r3, r2, r3
 8008dca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008dcc:	4413      	add	r3, r2
 8008dce:	65bb      	str	r3, [r7, #88]	; 0x58
		Half_Index_Vector 					=	First_Index_Vector + Length_End_Vector / 2;
 8008dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dd2:	085b      	lsrs	r3, r3, #1
 8008dd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008dd6:	4413      	add	r3, r2
 8008dd8:	657b      	str	r3, [r7, #84]	; 0x54

		Assistive_Variable.Real				=  -(Furie_Transform + Half_Index_Vector) -> Real;
 8008dda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ddc:	4613      	mov	r3, r2
 8008dde:	005b      	lsls	r3, r3, #1
 8008de0:	4413      	add	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	461a      	mov	r2, r3
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	4413      	add	r3, r2
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008df0:	63fb      	str	r3, [r7, #60]	; 0x3c
		Assistive_Variable.Imag				=  -(Furie_Transform + Half_Index_Vector) -> Imag;
 8008df2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008df4:	4613      	mov	r3, r2
 8008df6:	005b      	lsls	r3, r3, #1
 8008df8:	4413      	add	r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	4413      	add	r3, r2
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008e08:	643b      	str	r3, [r7, #64]	; 0x40
		Assistive_Sum 						=	Compl_Sum((Furie_Transform + First_Index_Vector),
 8008e0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	005b      	lsls	r3, r3, #1
 8008e10:	4413      	add	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	461a      	mov	r2, r3
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	1899      	adds	r1, r3, r2
 8008e1a:	463b      	mov	r3, r7
 8008e1c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7ff f9c3 	bl	80081ac <Compl_Sum>
 8008e26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e2a:	463a      	mov	r2, r7
 8008e2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8008e2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
														  &Assistive_Variable);

		*(Furie_Transform + Half_Index_Vector)
 8008e32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e34:	4613      	mov	r3, r2
 8008e36:	005b      	lsls	r3, r3, #1
 8008e38:	4413      	add	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	189c      	adds	r4, r3, r2
											=	Compl_Product(&Assistive_Sum,
 8008e42:	463b      	mov	r3, r7
 8008e44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008e48:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7ff f9d9 	bl	8008204 <Compl_Product>
 8008e52:	463b      	mov	r3, r7
 8008e54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
															  &Exponential);

		Assistive_Variable.Real				=  -Assistive_Variable.Real;
 8008e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e5e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008e62:	63fb      	str	r3, [r7, #60]	; 0x3c
		Assistive_Variable.Imag				=  -Assistive_Variable.Imag;
 8008e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008e6a:	643b      	str	r3, [r7, #64]	; 0x40

		*(Furie_Transform + First_Index_Vector)
											=	Compl_Sum((Furie_Transform + First_Index_Vector),
 8008e6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e6e:	4613      	mov	r3, r2
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	4413      	add	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	461a      	mov	r2, r3
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	1899      	adds	r1, r3, r2
		*(Furie_Transform + First_Index_Vector)
 8008e7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e7e:	4613      	mov	r3, r2
 8008e80:	005b      	lsls	r3, r3, #1
 8008e82:	4413      	add	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	461a      	mov	r2, r3
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	189c      	adds	r4, r3, r2
											=	Compl_Sum((Furie_Transform + First_Index_Vector),
 8008e8c:	463b      	mov	r3, r7
 8008e8e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7ff f98a 	bl	80081ac <Compl_Sum>
 8008e98:	463b      	mov	r3, r7
 8008e9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
														  &Assistive_Variable);

		Number_Elements 					=	Number_Elements + 1;
 8008ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	673b      	str	r3, [r7, #112]	; 0x70

        if (fmod((float) Number_Elements, Length_End_Vector / 2) < 1e-10)
 8008ea8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008eaa:	f7f7 fee3 	bl	8000c74 <__aeabi_ui2f>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7f7 fab1 	bl	8000418 <__aeabi_f2d>
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	460d      	mov	r5, r1
 8008eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ebc:	085b      	lsrs	r3, r3, #1
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7f7 fa88 	bl	80003d4 <__aeabi_ui2d>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	4620      	mov	r0, r4
 8008eca:	4629      	mov	r1, r5
 8008ecc:	f003 fcfa 	bl	800c8c4 <fmod>
 8008ed0:	a305      	add	r3, pc, #20	; (adr r3, 8008ee8 <SignalFastFurieTransform+0x308>)
 8008ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed6:	f7f7 fd69 	bl	80009ac <__aeabi_dcmplt>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d109      	bne.n	8008ef4 <SignalFastFurieTransform+0x314>
 8008ee0:	e02c      	b.n	8008f3c <SignalFastFurieTransform+0x35c>
 8008ee2:	bf00      	nop
 8008ee4:	f3af 8000 	nop.w
 8008ee8:	d9d7bdbb 	.word	0xd9d7bdbb
 8008eec:	3ddb7cdf 	.word	0x3ddb7cdf
 8008ef0:	40c90fdb 	.word	0x40c90fdb
		{
			Number_Elements 				=	0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	673b      	str	r3, [r7, #112]	; 0x70

            if (Number_Vectors == Quantity_Vectors)
 8008ef8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008efa:	f7f7 febb 	bl	8000c74 <__aeabi_ui2f>
 8008efe:	4602      	mov	r2, r0
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	4619      	mov	r1, r3
 8008f04:	4610      	mov	r0, r2
 8008f06:	f7f8 f8a1 	bl	800104c <__aeabi_fcmpeq>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d012      	beq.n	8008f36 <SignalFastFurieTransform+0x356>
			{
				Length_End_Vector 			=	Length_End_Vector / 2;
 8008f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f12:	085b      	lsrs	r3, r3, #1
 8008f14:	677b      	str	r3, [r7, #116]	; 0x74

				modff(Length_Realization/Length_End_Vector, &Quantity_Vectors);
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7f7 fea8 	bl	8000c74 <__aeabi_ui2f>
 8008f24:	4602      	mov	r2, r0
 8008f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	f003 fc4f 	bl	800c7d0 <modff>

				Number_Vectors 				=   0;
 8008f32:	2300      	movs	r3, #0
 8008f34:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			Number_Vectors					=	Number_Vectors + 1;
 8008f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f38:	3301      	adds	r3, #1
 8008f3a:	66fb      	str	r3, [r7, #108]	; 0x6c
    while(Length_End_Vector > 2)
 8008f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	f63f af1a 	bhi.w	8008d78 <SignalFastFurieTransform+0x198>
		}
	}

    Exponential.Real                        =	1;
 8008f44:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008f48:	64bb      	str	r3, [r7, #72]	; 0x48
    Exponential.Imag                        =   0;
 8008f4a:	f04f 0300 	mov.w	r3, #0
 8008f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Operation NOT COMPLEX PRODUCT
    while(Length_End_Vector > 1)
 8008f50:	e076      	b.n	8009040 <SignalFastFurieTransform+0x460>
	{
		First_Index_Vector					=	Number_Elements + (Number_Vectors - 1) * Length_End_Vector;
 8008f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f54:	3b01      	subs	r3, #1
 8008f56:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008f58:	fb02 f303 	mul.w	r3, r2, r3
 8008f5c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008f5e:	4413      	add	r3, r2
 8008f60:	65bb      	str	r3, [r7, #88]	; 0x58
		Half_Index_Vector 					=	First_Index_Vector + Length_End_Vector / 2;
 8008f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f64:	085b      	lsrs	r3, r3, #1
 8008f66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f68:	4413      	add	r3, r2
 8008f6a:	657b      	str	r3, [r7, #84]	; 0x54

		Assistive_Variable.Real				=  -(Furie_Transform + Half_Index_Vector) -> Real;
 8008f6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f6e:	4613      	mov	r3, r2
 8008f70:	005b      	lsls	r3, r3, #1
 8008f72:	4413      	add	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	461a      	mov	r2, r3
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008f82:	63fb      	str	r3, [r7, #60]	; 0x3c
		Assistive_Variable.Imag				=  -(Furie_Transform + Half_Index_Vector) -> Imag;
 8008f84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f86:	4613      	mov	r3, r2
 8008f88:	005b      	lsls	r3, r3, #1
 8008f8a:	4413      	add	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	461a      	mov	r2, r3
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	4413      	add	r3, r2
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008f9a:	643b      	str	r3, [r7, #64]	; 0x40

		*(Furie_Transform + Half_Index_Vector)
											=	Compl_Sum((Furie_Transform + First_Index_Vector),
 8008f9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	005b      	lsls	r3, r3, #1
 8008fa2:	4413      	add	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	1899      	adds	r1, r3, r2
		*(Furie_Transform + Half_Index_Vector)
 8008fac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008fae:	4613      	mov	r3, r2
 8008fb0:	005b      	lsls	r3, r3, #1
 8008fb2:	4413      	add	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	189c      	adds	r4, r3, r2
											=	Compl_Sum((Furie_Transform + First_Index_Vector),
 8008fbc:	463b      	mov	r3, r7
 8008fbe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7ff f8f2 	bl	80081ac <Compl_Sum>
 8008fc8:	463b      	mov	r3, r7
 8008fca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008fce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
														  &Assistive_Variable);

		Assistive_Variable.Real				=  -Assistive_Variable.Real;
 8008fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
		Assistive_Variable.Imag				=  -Assistive_Variable.Imag;
 8008fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fdc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008fe0:	643b      	str	r3, [r7, #64]	; 0x40

		*(Furie_Transform + First_Index_Vector)
											=	Compl_Sum((Furie_Transform + First_Index_Vector),
 8008fe2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	005b      	lsls	r3, r3, #1
 8008fe8:	4413      	add	r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	461a      	mov	r2, r3
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	1899      	adds	r1, r3, r2
		*(Furie_Transform + First_Index_Vector)
 8008ff2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	005b      	lsls	r3, r3, #1
 8008ff8:	4413      	add	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	189c      	adds	r4, r3, r2
											=	Compl_Sum((Furie_Transform + First_Index_Vector),
 8009002:	463b      	mov	r3, r7
 8009004:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009008:	4618      	mov	r0, r3
 800900a:	f7ff f8cf 	bl	80081ac <Compl_Sum>
 800900e:	463b      	mov	r3, r7
 8009010:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009014:	e884 0007 	stmia.w	r4, {r0, r1, r2}
														  &Assistive_Variable);

        if (Number_Vectors == Quantity_Vectors)
 8009018:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800901a:	f7f7 fe2b 	bl	8000c74 <__aeabi_ui2f>
 800901e:	4602      	mov	r2, r0
 8009020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009022:	4619      	mov	r1, r3
 8009024:	4610      	mov	r0, r2
 8009026:	f7f8 f811 	bl	800104c <__aeabi_fcmpeq>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d004      	beq.n	800903a <SignalFastFurieTransform+0x45a>
		{
            Length_End_Vector 				=	Length_End_Vector / 2;
 8009030:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009032:	085b      	lsrs	r3, r3, #1
 8009034:	677b      	str	r3, [r7, #116]	; 0x74

            Number_Vectors 					=   0;
 8009036:	2300      	movs	r3, #0
 8009038:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
        Number_Vectors						=	Number_Vectors + 1;
 800903a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800903c:	3301      	adds	r3, #1
 800903e:	66fb      	str	r3, [r7, #108]	; 0x6c
    while(Length_End_Vector > 1)
 8009040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009042:	2b01      	cmp	r3, #1
 8009044:	d885      	bhi.n	8008f52 <SignalFastFurieTransform+0x372>
	}
    Length_End_Vector   =   4;
 8009046:	2304      	movs	r3, #4
 8009048:	677b      	str	r3, [r7, #116]	; 0x74
    uint8_t Flag_Half_Vectors;
    uint32_t Index, Save_Ind, Offset_Vectors;
    while (Length_End_Vector <= Length_Realization)
 800904a:	e122      	b.n	8009292 <SignalFastFurieTransform+0x6b2>
	{
        Number_Elements                		=   1;
 800904c:	2301      	movs	r3, #1
 800904e:	673b      	str	r3, [r7, #112]	; 0x70
        Number_Vectors                 		=   1;
 8009050:	2301      	movs	r3, #1
 8009052:	66fb      	str	r3, [r7, #108]	; 0x6c
        Save_Ind                    		=   0;
 8009054:	2300      	movs	r3, #0
 8009056:	667b      	str	r3, [r7, #100]	; 0x64
        Flag_Half_Vectors           		=   0;
 8009058:	2300      	movs	r3, #0
 800905a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        Offset_Vectors 						=	0;
 800905e:	2300      	movs	r3, #0
 8009060:	663b      	str	r3, [r7, #96]	; 0x60

        while (Number_Elements < Length_Realization - 1)
 8009062:	e10d      	b.n	8009280 <SignalFastFurieTransform+0x6a0>
		{
            Index                           =   Number_Elements - Offset_Vectors;
 8009064:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009066:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	65fb      	str	r3, [r7, #92]	; 0x5c

            if (Save_Ind == 0)
 800906c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <SignalFastFurieTransform+0x496>
			{
                Save_Ind                    =   Number_Elements;
 8009072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009074:	667b      	str	r3, [r7, #100]	; 0x64
			}

            if (Index < Length_End_Vector / 2)
 8009076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009078:	085b      	lsrs	r3, r3, #1
 800907a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800907c:	429a      	cmp	r2, r3
 800907e:	d255      	bcs.n	800912c <SignalFastFurieTransform+0x54c>
			{
                Assistive_Variable          =   *(Furie_Transform + Index * 2  + Offset_Vectors);
 8009080:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009082:	4613      	mov	r3, r2
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	4413      	add	r3, r2
 8009088:	00db      	lsls	r3, r3, #3
 800908a:	4619      	mov	r1, r3
 800908c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800908e:	4613      	mov	r3, r2
 8009090:	005b      	lsls	r3, r3, #1
 8009092:	4413      	add	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	440b      	add	r3, r1
 8009098:	69ba      	ldr	r2, [r7, #24]
 800909a:	441a      	add	r2, r3
 800909c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80090a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80090a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                *(Furie_Transform + Index * 2  + Offset_Vectors)
											=   *(Furie_Transform + Save_Ind);
 80090a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80090a8:	4613      	mov	r3, r2
 80090aa:	005b      	lsls	r3, r3, #1
 80090ac:	4413      	add	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	461a      	mov	r2, r3
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	1899      	adds	r1, r3, r2
                *(Furie_Transform + Index * 2  + Offset_Vectors)
 80090b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090b8:	4613      	mov	r3, r2
 80090ba:	005b      	lsls	r3, r3, #1
 80090bc:	4413      	add	r3, r2
 80090be:	00db      	lsls	r3, r3, #3
 80090c0:	4618      	mov	r0, r3
 80090c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80090c4:	4613      	mov	r3, r2
 80090c6:	005b      	lsls	r3, r3, #1
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4403      	add	r3, r0
 80090ce:	69ba      	ldr	r2, [r7, #24]
 80090d0:	4413      	add	r3, r2
											=   *(Furie_Transform + Save_Ind);
 80090d2:	460a      	mov	r2, r1
 80090d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80090d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                *(Furie_Transform + Save_Ind)
 80090da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80090dc:	4613      	mov	r3, r2
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	4413      	add	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	461a      	mov	r2, r3
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	4413      	add	r3, r2
											=   Assistive_Variable;
 80090ea:	461c      	mov	r4, r3
 80090ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80090f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80090f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                Number_Elements             =   (2 * Number_Elements - Offset_Vectors);
 80090f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090fa:	005a      	lsls	r2, r3, #1
 80090fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	673b      	str	r3, [r7, #112]	; 0x70
                /*	Средство обхода элементов, которые прошёл алгоритм
                 *   после половины массива*/
                if (Flag_Half_Vectors == 1)
 8009102:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8009106:	2b01      	cmp	r3, #1
 8009108:	f040 80ba 	bne.w	8009280 <SignalFastFurieTransform+0x6a0>
				{
                    (Furie_Transform + Index + Offset_Vectors) -> Blocked = 1;
 800910c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800910e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009110:	441a      	add	r2, r3
 8009112:	4613      	mov	r3, r2
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	4413      	add	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	461a      	mov	r2, r3
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	4413      	add	r3, r2
 8009120:	2201      	movs	r2, #1
 8009122:	721a      	strb	r2, [r3, #8]
                    Flag_Half_Vectors       =   0;
 8009124:	2300      	movs	r3, #0
 8009126:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800912a:	e0a9      	b.n	8009280 <SignalFastFurieTransform+0x6a0>
				}
			}
            else if (((1 - Length_End_Vector + Index * 2) != Save_Ind - Offset_Vectors) &&
 800912c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800912e:	005a      	lsls	r2, r3, #1
 8009130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	1c5a      	adds	r2, r3, #1
 8009136:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800913a:	1acb      	subs	r3, r1, r3
 800913c:	429a      	cmp	r2, r3
 800913e:	d05c      	beq.n	80091fa <SignalFastFurieTransform+0x61a>
                    (Save_Ind - Offset_Vectors < Length_End_Vector / 2))
 8009140:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009144:	1ad2      	subs	r2, r2, r3
 8009146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009148:	085b      	lsrs	r3, r3, #1
            else if (((1 - Length_End_Vector + Index * 2) != Save_Ind - Offset_Vectors) &&
 800914a:	429a      	cmp	r2, r3
 800914c:	d255      	bcs.n	80091fa <SignalFastFurieTransform+0x61a>
			{
                Assistive_Variable          =   *(Furie_Transform + (1 - Length_End_Vector + Index * 2) +
 800914e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009150:	4613      	mov	r3, r2
 8009152:	0092      	lsls	r2, r2, #2
 8009154:	1a9b      	subs	r3, r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	4619      	mov	r1, r3
 800915a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800915c:	4613      	mov	r3, r2
 800915e:	005b      	lsls	r3, r3, #1
 8009160:	4413      	add	r3, r2
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	4419      	add	r1, r3
 8009166:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009168:	4613      	mov	r3, r2
 800916a:	005b      	lsls	r3, r3, #1
 800916c:	4413      	add	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	440b      	add	r3, r1
 8009172:	330c      	adds	r3, #12
 8009174:	69ba      	ldr	r2, [r7, #24]
 8009176:	441a      	add	r2, r3
 8009178:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800917c:	ca07      	ldmia	r2, {r0, r1, r2}
 800917e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                													Offset_Vectors);
                *(Furie_Transform + (1 - Length_End_Vector + Index * 2) +
                					Offset_Vectors)
                                            =   *(Furie_Transform + Save_Ind);
 8009182:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009184:	4613      	mov	r3, r2
 8009186:	005b      	lsls	r3, r3, #1
 8009188:	4413      	add	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	461a      	mov	r2, r3
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	1898      	adds	r0, r3, r2
                *(Furie_Transform + (1 - Length_End_Vector + Index * 2) +
 8009192:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009194:	4613      	mov	r3, r2
 8009196:	0092      	lsls	r2, r2, #2
 8009198:	1a9b      	subs	r3, r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4619      	mov	r1, r3
 800919e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091a0:	4613      	mov	r3, r2
 80091a2:	005b      	lsls	r3, r3, #1
 80091a4:	4413      	add	r3, r2
 80091a6:	00db      	lsls	r3, r3, #3
 80091a8:	4419      	add	r1, r3
 80091aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80091ac:	4613      	mov	r3, r2
 80091ae:	005b      	lsls	r3, r3, #1
 80091b0:	4413      	add	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	440b      	add	r3, r1
 80091b6:	330c      	adds	r3, #12
 80091b8:	69ba      	ldr	r2, [r7, #24]
 80091ba:	4413      	add	r3, r2
                                            =   *(Furie_Transform + Save_Ind);
 80091bc:	4602      	mov	r2, r0
 80091be:	ca07      	ldmia	r2, {r0, r1, r2}
 80091c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                *(Furie_Transform + Save_Ind)
 80091c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80091c6:	4613      	mov	r3, r2
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	4413      	add	r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	461a      	mov	r2, r3
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	4413      	add	r3, r2
											=   Assistive_Variable;
 80091d4:	461c      	mov	r4, r3
 80091d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80091da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80091de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                Number_Elements             =   (1 - Length_End_Vector + Number_Elements * 2 -
 80091e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091e4:	005a      	lsls	r2, r3, #1
 80091e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091e8:	1ad2      	subs	r2, r2, r3
 80091ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	3301      	adds	r3, #1
 80091f0:	673b      	str	r3, [r7, #112]	; 0x70
                														 Offset_Vectors);
                Flag_Half_Vectors           =   1;
 80091f2:	2301      	movs	r3, #1
 80091f4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80091f8:	e042      	b.n	8009280 <SignalFastFurieTransform+0x6a0>
			}
            else if (Save_Ind - Offset_Vectors < Length_End_Vector / 2)
 80091fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80091fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091fe:	1ad2      	subs	r2, r2, r3
 8009200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009202:	085b      	lsrs	r3, r3, #1
 8009204:	429a      	cmp	r2, r3
 8009206:	d229      	bcs.n	800925c <SignalFastFurieTransform+0x67c>
			{
                Flag_Half_Vectors           =   1;
 8009208:	2301      	movs	r3, #1
 800920a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                Number_Elements             =   Save_Ind + 2;
 800920e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009210:	3302      	adds	r3, #2
 8009212:	673b      	str	r3, [r7, #112]	; 0x70
                while (Flag_Half_Vectors == 1)
 8009214:	e01b      	b.n	800924e <SignalFastFurieTransform+0x66e>
				{
                    if ((Furie_Transform + Number_Elements) -> Blocked == 1)
 8009216:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009218:	4613      	mov	r3, r2
 800921a:	005b      	lsls	r3, r3, #1
 800921c:	4413      	add	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	461a      	mov	r2, r3
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	4413      	add	r3, r2
 8009226:	7a1b      	ldrb	r3, [r3, #8]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d10d      	bne.n	8009248 <SignalFastFurieTransform+0x668>
					{
                        (Furie_Transform + Number_Elements) -> Blocked = 0;
 800922c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800922e:	4613      	mov	r3, r2
 8009230:	005b      	lsls	r3, r3, #1
 8009232:	4413      	add	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	461a      	mov	r2, r3
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	4413      	add	r3, r2
 800923c:	2200      	movs	r2, #0
 800923e:	721a      	strb	r2, [r3, #8]
                        Number_Elements     =   Number_Elements + 2;
 8009240:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009242:	3302      	adds	r3, #2
 8009244:	673b      	str	r3, [r7, #112]	; 0x70
 8009246:	e002      	b.n	800924e <SignalFastFurieTransform+0x66e>
					}
                    else
					{
                        Flag_Half_Vectors       =   0;
 8009248:	2300      	movs	r3, #0
 800924a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                while (Flag_Half_Vectors == 1)
 800924e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8009252:	2b01      	cmp	r3, #1
 8009254:	d0df      	beq.n	8009216 <SignalFastFurieTransform+0x636>
					}
				}
                Save_Ind                    =   Number_Elements;
 8009256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009258:	667b      	str	r3, [r7, #100]	; 0x64
 800925a:	e011      	b.n	8009280 <SignalFastFurieTransform+0x6a0>
			}
            else
			{
                Number_Vectors              =   Number_Vectors + 1;
 800925c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800925e:	3301      	adds	r3, #1
 8009260:	66fb      	str	r3, [r7, #108]	; 0x6c
            	Offset_Vectors 				=	(Number_Vectors - 1) * Length_End_Vector;
 8009262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009264:	1e5a      	subs	r2, r3, #1
 8009266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009268:	fb02 f303 	mul.w	r3, r2, r3
 800926c:	663b      	str	r3, [r7, #96]	; 0x60
                Number_Elements             =   Offset_Vectors + 1;
 800926e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009270:	3301      	adds	r3, #1
 8009272:	673b      	str	r3, [r7, #112]	; 0x70
                Save_Ind                    =   0;
 8009274:	2300      	movs	r3, #0
 8009276:	667b      	str	r3, [r7, #100]	; 0x64
                Flag_Half_Vectors           =   0;
 8009278:	2300      	movs	r3, #0
 800927a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                continue;
 800927e:	bf00      	nop
        while (Number_Elements < Length_Realization - 1)
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	3b01      	subs	r3, #1
 8009284:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009286:	429a      	cmp	r2, r3
 8009288:	f4ff aeec 	bcc.w	8009064 <SignalFastFurieTransform+0x484>
			}

		}

        Length_End_Vector                   =   Length_End_Vector * 2;
 800928c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800928e:	005b      	lsls	r3, r3, #1
 8009290:	677b      	str	r3, [r7, #116]	; 0x74
    while (Length_End_Vector <= Length_Realization)
 8009292:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	429a      	cmp	r2, r3
 8009298:	f67f aed8 	bls.w	800904c <SignalFastFurieTransform+0x46c>
	}

}
 800929c:	bf00      	nop
 800929e:	bf00      	nop
 80092a0:	3778      	adds	r7, #120	; 0x78
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bdb0      	pop	{r4, r5, r7, pc}
 80092a6:	bf00      	nop

080092a8 <SignalFastFurieTransformFREERTOS>:

void SignalFastFurieTransformFREERTOS(float *Signal, compl_t *Furie_Transform, uint32_t Length_Realization,
	SemaphoreHandle_t Status_Furie_Ready)
{
 80092a8:	b5b0      	push	{r4, r5, r7, lr}
 80092aa:	b09e      	sub	sp, #120	; 0x78
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	61f8      	str	r0, [r7, #28]
 80092b0:	61b9      	str	r1, [r7, #24]
 80092b2:	617a      	str	r2, [r7, #20]
 80092b4:	613b      	str	r3, [r7, #16]
	uint32_t Length_End_Vector				=	Length_Realization;
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	677b      	str	r3, [r7, #116]	; 0x74

	uint32_t Number_Elements				=	0;
 80092ba:	2300      	movs	r3, #0
 80092bc:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t Number_Vectors					=	1;
 80092be:	2301      	movs	r3, #1
 80092c0:	66fb      	str	r3, [r7, #108]	; 0x6c
	compl_t  Assistive_Sum;
	float    Assistive_fSum;

	float Arg_Exp;

	float Quantity_Vectors = 1;
 80092c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80092c6:	627b      	str	r3, [r7, #36]	; 0x24

	while(fmod((float) Number_Elements, Length_End_Vector / 2) < 1e-10)
 80092c8:	e08c      	b.n	80093e4 <SignalFastFurieTransformFREERTOS+0x13c>
	{
		Arg_Exp								=	M_2PI / Length_End_Vector * Number_Elements;
 80092ca:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80092cc:	f7f7 fcd2 	bl	8000c74 <__aeabi_ui2f>
 80092d0:	4603      	mov	r3, r0
 80092d2:	4619      	mov	r1, r3
 80092d4:	48ba      	ldr	r0, [pc, #744]	; (80095c0 <SignalFastFurieTransformFREERTOS+0x318>)
 80092d6:	f7f7 fdd9 	bl	8000e8c <__aeabi_fdiv>
 80092da:	4603      	mov	r3, r0
 80092dc:	461c      	mov	r4, r3
 80092de:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80092e0:	f7f7 fcc8 	bl	8000c74 <__aeabi_ui2f>
 80092e4:	4603      	mov	r3, r0
 80092e6:	4619      	mov	r1, r3
 80092e8:	4620      	mov	r0, r4
 80092ea:	f7f7 fd1b 	bl	8000d24 <__aeabi_fmul>
 80092ee:	4603      	mov	r3, r0
 80092f0:	62bb      	str	r3, [r7, #40]	; 0x28

		Exponential.Real					=	Compl_Cos(&Arg_Exp);
 80092f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7ff f8a2 	bl	8008440 <Compl_Cos>
 80092fc:	4603      	mov	r3, r0
 80092fe:	64bb      	str	r3, [r7, #72]	; 0x48
		Exponential.Imag					=  -Compl_Sin(&Arg_Exp);
 8009300:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009304:	4618      	mov	r0, r3
 8009306:	f7ff f803 	bl	8008310 <Compl_Sin>
 800930a:	4603      	mov	r3, r0
 800930c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009310:	64fb      	str	r3, [r7, #76]	; 0x4c

		First_Index_Vector					=	Number_Elements + (Number_Vectors - 1) * Length_End_Vector;
 8009312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009314:	3b01      	subs	r3, #1
 8009316:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009318:	fb02 f303 	mul.w	r3, r2, r3
 800931c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800931e:	4413      	add	r3, r2
 8009320:	65bb      	str	r3, [r7, #88]	; 0x58
		Half_Index_Vector 					=	First_Index_Vector + Length_End_Vector / 2;
 8009322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009324:	085b      	lsrs	r3, r3, #1
 8009326:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009328:	4413      	add	r3, r2
 800932a:	657b      	str	r3, [r7, #84]	; 0x54

		Assistive_fSum 						=	*(Signal + First_Index_Vector) -
 800932c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	69fa      	ldr	r2, [r7, #28]
 8009332:	4413      	add	r3, r2
 8009334:	6818      	ldr	r0, [r3, #0]
												*(Signal + Half_Index_Vector);
 8009336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	69fa      	ldr	r2, [r7, #28]
 800933c:	4413      	add	r3, r2
 800933e:	681b      	ldr	r3, [r3, #0]
		Assistive_fSum 						=	*(Signal + First_Index_Vector) -
 8009340:	4619      	mov	r1, r3
 8009342:	f7f7 fbe5 	bl	8000b10 <__aeabi_fsub>
 8009346:	4603      	mov	r3, r0
 8009348:	62fb      	str	r3, [r7, #44]	; 0x2c

		*(Furie_Transform + Half_Index_Vector)
 800934a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800934c:	4613      	mov	r3, r2
 800934e:	005b      	lsls	r3, r3, #1
 8009350:	4413      	add	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	461a      	mov	r2, r3
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	189c      	adds	r4, r3, r2
											=	fCompl_Product(&Assistive_fSum,
 800935a:	463b      	mov	r3, r7
 800935c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009360:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8009364:	4618      	mov	r0, r3
 8009366:	f7fe ff97 	bl	8008298 <fCompl_Product>
 800936a:	463b      	mov	r3, r7
 800936c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009370:	e884 0007 	stmia.w	r4, {r0, r1, r2}
															   &Exponential);

		(Furie_Transform + Half_Index_Vector) -> Blocked 	= 	0;
 8009374:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009376:	4613      	mov	r3, r2
 8009378:	005b      	lsls	r3, r3, #1
 800937a:	4413      	add	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	461a      	mov	r2, r3
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	4413      	add	r3, r2
 8009384:	2200      	movs	r2, #0
 8009386:	721a      	strb	r2, [r3, #8]

		(Furie_Transform + First_Index_Vector) -> Real
											=	*(Signal + First_Index_Vector) +
 8009388:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	69fa      	ldr	r2, [r7, #28]
 800938e:	4413      	add	r3, r2
 8009390:	6818      	ldr	r0, [r3, #0]
												*(Signal + Half_Index_Vector);
 8009392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	69fa      	ldr	r2, [r7, #28]
 8009398:	4413      	add	r3, r2
 800939a:	6819      	ldr	r1, [r3, #0]
		(Furie_Transform + First_Index_Vector) -> Real
 800939c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800939e:	4613      	mov	r3, r2
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	4413      	add	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	461a      	mov	r2, r3
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	189c      	adds	r4, r3, r2
											=	*(Signal + First_Index_Vector) +
 80093ac:	f7f7 fbb2 	bl	8000b14 <__addsf3>
 80093b0:	4603      	mov	r3, r0
 80093b2:	6023      	str	r3, [r4, #0]

		(Furie_Transform + First_Index_Vector) -> Imag  	=	0;
 80093b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093b6:	4613      	mov	r3, r2
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	4413      	add	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	461a      	mov	r2, r3
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	4413      	add	r3, r2
 80093c4:	f04f 0200 	mov.w	r2, #0
 80093c8:	605a      	str	r2, [r3, #4]
		(Furie_Transform + First_Index_Vector) -> Blocked 	= 	0;
 80093ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093cc:	4613      	mov	r3, r2
 80093ce:	005b      	lsls	r3, r3, #1
 80093d0:	4413      	add	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	461a      	mov	r2, r3
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	4413      	add	r3, r2
 80093da:	2200      	movs	r2, #0
 80093dc:	721a      	strb	r2, [r3, #8]

		Number_Elements 					=	Number_Elements + 1;
 80093de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093e0:	3301      	adds	r3, #1
 80093e2:	673b      	str	r3, [r7, #112]	; 0x70
	while(fmod((float) Number_Elements, Length_End_Vector / 2) < 1e-10)
 80093e4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80093e6:	f7f7 fc45 	bl	8000c74 <__aeabi_ui2f>
 80093ea:	4603      	mov	r3, r0
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7f7 f813 	bl	8000418 <__aeabi_f2d>
 80093f2:	4604      	mov	r4, r0
 80093f4:	460d      	mov	r5, r1
 80093f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093f8:	085b      	lsrs	r3, r3, #1
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7f6 ffea 	bl	80003d4 <__aeabi_ui2d>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	4620      	mov	r0, r4
 8009406:	4629      	mov	r1, r5
 8009408:	f003 fa5c 	bl	800c8c4 <fmod>
 800940c:	a36a      	add	r3, pc, #424	; (adr r3, 80095b8 <SignalFastFurieTransformFREERTOS+0x310>)
 800940e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009412:	f7f7 facb 	bl	80009ac <__aeabi_dcmplt>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	f47f af56 	bne.w	80092ca <SignalFastFurieTransformFREERTOS+0x22>

	}

	xSemaphoreGive(Status_Furie_Ready);
 800941e:	2300      	movs	r3, #0
 8009420:	2200      	movs	r2, #0
 8009422:	2100      	movs	r1, #0
 8009424:	6938      	ldr	r0, [r7, #16]
 8009426:	f000 fdcf 	bl	8009fc8 <xQueueGenericSend>

	Length_End_Vector 						=	Length_End_Vector / 2;
 800942a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800942c:	085b      	lsrs	r3, r3, #1
 800942e:	677b      	str	r3, [r7, #116]	; 0x74

	modff(Length_Realization/Length_End_Vector, &Quantity_Vectors);
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009434:	fbb2 f3f3 	udiv	r3, r2, r3
 8009438:	4618      	mov	r0, r3
 800943a:	f7f7 fc1b 	bl	8000c74 <__aeabi_ui2f>
 800943e:	4602      	mov	r2, r0
 8009440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009444:	4619      	mov	r1, r3
 8009446:	4610      	mov	r0, r2
 8009448:	f003 f9c2 	bl	800c7d0 <modff>

    while(Length_End_Vector > 2)
 800944c:	e0de      	b.n	800960c <SignalFastFurieTransformFREERTOS+0x364>
	{
		Arg_Exp								=	M_2PI / Length_End_Vector * Number_Elements;
 800944e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8009450:	f7f7 fc10 	bl	8000c74 <__aeabi_ui2f>
 8009454:	4603      	mov	r3, r0
 8009456:	4619      	mov	r1, r3
 8009458:	4859      	ldr	r0, [pc, #356]	; (80095c0 <SignalFastFurieTransformFREERTOS+0x318>)
 800945a:	f7f7 fd17 	bl	8000e8c <__aeabi_fdiv>
 800945e:	4603      	mov	r3, r0
 8009460:	461c      	mov	r4, r3
 8009462:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8009464:	f7f7 fc06 	bl	8000c74 <__aeabi_ui2f>
 8009468:	4603      	mov	r3, r0
 800946a:	4619      	mov	r1, r3
 800946c:	4620      	mov	r0, r4
 800946e:	f7f7 fc59 	bl	8000d24 <__aeabi_fmul>
 8009472:	4603      	mov	r3, r0
 8009474:	62bb      	str	r3, [r7, #40]	; 0x28

		Exponential.Real					=	Compl_Cos(&Arg_Exp);
 8009476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800947a:	4618      	mov	r0, r3
 800947c:	f7fe ffe0 	bl	8008440 <Compl_Cos>
 8009480:	4603      	mov	r3, r0
 8009482:	64bb      	str	r3, [r7, #72]	; 0x48
		Exponential.Imag					=  -Compl_Sin(&Arg_Exp);
 8009484:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009488:	4618      	mov	r0, r3
 800948a:	f7fe ff41 	bl	8008310 <Compl_Sin>
 800948e:	4603      	mov	r3, r0
 8009490:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009494:	64fb      	str	r3, [r7, #76]	; 0x4c

		First_Index_Vector					=	Number_Elements + (Number_Vectors - 1) * Length_End_Vector;
 8009496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009498:	3b01      	subs	r3, #1
 800949a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800949c:	fb02 f303 	mul.w	r3, r2, r3
 80094a0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80094a2:	4413      	add	r3, r2
 80094a4:	65bb      	str	r3, [r7, #88]	; 0x58
		Half_Index_Vector 					=	First_Index_Vector + Length_End_Vector / 2;
 80094a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094a8:	085b      	lsrs	r3, r3, #1
 80094aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094ac:	4413      	add	r3, r2
 80094ae:	657b      	str	r3, [r7, #84]	; 0x54

		Assistive_Variable.Real				=  -(Furie_Transform + Half_Index_Vector) -> Real;
 80094b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094b2:	4613      	mov	r3, r2
 80094b4:	005b      	lsls	r3, r3, #1
 80094b6:	4413      	add	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	461a      	mov	r2, r3
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	4413      	add	r3, r2
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80094c6:	63fb      	str	r3, [r7, #60]	; 0x3c
		Assistive_Variable.Imag				=  -(Furie_Transform + Half_Index_Vector) -> Imag;
 80094c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094ca:	4613      	mov	r3, r2
 80094cc:	005b      	lsls	r3, r3, #1
 80094ce:	4413      	add	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	461a      	mov	r2, r3
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	4413      	add	r3, r2
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80094de:	643b      	str	r3, [r7, #64]	; 0x40
		Assistive_Sum 						=	Compl_Sum((Furie_Transform + First_Index_Vector),
 80094e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094e2:	4613      	mov	r3, r2
 80094e4:	005b      	lsls	r3, r3, #1
 80094e6:	4413      	add	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	461a      	mov	r2, r3
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	1899      	adds	r1, r3, r2
 80094f0:	463b      	mov	r3, r7
 80094f2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fe fe58 	bl	80081ac <Compl_Sum>
 80094fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009500:	463a      	mov	r2, r7
 8009502:	ca07      	ldmia	r2, {r0, r1, r2}
 8009504:	e883 0007 	stmia.w	r3, {r0, r1, r2}
														  &Assistive_Variable);

		*(Furie_Transform + Half_Index_Vector)
 8009508:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800950a:	4613      	mov	r3, r2
 800950c:	005b      	lsls	r3, r3, #1
 800950e:	4413      	add	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	461a      	mov	r2, r3
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	189c      	adds	r4, r3, r2
											=	Compl_Product(&Assistive_Sum,
 8009518:	463b      	mov	r3, r7
 800951a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800951e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8009522:	4618      	mov	r0, r3
 8009524:	f7fe fe6e 	bl	8008204 <Compl_Product>
 8009528:	463b      	mov	r3, r7
 800952a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800952e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
															  &Exponential);

		Assistive_Variable.Real				=  -Assistive_Variable.Real;
 8009532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009534:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009538:	63fb      	str	r3, [r7, #60]	; 0x3c
		Assistive_Variable.Imag				=  -Assistive_Variable.Imag;
 800953a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800953c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009540:	643b      	str	r3, [r7, #64]	; 0x40

		*(Furie_Transform + First_Index_Vector)
											=	Compl_Sum((Furie_Transform + First_Index_Vector),
 8009542:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009544:	4613      	mov	r3, r2
 8009546:	005b      	lsls	r3, r3, #1
 8009548:	4413      	add	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	461a      	mov	r2, r3
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	1899      	adds	r1, r3, r2
		*(Furie_Transform + First_Index_Vector)
 8009552:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009554:	4613      	mov	r3, r2
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	4413      	add	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	461a      	mov	r2, r3
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	189c      	adds	r4, r3, r2
											=	Compl_Sum((Furie_Transform + First_Index_Vector),
 8009562:	463b      	mov	r3, r7
 8009564:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009568:	4618      	mov	r0, r3
 800956a:	f7fe fe1f 	bl	80081ac <Compl_Sum>
 800956e:	463b      	mov	r3, r7
 8009570:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009574:	e884 0007 	stmia.w	r4, {r0, r1, r2}
														  &Assistive_Variable);

		Number_Elements 					=	Number_Elements + 1;
 8009578:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800957a:	3301      	adds	r3, #1
 800957c:	673b      	str	r3, [r7, #112]	; 0x70

        if (fmod((float) Number_Elements, Length_End_Vector / 2) < 1e-10)
 800957e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8009580:	f7f7 fb78 	bl	8000c74 <__aeabi_ui2f>
 8009584:	4603      	mov	r3, r0
 8009586:	4618      	mov	r0, r3
 8009588:	f7f6 ff46 	bl	8000418 <__aeabi_f2d>
 800958c:	4604      	mov	r4, r0
 800958e:	460d      	mov	r5, r1
 8009590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009592:	085b      	lsrs	r3, r3, #1
 8009594:	4618      	mov	r0, r3
 8009596:	f7f6 ff1d 	bl	80003d4 <__aeabi_ui2d>
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	4620      	mov	r0, r4
 80095a0:	4629      	mov	r1, r5
 80095a2:	f003 f98f 	bl	800c8c4 <fmod>
 80095a6:	a304      	add	r3, pc, #16	; (adr r3, 80095b8 <SignalFastFurieTransformFREERTOS+0x310>)
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	f7f7 f9fe 	bl	80009ac <__aeabi_dcmplt>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d106      	bne.n	80095c4 <SignalFastFurieTransformFREERTOS+0x31c>
 80095b6:	e029      	b.n	800960c <SignalFastFurieTransformFREERTOS+0x364>
 80095b8:	d9d7bdbb 	.word	0xd9d7bdbb
 80095bc:	3ddb7cdf 	.word	0x3ddb7cdf
 80095c0:	40c90fdb 	.word	0x40c90fdb
		{
			Number_Elements 				=	0;
 80095c4:	2300      	movs	r3, #0
 80095c6:	673b      	str	r3, [r7, #112]	; 0x70

            if (Number_Vectors == Quantity_Vectors)
 80095c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80095ca:	f7f7 fb53 	bl	8000c74 <__aeabi_ui2f>
 80095ce:	4602      	mov	r2, r0
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	4619      	mov	r1, r3
 80095d4:	4610      	mov	r0, r2
 80095d6:	f7f7 fd39 	bl	800104c <__aeabi_fcmpeq>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d012      	beq.n	8009606 <SignalFastFurieTransformFREERTOS+0x35e>
			{
				Length_End_Vector 			=	Length_End_Vector / 2;
 80095e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095e2:	085b      	lsrs	r3, r3, #1
 80095e4:	677b      	str	r3, [r7, #116]	; 0x74

				modff(Length_Realization/Length_End_Vector, &Quantity_Vectors);
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7f7 fb40 	bl	8000c74 <__aeabi_ui2f>
 80095f4:	4602      	mov	r2, r0
 80095f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095fa:	4619      	mov	r1, r3
 80095fc:	4610      	mov	r0, r2
 80095fe:	f003 f8e7 	bl	800c7d0 <modff>

				Number_Vectors 				=   0;
 8009602:	2300      	movs	r3, #0
 8009604:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			Number_Vectors					=	Number_Vectors + 1;
 8009606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009608:	3301      	adds	r3, #1
 800960a:	66fb      	str	r3, [r7, #108]	; 0x6c
    while(Length_End_Vector > 2)
 800960c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800960e:	2b02      	cmp	r3, #2
 8009610:	f63f af1d 	bhi.w	800944e <SignalFastFurieTransformFREERTOS+0x1a6>
		}
	}

    Exponential.Real                        =	1;
 8009614:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8009618:	64bb      	str	r3, [r7, #72]	; 0x48
    Exponential.Imag                        =   0;
 800961a:	f04f 0300 	mov.w	r3, #0
 800961e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Operation NOT COMPLEX PRODUCT
    while(Length_End_Vector > 1)
 8009620:	e076      	b.n	8009710 <SignalFastFurieTransformFREERTOS+0x468>
	{
		First_Index_Vector					=	Number_Elements + (Number_Vectors - 1) * Length_End_Vector;
 8009622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009624:	3b01      	subs	r3, #1
 8009626:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009628:	fb02 f303 	mul.w	r3, r2, r3
 800962c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800962e:	4413      	add	r3, r2
 8009630:	65bb      	str	r3, [r7, #88]	; 0x58
		Half_Index_Vector 					=	First_Index_Vector + Length_End_Vector / 2;
 8009632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009634:	085b      	lsrs	r3, r3, #1
 8009636:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009638:	4413      	add	r3, r2
 800963a:	657b      	str	r3, [r7, #84]	; 0x54

		Assistive_Variable.Real				=  -(Furie_Transform + Half_Index_Vector) -> Real;
 800963c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800963e:	4613      	mov	r3, r2
 8009640:	005b      	lsls	r3, r3, #1
 8009642:	4413      	add	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	461a      	mov	r2, r3
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	4413      	add	r3, r2
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009652:	63fb      	str	r3, [r7, #60]	; 0x3c
		Assistive_Variable.Imag				=  -(Furie_Transform + Half_Index_Vector) -> Imag;
 8009654:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009656:	4613      	mov	r3, r2
 8009658:	005b      	lsls	r3, r3, #1
 800965a:	4413      	add	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	461a      	mov	r2, r3
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	4413      	add	r3, r2
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800966a:	643b      	str	r3, [r7, #64]	; 0x40

		*(Furie_Transform + Half_Index_Vector)
											=	Compl_Sum((Furie_Transform + First_Index_Vector),
 800966c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800966e:	4613      	mov	r3, r2
 8009670:	005b      	lsls	r3, r3, #1
 8009672:	4413      	add	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	461a      	mov	r2, r3
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	1899      	adds	r1, r3, r2
		*(Furie_Transform + Half_Index_Vector)
 800967c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800967e:	4613      	mov	r3, r2
 8009680:	005b      	lsls	r3, r3, #1
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	461a      	mov	r2, r3
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	189c      	adds	r4, r3, r2
											=	Compl_Sum((Furie_Transform + First_Index_Vector),
 800968c:	463b      	mov	r3, r7
 800968e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009692:	4618      	mov	r0, r3
 8009694:	f7fe fd8a 	bl	80081ac <Compl_Sum>
 8009698:	463b      	mov	r3, r7
 800969a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800969e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
														  &Assistive_Variable);

		Assistive_Variable.Real				=  -Assistive_Variable.Real;
 80096a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80096a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		Assistive_Variable.Imag				=  -Assistive_Variable.Imag;
 80096aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80096b0:	643b      	str	r3, [r7, #64]	; 0x40

		*(Furie_Transform + First_Index_Vector)
											=	Compl_Sum((Furie_Transform + First_Index_Vector),
 80096b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096b4:	4613      	mov	r3, r2
 80096b6:	005b      	lsls	r3, r3, #1
 80096b8:	4413      	add	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	461a      	mov	r2, r3
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	1899      	adds	r1, r3, r2
		*(Furie_Transform + First_Index_Vector)
 80096c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096c4:	4613      	mov	r3, r2
 80096c6:	005b      	lsls	r3, r3, #1
 80096c8:	4413      	add	r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	461a      	mov	r2, r3
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	189c      	adds	r4, r3, r2
											=	Compl_Sum((Furie_Transform + First_Index_Vector),
 80096d2:	463b      	mov	r3, r7
 80096d4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fe fd67 	bl	80081ac <Compl_Sum>
 80096de:	463b      	mov	r3, r7
 80096e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
														  &Assistive_Variable);

        if (Number_Vectors == Quantity_Vectors)
 80096e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80096ea:	f7f7 fac3 	bl	8000c74 <__aeabi_ui2f>
 80096ee:	4602      	mov	r2, r0
 80096f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f2:	4619      	mov	r1, r3
 80096f4:	4610      	mov	r0, r2
 80096f6:	f7f7 fca9 	bl	800104c <__aeabi_fcmpeq>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d004      	beq.n	800970a <SignalFastFurieTransformFREERTOS+0x462>
		{
            Length_End_Vector 				=	Length_End_Vector / 2;
 8009700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009702:	085b      	lsrs	r3, r3, #1
 8009704:	677b      	str	r3, [r7, #116]	; 0x74

            Number_Vectors 					=   0;
 8009706:	2300      	movs	r3, #0
 8009708:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
        Number_Vectors						=	Number_Vectors + 1;
 800970a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800970c:	3301      	adds	r3, #1
 800970e:	66fb      	str	r3, [r7, #108]	; 0x6c
    while(Length_End_Vector > 1)
 8009710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009712:	2b01      	cmp	r3, #1
 8009714:	d885      	bhi.n	8009622 <SignalFastFurieTransformFREERTOS+0x37a>
	}
    Length_End_Vector   =   4;
 8009716:	2304      	movs	r3, #4
 8009718:	677b      	str	r3, [r7, #116]	; 0x74
    uint8_t Flag_Half_Vectors;
    uint32_t Index, Save_Ind, Offset_Vectors;
    while (Length_End_Vector <= Length_Realization)
 800971a:	e122      	b.n	8009962 <SignalFastFurieTransformFREERTOS+0x6ba>
	{
        Number_Elements                		=   1;
 800971c:	2301      	movs	r3, #1
 800971e:	673b      	str	r3, [r7, #112]	; 0x70
        Number_Vectors                 		=   1;
 8009720:	2301      	movs	r3, #1
 8009722:	66fb      	str	r3, [r7, #108]	; 0x6c
        Save_Ind                    		=   0;
 8009724:	2300      	movs	r3, #0
 8009726:	667b      	str	r3, [r7, #100]	; 0x64
        Flag_Half_Vectors           		=   0;
 8009728:	2300      	movs	r3, #0
 800972a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        Offset_Vectors 						=	0;
 800972e:	2300      	movs	r3, #0
 8009730:	663b      	str	r3, [r7, #96]	; 0x60

        while (Number_Elements < Length_Realization - 1)
 8009732:	e10d      	b.n	8009950 <SignalFastFurieTransformFREERTOS+0x6a8>
		{
            Index                           =   Number_Elements - Offset_Vectors;
 8009734:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	65fb      	str	r3, [r7, #92]	; 0x5c

            if (Save_Ind == 0)
 800973c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800973e:	2b00      	cmp	r3, #0
 8009740:	d101      	bne.n	8009746 <SignalFastFurieTransformFREERTOS+0x49e>
			{
                Save_Ind                    =   Number_Elements;
 8009742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009744:	667b      	str	r3, [r7, #100]	; 0x64
			}

            if (Index < Length_End_Vector / 2)
 8009746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009748:	085b      	lsrs	r3, r3, #1
 800974a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800974c:	429a      	cmp	r2, r3
 800974e:	d255      	bcs.n	80097fc <SignalFastFurieTransformFREERTOS+0x554>
			{
                Assistive_Variable          =   *(Furie_Transform + Index * 2  + Offset_Vectors);
 8009750:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009752:	4613      	mov	r3, r2
 8009754:	005b      	lsls	r3, r3, #1
 8009756:	4413      	add	r3, r2
 8009758:	00db      	lsls	r3, r3, #3
 800975a:	4619      	mov	r1, r3
 800975c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800975e:	4613      	mov	r3, r2
 8009760:	005b      	lsls	r3, r3, #1
 8009762:	4413      	add	r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	440b      	add	r3, r1
 8009768:	69ba      	ldr	r2, [r7, #24]
 800976a:	441a      	add	r2, r3
 800976c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009770:	ca07      	ldmia	r2, {r0, r1, r2}
 8009772:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                *(Furie_Transform + Index * 2  + Offset_Vectors)
											=   *(Furie_Transform + Save_Ind);
 8009776:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009778:	4613      	mov	r3, r2
 800977a:	005b      	lsls	r3, r3, #1
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	461a      	mov	r2, r3
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	1899      	adds	r1, r3, r2
                *(Furie_Transform + Index * 2  + Offset_Vectors)
 8009786:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009788:	4613      	mov	r3, r2
 800978a:	005b      	lsls	r3, r3, #1
 800978c:	4413      	add	r3, r2
 800978e:	00db      	lsls	r3, r3, #3
 8009790:	4618      	mov	r0, r3
 8009792:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009794:	4613      	mov	r3, r2
 8009796:	005b      	lsls	r3, r3, #1
 8009798:	4413      	add	r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	4403      	add	r3, r0
 800979e:	69ba      	ldr	r2, [r7, #24]
 80097a0:	4413      	add	r3, r2
											=   *(Furie_Transform + Save_Ind);
 80097a2:	460a      	mov	r2, r1
 80097a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80097a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                *(Furie_Transform + Save_Ind)
 80097aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80097ac:	4613      	mov	r3, r2
 80097ae:	005b      	lsls	r3, r3, #1
 80097b0:	4413      	add	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	461a      	mov	r2, r3
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	4413      	add	r3, r2
											=   Assistive_Variable;
 80097ba:	461c      	mov	r4, r3
 80097bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80097c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80097c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                Number_Elements             =   (2 * Number_Elements - Offset_Vectors);
 80097c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097ca:	005a      	lsls	r2, r3, #1
 80097cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	673b      	str	r3, [r7, #112]	; 0x70
                /*	Средство обхода элементов, которые прошёл алгоритм
                 *   после половины массива*/
                if (Flag_Half_Vectors == 1)
 80097d2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	f040 80ba 	bne.w	8009950 <SignalFastFurieTransformFREERTOS+0x6a8>
				{
                    (Furie_Transform + Index + Offset_Vectors) -> Blocked = 1;
 80097dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80097de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097e0:	441a      	add	r2, r3
 80097e2:	4613      	mov	r3, r2
 80097e4:	005b      	lsls	r3, r3, #1
 80097e6:	4413      	add	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	461a      	mov	r2, r3
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	4413      	add	r3, r2
 80097f0:	2201      	movs	r2, #1
 80097f2:	721a      	strb	r2, [r3, #8]
                    Flag_Half_Vectors       =   0;
 80097f4:	2300      	movs	r3, #0
 80097f6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80097fa:	e0a9      	b.n	8009950 <SignalFastFurieTransformFREERTOS+0x6a8>
				}
			}
            else if (((1 - Length_End_Vector + Index * 2) != Save_Ind - Offset_Vectors) &&
 80097fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097fe:	005a      	lsls	r2, r3, #1
 8009800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009802:	1ad3      	subs	r3, r2, r3
 8009804:	1c5a      	adds	r2, r3, #1
 8009806:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800980a:	1acb      	subs	r3, r1, r3
 800980c:	429a      	cmp	r2, r3
 800980e:	d05c      	beq.n	80098ca <SignalFastFurieTransformFREERTOS+0x622>
                    (Save_Ind - Offset_Vectors < Length_End_Vector / 2))
 8009810:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009814:	1ad2      	subs	r2, r2, r3
 8009816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009818:	085b      	lsrs	r3, r3, #1
            else if (((1 - Length_End_Vector + Index * 2) != Save_Ind - Offset_Vectors) &&
 800981a:	429a      	cmp	r2, r3
 800981c:	d255      	bcs.n	80098ca <SignalFastFurieTransformFREERTOS+0x622>
			{
                Assistive_Variable          =   *(Furie_Transform + (1 - Length_End_Vector + Index * 2) +
 800981e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009820:	4613      	mov	r3, r2
 8009822:	0092      	lsls	r2, r2, #2
 8009824:	1a9b      	subs	r3, r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4619      	mov	r1, r3
 800982a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800982c:	4613      	mov	r3, r2
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	4413      	add	r3, r2
 8009832:	00db      	lsls	r3, r3, #3
 8009834:	4419      	add	r1, r3
 8009836:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009838:	4613      	mov	r3, r2
 800983a:	005b      	lsls	r3, r3, #1
 800983c:	4413      	add	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	440b      	add	r3, r1
 8009842:	330c      	adds	r3, #12
 8009844:	69ba      	ldr	r2, [r7, #24]
 8009846:	441a      	add	r2, r3
 8009848:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800984c:	ca07      	ldmia	r2, {r0, r1, r2}
 800984e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                													Offset_Vectors);
                *(Furie_Transform + (1 - Length_End_Vector + Index * 2) +
                					Offset_Vectors)
                                            =   *(Furie_Transform + Save_Ind);
 8009852:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009854:	4613      	mov	r3, r2
 8009856:	005b      	lsls	r3, r3, #1
 8009858:	4413      	add	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	461a      	mov	r2, r3
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	1898      	adds	r0, r3, r2
                *(Furie_Transform + (1 - Length_End_Vector + Index * 2) +
 8009862:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009864:	4613      	mov	r3, r2
 8009866:	0092      	lsls	r2, r2, #2
 8009868:	1a9b      	subs	r3, r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4619      	mov	r1, r3
 800986e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009870:	4613      	mov	r3, r2
 8009872:	005b      	lsls	r3, r3, #1
 8009874:	4413      	add	r3, r2
 8009876:	00db      	lsls	r3, r3, #3
 8009878:	4419      	add	r1, r3
 800987a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800987c:	4613      	mov	r3, r2
 800987e:	005b      	lsls	r3, r3, #1
 8009880:	4413      	add	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	440b      	add	r3, r1
 8009886:	330c      	adds	r3, #12
 8009888:	69ba      	ldr	r2, [r7, #24]
 800988a:	4413      	add	r3, r2
                                            =   *(Furie_Transform + Save_Ind);
 800988c:	4602      	mov	r2, r0
 800988e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009890:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                *(Furie_Transform + Save_Ind)
 8009894:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009896:	4613      	mov	r3, r2
 8009898:	005b      	lsls	r3, r3, #1
 800989a:	4413      	add	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	461a      	mov	r2, r3
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	4413      	add	r3, r2
											=   Assistive_Variable;
 80098a4:	461c      	mov	r4, r3
 80098a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80098aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80098ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                Number_Elements             =   (1 - Length_End_Vector + Number_Elements * 2 -
 80098b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098b4:	005a      	lsls	r2, r3, #1
 80098b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098b8:	1ad2      	subs	r2, r2, r3
 80098ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	3301      	adds	r3, #1
 80098c0:	673b      	str	r3, [r7, #112]	; 0x70
                														 Offset_Vectors);
                Flag_Half_Vectors           =   1;
 80098c2:	2301      	movs	r3, #1
 80098c4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80098c8:	e042      	b.n	8009950 <SignalFastFurieTransformFREERTOS+0x6a8>
			}
            else if (Save_Ind - Offset_Vectors < Length_End_Vector / 2)
 80098ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80098cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098ce:	1ad2      	subs	r2, r2, r3
 80098d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098d2:	085b      	lsrs	r3, r3, #1
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d229      	bcs.n	800992c <SignalFastFurieTransformFREERTOS+0x684>
			{
                Flag_Half_Vectors           =   1;
 80098d8:	2301      	movs	r3, #1
 80098da:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                Number_Elements             =   Save_Ind + 2;
 80098de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098e0:	3302      	adds	r3, #2
 80098e2:	673b      	str	r3, [r7, #112]	; 0x70
                while (Flag_Half_Vectors == 1)
 80098e4:	e01b      	b.n	800991e <SignalFastFurieTransformFREERTOS+0x676>
				{
                    if ((Furie_Transform + Number_Elements) -> Blocked == 1)
 80098e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80098e8:	4613      	mov	r3, r2
 80098ea:	005b      	lsls	r3, r3, #1
 80098ec:	4413      	add	r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	461a      	mov	r2, r3
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	4413      	add	r3, r2
 80098f6:	7a1b      	ldrb	r3, [r3, #8]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d10d      	bne.n	8009918 <SignalFastFurieTransformFREERTOS+0x670>
					{
                        (Furie_Transform + Number_Elements) -> Blocked = 0;
 80098fc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80098fe:	4613      	mov	r3, r2
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	4413      	add	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	461a      	mov	r2, r3
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	4413      	add	r3, r2
 800990c:	2200      	movs	r2, #0
 800990e:	721a      	strb	r2, [r3, #8]
                        Number_Elements     =   Number_Elements + 2;
 8009910:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009912:	3302      	adds	r3, #2
 8009914:	673b      	str	r3, [r7, #112]	; 0x70
 8009916:	e002      	b.n	800991e <SignalFastFurieTransformFREERTOS+0x676>
					}
                    else
					{
                        Flag_Half_Vectors       =   0;
 8009918:	2300      	movs	r3, #0
 800991a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                while (Flag_Half_Vectors == 1)
 800991e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8009922:	2b01      	cmp	r3, #1
 8009924:	d0df      	beq.n	80098e6 <SignalFastFurieTransformFREERTOS+0x63e>
					}
				}
                Save_Ind                    =   Number_Elements;
 8009926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009928:	667b      	str	r3, [r7, #100]	; 0x64
 800992a:	e011      	b.n	8009950 <SignalFastFurieTransformFREERTOS+0x6a8>
			}
            else
			{
                Number_Vectors              =   Number_Vectors + 1;
 800992c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800992e:	3301      	adds	r3, #1
 8009930:	66fb      	str	r3, [r7, #108]	; 0x6c
            	Offset_Vectors 				=	(Number_Vectors - 1) * Length_End_Vector;
 8009932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009934:	1e5a      	subs	r2, r3, #1
 8009936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009938:	fb02 f303 	mul.w	r3, r2, r3
 800993c:	663b      	str	r3, [r7, #96]	; 0x60
                Number_Elements             =   Offset_Vectors + 1;
 800993e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009940:	3301      	adds	r3, #1
 8009942:	673b      	str	r3, [r7, #112]	; 0x70
                Save_Ind                    =   0;
 8009944:	2300      	movs	r3, #0
 8009946:	667b      	str	r3, [r7, #100]	; 0x64
                Flag_Half_Vectors           =   0;
 8009948:	2300      	movs	r3, #0
 800994a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                continue;
 800994e:	bf00      	nop
        while (Number_Elements < Length_Realization - 1)
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	3b01      	subs	r3, #1
 8009954:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009956:	429a      	cmp	r2, r3
 8009958:	f4ff aeec 	bcc.w	8009734 <SignalFastFurieTransformFREERTOS+0x48c>
			}

		}

        Length_End_Vector                   =   Length_End_Vector * 2;
 800995c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800995e:	005b      	lsls	r3, r3, #1
 8009960:	677b      	str	r3, [r7, #116]	; 0x74
    while (Length_End_Vector <= Length_Realization)
 8009962:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	429a      	cmp	r2, r3
 8009968:	f67f aed8 	bls.w	800971c <SignalFastFurieTransformFREERTOS+0x474>
	}

}
 800996c:	bf00      	nop
 800996e:	bf00      	nop
 8009970:	3778      	adds	r7, #120	; 0x78
 8009972:	46bd      	mov	sp, r7
 8009974:	bdb0      	pop	{r4, r5, r7, pc}
 8009976:	bf00      	nop

08009978 <InvertFastFurieTransform>:

void InvertFastFurieTransform(compl_t *Furie_Transform2Invert_Furie_Transform, uint32_t Length_Realization)
{
 8009978:	b590      	push	{r4, r7, lr}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]

	for(uint32_t Index_Furie = 0; Index_Furie < Length_Realization; Index_Furie++)
 8009982:	2300      	movs	r3, #0
 8009984:	60fb      	str	r3, [r7, #12]
 8009986:	e00d      	b.n	80099a4 <InvertFastFurieTransform+0x2c>
	{
		Compl_Pairing((Furie_Transform2Invert_Furie_Transform + Index_Furie));
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	4613      	mov	r3, r2
 800998c:	005b      	lsls	r3, r3, #1
 800998e:	4413      	add	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	461a      	mov	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4413      	add	r3, r2
 8009998:	4618      	mov	r0, r3
 800999a:	f7fe fca9 	bl	80082f0 <Compl_Pairing>
	for(uint32_t Index_Furie = 0; Index_Furie < Length_Realization; Index_Furie++)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3301      	adds	r3, #1
 80099a2:	60fb      	str	r3, [r7, #12]
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d3ed      	bcc.n	8009988 <InvertFastFurieTransform+0x10>
	}

	FastFurieTransform(Furie_Transform2Invert_Furie_Transform, Length_Realization);
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7fe fe72 	bl	8008698 <FastFurieTransform>

	for(uint32_t Index_Furie = 0; Index_Furie < Length_Realization; Index_Furie++)
 80099b4:	2300      	movs	r3, #0
 80099b6:	60bb      	str	r3, [r7, #8]
 80099b8:	e029      	b.n	8009a0e <InvertFastFurieTransform+0x96>
	{
		Compl_Pairing((Furie_Transform2Invert_Furie_Transform + Index_Furie));
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	4613      	mov	r3, r2
 80099be:	005b      	lsls	r3, r3, #1
 80099c0:	4413      	add	r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	461a      	mov	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4413      	add	r3, r2
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fe fc90 	bl	80082f0 <Compl_Pairing>
		Furie_Transform2Invert_Furie_Transform -> Real
							=	Furie_Transform2Invert_Furie_Transform -> Real / Length_Realization;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681c      	ldr	r4, [r3, #0]
 80099d4:	6838      	ldr	r0, [r7, #0]
 80099d6:	f7f7 f94d 	bl	8000c74 <__aeabi_ui2f>
 80099da:	4603      	mov	r3, r0
 80099dc:	4619      	mov	r1, r3
 80099de:	4620      	mov	r0, r4
 80099e0:	f7f7 fa54 	bl	8000e8c <__aeabi_fdiv>
 80099e4:	4603      	mov	r3, r0
 80099e6:	461a      	mov	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	601a      	str	r2, [r3, #0]
		Furie_Transform2Invert_Furie_Transform -> Imag
							=	Furie_Transform2Invert_Furie_Transform -> Imag / Length_Realization;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685c      	ldr	r4, [r3, #4]
 80099f0:	6838      	ldr	r0, [r7, #0]
 80099f2:	f7f7 f93f 	bl	8000c74 <__aeabi_ui2f>
 80099f6:	4603      	mov	r3, r0
 80099f8:	4619      	mov	r1, r3
 80099fa:	4620      	mov	r0, r4
 80099fc:	f7f7 fa46 	bl	8000e8c <__aeabi_fdiv>
 8009a00:	4603      	mov	r3, r0
 8009a02:	461a      	mov	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	605a      	str	r2, [r3, #4]
	for(uint32_t Index_Furie = 0; Index_Furie < Length_Realization; Index_Furie++)
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	60bb      	str	r3, [r7, #8]
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d3d1      	bcc.n	80099ba <InvertFastFurieTransform+0x42>
	}

}
 8009a16:	bf00      	nop
 8009a18:	bf00      	nop
 8009a1a:	3714      	adds	r7, #20
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd90      	pop	{r4, r7, pc}

08009a20 <Hilbert>:

void Hilbert(float *Signal, compl_t *Signal2Hilbert, uint32_t Length_Realization, SemaphoreHandle_t Status_Furie_Ready)
{
 8009a20:	b590      	push	{r4, r7, lr}
 8009a22:	b087      	sub	sp, #28
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
 8009a2c:	603b      	str	r3, [r7, #0]

	SignalFastFurieTransformFREERTOS(Signal, Signal2Hilbert, Length_Realization,
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	68b9      	ldr	r1, [r7, #8]
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f7ff fc37 	bl	80092a8 <SignalFastFurieTransformFREERTOS>
			Status_Furie_Ready);

	for(uint32_t Index_2Half_SH = 0; Index_2Half_SH < Length_Realization / 2; Index_2Half_SH++)
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	617b      	str	r3, [r7, #20]
 8009a3e:	e04c      	b.n	8009ada <Hilbert+0xba>
	{
		(Signal2Hilbert + Index_2Half_SH) -> Real  = 2 * (Signal2Hilbert + Index_2Half_SH) -> Real;
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	4613      	mov	r3, r2
 8009a44:	005b      	lsls	r3, r3, #1
 8009a46:	4413      	add	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	4413      	add	r3, r2
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	6979      	ldr	r1, [r7, #20]
 8009a54:	460b      	mov	r3, r1
 8009a56:	005b      	lsls	r3, r3, #1
 8009a58:	440b      	add	r3, r1
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	185c      	adds	r4, r3, r1
 8009a62:	4611      	mov	r1, r2
 8009a64:	4610      	mov	r0, r2
 8009a66:	f7f7 f855 	bl	8000b14 <__addsf3>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	6023      	str	r3, [r4, #0]
		(Signal2Hilbert + Index_2Half_SH) -> Imag  = 2 * (Signal2Hilbert + Index_2Half_SH) -> Imag;
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	4613      	mov	r3, r2
 8009a72:	005b      	lsls	r3, r3, #1
 8009a74:	4413      	add	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	461a      	mov	r2, r3
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	685a      	ldr	r2, [r3, #4]
 8009a80:	6979      	ldr	r1, [r7, #20]
 8009a82:	460b      	mov	r3, r1
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	440b      	add	r3, r1
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	185c      	adds	r4, r3, r1
 8009a90:	4611      	mov	r1, r2
 8009a92:	4610      	mov	r0, r2
 8009a94:	f7f7 f83e 	bl	8000b14 <__addsf3>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	6063      	str	r3, [r4, #4]
		(Signal2Hilbert + Index_2Half_SH + Length_Realization/2) -> Real = 0;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	085a      	lsrs	r2, r3, #1
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	441a      	add	r2, r3
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	005b      	lsls	r3, r3, #1
 8009aa8:	4413      	add	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	461a      	mov	r2, r3
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f04f 0200 	mov.w	r2, #0
 8009ab6:	601a      	str	r2, [r3, #0]
		(Signal2Hilbert + Index_2Half_SH + Length_Realization/2) -> Imag = 0;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	085a      	lsrs	r2, r3, #1
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	441a      	add	r2, r3
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	005b      	lsls	r3, r3, #1
 8009ac4:	4413      	add	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	461a      	mov	r2, r3
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	4413      	add	r3, r2
 8009ace:	f04f 0200 	mov.w	r2, #0
 8009ad2:	605a      	str	r2, [r3, #4]
	for(uint32_t Index_2Half_SH = 0; Index_2Half_SH < Length_Realization / 2; Index_2Half_SH++)
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	617b      	str	r3, [r7, #20]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	085b      	lsrs	r3, r3, #1
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d3ad      	bcc.n	8009a40 <Hilbert+0x20>
	}

	InvertFastFurieTransform(Signal2Hilbert, Length_Realization);
 8009ae4:	6879      	ldr	r1, [r7, #4]
 8009ae6:	68b8      	ldr	r0, [r7, #8]
 8009ae8:	f7ff ff46 	bl	8009978 <InvertFastFurieTransform>

}
 8009aec:	bf00      	nop
 8009aee:	371c      	adds	r7, #28
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd90      	pop	{r4, r7, pc}

08009af4 <Envelope>:

void Envelope(float *Envelope, float *Signal, compl_t *Signal2Hilbert, uint32_t Length_Realization, SemaphoreHandle_t Status_Furie_Ready)
{
 8009af4:	b590      	push	{r4, r7, lr}
 8009af6:	b087      	sub	sp, #28
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
 8009b00:	603b      	str	r3, [r7, #0]

	Hilbert(Signal, Signal2Hilbert, Length_Realization, Status_Furie_Ready);
 8009b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b04:	683a      	ldr	r2, [r7, #0]
 8009b06:	6879      	ldr	r1, [r7, #4]
 8009b08:	68b8      	ldr	r0, [r7, #8]
 8009b0a:	f7ff ff89 	bl	8009a20 <Hilbert>

	for(uint32_t Index = 0; Index < Length_Realization; Index++)
 8009b0e:	2300      	movs	r3, #0
 8009b10:	617b      	str	r3, [r7, #20]
 8009b12:	e01e      	b.n	8009b52 <Envelope+0x5e>
	{
		*(Envelope + Index) = Compl_Abs((Signal2Hilbert + Index));
 8009b14:	697a      	ldr	r2, [r7, #20]
 8009b16:	4613      	mov	r3, r2
 8009b18:	005b      	lsls	r3, r3, #1
 8009b1a:	4413      	add	r3, r2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	461a      	mov	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	1899      	adds	r1, r3, r2
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	18d4      	adds	r4, r2, r3
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	f7fe fd1b 	bl	8008568 <Compl_Abs>
 8009b32:	4603      	mov	r3, r0
 8009b34:	6023      	str	r3, [r4, #0]

		(Signal2Hilbert + Index) -> Imag = 0;		//	Refrash Signal
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	005b      	lsls	r3, r3, #1
 8009b3c:	4413      	add	r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	461a      	mov	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4413      	add	r3, r2
 8009b46:	f04f 0200 	mov.w	r2, #0
 8009b4a:	605a      	str	r2, [r3, #4]
	for(uint32_t Index = 0; Index < Length_Realization; Index++)
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	3301      	adds	r3, #1
 8009b50:	617b      	str	r3, [r7, #20]
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d3dc      	bcc.n	8009b14 <Envelope+0x20>
	}

}
 8009b5a:	bf00      	nop
 8009b5c:	bf00      	nop
 8009b5e:	371c      	adds	r7, #28
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd90      	pop	{r4, r7, pc}

08009b64 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b76:	2b84      	cmp	r3, #132	; 0x84
 8009b78:	d005      	beq.n	8009b86 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009b7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	4413      	add	r3, r2
 8009b82:	3303      	adds	r3, #3
 8009b84:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009b86:	68fb      	ldr	r3, [r7, #12]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3714      	adds	r7, #20
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bc80      	pop	{r7}
 8009b90:	4770      	bx	lr

08009b92 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009b96:	f001 f969 	bl	800ae6c <vTaskStartScheduler>
  
  return osOK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ba2:	b089      	sub	sp, #36	; 0x24
 8009ba4:	af04      	add	r7, sp, #16
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d020      	beq.n	8009bf4 <osThreadCreate+0x54>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d01c      	beq.n	8009bf4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	685c      	ldr	r4, [r3, #4]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681d      	ldr	r5, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	691e      	ldr	r6, [r3, #16]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7ff ffc9 	bl	8009b64 <makeFreeRtosPriority>
 8009bd2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	695b      	ldr	r3, [r3, #20]
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bdc:	9202      	str	r2, [sp, #8]
 8009bde:	9301      	str	r3, [sp, #4]
 8009be0:	9100      	str	r1, [sp, #0]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	4632      	mov	r2, r6
 8009be6:	4629      	mov	r1, r5
 8009be8:	4620      	mov	r0, r4
 8009bea:	f000 fed9 	bl	800a9a0 <xTaskCreateStatic>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	60fb      	str	r3, [r7, #12]
 8009bf2:	e01c      	b.n	8009c2e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685c      	ldr	r4, [r3, #4]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c00:	b29e      	uxth	r6, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7ff ffab 	bl	8009b64 <makeFreeRtosPriority>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	f107 030c 	add.w	r3, r7, #12
 8009c14:	9301      	str	r3, [sp, #4]
 8009c16:	9200      	str	r2, [sp, #0]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	4632      	mov	r2, r6
 8009c1c:	4629      	mov	r1, r5
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f000 ff1a 	bl	800aa58 <xTaskCreate>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d001      	beq.n	8009c2e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	e000      	b.n	8009c30 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3714      	adds	r7, #20
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c38 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f001 f84f 	bl	800ace4 <vTaskDelete>
  return osOK;
 8009c46:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d001      	beq.n	8009c66 <osDelay+0x16>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	e000      	b.n	8009c68 <osDelay+0x18>
 8009c66:	2301      	movs	r3, #1
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f001 f8cb 	bl	800ae04 <vTaskDelay>
  
  return osOK;
 8009c6e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f103 0208 	add.w	r2, r3, #8
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f103 0208 	add.w	r2, r3, #8
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f103 0208 	add.w	r2, r3, #8
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bc80      	pop	{r7}
 8009cb4:	4770      	bx	lr

08009cb6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b083      	sub	sp, #12
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bc80      	pop	{r7}
 8009ccc:	4770      	bx	lr

08009cce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cce:	b480      	push	{r7}
 8009cd0:	b085      	sub	sp, #20
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	689a      	ldr	r2, [r3, #8]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	683a      	ldr	r2, [r7, #0]
 8009cf2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	1c5a      	adds	r2, r3, #1
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	601a      	str	r2, [r3, #0]
}
 8009d0a:	bf00      	nop
 8009d0c:	3714      	adds	r7, #20
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bc80      	pop	{r7}
 8009d12:	4770      	bx	lr

08009d14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d2a:	d103      	bne.n	8009d34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	60fb      	str	r3, [r7, #12]
 8009d32:	e00c      	b.n	8009d4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	3308      	adds	r3, #8
 8009d38:	60fb      	str	r3, [r7, #12]
 8009d3a:	e002      	b.n	8009d42 <vListInsert+0x2e>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	60fb      	str	r3, [r7, #12]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d2f6      	bcs.n	8009d3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	683a      	ldr	r2, [r7, #0]
 8009d5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	601a      	str	r2, [r3, #0]
}
 8009d7a:	bf00      	nop
 8009d7c:	3714      	adds	r7, #20
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bc80      	pop	{r7}
 8009d82:	4770      	bx	lr

08009d84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	6892      	ldr	r2, [r2, #8]
 8009d9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	6852      	ldr	r2, [r2, #4]
 8009da4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d103      	bne.n	8009db8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	689a      	ldr	r2, [r3, #8]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	1e5a      	subs	r2, r3, #1
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3714      	adds	r7, #20
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bc80      	pop	{r7}
 8009dd4:	4770      	bx	lr
	...

08009dd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d10a      	bne.n	8009e02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df0:	f383 8811 	msr	BASEPRI, r3
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009dfe:	bf00      	nop
 8009e00:	e7fe      	b.n	8009e00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e02:	f002 f95b 	bl	800c0bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0e:	68f9      	ldr	r1, [r7, #12]
 8009e10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e12:	fb01 f303 	mul.w	r3, r1, r3
 8009e16:	441a      	add	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e32:	3b01      	subs	r3, #1
 8009e34:	68f9      	ldr	r1, [r7, #12]
 8009e36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e38:	fb01 f303 	mul.w	r3, r1, r3
 8009e3c:	441a      	add	r2, r3
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	22ff      	movs	r2, #255	; 0xff
 8009e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	22ff      	movs	r2, #255	; 0xff
 8009e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d114      	bne.n	8009e82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d01a      	beq.n	8009e96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	3310      	adds	r3, #16
 8009e64:	4618      	mov	r0, r3
 8009e66:	f001 fa59 	bl	800b31c <xTaskRemoveFromEventList>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d012      	beq.n	8009e96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e70:	4b0c      	ldr	r3, [pc, #48]	; (8009ea4 <xQueueGenericReset+0xcc>)
 8009e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e76:	601a      	str	r2, [r3, #0]
 8009e78:	f3bf 8f4f 	dsb	sy
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	e009      	b.n	8009e96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	3310      	adds	r3, #16
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7ff fef6 	bl	8009c78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	3324      	adds	r3, #36	; 0x24
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7ff fef1 	bl	8009c78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009e96:	f002 f941 	bl	800c11c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009e9a:	2301      	movs	r3, #1
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	e000ed04 	.word	0xe000ed04

08009ea8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b08a      	sub	sp, #40	; 0x28
 8009eac:	af02      	add	r7, sp, #8
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10a      	bne.n	8009ed2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec0:	f383 8811 	msr	BASEPRI, r3
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	613b      	str	r3, [r7, #16]
}
 8009ece:	bf00      	nop
 8009ed0:	e7fe      	b.n	8009ed0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d102      	bne.n	8009ede <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	61fb      	str	r3, [r7, #28]
 8009edc:	e004      	b.n	8009ee8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	fb02 f303 	mul.w	r3, r2, r3
 8009ee6:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	3348      	adds	r3, #72	; 0x48
 8009eec:	4618      	mov	r0, r3
 8009eee:	f002 f9e5 	bl	800c2bc <pvPortMalloc>
 8009ef2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00f      	beq.n	8009f1a <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	3348      	adds	r3, #72	; 0x48
 8009efe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f08:	79fa      	ldrb	r2, [r7, #7]
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	68b9      	ldr	r1, [r7, #8]
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f000 f805 	bl	8009f24 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009f1a:	69bb      	ldr	r3, [r7, #24]
	}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3720      	adds	r7, #32
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
 8009f30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d103      	bne.n	8009f40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	69ba      	ldr	r2, [r7, #24]
 8009f3c:	601a      	str	r2, [r3, #0]
 8009f3e:	e002      	b.n	8009f46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f52:	2101      	movs	r1, #1
 8009f54:	69b8      	ldr	r0, [r7, #24]
 8009f56:	f7ff ff3f 	bl	8009dd8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f5a:	bf00      	nop
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b082      	sub	sp, #8
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00e      	beq.n	8009f8e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009f82:	2300      	movs	r3, #0
 8009f84:	2200      	movs	r2, #0
 8009f86:	2100      	movs	r1, #0
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f81d 	bl	8009fc8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009f8e:	bf00      	nop
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b086      	sub	sp, #24
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	617b      	str	r3, [r7, #20]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009fa8:	79fb      	ldrb	r3, [r7, #7]
 8009faa:	461a      	mov	r2, r3
 8009fac:	6939      	ldr	r1, [r7, #16]
 8009fae:	6978      	ldr	r0, [r7, #20]
 8009fb0:	f7ff ff7a 	bl	8009ea8 <xQueueGenericCreate>
 8009fb4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f7ff ffd3 	bl	8009f62 <prvInitialiseMutex>

		return pxNewQueue;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
	}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3718      	adds	r7, #24
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
	...

08009fc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b08e      	sub	sp, #56	; 0x38
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
 8009fd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10a      	bne.n	8009ffa <xQueueGenericSend+0x32>
	__asm volatile
 8009fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ff6:	bf00      	nop
 8009ff8:	e7fe      	b.n	8009ff8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d103      	bne.n	800a008 <xQueueGenericSend+0x40>
 800a000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <xQueueGenericSend+0x44>
 800a008:	2301      	movs	r3, #1
 800a00a:	e000      	b.n	800a00e <xQueueGenericSend+0x46>
 800a00c:	2300      	movs	r3, #0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10a      	bne.n	800a028 <xQueueGenericSend+0x60>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a024:	bf00      	nop
 800a026:	e7fe      	b.n	800a026 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d103      	bne.n	800a036 <xQueueGenericSend+0x6e>
 800a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a032:	2b01      	cmp	r3, #1
 800a034:	d101      	bne.n	800a03a <xQueueGenericSend+0x72>
 800a036:	2301      	movs	r3, #1
 800a038:	e000      	b.n	800a03c <xQueueGenericSend+0x74>
 800a03a:	2300      	movs	r3, #0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10a      	bne.n	800a056 <xQueueGenericSend+0x8e>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	623b      	str	r3, [r7, #32]
}
 800a052:	bf00      	nop
 800a054:	e7fe      	b.n	800a054 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a056:	f001 fb25 	bl	800b6a4 <xTaskGetSchedulerState>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d102      	bne.n	800a066 <xQueueGenericSend+0x9e>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d101      	bne.n	800a06a <xQueueGenericSend+0xa2>
 800a066:	2301      	movs	r3, #1
 800a068:	e000      	b.n	800a06c <xQueueGenericSend+0xa4>
 800a06a:	2300      	movs	r3, #0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10a      	bne.n	800a086 <xQueueGenericSend+0xbe>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	61fb      	str	r3, [r7, #28]
}
 800a082:	bf00      	nop
 800a084:	e7fe      	b.n	800a084 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a086:	f002 f819 	bl	800c0bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a092:	429a      	cmp	r2, r3
 800a094:	d302      	bcc.n	800a09c <xQueueGenericSend+0xd4>
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d129      	bne.n	800a0f0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a09c:	683a      	ldr	r2, [r7, #0]
 800a09e:	68b9      	ldr	r1, [r7, #8]
 800a0a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0a2:	f000 fb43 	bl	800a72c <prvCopyDataToQueue>
 800a0a6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d010      	beq.n	800a0d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b2:	3324      	adds	r3, #36	; 0x24
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f001 f931 	bl	800b31c <xTaskRemoveFromEventList>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d013      	beq.n	800a0e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0c0:	4b3f      	ldr	r3, [pc, #252]	; (800a1c0 <xQueueGenericSend+0x1f8>)
 800a0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0c6:	601a      	str	r2, [r3, #0]
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	e00a      	b.n	800a0e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d007      	beq.n	800a0e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a0d8:	4b39      	ldr	r3, [pc, #228]	; (800a1c0 <xQueueGenericSend+0x1f8>)
 800a0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0de:	601a      	str	r2, [r3, #0]
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a0e8:	f002 f818 	bl	800c11c <vPortExitCritical>
				return pdPASS;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e063      	b.n	800a1b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d103      	bne.n	800a0fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0f6:	f002 f811 	bl	800c11c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	e05c      	b.n	800a1b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a100:	2b00      	cmp	r3, #0
 800a102:	d106      	bne.n	800a112 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a104:	f107 0314 	add.w	r3, r7, #20
 800a108:	4618      	mov	r0, r3
 800a10a:	f001 f969 	bl	800b3e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a10e:	2301      	movs	r3, #1
 800a110:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a112:	f002 f803 	bl	800c11c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a116:	f000 ff13 	bl	800af40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a11a:	f001 ffcf 	bl	800c0bc <vPortEnterCritical>
 800a11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a124:	b25b      	sxtb	r3, r3
 800a126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12a:	d103      	bne.n	800a134 <xQueueGenericSend+0x16c>
 800a12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a13a:	b25b      	sxtb	r3, r3
 800a13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a140:	d103      	bne.n	800a14a <xQueueGenericSend+0x182>
 800a142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a144:	2200      	movs	r2, #0
 800a146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a14a:	f001 ffe7 	bl	800c11c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a14e:	1d3a      	adds	r2, r7, #4
 800a150:	f107 0314 	add.w	r3, r7, #20
 800a154:	4611      	mov	r1, r2
 800a156:	4618      	mov	r0, r3
 800a158:	f001 f958 	bl	800b40c <xTaskCheckForTimeOut>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d124      	bne.n	800a1ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a164:	f000 fbda 	bl	800a91c <prvIsQueueFull>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d018      	beq.n	800a1a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a170:	3310      	adds	r3, #16
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	4611      	mov	r1, r2
 800a176:	4618      	mov	r0, r3
 800a178:	f001 f8ac 	bl	800b2d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a17c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a17e:	f000 fb65 	bl	800a84c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a182:	f000 feeb 	bl	800af5c <xTaskResumeAll>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f47f af7c 	bne.w	800a086 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a18e:	4b0c      	ldr	r3, [pc, #48]	; (800a1c0 <xQueueGenericSend+0x1f8>)
 800a190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a194:	601a      	str	r2, [r3, #0]
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	e772      	b.n	800a086 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a1a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1a2:	f000 fb53 	bl	800a84c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1a6:	f000 fed9 	bl	800af5c <xTaskResumeAll>
 800a1aa:	e76c      	b.n	800a086 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a1ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1ae:	f000 fb4d 	bl	800a84c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1b2:	f000 fed3 	bl	800af5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a1b6:	2300      	movs	r3, #0
		}
	}
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3738      	adds	r7, #56	; 0x38
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	e000ed04 	.word	0xe000ed04

0800a1c4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08e      	sub	sp, #56	; 0x38
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10a      	bne.n	800a1ee <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	623b      	str	r3, [r7, #32]
}
 800a1ea:	bf00      	nop
 800a1ec:	e7fe      	b.n	800a1ec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00a      	beq.n	800a20c <xQueueGiveFromISR+0x48>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	61fb      	str	r3, [r7, #28]
}
 800a208:	bf00      	nop
 800a20a:	e7fe      	b.n	800a20a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800a20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d103      	bne.n	800a21c <xQueueGiveFromISR+0x58>
 800a214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d101      	bne.n	800a220 <xQueueGiveFromISR+0x5c>
 800a21c:	2301      	movs	r3, #1
 800a21e:	e000      	b.n	800a222 <xQueueGiveFromISR+0x5e>
 800a220:	2300      	movs	r3, #0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10a      	bne.n	800a23c <xQueueGiveFromISR+0x78>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	61bb      	str	r3, [r7, #24]
}
 800a238:	bf00      	nop
 800a23a:	e7fe      	b.n	800a23a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a23c:	f002 f800 	bl	800c240 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a240:	f3ef 8211 	mrs	r2, BASEPRI
 800a244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a248:	f383 8811 	msr	BASEPRI, r3
 800a24c:	f3bf 8f6f 	isb	sy
 800a250:	f3bf 8f4f 	dsb	sy
 800a254:	617a      	str	r2, [r7, #20]
 800a256:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a258:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a25a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a260:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a268:	429a      	cmp	r2, r3
 800a26a:	d22b      	bcs.n	800a2c4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a278:	1c5a      	adds	r2, r3, #1
 800a27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a27e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a286:	d112      	bne.n	800a2ae <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d016      	beq.n	800a2be <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a292:	3324      	adds	r3, #36	; 0x24
 800a294:	4618      	mov	r0, r3
 800a296:	f001 f841 	bl	800b31c <xTaskRemoveFromEventList>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00e      	beq.n	800a2be <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00b      	beq.n	800a2be <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	601a      	str	r2, [r3, #0]
 800a2ac:	e007      	b.n	800a2be <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	b25a      	sxtb	r2, r3
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	637b      	str	r3, [r7, #52]	; 0x34
 800a2c2:	e001      	b.n	800a2c8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	637b      	str	r3, [r7, #52]	; 0x34
 800a2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ca:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3738      	adds	r7, #56	; 0x38
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
	...

0800a2e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b08c      	sub	sp, #48	; 0x30
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d10a      	bne.n	800a310 <xQueueReceive+0x30>
	__asm volatile
 800a2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fe:	f383 8811 	msr	BASEPRI, r3
 800a302:	f3bf 8f6f 	isb	sy
 800a306:	f3bf 8f4f 	dsb	sy
 800a30a:	623b      	str	r3, [r7, #32]
}
 800a30c:	bf00      	nop
 800a30e:	e7fe      	b.n	800a30e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d103      	bne.n	800a31e <xQueueReceive+0x3e>
 800a316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <xQueueReceive+0x42>
 800a31e:	2301      	movs	r3, #1
 800a320:	e000      	b.n	800a324 <xQueueReceive+0x44>
 800a322:	2300      	movs	r3, #0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10a      	bne.n	800a33e <xQueueReceive+0x5e>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	61fb      	str	r3, [r7, #28]
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a33e:	f001 f9b1 	bl	800b6a4 <xTaskGetSchedulerState>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d102      	bne.n	800a34e <xQueueReceive+0x6e>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d101      	bne.n	800a352 <xQueueReceive+0x72>
 800a34e:	2301      	movs	r3, #1
 800a350:	e000      	b.n	800a354 <xQueueReceive+0x74>
 800a352:	2300      	movs	r3, #0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d10a      	bne.n	800a36e <xQueueReceive+0x8e>
	__asm volatile
 800a358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35c:	f383 8811 	msr	BASEPRI, r3
 800a360:	f3bf 8f6f 	isb	sy
 800a364:	f3bf 8f4f 	dsb	sy
 800a368:	61bb      	str	r3, [r7, #24]
}
 800a36a:	bf00      	nop
 800a36c:	e7fe      	b.n	800a36c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a36e:	f001 fea5 	bl	800c0bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a376:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d01f      	beq.n	800a3be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a37e:	68b9      	ldr	r1, [r7, #8]
 800a380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a382:	f000 fa3d 	bl	800a800 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a388:	1e5a      	subs	r2, r3, #1
 800a38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d00f      	beq.n	800a3b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a398:	3310      	adds	r3, #16
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 ffbe 	bl	800b31c <xTaskRemoveFromEventList>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d007      	beq.n	800a3b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3a6:	4b3d      	ldr	r3, [pc, #244]	; (800a49c <xQueueReceive+0x1bc>)
 800a3a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3b6:	f001 feb1 	bl	800c11c <vPortExitCritical>
				return pdPASS;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e069      	b.n	800a492 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d103      	bne.n	800a3cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3c4:	f001 feaa 	bl	800c11c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	e062      	b.n	800a492 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d106      	bne.n	800a3e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3d2:	f107 0310 	add.w	r3, r7, #16
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f001 f802 	bl	800b3e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3e0:	f001 fe9c 	bl	800c11c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3e4:	f000 fdac 	bl	800af40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3e8:	f001 fe68 	bl	800c0bc <vPortEnterCritical>
 800a3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3f2:	b25b      	sxtb	r3, r3
 800a3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f8:	d103      	bne.n	800a402 <xQueueReceive+0x122>
 800a3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a408:	b25b      	sxtb	r3, r3
 800a40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40e:	d103      	bne.n	800a418 <xQueueReceive+0x138>
 800a410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a412:	2200      	movs	r2, #0
 800a414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a418:	f001 fe80 	bl	800c11c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a41c:	1d3a      	adds	r2, r7, #4
 800a41e:	f107 0310 	add.w	r3, r7, #16
 800a422:	4611      	mov	r1, r2
 800a424:	4618      	mov	r0, r3
 800a426:	f000 fff1 	bl	800b40c <xTaskCheckForTimeOut>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d123      	bne.n	800a478 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a432:	f000 fa5d 	bl	800a8f0 <prvIsQueueEmpty>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d017      	beq.n	800a46c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43e:	3324      	adds	r3, #36	; 0x24
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	4611      	mov	r1, r2
 800a444:	4618      	mov	r0, r3
 800a446:	f000 ff45 	bl	800b2d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a44a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a44c:	f000 f9fe 	bl	800a84c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a450:	f000 fd84 	bl	800af5c <xTaskResumeAll>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d189      	bne.n	800a36e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a45a:	4b10      	ldr	r3, [pc, #64]	; (800a49c <xQueueReceive+0x1bc>)
 800a45c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a460:	601a      	str	r2, [r3, #0]
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	e780      	b.n	800a36e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a46c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a46e:	f000 f9ed 	bl	800a84c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a472:	f000 fd73 	bl	800af5c <xTaskResumeAll>
 800a476:	e77a      	b.n	800a36e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a47a:	f000 f9e7 	bl	800a84c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a47e:	f000 fd6d 	bl	800af5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a484:	f000 fa34 	bl	800a8f0 <prvIsQueueEmpty>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f43f af6f 	beq.w	800a36e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a490:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a492:	4618      	mov	r0, r3
 800a494:	3730      	adds	r7, #48	; 0x30
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	e000ed04 	.word	0xe000ed04

0800a4a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b08e      	sub	sp, #56	; 0x38
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10a      	bne.n	800a4d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c0:	f383 8811 	msr	BASEPRI, r3
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	623b      	str	r3, [r7, #32]
}
 800a4ce:	bf00      	nop
 800a4d0:	e7fe      	b.n	800a4d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00a      	beq.n	800a4f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4de:	f383 8811 	msr	BASEPRI, r3
 800a4e2:	f3bf 8f6f 	isb	sy
 800a4e6:	f3bf 8f4f 	dsb	sy
 800a4ea:	61fb      	str	r3, [r7, #28]
}
 800a4ec:	bf00      	nop
 800a4ee:	e7fe      	b.n	800a4ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4f0:	f001 f8d8 	bl	800b6a4 <xTaskGetSchedulerState>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d102      	bne.n	800a500 <xQueueSemaphoreTake+0x60>
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d101      	bne.n	800a504 <xQueueSemaphoreTake+0x64>
 800a500:	2301      	movs	r3, #1
 800a502:	e000      	b.n	800a506 <xQueueSemaphoreTake+0x66>
 800a504:	2300      	movs	r3, #0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10a      	bne.n	800a520 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50e:	f383 8811 	msr	BASEPRI, r3
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	61bb      	str	r3, [r7, #24]
}
 800a51c:	bf00      	nop
 800a51e:	e7fe      	b.n	800a51e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a520:	f001 fdcc 	bl	800c0bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a528:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d024      	beq.n	800a57a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a532:	1e5a      	subs	r2, r3, #1
 800a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a536:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d104      	bne.n	800a54a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a540:	f001 fa7a 	bl	800ba38 <pvTaskIncrementMutexHeldCount>
 800a544:	4602      	mov	r2, r0
 800a546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a548:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00f      	beq.n	800a572 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a554:	3310      	adds	r3, #16
 800a556:	4618      	mov	r0, r3
 800a558:	f000 fee0 	bl	800b31c <xTaskRemoveFromEventList>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d007      	beq.n	800a572 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a562:	4b54      	ldr	r3, [pc, #336]	; (800a6b4 <xQueueSemaphoreTake+0x214>)
 800a564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a572:	f001 fdd3 	bl	800c11c <vPortExitCritical>
				return pdPASS;
 800a576:	2301      	movs	r3, #1
 800a578:	e097      	b.n	800a6aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d111      	bne.n	800a5a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00a      	beq.n	800a59c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58a:	f383 8811 	msr	BASEPRI, r3
 800a58e:	f3bf 8f6f 	isb	sy
 800a592:	f3bf 8f4f 	dsb	sy
 800a596:	617b      	str	r3, [r7, #20]
}
 800a598:	bf00      	nop
 800a59a:	e7fe      	b.n	800a59a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a59c:	f001 fdbe 	bl	800c11c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	e082      	b.n	800a6aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d106      	bne.n	800a5b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5aa:	f107 030c 	add.w	r3, r7, #12
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f000 ff16 	bl	800b3e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5b8:	f001 fdb0 	bl	800c11c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5bc:	f000 fcc0 	bl	800af40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5c0:	f001 fd7c 	bl	800c0bc <vPortEnterCritical>
 800a5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5ca:	b25b      	sxtb	r3, r3
 800a5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d0:	d103      	bne.n	800a5da <xQueueSemaphoreTake+0x13a>
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5e0:	b25b      	sxtb	r3, r3
 800a5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e6:	d103      	bne.n	800a5f0 <xQueueSemaphoreTake+0x150>
 800a5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5f0:	f001 fd94 	bl	800c11c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5f4:	463a      	mov	r2, r7
 800a5f6:	f107 030c 	add.w	r3, r7, #12
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f000 ff05 	bl	800b40c <xTaskCheckForTimeOut>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d132      	bne.n	800a66e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a608:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a60a:	f000 f971 	bl	800a8f0 <prvIsQueueEmpty>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d026      	beq.n	800a662 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d109      	bne.n	800a630 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a61c:	f001 fd4e 	bl	800c0bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	4618      	mov	r0, r3
 800a626:	f001 f85b 	bl	800b6e0 <xTaskPriorityInherit>
 800a62a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a62c:	f001 fd76 	bl	800c11c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a632:	3324      	adds	r3, #36	; 0x24
 800a634:	683a      	ldr	r2, [r7, #0]
 800a636:	4611      	mov	r1, r2
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 fe4b 	bl	800b2d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a63e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a640:	f000 f904 	bl	800a84c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a644:	f000 fc8a 	bl	800af5c <xTaskResumeAll>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f47f af68 	bne.w	800a520 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a650:	4b18      	ldr	r3, [pc, #96]	; (800a6b4 <xQueueSemaphoreTake+0x214>)
 800a652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a656:	601a      	str	r2, [r3, #0]
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	e75e      	b.n	800a520 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a664:	f000 f8f2 	bl	800a84c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a668:	f000 fc78 	bl	800af5c <xTaskResumeAll>
 800a66c:	e758      	b.n	800a520 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a66e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a670:	f000 f8ec 	bl	800a84c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a674:	f000 fc72 	bl	800af5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a678:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a67a:	f000 f939 	bl	800a8f0 <prvIsQueueEmpty>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	f43f af4d 	beq.w	800a520 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00d      	beq.n	800a6a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a68c:	f001 fd16 	bl	800c0bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a690:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a692:	f000 f834 	bl	800a6fe <prvGetDisinheritPriorityAfterTimeout>
 800a696:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800a698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f001 f92a 	bl	800b8f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a6a4:	f001 fd3a 	bl	800c11c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3738      	adds	r7, #56	; 0x38
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	e000ed04 	.word	0xe000ed04

0800a6b8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10a      	bne.n	800a6e0 <vQueueDelete+0x28>
	__asm volatile
 800a6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	60bb      	str	r3, [r7, #8]
}
 800a6dc:	bf00      	nop
 800a6de:	e7fe      	b.n	800a6de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f000 f933 	bl	800a94c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d102      	bne.n	800a6f6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f001 fead 	bl	800c450 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a6f6:	bf00      	nop
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a6fe:	b480      	push	{r7}
 800a700:	b085      	sub	sp, #20
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d006      	beq.n	800a71c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f1c3 0307 	rsb	r3, r3, #7
 800a718:	60fb      	str	r3, [r7, #12]
 800a71a:	e001      	b.n	800a720 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a71c:	2300      	movs	r3, #0
 800a71e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a720:	68fb      	ldr	r3, [r7, #12]
	}
 800a722:	4618      	mov	r0, r3
 800a724:	3714      	adds	r7, #20
 800a726:	46bd      	mov	sp, r7
 800a728:	bc80      	pop	{r7}
 800a72a:	4770      	bx	lr

0800a72c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a738:	2300      	movs	r3, #0
 800a73a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a740:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10d      	bne.n	800a766 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d14d      	bne.n	800a7ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	4618      	mov	r0, r3
 800a758:	f001 f848 	bl	800b7ec <xTaskPriorityDisinherit>
 800a75c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2200      	movs	r2, #0
 800a762:	605a      	str	r2, [r3, #4]
 800a764:	e043      	b.n	800a7ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d119      	bne.n	800a7a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6898      	ldr	r0, [r3, #8]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a774:	461a      	mov	r2, r3
 800a776:	68b9      	ldr	r1, [r7, #8]
 800a778:	f001 ffaa 	bl	800c6d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	689a      	ldr	r2, [r3, #8]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a784:	441a      	add	r2, r3
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	689a      	ldr	r2, [r3, #8]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	429a      	cmp	r2, r3
 800a794:	d32b      	bcc.n	800a7ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	609a      	str	r2, [r3, #8]
 800a79e:	e026      	b.n	800a7ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	68d8      	ldr	r0, [r3, #12]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	68b9      	ldr	r1, [r7, #8]
 800a7ac:	f001 ff90 	bl	800c6d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	68da      	ldr	r2, [r3, #12]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b8:	425b      	negs	r3, r3
 800a7ba:	441a      	add	r2, r3
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	68da      	ldr	r2, [r3, #12]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d207      	bcs.n	800a7dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	685a      	ldr	r2, [r3, #4]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d4:	425b      	negs	r3, r3
 800a7d6:	441a      	add	r2, r3
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	d105      	bne.n	800a7ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d002      	beq.n	800a7ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	1c5a      	adds	r2, r3, #1
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a7f6:	697b      	ldr	r3, [r7, #20]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3718      	adds	r7, #24
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d018      	beq.n	800a844 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68da      	ldr	r2, [r3, #12]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a81a:	441a      	add	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68da      	ldr	r2, [r3, #12]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d303      	bcc.n	800a834 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	68d9      	ldr	r1, [r3, #12]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83c:	461a      	mov	r2, r3
 800a83e:	6838      	ldr	r0, [r7, #0]
 800a840:	f001 ff46 	bl	800c6d0 <memcpy>
	}
}
 800a844:	bf00      	nop
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a854:	f001 fc32 	bl	800c0bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a85e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a860:	e011      	b.n	800a886 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a866:	2b00      	cmp	r3, #0
 800a868:	d012      	beq.n	800a890 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	3324      	adds	r3, #36	; 0x24
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 fd54 	bl	800b31c <xTaskRemoveFromEventList>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d001      	beq.n	800a87e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a87a:	f000 fe29 	bl	800b4d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a87e:	7bfb      	ldrb	r3, [r7, #15]
 800a880:	3b01      	subs	r3, #1
 800a882:	b2db      	uxtb	r3, r3
 800a884:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	dce9      	bgt.n	800a862 <prvUnlockQueue+0x16>
 800a88e:	e000      	b.n	800a892 <prvUnlockQueue+0x46>
					break;
 800a890:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	22ff      	movs	r2, #255	; 0xff
 800a896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a89a:	f001 fc3f 	bl	800c11c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a89e:	f001 fc0d 	bl	800c0bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8aa:	e011      	b.n	800a8d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d012      	beq.n	800a8da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	3310      	adds	r3, #16
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f000 fd2f 	bl	800b31c <xTaskRemoveFromEventList>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a8c4:	f000 fe04 	bl	800b4d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a8c8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	dce9      	bgt.n	800a8ac <prvUnlockQueue+0x60>
 800a8d8:	e000      	b.n	800a8dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a8da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	22ff      	movs	r2, #255	; 0xff
 800a8e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a8e4:	f001 fc1a 	bl	800c11c <vPortExitCritical>
}
 800a8e8:	bf00      	nop
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8f8:	f001 fbe0 	bl	800c0bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a900:	2b00      	cmp	r3, #0
 800a902:	d102      	bne.n	800a90a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a904:	2301      	movs	r3, #1
 800a906:	60fb      	str	r3, [r7, #12]
 800a908:	e001      	b.n	800a90e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a90a:	2300      	movs	r3, #0
 800a90c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a90e:	f001 fc05 	bl	800c11c <vPortExitCritical>

	return xReturn;
 800a912:	68fb      	ldr	r3, [r7, #12]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a924:	f001 fbca 	bl	800c0bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a930:	429a      	cmp	r2, r3
 800a932:	d102      	bne.n	800a93a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a934:	2301      	movs	r3, #1
 800a936:	60fb      	str	r3, [r7, #12]
 800a938:	e001      	b.n	800a93e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a93a:	2300      	movs	r3, #0
 800a93c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a93e:	f001 fbed 	bl	800c11c <vPortExitCritical>

	return xReturn;
 800a942:	68fb      	ldr	r3, [r7, #12]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a954:	2300      	movs	r3, #0
 800a956:	60fb      	str	r3, [r7, #12]
 800a958:	e016      	b.n	800a988 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a95a:	4a10      	ldr	r2, [pc, #64]	; (800a99c <vQueueUnregisterQueue+0x50>)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	00db      	lsls	r3, r3, #3
 800a960:	4413      	add	r3, r2
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	429a      	cmp	r2, r3
 800a968:	d10b      	bne.n	800a982 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a96a:	4a0c      	ldr	r2, [pc, #48]	; (800a99c <vQueueUnregisterQueue+0x50>)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2100      	movs	r1, #0
 800a970:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a974:	4a09      	ldr	r2, [pc, #36]	; (800a99c <vQueueUnregisterQueue+0x50>)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	00db      	lsls	r3, r3, #3
 800a97a:	4413      	add	r3, r2
 800a97c:	2200      	movs	r2, #0
 800a97e:	605a      	str	r2, [r3, #4]
				break;
 800a980:	e006      	b.n	800a990 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	3301      	adds	r3, #1
 800a986:	60fb      	str	r3, [r7, #12]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2b07      	cmp	r3, #7
 800a98c:	d9e5      	bls.n	800a95a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a98e:	bf00      	nop
 800a990:	bf00      	nop
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	bc80      	pop	{r7}
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	20004494 	.word	0x20004494

0800a9a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b08e      	sub	sp, #56	; 0x38
 800a9a4:	af04      	add	r7, sp, #16
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
 800a9ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d10a      	bne.n	800a9ca <xTaskCreateStatic+0x2a>
	__asm volatile
 800a9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b8:	f383 8811 	msr	BASEPRI, r3
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	623b      	str	r3, [r7, #32]
}
 800a9c6:	bf00      	nop
 800a9c8:	e7fe      	b.n	800a9c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10a      	bne.n	800a9e6 <xTaskCreateStatic+0x46>
	__asm volatile
 800a9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d4:	f383 8811 	msr	BASEPRI, r3
 800a9d8:	f3bf 8f6f 	isb	sy
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	61fb      	str	r3, [r7, #28]
}
 800a9e2:	bf00      	nop
 800a9e4:	e7fe      	b.n	800a9e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a9e6:	23b4      	movs	r3, #180	; 0xb4
 800a9e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	2bb4      	cmp	r3, #180	; 0xb4
 800a9ee:	d00a      	beq.n	800aa06 <xTaskCreateStatic+0x66>
	__asm volatile
 800a9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f4:	f383 8811 	msr	BASEPRI, r3
 800a9f8:	f3bf 8f6f 	isb	sy
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	61bb      	str	r3, [r7, #24]
}
 800aa02:	bf00      	nop
 800aa04:	e7fe      	b.n	800aa04 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d01e      	beq.n	800aa4a <xTaskCreateStatic+0xaa>
 800aa0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d01b      	beq.n	800aa4a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa14:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa1a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	2202      	movs	r2, #2
 800aa20:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa24:	2300      	movs	r3, #0
 800aa26:	9303      	str	r3, [sp, #12]
 800aa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2a:	9302      	str	r3, [sp, #8]
 800aa2c:	f107 0314 	add.w	r3, r7, #20
 800aa30:	9301      	str	r3, [sp, #4]
 800aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	68b9      	ldr	r1, [r7, #8]
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 f851 	bl	800aae4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa44:	f000 f8e4 	bl	800ac10 <prvAddNewTaskToReadyList>
 800aa48:	e001      	b.n	800aa4e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa4e:	697b      	ldr	r3, [r7, #20]
	}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3728      	adds	r7, #40	; 0x28
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b08c      	sub	sp, #48	; 0x30
 800aa5c:	af04      	add	r7, sp, #16
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	603b      	str	r3, [r7, #0]
 800aa64:	4613      	mov	r3, r2
 800aa66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa68:	88fb      	ldrh	r3, [r7, #6]
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f001 fc25 	bl	800c2bc <pvPortMalloc>
 800aa72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00e      	beq.n	800aa98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800aa7a:	20b4      	movs	r0, #180	; 0xb4
 800aa7c:	f001 fc1e 	bl	800c2bc <pvPortMalloc>
 800aa80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d003      	beq.n	800aa90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	697a      	ldr	r2, [r7, #20]
 800aa8c:	631a      	str	r2, [r3, #48]	; 0x30
 800aa8e:	e005      	b.n	800aa9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa90:	6978      	ldr	r0, [r7, #20]
 800aa92:	f001 fcdd 	bl	800c450 <vPortFree>
 800aa96:	e001      	b.n	800aa9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d017      	beq.n	800aad2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aaaa:	88fa      	ldrh	r2, [r7, #6]
 800aaac:	2300      	movs	r3, #0
 800aaae:	9303      	str	r3, [sp, #12]
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	9302      	str	r3, [sp, #8]
 800aab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab6:	9301      	str	r3, [sp, #4]
 800aab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	68b9      	ldr	r1, [r7, #8]
 800aac0:	68f8      	ldr	r0, [r7, #12]
 800aac2:	f000 f80f 	bl	800aae4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aac6:	69f8      	ldr	r0, [r7, #28]
 800aac8:	f000 f8a2 	bl	800ac10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aacc:	2301      	movs	r3, #1
 800aace:	61bb      	str	r3, [r7, #24]
 800aad0:	e002      	b.n	800aad8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aad2:	f04f 33ff 	mov.w	r3, #4294967295
 800aad6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aad8:	69bb      	ldr	r3, [r7, #24]
	}
 800aada:	4618      	mov	r0, r3
 800aadc:	3720      	adds	r7, #32
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
	...

0800aae4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b088      	sub	sp, #32
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
 800aaf0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aafc:	3b01      	subs	r3, #1
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	4413      	add	r3, r2
 800ab02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	f023 0307 	bic.w	r3, r3, #7
 800ab0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	f003 0307 	and.w	r3, r3, #7
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00a      	beq.n	800ab2c <prvInitialiseNewTask+0x48>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	617b      	str	r3, [r7, #20]
}
 800ab28:	bf00      	nop
 800ab2a:	e7fe      	b.n	800ab2a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	61fb      	str	r3, [r7, #28]
 800ab30:	e012      	b.n	800ab58 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab32:	68ba      	ldr	r2, [r7, #8]
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	4413      	add	r3, r2
 800ab38:	7819      	ldrb	r1, [r3, #0]
 800ab3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	4413      	add	r3, r2
 800ab40:	3334      	adds	r3, #52	; 0x34
 800ab42:	460a      	mov	r2, r1
 800ab44:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d006      	beq.n	800ab60 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	3301      	adds	r3, #1
 800ab56:	61fb      	str	r3, [r7, #28]
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	2b0f      	cmp	r3, #15
 800ab5c:	d9e9      	bls.n	800ab32 <prvInitialiseNewTask+0x4e>
 800ab5e:	e000      	b.n	800ab62 <prvInitialiseNewTask+0x7e>
		{
			break;
 800ab60:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6c:	2b06      	cmp	r3, #6
 800ab6e:	d901      	bls.n	800ab74 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab70:	2306      	movs	r3, #6
 800ab72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab7e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ab80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab82:	2200      	movs	r2, #0
 800ab84:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab88:	3304      	adds	r3, #4
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7ff f893 	bl	8009cb6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab92:	3318      	adds	r3, #24
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7ff f88e 	bl	8009cb6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba2:	f1c3 0207 	rsb	r2, r3, #7
 800aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800abaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800abb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb2:	2200      	movs	r2, #0
 800abb4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800abb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abba:	2200      	movs	r2, #0
 800abbc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800abc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc2:	334c      	adds	r3, #76	; 0x4c
 800abc4:	2260      	movs	r2, #96	; 0x60
 800abc6:	2100      	movs	r1, #0
 800abc8:	4618      	mov	r0, r3
 800abca:	f001 fd8f 	bl	800c6ec <memset>
 800abce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd0:	4a0c      	ldr	r2, [pc, #48]	; (800ac04 <prvInitialiseNewTask+0x120>)
 800abd2:	651a      	str	r2, [r3, #80]	; 0x50
 800abd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd6:	4a0c      	ldr	r2, [pc, #48]	; (800ac08 <prvInitialiseNewTask+0x124>)
 800abd8:	655a      	str	r2, [r3, #84]	; 0x54
 800abda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abdc:	4a0b      	ldr	r2, [pc, #44]	; (800ac0c <prvInitialiseNewTask+0x128>)
 800abde:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800abe0:	683a      	ldr	r2, [r7, #0]
 800abe2:	68f9      	ldr	r1, [r7, #12]
 800abe4:	69b8      	ldr	r0, [r7, #24]
 800abe6:	f001 f97b 	bl	800bee0 <pxPortInitialiseStack>
 800abea:	4602      	mov	r2, r0
 800abec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800abf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d002      	beq.n	800abfc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800abf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abfa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abfc:	bf00      	nop
 800abfe:	3720      	adds	r7, #32
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}
 800ac04:	0800dbf4 	.word	0x0800dbf4
 800ac08:	0800dc14 	.word	0x0800dc14
 800ac0c:	0800dbd4 	.word	0x0800dbd4

0800ac10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac18:	f001 fa50 	bl	800c0bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac1c:	4b2a      	ldr	r3, [pc, #168]	; (800acc8 <prvAddNewTaskToReadyList+0xb8>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	3301      	adds	r3, #1
 800ac22:	4a29      	ldr	r2, [pc, #164]	; (800acc8 <prvAddNewTaskToReadyList+0xb8>)
 800ac24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac26:	4b29      	ldr	r3, [pc, #164]	; (800accc <prvAddNewTaskToReadyList+0xbc>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d109      	bne.n	800ac42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac2e:	4a27      	ldr	r2, [pc, #156]	; (800accc <prvAddNewTaskToReadyList+0xbc>)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac34:	4b24      	ldr	r3, [pc, #144]	; (800acc8 <prvAddNewTaskToReadyList+0xb8>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d110      	bne.n	800ac5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac3c:	f000 fc6c 	bl	800b518 <prvInitialiseTaskLists>
 800ac40:	e00d      	b.n	800ac5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac42:	4b23      	ldr	r3, [pc, #140]	; (800acd0 <prvAddNewTaskToReadyList+0xc0>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d109      	bne.n	800ac5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac4a:	4b20      	ldr	r3, [pc, #128]	; (800accc <prvAddNewTaskToReadyList+0xbc>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d802      	bhi.n	800ac5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac58:	4a1c      	ldr	r2, [pc, #112]	; (800accc <prvAddNewTaskToReadyList+0xbc>)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac5e:	4b1d      	ldr	r3, [pc, #116]	; (800acd4 <prvAddNewTaskToReadyList+0xc4>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	3301      	adds	r3, #1
 800ac64:	4a1b      	ldr	r2, [pc, #108]	; (800acd4 <prvAddNewTaskToReadyList+0xc4>)
 800ac66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	409a      	lsls	r2, r3
 800ac70:	4b19      	ldr	r3, [pc, #100]	; (800acd8 <prvAddNewTaskToReadyList+0xc8>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	4a18      	ldr	r2, [pc, #96]	; (800acd8 <prvAddNewTaskToReadyList+0xc8>)
 800ac78:	6013      	str	r3, [r2, #0]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac7e:	4613      	mov	r3, r2
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	4413      	add	r3, r2
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	4a15      	ldr	r2, [pc, #84]	; (800acdc <prvAddNewTaskToReadyList+0xcc>)
 800ac88:	441a      	add	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	4619      	mov	r1, r3
 800ac90:	4610      	mov	r0, r2
 800ac92:	f7ff f81c 	bl	8009cce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac96:	f001 fa41 	bl	800c11c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac9a:	4b0d      	ldr	r3, [pc, #52]	; (800acd0 <prvAddNewTaskToReadyList+0xc0>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00e      	beq.n	800acc0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aca2:	4b0a      	ldr	r3, [pc, #40]	; (800accc <prvAddNewTaskToReadyList+0xbc>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acac:	429a      	cmp	r2, r3
 800acae:	d207      	bcs.n	800acc0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800acb0:	4b0b      	ldr	r3, [pc, #44]	; (800ace0 <prvAddNewTaskToReadyList+0xd0>)
 800acb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acb6:	601a      	str	r2, [r3, #0]
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acc0:	bf00      	nop
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	2000048c 	.word	0x2000048c
 800accc:	2000038c 	.word	0x2000038c
 800acd0:	20000498 	.word	0x20000498
 800acd4:	200004a8 	.word	0x200004a8
 800acd8:	20000494 	.word	0x20000494
 800acdc:	20000390 	.word	0x20000390
 800ace0:	e000ed04 	.word	0xe000ed04

0800ace4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800acec:	f001 f9e6 	bl	800c0bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d102      	bne.n	800acfc <vTaskDelete+0x18>
 800acf6:	4b39      	ldr	r3, [pc, #228]	; (800addc <vTaskDelete+0xf8>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	e000      	b.n	800acfe <vTaskDelete+0x1a>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	3304      	adds	r3, #4
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7ff f83d 	bl	8009d84 <uxListRemove>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d115      	bne.n	800ad3c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad14:	4932      	ldr	r1, [pc, #200]	; (800ade0 <vTaskDelete+0xfc>)
 800ad16:	4613      	mov	r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	4413      	add	r3, r2
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	440b      	add	r3, r1
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d10a      	bne.n	800ad3c <vTaskDelete+0x58>
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad30:	43da      	mvns	r2, r3
 800ad32:	4b2c      	ldr	r3, [pc, #176]	; (800ade4 <vTaskDelete+0x100>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4013      	ands	r3, r2
 800ad38:	4a2a      	ldr	r2, [pc, #168]	; (800ade4 <vTaskDelete+0x100>)
 800ad3a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d004      	beq.n	800ad4e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	3318      	adds	r3, #24
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7ff f81b 	bl	8009d84 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800ad4e:	4b26      	ldr	r3, [pc, #152]	; (800ade8 <vTaskDelete+0x104>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	3301      	adds	r3, #1
 800ad54:	4a24      	ldr	r2, [pc, #144]	; (800ade8 <vTaskDelete+0x104>)
 800ad56:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ad58:	4b20      	ldr	r3, [pc, #128]	; (800addc <vTaskDelete+0xf8>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d10b      	bne.n	800ad7a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	3304      	adds	r3, #4
 800ad66:	4619      	mov	r1, r3
 800ad68:	4820      	ldr	r0, [pc, #128]	; (800adec <vTaskDelete+0x108>)
 800ad6a:	f7fe ffb0 	bl	8009cce <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ad6e:	4b20      	ldr	r3, [pc, #128]	; (800adf0 <vTaskDelete+0x10c>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3301      	adds	r3, #1
 800ad74:	4a1e      	ldr	r2, [pc, #120]	; (800adf0 <vTaskDelete+0x10c>)
 800ad76:	6013      	str	r3, [r2, #0]
 800ad78:	e009      	b.n	800ad8e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ad7a:	4b1e      	ldr	r3, [pc, #120]	; (800adf4 <vTaskDelete+0x110>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	4a1c      	ldr	r2, [pc, #112]	; (800adf4 <vTaskDelete+0x110>)
 800ad82:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800ad84:	68f8      	ldr	r0, [r7, #12]
 800ad86:	f000 fc35 	bl	800b5f4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ad8a:	f000 fc67 	bl	800b65c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800ad8e:	f001 f9c5 	bl	800c11c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ad92:	4b19      	ldr	r3, [pc, #100]	; (800adf8 <vTaskDelete+0x114>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d01b      	beq.n	800add2 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800ad9a:	4b10      	ldr	r3, [pc, #64]	; (800addc <vTaskDelete+0xf8>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d116      	bne.n	800add2 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ada4:	4b15      	ldr	r3, [pc, #84]	; (800adfc <vTaskDelete+0x118>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00a      	beq.n	800adc2 <vTaskDelete+0xde>
	__asm volatile
 800adac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb0:	f383 8811 	msr	BASEPRI, r3
 800adb4:	f3bf 8f6f 	isb	sy
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	60bb      	str	r3, [r7, #8]
}
 800adbe:	bf00      	nop
 800adc0:	e7fe      	b.n	800adc0 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800adc2:	4b0f      	ldr	r3, [pc, #60]	; (800ae00 <vTaskDelete+0x11c>)
 800adc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adc8:	601a      	str	r2, [r3, #0]
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800add2:	bf00      	nop
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	2000038c 	.word	0x2000038c
 800ade0:	20000390 	.word	0x20000390
 800ade4:	20000494 	.word	0x20000494
 800ade8:	200004a8 	.word	0x200004a8
 800adec:	20000460 	.word	0x20000460
 800adf0:	20000474 	.word	0x20000474
 800adf4:	2000048c 	.word	0x2000048c
 800adf8:	20000498 	.word	0x20000498
 800adfc:	200004b4 	.word	0x200004b4
 800ae00:	e000ed04 	.word	0xe000ed04

0800ae04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d017      	beq.n	800ae46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae16:	4b13      	ldr	r3, [pc, #76]	; (800ae64 <vTaskDelay+0x60>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00a      	beq.n	800ae34 <vTaskDelay+0x30>
	__asm volatile
 800ae1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae22:	f383 8811 	msr	BASEPRI, r3
 800ae26:	f3bf 8f6f 	isb	sy
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	60bb      	str	r3, [r7, #8]
}
 800ae30:	bf00      	nop
 800ae32:	e7fe      	b.n	800ae32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae34:	f000 f884 	bl	800af40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae38:	2100      	movs	r1, #0
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 ffea 	bl	800be14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae40:	f000 f88c 	bl	800af5c <xTaskResumeAll>
 800ae44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d107      	bne.n	800ae5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ae4c:	4b06      	ldr	r3, [pc, #24]	; (800ae68 <vTaskDelay+0x64>)
 800ae4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae5c:	bf00      	nop
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	200004b4 	.word	0x200004b4
 800ae68:	e000ed04 	.word	0xe000ed04

0800ae6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b08a      	sub	sp, #40	; 0x28
 800ae70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae72:	2300      	movs	r3, #0
 800ae74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae76:	2300      	movs	r3, #0
 800ae78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae7a:	463a      	mov	r2, r7
 800ae7c:	1d39      	adds	r1, r7, #4
 800ae7e:	f107 0308 	add.w	r3, r7, #8
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7f6 fe32 	bl	8001aec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae88:	6839      	ldr	r1, [r7, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68ba      	ldr	r2, [r7, #8]
 800ae8e:	9202      	str	r2, [sp, #8]
 800ae90:	9301      	str	r3, [sp, #4]
 800ae92:	2300      	movs	r3, #0
 800ae94:	9300      	str	r3, [sp, #0]
 800ae96:	2300      	movs	r3, #0
 800ae98:	460a      	mov	r2, r1
 800ae9a:	4921      	ldr	r1, [pc, #132]	; (800af20 <vTaskStartScheduler+0xb4>)
 800ae9c:	4821      	ldr	r0, [pc, #132]	; (800af24 <vTaskStartScheduler+0xb8>)
 800ae9e:	f7ff fd7f 	bl	800a9a0 <xTaskCreateStatic>
 800aea2:	4603      	mov	r3, r0
 800aea4:	4a20      	ldr	r2, [pc, #128]	; (800af28 <vTaskStartScheduler+0xbc>)
 800aea6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aea8:	4b1f      	ldr	r3, [pc, #124]	; (800af28 <vTaskStartScheduler+0xbc>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d002      	beq.n	800aeb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	617b      	str	r3, [r7, #20]
 800aeb4:	e001      	b.n	800aeba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d11b      	bne.n	800aef8 <vTaskStartScheduler+0x8c>
	__asm volatile
 800aec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec4:	f383 8811 	msr	BASEPRI, r3
 800aec8:	f3bf 8f6f 	isb	sy
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	613b      	str	r3, [r7, #16]
}
 800aed2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aed4:	4b15      	ldr	r3, [pc, #84]	; (800af2c <vTaskStartScheduler+0xc0>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	334c      	adds	r3, #76	; 0x4c
 800aeda:	4a15      	ldr	r2, [pc, #84]	; (800af30 <vTaskStartScheduler+0xc4>)
 800aedc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aede:	4b15      	ldr	r3, [pc, #84]	; (800af34 <vTaskStartScheduler+0xc8>)
 800aee0:	f04f 32ff 	mov.w	r2, #4294967295
 800aee4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aee6:	4b14      	ldr	r3, [pc, #80]	; (800af38 <vTaskStartScheduler+0xcc>)
 800aee8:	2201      	movs	r2, #1
 800aeea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800aeec:	4b13      	ldr	r3, [pc, #76]	; (800af3c <vTaskStartScheduler+0xd0>)
 800aeee:	2200      	movs	r2, #0
 800aef0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aef2:	f001 f871 	bl	800bfd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aef6:	e00e      	b.n	800af16 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aefe:	d10a      	bne.n	800af16 <vTaskStartScheduler+0xaa>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	60fb      	str	r3, [r7, #12]
}
 800af12:	bf00      	nop
 800af14:	e7fe      	b.n	800af14 <vTaskStartScheduler+0xa8>
}
 800af16:	bf00      	nop
 800af18:	3718      	adds	r7, #24
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	0800dbb4 	.word	0x0800dbb4
 800af24:	0800b4e9 	.word	0x0800b4e9
 800af28:	200004b0 	.word	0x200004b0
 800af2c:	2000038c 	.word	0x2000038c
 800af30:	20000010 	.word	0x20000010
 800af34:	200004ac 	.word	0x200004ac
 800af38:	20000498 	.word	0x20000498
 800af3c:	20000490 	.word	0x20000490

0800af40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af40:	b480      	push	{r7}
 800af42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800af44:	4b04      	ldr	r3, [pc, #16]	; (800af58 <vTaskSuspendAll+0x18>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	3301      	adds	r3, #1
 800af4a:	4a03      	ldr	r2, [pc, #12]	; (800af58 <vTaskSuspendAll+0x18>)
 800af4c:	6013      	str	r3, [r2, #0]
}
 800af4e:	bf00      	nop
 800af50:	46bd      	mov	sp, r7
 800af52:	bc80      	pop	{r7}
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	200004b4 	.word	0x200004b4

0800af5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af62:	2300      	movs	r3, #0
 800af64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af66:	2300      	movs	r3, #0
 800af68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af6a:	4b41      	ldr	r3, [pc, #260]	; (800b070 <xTaskResumeAll+0x114>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d10a      	bne.n	800af88 <xTaskResumeAll+0x2c>
	__asm volatile
 800af72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af76:	f383 8811 	msr	BASEPRI, r3
 800af7a:	f3bf 8f6f 	isb	sy
 800af7e:	f3bf 8f4f 	dsb	sy
 800af82:	603b      	str	r3, [r7, #0]
}
 800af84:	bf00      	nop
 800af86:	e7fe      	b.n	800af86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af88:	f001 f898 	bl	800c0bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af8c:	4b38      	ldr	r3, [pc, #224]	; (800b070 <xTaskResumeAll+0x114>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	3b01      	subs	r3, #1
 800af92:	4a37      	ldr	r2, [pc, #220]	; (800b070 <xTaskResumeAll+0x114>)
 800af94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af96:	4b36      	ldr	r3, [pc, #216]	; (800b070 <xTaskResumeAll+0x114>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d161      	bne.n	800b062 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af9e:	4b35      	ldr	r3, [pc, #212]	; (800b074 <xTaskResumeAll+0x118>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d05d      	beq.n	800b062 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afa6:	e02e      	b.n	800b006 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800afa8:	4b33      	ldr	r3, [pc, #204]	; (800b078 <xTaskResumeAll+0x11c>)
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	3318      	adds	r3, #24
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7fe fee5 	bl	8009d84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	3304      	adds	r3, #4
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7fe fee0 	bl	8009d84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc8:	2201      	movs	r2, #1
 800afca:	409a      	lsls	r2, r3
 800afcc:	4b2b      	ldr	r3, [pc, #172]	; (800b07c <xTaskResumeAll+0x120>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	4a2a      	ldr	r2, [pc, #168]	; (800b07c <xTaskResumeAll+0x120>)
 800afd4:	6013      	str	r3, [r2, #0]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afda:	4613      	mov	r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	4413      	add	r3, r2
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4a27      	ldr	r2, [pc, #156]	; (800b080 <xTaskResumeAll+0x124>)
 800afe4:	441a      	add	r2, r3
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	3304      	adds	r3, #4
 800afea:	4619      	mov	r1, r3
 800afec:	4610      	mov	r0, r2
 800afee:	f7fe fe6e 	bl	8009cce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aff6:	4b23      	ldr	r3, [pc, #140]	; (800b084 <xTaskResumeAll+0x128>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800affc:	429a      	cmp	r2, r3
 800affe:	d302      	bcc.n	800b006 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b000:	4b21      	ldr	r3, [pc, #132]	; (800b088 <xTaskResumeAll+0x12c>)
 800b002:	2201      	movs	r2, #1
 800b004:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b006:	4b1c      	ldr	r3, [pc, #112]	; (800b078 <xTaskResumeAll+0x11c>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d1cc      	bne.n	800afa8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d001      	beq.n	800b018 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b014:	f000 fb22 	bl	800b65c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b018:	4b1c      	ldr	r3, [pc, #112]	; (800b08c <xTaskResumeAll+0x130>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d010      	beq.n	800b046 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b024:	f000 f836 	bl	800b094 <xTaskIncrementTick>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d002      	beq.n	800b034 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b02e:	4b16      	ldr	r3, [pc, #88]	; (800b088 <xTaskResumeAll+0x12c>)
 800b030:	2201      	movs	r2, #1
 800b032:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	3b01      	subs	r3, #1
 800b038:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d1f1      	bne.n	800b024 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b040:	4b12      	ldr	r3, [pc, #72]	; (800b08c <xTaskResumeAll+0x130>)
 800b042:	2200      	movs	r2, #0
 800b044:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b046:	4b10      	ldr	r3, [pc, #64]	; (800b088 <xTaskResumeAll+0x12c>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d009      	beq.n	800b062 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b04e:	2301      	movs	r3, #1
 800b050:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b052:	4b0f      	ldr	r3, [pc, #60]	; (800b090 <xTaskResumeAll+0x134>)
 800b054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b058:	601a      	str	r2, [r3, #0]
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b062:	f001 f85b 	bl	800c11c <vPortExitCritical>

	return xAlreadyYielded;
 800b066:	68bb      	ldr	r3, [r7, #8]
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	200004b4 	.word	0x200004b4
 800b074:	2000048c 	.word	0x2000048c
 800b078:	2000044c 	.word	0x2000044c
 800b07c:	20000494 	.word	0x20000494
 800b080:	20000390 	.word	0x20000390
 800b084:	2000038c 	.word	0x2000038c
 800b088:	200004a0 	.word	0x200004a0
 800b08c:	2000049c 	.word	0x2000049c
 800b090:	e000ed04 	.word	0xe000ed04

0800b094 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b086      	sub	sp, #24
 800b098:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b09a:	2300      	movs	r3, #0
 800b09c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b09e:	4b51      	ldr	r3, [pc, #324]	; (800b1e4 <xTaskIncrementTick+0x150>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f040 808d 	bne.w	800b1c2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b0a8:	4b4f      	ldr	r3, [pc, #316]	; (800b1e8 <xTaskIncrementTick+0x154>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0b0:	4a4d      	ldr	r2, [pc, #308]	; (800b1e8 <xTaskIncrementTick+0x154>)
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d120      	bne.n	800b0fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0bc:	4b4b      	ldr	r3, [pc, #300]	; (800b1ec <xTaskIncrementTick+0x158>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00a      	beq.n	800b0dc <xTaskIncrementTick+0x48>
	__asm volatile
 800b0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ca:	f383 8811 	msr	BASEPRI, r3
 800b0ce:	f3bf 8f6f 	isb	sy
 800b0d2:	f3bf 8f4f 	dsb	sy
 800b0d6:	603b      	str	r3, [r7, #0]
}
 800b0d8:	bf00      	nop
 800b0da:	e7fe      	b.n	800b0da <xTaskIncrementTick+0x46>
 800b0dc:	4b43      	ldr	r3, [pc, #268]	; (800b1ec <xTaskIncrementTick+0x158>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	60fb      	str	r3, [r7, #12]
 800b0e2:	4b43      	ldr	r3, [pc, #268]	; (800b1f0 <xTaskIncrementTick+0x15c>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a41      	ldr	r2, [pc, #260]	; (800b1ec <xTaskIncrementTick+0x158>)
 800b0e8:	6013      	str	r3, [r2, #0]
 800b0ea:	4a41      	ldr	r2, [pc, #260]	; (800b1f0 <xTaskIncrementTick+0x15c>)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6013      	str	r3, [r2, #0]
 800b0f0:	4b40      	ldr	r3, [pc, #256]	; (800b1f4 <xTaskIncrementTick+0x160>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	4a3f      	ldr	r2, [pc, #252]	; (800b1f4 <xTaskIncrementTick+0x160>)
 800b0f8:	6013      	str	r3, [r2, #0]
 800b0fa:	f000 faaf 	bl	800b65c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b0fe:	4b3e      	ldr	r3, [pc, #248]	; (800b1f8 <xTaskIncrementTick+0x164>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	693a      	ldr	r2, [r7, #16]
 800b104:	429a      	cmp	r2, r3
 800b106:	d34d      	bcc.n	800b1a4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b108:	4b38      	ldr	r3, [pc, #224]	; (800b1ec <xTaskIncrementTick+0x158>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d101      	bne.n	800b116 <xTaskIncrementTick+0x82>
 800b112:	2301      	movs	r3, #1
 800b114:	e000      	b.n	800b118 <xTaskIncrementTick+0x84>
 800b116:	2300      	movs	r3, #0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d004      	beq.n	800b126 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b11c:	4b36      	ldr	r3, [pc, #216]	; (800b1f8 <xTaskIncrementTick+0x164>)
 800b11e:	f04f 32ff 	mov.w	r2, #4294967295
 800b122:	601a      	str	r2, [r3, #0]
					break;
 800b124:	e03e      	b.n	800b1a4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b126:	4b31      	ldr	r3, [pc, #196]	; (800b1ec <xTaskIncrementTick+0x158>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b136:	693a      	ldr	r2, [r7, #16]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d203      	bcs.n	800b146 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b13e:	4a2e      	ldr	r2, [pc, #184]	; (800b1f8 <xTaskIncrementTick+0x164>)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6013      	str	r3, [r2, #0]
						break;
 800b144:	e02e      	b.n	800b1a4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	3304      	adds	r3, #4
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fe fe1a 	bl	8009d84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b154:	2b00      	cmp	r3, #0
 800b156:	d004      	beq.n	800b162 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	3318      	adds	r3, #24
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fe fe11 	bl	8009d84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b166:	2201      	movs	r2, #1
 800b168:	409a      	lsls	r2, r3
 800b16a:	4b24      	ldr	r3, [pc, #144]	; (800b1fc <xTaskIncrementTick+0x168>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4313      	orrs	r3, r2
 800b170:	4a22      	ldr	r2, [pc, #136]	; (800b1fc <xTaskIncrementTick+0x168>)
 800b172:	6013      	str	r3, [r2, #0]
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b178:	4613      	mov	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4413      	add	r3, r2
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	4a1f      	ldr	r2, [pc, #124]	; (800b200 <xTaskIncrementTick+0x16c>)
 800b182:	441a      	add	r2, r3
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	3304      	adds	r3, #4
 800b188:	4619      	mov	r1, r3
 800b18a:	4610      	mov	r0, r2
 800b18c:	f7fe fd9f 	bl	8009cce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b194:	4b1b      	ldr	r3, [pc, #108]	; (800b204 <xTaskIncrementTick+0x170>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d3b4      	bcc.n	800b108 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1a2:	e7b1      	b.n	800b108 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b1a4:	4b17      	ldr	r3, [pc, #92]	; (800b204 <xTaskIncrementTick+0x170>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1aa:	4915      	ldr	r1, [pc, #84]	; (800b200 <xTaskIncrementTick+0x16c>)
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4413      	add	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	440b      	add	r3, r1
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d907      	bls.n	800b1cc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	617b      	str	r3, [r7, #20]
 800b1c0:	e004      	b.n	800b1cc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b1c2:	4b11      	ldr	r3, [pc, #68]	; (800b208 <xTaskIncrementTick+0x174>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	4a0f      	ldr	r2, [pc, #60]	; (800b208 <xTaskIncrementTick+0x174>)
 800b1ca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b1cc:	4b0f      	ldr	r3, [pc, #60]	; (800b20c <xTaskIncrementTick+0x178>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d001      	beq.n	800b1d8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b1d8:	697b      	ldr	r3, [r7, #20]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3718      	adds	r7, #24
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	200004b4 	.word	0x200004b4
 800b1e8:	20000490 	.word	0x20000490
 800b1ec:	20000444 	.word	0x20000444
 800b1f0:	20000448 	.word	0x20000448
 800b1f4:	200004a4 	.word	0x200004a4
 800b1f8:	200004ac 	.word	0x200004ac
 800b1fc:	20000494 	.word	0x20000494
 800b200:	20000390 	.word	0x20000390
 800b204:	2000038c 	.word	0x2000038c
 800b208:	2000049c 	.word	0x2000049c
 800b20c:	200004a0 	.word	0x200004a0

0800b210 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b210:	b480      	push	{r7}
 800b212:	b087      	sub	sp, #28
 800b214:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b216:	4b29      	ldr	r3, [pc, #164]	; (800b2bc <vTaskSwitchContext+0xac>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d003      	beq.n	800b226 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b21e:	4b28      	ldr	r3, [pc, #160]	; (800b2c0 <vTaskSwitchContext+0xb0>)
 800b220:	2201      	movs	r2, #1
 800b222:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b224:	e044      	b.n	800b2b0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b226:	4b26      	ldr	r3, [pc, #152]	; (800b2c0 <vTaskSwitchContext+0xb0>)
 800b228:	2200      	movs	r2, #0
 800b22a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b22c:	4b25      	ldr	r3, [pc, #148]	; (800b2c4 <vTaskSwitchContext+0xb4>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	fab3 f383 	clz	r3, r3
 800b238:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b23a:	7afb      	ldrb	r3, [r7, #11]
 800b23c:	f1c3 031f 	rsb	r3, r3, #31
 800b240:	617b      	str	r3, [r7, #20]
 800b242:	4921      	ldr	r1, [pc, #132]	; (800b2c8 <vTaskSwitchContext+0xb8>)
 800b244:	697a      	ldr	r2, [r7, #20]
 800b246:	4613      	mov	r3, r2
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	4413      	add	r3, r2
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	440b      	add	r3, r1
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d10a      	bne.n	800b26c <vTaskSwitchContext+0x5c>
	__asm volatile
 800b256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25a:	f383 8811 	msr	BASEPRI, r3
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	607b      	str	r3, [r7, #4]
}
 800b268:	bf00      	nop
 800b26a:	e7fe      	b.n	800b26a <vTaskSwitchContext+0x5a>
 800b26c:	697a      	ldr	r2, [r7, #20]
 800b26e:	4613      	mov	r3, r2
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	4413      	add	r3, r2
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	4a14      	ldr	r2, [pc, #80]	; (800b2c8 <vTaskSwitchContext+0xb8>)
 800b278:	4413      	add	r3, r2
 800b27a:	613b      	str	r3, [r7, #16]
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	685a      	ldr	r2, [r3, #4]
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	605a      	str	r2, [r3, #4]
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	685a      	ldr	r2, [r3, #4]
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	3308      	adds	r3, #8
 800b28e:	429a      	cmp	r2, r3
 800b290:	d104      	bne.n	800b29c <vTaskSwitchContext+0x8c>
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	685a      	ldr	r2, [r3, #4]
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	605a      	str	r2, [r3, #4]
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	4a0a      	ldr	r2, [pc, #40]	; (800b2cc <vTaskSwitchContext+0xbc>)
 800b2a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b2a6:	4b09      	ldr	r3, [pc, #36]	; (800b2cc <vTaskSwitchContext+0xbc>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	334c      	adds	r3, #76	; 0x4c
 800b2ac:	4a08      	ldr	r2, [pc, #32]	; (800b2d0 <vTaskSwitchContext+0xc0>)
 800b2ae:	6013      	str	r3, [r2, #0]
}
 800b2b0:	bf00      	nop
 800b2b2:	371c      	adds	r7, #28
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bc80      	pop	{r7}
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	200004b4 	.word	0x200004b4
 800b2c0:	200004a0 	.word	0x200004a0
 800b2c4:	20000494 	.word	0x20000494
 800b2c8:	20000390 	.word	0x20000390
 800b2cc:	2000038c 	.word	0x2000038c
 800b2d0:	20000010 	.word	0x20000010

0800b2d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d10a      	bne.n	800b2fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	60fb      	str	r3, [r7, #12]
}
 800b2f6:	bf00      	nop
 800b2f8:	e7fe      	b.n	800b2f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2fa:	4b07      	ldr	r3, [pc, #28]	; (800b318 <vTaskPlaceOnEventList+0x44>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	3318      	adds	r3, #24
 800b300:	4619      	mov	r1, r3
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f7fe fd06 	bl	8009d14 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b308:	2101      	movs	r1, #1
 800b30a:	6838      	ldr	r0, [r7, #0]
 800b30c:	f000 fd82 	bl	800be14 <prvAddCurrentTaskToDelayedList>
}
 800b310:	bf00      	nop
 800b312:	3710      	adds	r7, #16
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	2000038c 	.word	0x2000038c

0800b31c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b086      	sub	sp, #24
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10a      	bne.n	800b348 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b336:	f383 8811 	msr	BASEPRI, r3
 800b33a:	f3bf 8f6f 	isb	sy
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	60fb      	str	r3, [r7, #12]
}
 800b344:	bf00      	nop
 800b346:	e7fe      	b.n	800b346 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	3318      	adds	r3, #24
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7fe fd19 	bl	8009d84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b352:	4b1d      	ldr	r3, [pc, #116]	; (800b3c8 <xTaskRemoveFromEventList+0xac>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d11c      	bne.n	800b394 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	3304      	adds	r3, #4
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fe fd10 	bl	8009d84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b368:	2201      	movs	r2, #1
 800b36a:	409a      	lsls	r2, r3
 800b36c:	4b17      	ldr	r3, [pc, #92]	; (800b3cc <xTaskRemoveFromEventList+0xb0>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4313      	orrs	r3, r2
 800b372:	4a16      	ldr	r2, [pc, #88]	; (800b3cc <xTaskRemoveFromEventList+0xb0>)
 800b374:	6013      	str	r3, [r2, #0]
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b37a:	4613      	mov	r3, r2
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	4413      	add	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4a13      	ldr	r2, [pc, #76]	; (800b3d0 <xTaskRemoveFromEventList+0xb4>)
 800b384:	441a      	add	r2, r3
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	3304      	adds	r3, #4
 800b38a:	4619      	mov	r1, r3
 800b38c:	4610      	mov	r0, r2
 800b38e:	f7fe fc9e 	bl	8009cce <vListInsertEnd>
 800b392:	e005      	b.n	800b3a0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	3318      	adds	r3, #24
 800b398:	4619      	mov	r1, r3
 800b39a:	480e      	ldr	r0, [pc, #56]	; (800b3d4 <xTaskRemoveFromEventList+0xb8>)
 800b39c:	f7fe fc97 	bl	8009cce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3a4:	4b0c      	ldr	r3, [pc, #48]	; (800b3d8 <xTaskRemoveFromEventList+0xbc>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d905      	bls.n	800b3ba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b3b2:	4b0a      	ldr	r3, [pc, #40]	; (800b3dc <xTaskRemoveFromEventList+0xc0>)
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	601a      	str	r2, [r3, #0]
 800b3b8:	e001      	b.n	800b3be <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b3be:	697b      	ldr	r3, [r7, #20]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3718      	adds	r7, #24
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	200004b4 	.word	0x200004b4
 800b3cc:	20000494 	.word	0x20000494
 800b3d0:	20000390 	.word	0x20000390
 800b3d4:	2000044c 	.word	0x2000044c
 800b3d8:	2000038c 	.word	0x2000038c
 800b3dc:	200004a0 	.word	0x200004a0

0800b3e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3e8:	4b06      	ldr	r3, [pc, #24]	; (800b404 <vTaskInternalSetTimeOutState+0x24>)
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b3f0:	4b05      	ldr	r3, [pc, #20]	; (800b408 <vTaskInternalSetTimeOutState+0x28>)
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	605a      	str	r2, [r3, #4]
}
 800b3f8:	bf00      	nop
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bc80      	pop	{r7}
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	200004a4 	.word	0x200004a4
 800b408:	20000490 	.word	0x20000490

0800b40c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b088      	sub	sp, #32
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d10a      	bne.n	800b432 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b420:	f383 8811 	msr	BASEPRI, r3
 800b424:	f3bf 8f6f 	isb	sy
 800b428:	f3bf 8f4f 	dsb	sy
 800b42c:	613b      	str	r3, [r7, #16]
}
 800b42e:	bf00      	nop
 800b430:	e7fe      	b.n	800b430 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10a      	bne.n	800b44e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	60fb      	str	r3, [r7, #12]
}
 800b44a:	bf00      	nop
 800b44c:	e7fe      	b.n	800b44c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b44e:	f000 fe35 	bl	800c0bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b452:	4b1d      	ldr	r3, [pc, #116]	; (800b4c8 <xTaskCheckForTimeOut+0xbc>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	69ba      	ldr	r2, [r7, #24]
 800b45e:	1ad3      	subs	r3, r2, r3
 800b460:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b46a:	d102      	bne.n	800b472 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b46c:	2300      	movs	r3, #0
 800b46e:	61fb      	str	r3, [r7, #28]
 800b470:	e023      	b.n	800b4ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	4b15      	ldr	r3, [pc, #84]	; (800b4cc <xTaskCheckForTimeOut+0xc0>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d007      	beq.n	800b48e <xTaskCheckForTimeOut+0x82>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	69ba      	ldr	r2, [r7, #24]
 800b484:	429a      	cmp	r2, r3
 800b486:	d302      	bcc.n	800b48e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b488:	2301      	movs	r3, #1
 800b48a:	61fb      	str	r3, [r7, #28]
 800b48c:	e015      	b.n	800b4ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	697a      	ldr	r2, [r7, #20]
 800b494:	429a      	cmp	r2, r3
 800b496:	d20b      	bcs.n	800b4b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	1ad2      	subs	r2, r2, r3
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f7ff ff9b 	bl	800b3e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	61fb      	str	r3, [r7, #28]
 800b4ae:	e004      	b.n	800b4ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b4ba:	f000 fe2f 	bl	800c11c <vPortExitCritical>

	return xReturn;
 800b4be:	69fb      	ldr	r3, [r7, #28]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3720      	adds	r7, #32
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	20000490 	.word	0x20000490
 800b4cc:	200004a4 	.word	0x200004a4

0800b4d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b4d4:	4b03      	ldr	r3, [pc, #12]	; (800b4e4 <vTaskMissedYield+0x14>)
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	601a      	str	r2, [r3, #0]
}
 800b4da:	bf00      	nop
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bc80      	pop	{r7}
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	200004a0 	.word	0x200004a0

0800b4e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b4f0:	f000 f852 	bl	800b598 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b4f4:	4b06      	ldr	r3, [pc, #24]	; (800b510 <prvIdleTask+0x28>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d9f9      	bls.n	800b4f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b4fc:	4b05      	ldr	r3, [pc, #20]	; (800b514 <prvIdleTask+0x2c>)
 800b4fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b502:	601a      	str	r2, [r3, #0]
 800b504:	f3bf 8f4f 	dsb	sy
 800b508:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b50c:	e7f0      	b.n	800b4f0 <prvIdleTask+0x8>
 800b50e:	bf00      	nop
 800b510:	20000390 	.word	0x20000390
 800b514:	e000ed04 	.word	0xe000ed04

0800b518 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b51e:	2300      	movs	r3, #0
 800b520:	607b      	str	r3, [r7, #4]
 800b522:	e00c      	b.n	800b53e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	4613      	mov	r3, r2
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	4413      	add	r3, r2
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	4a12      	ldr	r2, [pc, #72]	; (800b578 <prvInitialiseTaskLists+0x60>)
 800b530:	4413      	add	r3, r2
 800b532:	4618      	mov	r0, r3
 800b534:	f7fe fba0 	bl	8009c78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	3301      	adds	r3, #1
 800b53c:	607b      	str	r3, [r7, #4]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2b06      	cmp	r3, #6
 800b542:	d9ef      	bls.n	800b524 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b544:	480d      	ldr	r0, [pc, #52]	; (800b57c <prvInitialiseTaskLists+0x64>)
 800b546:	f7fe fb97 	bl	8009c78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b54a:	480d      	ldr	r0, [pc, #52]	; (800b580 <prvInitialiseTaskLists+0x68>)
 800b54c:	f7fe fb94 	bl	8009c78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b550:	480c      	ldr	r0, [pc, #48]	; (800b584 <prvInitialiseTaskLists+0x6c>)
 800b552:	f7fe fb91 	bl	8009c78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b556:	480c      	ldr	r0, [pc, #48]	; (800b588 <prvInitialiseTaskLists+0x70>)
 800b558:	f7fe fb8e 	bl	8009c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b55c:	480b      	ldr	r0, [pc, #44]	; (800b58c <prvInitialiseTaskLists+0x74>)
 800b55e:	f7fe fb8b 	bl	8009c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b562:	4b0b      	ldr	r3, [pc, #44]	; (800b590 <prvInitialiseTaskLists+0x78>)
 800b564:	4a05      	ldr	r2, [pc, #20]	; (800b57c <prvInitialiseTaskLists+0x64>)
 800b566:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b568:	4b0a      	ldr	r3, [pc, #40]	; (800b594 <prvInitialiseTaskLists+0x7c>)
 800b56a:	4a05      	ldr	r2, [pc, #20]	; (800b580 <prvInitialiseTaskLists+0x68>)
 800b56c:	601a      	str	r2, [r3, #0]
}
 800b56e:	bf00      	nop
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	20000390 	.word	0x20000390
 800b57c:	2000041c 	.word	0x2000041c
 800b580:	20000430 	.word	0x20000430
 800b584:	2000044c 	.word	0x2000044c
 800b588:	20000460 	.word	0x20000460
 800b58c:	20000478 	.word	0x20000478
 800b590:	20000444 	.word	0x20000444
 800b594:	20000448 	.word	0x20000448

0800b598 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b59e:	e019      	b.n	800b5d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b5a0:	f000 fd8c 	bl	800c0bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b5a4:	4b10      	ldr	r3, [pc, #64]	; (800b5e8 <prvCheckTasksWaitingTermination+0x50>)
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	3304      	adds	r3, #4
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7fe fbe7 	bl	8009d84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5b6:	4b0d      	ldr	r3, [pc, #52]	; (800b5ec <prvCheckTasksWaitingTermination+0x54>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	4a0b      	ldr	r2, [pc, #44]	; (800b5ec <prvCheckTasksWaitingTermination+0x54>)
 800b5be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5c0:	4b0b      	ldr	r3, [pc, #44]	; (800b5f0 <prvCheckTasksWaitingTermination+0x58>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	4a0a      	ldr	r2, [pc, #40]	; (800b5f0 <prvCheckTasksWaitingTermination+0x58>)
 800b5c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b5ca:	f000 fda7 	bl	800c11c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 f810 	bl	800b5f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5d4:	4b06      	ldr	r3, [pc, #24]	; (800b5f0 <prvCheckTasksWaitingTermination+0x58>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1e1      	bne.n	800b5a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5dc:	bf00      	nop
 800b5de:	bf00      	nop
 800b5e0:	3708      	adds	r7, #8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	20000460 	.word	0x20000460
 800b5ec:	2000048c 	.word	0x2000048c
 800b5f0:	20000474 	.word	0x20000474

0800b5f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	334c      	adds	r3, #76	; 0x4c
 800b600:	4618      	mov	r0, r3
 800b602:	f001 f889 	bl	800c718 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d108      	bne.n	800b622 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b614:	4618      	mov	r0, r3
 800b616:	f000 ff1b 	bl	800c450 <vPortFree>
				vPortFree( pxTCB );
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 ff18 	bl	800c450 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b620:	e018      	b.n	800b654 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d103      	bne.n	800b634 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 ff0f 	bl	800c450 <vPortFree>
	}
 800b632:	e00f      	b.n	800b654 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b63a:	2b02      	cmp	r3, #2
 800b63c:	d00a      	beq.n	800b654 <prvDeleteTCB+0x60>
	__asm volatile
 800b63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b642:	f383 8811 	msr	BASEPRI, r3
 800b646:	f3bf 8f6f 	isb	sy
 800b64a:	f3bf 8f4f 	dsb	sy
 800b64e:	60fb      	str	r3, [r7, #12]
}
 800b650:	bf00      	nop
 800b652:	e7fe      	b.n	800b652 <prvDeleteTCB+0x5e>
	}
 800b654:	bf00      	nop
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b662:	4b0e      	ldr	r3, [pc, #56]	; (800b69c <prvResetNextTaskUnblockTime+0x40>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d101      	bne.n	800b670 <prvResetNextTaskUnblockTime+0x14>
 800b66c:	2301      	movs	r3, #1
 800b66e:	e000      	b.n	800b672 <prvResetNextTaskUnblockTime+0x16>
 800b670:	2300      	movs	r3, #0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d004      	beq.n	800b680 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b676:	4b0a      	ldr	r3, [pc, #40]	; (800b6a0 <prvResetNextTaskUnblockTime+0x44>)
 800b678:	f04f 32ff 	mov.w	r2, #4294967295
 800b67c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b67e:	e008      	b.n	800b692 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b680:	4b06      	ldr	r3, [pc, #24]	; (800b69c <prvResetNextTaskUnblockTime+0x40>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	4a04      	ldr	r2, [pc, #16]	; (800b6a0 <prvResetNextTaskUnblockTime+0x44>)
 800b690:	6013      	str	r3, [r2, #0]
}
 800b692:	bf00      	nop
 800b694:	370c      	adds	r7, #12
 800b696:	46bd      	mov	sp, r7
 800b698:	bc80      	pop	{r7}
 800b69a:	4770      	bx	lr
 800b69c:	20000444 	.word	0x20000444
 800b6a0:	200004ac 	.word	0x200004ac

0800b6a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b6aa:	4b0b      	ldr	r3, [pc, #44]	; (800b6d8 <xTaskGetSchedulerState+0x34>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d102      	bne.n	800b6b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	607b      	str	r3, [r7, #4]
 800b6b6:	e008      	b.n	800b6ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6b8:	4b08      	ldr	r3, [pc, #32]	; (800b6dc <xTaskGetSchedulerState+0x38>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d102      	bne.n	800b6c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b6c0:	2302      	movs	r3, #2
 800b6c2:	607b      	str	r3, [r7, #4]
 800b6c4:	e001      	b.n	800b6ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b6ca:	687b      	ldr	r3, [r7, #4]
	}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bc80      	pop	{r7}
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	20000498 	.word	0x20000498
 800b6dc:	200004b4 	.word	0x200004b4

0800b6e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d06e      	beq.n	800b7d4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6fa:	4b39      	ldr	r3, [pc, #228]	; (800b7e0 <xTaskPriorityInherit+0x100>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b700:	429a      	cmp	r2, r3
 800b702:	d25e      	bcs.n	800b7c2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	699b      	ldr	r3, [r3, #24]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	db06      	blt.n	800b71a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b70c:	4b34      	ldr	r3, [pc, #208]	; (800b7e0 <xTaskPriorityInherit+0x100>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b712:	f1c3 0207 	rsb	r2, r3, #7
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	6959      	ldr	r1, [r3, #20]
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b722:	4613      	mov	r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	4413      	add	r3, r2
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	4a2e      	ldr	r2, [pc, #184]	; (800b7e4 <xTaskPriorityInherit+0x104>)
 800b72c:	4413      	add	r3, r2
 800b72e:	4299      	cmp	r1, r3
 800b730:	d101      	bne.n	800b736 <xTaskPriorityInherit+0x56>
 800b732:	2301      	movs	r3, #1
 800b734:	e000      	b.n	800b738 <xTaskPriorityInherit+0x58>
 800b736:	2300      	movs	r3, #0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d03a      	beq.n	800b7b2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	3304      	adds	r3, #4
 800b740:	4618      	mov	r0, r3
 800b742:	f7fe fb1f 	bl	8009d84 <uxListRemove>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d115      	bne.n	800b778 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b750:	4924      	ldr	r1, [pc, #144]	; (800b7e4 <xTaskPriorityInherit+0x104>)
 800b752:	4613      	mov	r3, r2
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	4413      	add	r3, r2
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	440b      	add	r3, r1
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10a      	bne.n	800b778 <xTaskPriorityInherit+0x98>
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b766:	2201      	movs	r2, #1
 800b768:	fa02 f303 	lsl.w	r3, r2, r3
 800b76c:	43da      	mvns	r2, r3
 800b76e:	4b1e      	ldr	r3, [pc, #120]	; (800b7e8 <xTaskPriorityInherit+0x108>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4013      	ands	r3, r2
 800b774:	4a1c      	ldr	r2, [pc, #112]	; (800b7e8 <xTaskPriorityInherit+0x108>)
 800b776:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b778:	4b19      	ldr	r3, [pc, #100]	; (800b7e0 <xTaskPriorityInherit+0x100>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b786:	2201      	movs	r2, #1
 800b788:	409a      	lsls	r2, r3
 800b78a:	4b17      	ldr	r3, [pc, #92]	; (800b7e8 <xTaskPriorityInherit+0x108>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4313      	orrs	r3, r2
 800b790:	4a15      	ldr	r2, [pc, #84]	; (800b7e8 <xTaskPriorityInherit+0x108>)
 800b792:	6013      	str	r3, [r2, #0]
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b798:	4613      	mov	r3, r2
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	4413      	add	r3, r2
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	4a10      	ldr	r2, [pc, #64]	; (800b7e4 <xTaskPriorityInherit+0x104>)
 800b7a2:	441a      	add	r2, r3
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	3304      	adds	r3, #4
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	f7fe fa8f 	bl	8009cce <vListInsertEnd>
 800b7b0:	e004      	b.n	800b7bc <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b7b2:	4b0b      	ldr	r3, [pc, #44]	; (800b7e0 <xTaskPriorityInherit+0x100>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	60fb      	str	r3, [r7, #12]
 800b7c0:	e008      	b.n	800b7d4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b7c6:	4b06      	ldr	r3, [pc, #24]	; (800b7e0 <xTaskPriorityInherit+0x100>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d201      	bcs.n	800b7d4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
	}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	2000038c 	.word	0x2000038c
 800b7e4:	20000390 	.word	0x20000390
 800b7e8:	20000494 	.word	0x20000494

0800b7ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d06e      	beq.n	800b8e0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b802:	4b3a      	ldr	r3, [pc, #232]	; (800b8ec <xTaskPriorityDisinherit+0x100>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d00a      	beq.n	800b822 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	60fb      	str	r3, [r7, #12]
}
 800b81e:	bf00      	nop
 800b820:	e7fe      	b.n	800b820 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10a      	bne.n	800b840 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82e:	f383 8811 	msr	BASEPRI, r3
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	f3bf 8f4f 	dsb	sy
 800b83a:	60bb      	str	r3, [r7, #8]
}
 800b83c:	bf00      	nop
 800b83e:	e7fe      	b.n	800b83e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b844:	1e5a      	subs	r2, r3, #1
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b852:	429a      	cmp	r2, r3
 800b854:	d044      	beq.n	800b8e0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d140      	bne.n	800b8e0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	3304      	adds	r3, #4
 800b862:	4618      	mov	r0, r3
 800b864:	f7fe fa8e 	bl	8009d84 <uxListRemove>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d115      	bne.n	800b89a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b872:	491f      	ldr	r1, [pc, #124]	; (800b8f0 <xTaskPriorityDisinherit+0x104>)
 800b874:	4613      	mov	r3, r2
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	4413      	add	r3, r2
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	440b      	add	r3, r1
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d10a      	bne.n	800b89a <xTaskPriorityDisinherit+0xae>
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b888:	2201      	movs	r2, #1
 800b88a:	fa02 f303 	lsl.w	r3, r2, r3
 800b88e:	43da      	mvns	r2, r3
 800b890:	4b18      	ldr	r3, [pc, #96]	; (800b8f4 <xTaskPriorityDisinherit+0x108>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4013      	ands	r3, r2
 800b896:	4a17      	ldr	r2, [pc, #92]	; (800b8f4 <xTaskPriorityDisinherit+0x108>)
 800b898:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a6:	f1c3 0207 	rsb	r2, r3, #7
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	409a      	lsls	r2, r3
 800b8b6:	4b0f      	ldr	r3, [pc, #60]	; (800b8f4 <xTaskPriorityDisinherit+0x108>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	4a0d      	ldr	r2, [pc, #52]	; (800b8f4 <xTaskPriorityDisinherit+0x108>)
 800b8be:	6013      	str	r3, [r2, #0]
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	4413      	add	r3, r2
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	4a08      	ldr	r2, [pc, #32]	; (800b8f0 <xTaskPriorityDisinherit+0x104>)
 800b8ce:	441a      	add	r2, r3
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	3304      	adds	r3, #4
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4610      	mov	r0, r2
 800b8d8:	f7fe f9f9 	bl	8009cce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8e0:	697b      	ldr	r3, [r7, #20]
	}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3718      	adds	r7, #24
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	2000038c 	.word	0x2000038c
 800b8f0:	20000390 	.word	0x20000390
 800b8f4:	20000494 	.word	0x20000494

0800b8f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b088      	sub	sp, #32
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b906:	2301      	movs	r3, #1
 800b908:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f000 8088 	beq.w	800ba22 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b912:	69bb      	ldr	r3, [r7, #24]
 800b914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b916:	2b00      	cmp	r3, #0
 800b918:	d10a      	bne.n	800b930 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91e:	f383 8811 	msr	BASEPRI, r3
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	f3bf 8f4f 	dsb	sy
 800b92a:	60fb      	str	r3, [r7, #12]
}
 800b92c:	bf00      	nop
 800b92e:	e7fe      	b.n	800b92e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b934:	683a      	ldr	r2, [r7, #0]
 800b936:	429a      	cmp	r2, r3
 800b938:	d902      	bls.n	800b940 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	61fb      	str	r3, [r7, #28]
 800b93e:	e002      	b.n	800b946 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b944:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94a:	69fa      	ldr	r2, [r7, #28]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d068      	beq.n	800ba22 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b954:	697a      	ldr	r2, [r7, #20]
 800b956:	429a      	cmp	r2, r3
 800b958:	d163      	bne.n	800ba22 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b95a:	4b34      	ldr	r3, [pc, #208]	; (800ba2c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	69ba      	ldr	r2, [r7, #24]
 800b960:	429a      	cmp	r2, r3
 800b962:	d10a      	bne.n	800b97a <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800b964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	60bb      	str	r3, [r7, #8]
}
 800b976:	bf00      	nop
 800b978:	e7fe      	b.n	800b978 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	69fa      	ldr	r2, [r7, #28]
 800b984:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	699b      	ldr	r3, [r3, #24]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	db04      	blt.n	800b998 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b98e:	69fb      	ldr	r3, [r7, #28]
 800b990:	f1c3 0207 	rsb	r2, r3, #7
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	6959      	ldr	r1, [r3, #20]
 800b99c:	693a      	ldr	r2, [r7, #16]
 800b99e:	4613      	mov	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	4413      	add	r3, r2
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	4a22      	ldr	r2, [pc, #136]	; (800ba30 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b9a8:	4413      	add	r3, r2
 800b9aa:	4299      	cmp	r1, r3
 800b9ac:	d101      	bne.n	800b9b2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e000      	b.n	800b9b4 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d034      	beq.n	800ba22 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	3304      	adds	r3, #4
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7fe f9e1 	bl	8009d84 <uxListRemove>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d115      	bne.n	800b9f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9cc:	4918      	ldr	r1, [pc, #96]	; (800ba30 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	4413      	add	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	440b      	add	r3, r1
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d10a      	bne.n	800b9f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800b9de:	69bb      	ldr	r3, [r7, #24]
 800b9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b9e8:	43da      	mvns	r2, r3
 800b9ea:	4b12      	ldr	r3, [pc, #72]	; (800ba34 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4013      	ands	r3, r2
 800b9f0:	4a10      	ldr	r2, [pc, #64]	; (800ba34 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800b9f2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	409a      	lsls	r2, r3
 800b9fc:	4b0d      	ldr	r3, [pc, #52]	; (800ba34 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4313      	orrs	r3, r2
 800ba02:	4a0c      	ldr	r2, [pc, #48]	; (800ba34 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ba04:	6013      	str	r3, [r2, #0]
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4413      	add	r3, r2
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	4a07      	ldr	r2, [pc, #28]	; (800ba30 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ba14:	441a      	add	r2, r3
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	3304      	adds	r3, #4
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	4610      	mov	r0, r2
 800ba1e:	f7fe f956 	bl	8009cce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba22:	bf00      	nop
 800ba24:	3720      	adds	r7, #32
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	2000038c 	.word	0x2000038c
 800ba30:	20000390 	.word	0x20000390
 800ba34:	20000494 	.word	0x20000494

0800ba38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800ba38:	b480      	push	{r7}
 800ba3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ba3c:	4b07      	ldr	r3, [pc, #28]	; (800ba5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d004      	beq.n	800ba4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ba44:	4b05      	ldr	r3, [pc, #20]	; (800ba5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba4a:	3201      	adds	r2, #1
 800ba4c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ba4e:	4b03      	ldr	r3, [pc, #12]	; (800ba5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ba50:	681b      	ldr	r3, [r3, #0]
	}
 800ba52:	4618      	mov	r0, r3
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bc80      	pop	{r7}
 800ba58:	4770      	bx	lr
 800ba5a:	bf00      	nop
 800ba5c:	2000038c 	.word	0x2000038c

0800ba60 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b086      	sub	sp, #24
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	607a      	str	r2, [r7, #4]
 800ba6c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ba6e:	f000 fb25 	bl	800c0bc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ba72:	4b29      	ldr	r3, [pc, #164]	; (800bb18 <xTaskNotifyWait+0xb8>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	2b02      	cmp	r3, #2
 800ba7e:	d01c      	beq.n	800baba <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ba80:	4b25      	ldr	r3, [pc, #148]	; (800bb18 <xTaskNotifyWait+0xb8>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	43d2      	mvns	r2, r2
 800ba8c:	400a      	ands	r2, r1
 800ba8e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ba92:	4b21      	ldr	r3, [pc, #132]	; (800bb18 <xTaskNotifyWait+0xb8>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00b      	beq.n	800baba <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800baa2:	2101      	movs	r1, #1
 800baa4:	6838      	ldr	r0, [r7, #0]
 800baa6:	f000 f9b5 	bl	800be14 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800baaa:	4b1c      	ldr	r3, [pc, #112]	; (800bb1c <xTaskNotifyWait+0xbc>)
 800baac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bab0:	601a      	str	r2, [r3, #0]
 800bab2:	f3bf 8f4f 	dsb	sy
 800bab6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800baba:	f000 fb2f 	bl	800c11c <vPortExitCritical>

		taskENTER_CRITICAL();
 800babe:	f000 fafd 	bl	800c0bc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d005      	beq.n	800bad4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800bac8:	4b13      	ldr	r3, [pc, #76]	; (800bb18 <xTaskNotifyWait+0xb8>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bad4:	4b10      	ldr	r3, [pc, #64]	; (800bb18 <xTaskNotifyWait+0xb8>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800badc:	b2db      	uxtb	r3, r3
 800bade:	2b02      	cmp	r3, #2
 800bae0:	d002      	beq.n	800bae8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800bae2:	2300      	movs	r3, #0
 800bae4:	617b      	str	r3, [r7, #20]
 800bae6:	e00a      	b.n	800bafe <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800bae8:	4b0b      	ldr	r3, [pc, #44]	; (800bb18 <xTaskNotifyWait+0xb8>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 800baf0:	68ba      	ldr	r2, [r7, #8]
 800baf2:	43d2      	mvns	r2, r2
 800baf4:	400a      	ands	r2, r1
 800baf6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 800bafa:	2301      	movs	r3, #1
 800bafc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bafe:	4b06      	ldr	r3, [pc, #24]	; (800bb18 <xTaskNotifyWait+0xb8>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2200      	movs	r2, #0
 800bb04:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 800bb08:	f000 fb08 	bl	800c11c <vPortExitCritical>

		return xReturn;
 800bb0c:	697b      	ldr	r3, [r7, #20]
	}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3718      	adds	r7, #24
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	2000038c 	.word	0x2000038c
 800bb1c:	e000ed04 	.word	0xe000ed04

0800bb20 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b08a      	sub	sp, #40	; 0x28
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	603b      	str	r3, [r7, #0]
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800bb30:	2301      	movs	r3, #1
 800bb32:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d10a      	bne.n	800bb50 <xTaskGenericNotify+0x30>
	__asm volatile
 800bb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	61bb      	str	r3, [r7, #24]
}
 800bb4c:	bf00      	nop
 800bb4e:	e7fe      	b.n	800bb4e <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800bb54:	f000 fab2 	bl	800c0bc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d004      	beq.n	800bb68 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bb5e:	6a3b      	ldr	r3, [r7, #32]
 800bb60:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bb68:	6a3b      	ldr	r3, [r7, #32]
 800bb6a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800bb6e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bb70:	6a3b      	ldr	r3, [r7, #32]
 800bb72:	2202      	movs	r2, #2
 800bb74:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800bb78:	79fb      	ldrb	r3, [r7, #7]
 800bb7a:	2b04      	cmp	r3, #4
 800bb7c:	d82d      	bhi.n	800bbda <xTaskGenericNotify+0xba>
 800bb7e:	a201      	add	r2, pc, #4	; (adr r2, 800bb84 <xTaskGenericNotify+0x64>)
 800bb80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb84:	0800bbdb 	.word	0x0800bbdb
 800bb88:	0800bb99 	.word	0x0800bb99
 800bb8c:	0800bbab 	.word	0x0800bbab
 800bb90:	0800bbbb 	.word	0x0800bbbb
 800bb94:	0800bbc5 	.word	0x0800bbc5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bb98:	6a3b      	ldr	r3, [r7, #32]
 800bb9a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	431a      	orrs	r2, r3
 800bba2:	6a3b      	ldr	r3, [r7, #32]
 800bba4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800bba8:	e017      	b.n	800bbda <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bbaa:	6a3b      	ldr	r3, [r7, #32]
 800bbac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bbb0:	1c5a      	adds	r2, r3, #1
 800bbb2:	6a3b      	ldr	r3, [r7, #32]
 800bbb4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800bbb8:	e00f      	b.n	800bbda <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bbba:	6a3b      	ldr	r3, [r7, #32]
 800bbbc:	68ba      	ldr	r2, [r7, #8]
 800bbbe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800bbc2:	e00a      	b.n	800bbda <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bbc4:	7ffb      	ldrb	r3, [r7, #31]
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d004      	beq.n	800bbd4 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bbca:	6a3b      	ldr	r3, [r7, #32]
 800bbcc:	68ba      	ldr	r2, [r7, #8]
 800bbce:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bbd2:	e001      	b.n	800bbd8 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800bbd8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bbda:	7ffb      	ldrb	r3, [r7, #31]
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d139      	bne.n	800bc54 <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbe0:	6a3b      	ldr	r3, [r7, #32]
 800bbe2:	3304      	adds	r3, #4
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fe f8cd 	bl	8009d84 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbee:	2201      	movs	r2, #1
 800bbf0:	409a      	lsls	r2, r3
 800bbf2:	4b1c      	ldr	r3, [pc, #112]	; (800bc64 <xTaskGenericNotify+0x144>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	4a1a      	ldr	r2, [pc, #104]	; (800bc64 <xTaskGenericNotify+0x144>)
 800bbfa:	6013      	str	r3, [r2, #0]
 800bbfc:	6a3b      	ldr	r3, [r7, #32]
 800bbfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc00:	4613      	mov	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	4413      	add	r3, r2
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	4a17      	ldr	r2, [pc, #92]	; (800bc68 <xTaskGenericNotify+0x148>)
 800bc0a:	441a      	add	r2, r3
 800bc0c:	6a3b      	ldr	r3, [r7, #32]
 800bc0e:	3304      	adds	r3, #4
 800bc10:	4619      	mov	r1, r3
 800bc12:	4610      	mov	r0, r2
 800bc14:	f7fe f85b 	bl	8009cce <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bc18:	6a3b      	ldr	r3, [r7, #32]
 800bc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00a      	beq.n	800bc36 <xTaskGenericNotify+0x116>
	__asm volatile
 800bc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	617b      	str	r3, [r7, #20]
}
 800bc32:	bf00      	nop
 800bc34:	e7fe      	b.n	800bc34 <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc3a:	4b0c      	ldr	r3, [pc, #48]	; (800bc6c <xTaskGenericNotify+0x14c>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d907      	bls.n	800bc54 <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800bc44:	4b0a      	ldr	r3, [pc, #40]	; (800bc70 <xTaskGenericNotify+0x150>)
 800bc46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc4a:	601a      	str	r2, [r3, #0]
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bc54:	f000 fa62 	bl	800c11c <vPortExitCritical>

		return xReturn;
 800bc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3728      	adds	r7, #40	; 0x28
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	20000494 	.word	0x20000494
 800bc68:	20000390 	.word	0x20000390
 800bc6c:	2000038c 	.word	0x2000038c
 800bc70:	e000ed04 	.word	0xe000ed04

0800bc74 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b08e      	sub	sp, #56	; 0x38
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	603b      	str	r3, [r7, #0]
 800bc80:	4613      	mov	r3, r2
 800bc82:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800bc84:	2301      	movs	r3, #1
 800bc86:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d10a      	bne.n	800bca4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bca0:	bf00      	nop
 800bca2:	e7fe      	b.n	800bca2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bca4:	f000 facc 	bl	800c240 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800bcac:	f3ef 8211 	mrs	r2, BASEPRI
 800bcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	623a      	str	r2, [r7, #32]
 800bcc2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800bcc4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bcc6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d004      	beq.n	800bcd8 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcda:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800bcde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce4:	2202      	movs	r2, #2
 800bce6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800bcea:	79fb      	ldrb	r3, [r7, #7]
 800bcec:	2b04      	cmp	r3, #4
 800bcee:	d82f      	bhi.n	800bd50 <xTaskGenericNotifyFromISR+0xdc>
 800bcf0:	a201      	add	r2, pc, #4	; (adr r2, 800bcf8 <xTaskGenericNotifyFromISR+0x84>)
 800bcf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf6:	bf00      	nop
 800bcf8:	0800bd51 	.word	0x0800bd51
 800bcfc:	0800bd0d 	.word	0x0800bd0d
 800bd00:	0800bd1f 	.word	0x0800bd1f
 800bd04:	0800bd2f 	.word	0x0800bd2f
 800bd08:	0800bd39 	.word	0x0800bd39
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	431a      	orrs	r2, r3
 800bd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd18:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800bd1c:	e018      	b.n	800bd50 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bd24:	1c5a      	adds	r2, r3, #1
 800bd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd28:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800bd2c:	e010      	b.n	800bd50 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800bd36:	e00b      	b.n	800bd50 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bd38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	d004      	beq.n	800bd4a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd42:	68ba      	ldr	r2, [r7, #8]
 800bd44:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bd48:	e001      	b.n	800bd4e <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800bd4e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bd50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d146      	bne.n	800bde6 <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00a      	beq.n	800bd76 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	61bb      	str	r3, [r7, #24]
}
 800bd72:	bf00      	nop
 800bd74:	e7fe      	b.n	800bd74 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd76:	4b21      	ldr	r3, [pc, #132]	; (800bdfc <xTaskGenericNotifyFromISR+0x188>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d11c      	bne.n	800bdb8 <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	3304      	adds	r3, #4
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7fd fffe 	bl	8009d84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	409a      	lsls	r2, r3
 800bd90:	4b1b      	ldr	r3, [pc, #108]	; (800be00 <xTaskGenericNotifyFromISR+0x18c>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	4a1a      	ldr	r2, [pc, #104]	; (800be00 <xTaskGenericNotifyFromISR+0x18c>)
 800bd98:	6013      	str	r3, [r2, #0]
 800bd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd9e:	4613      	mov	r3, r2
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	4413      	add	r3, r2
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	4a17      	ldr	r2, [pc, #92]	; (800be04 <xTaskGenericNotifyFromISR+0x190>)
 800bda8:	441a      	add	r2, r3
 800bdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdac:	3304      	adds	r3, #4
 800bdae:	4619      	mov	r1, r3
 800bdb0:	4610      	mov	r0, r2
 800bdb2:	f7fd ff8c 	bl	8009cce <vListInsertEnd>
 800bdb6:	e005      	b.n	800bdc4 <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdba:	3318      	adds	r3, #24
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	4812      	ldr	r0, [pc, #72]	; (800be08 <xTaskGenericNotifyFromISR+0x194>)
 800bdc0:	f7fd ff85 	bl	8009cce <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc8:	4b10      	ldr	r3, [pc, #64]	; (800be0c <xTaskGenericNotifyFromISR+0x198>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d909      	bls.n	800bde6 <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800bdd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d003      	beq.n	800bde0 <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800bdd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdda:	2201      	movs	r2, #1
 800bddc:	601a      	str	r2, [r3, #0]
 800bdde:	e002      	b.n	800bde6 <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800bde0:	4b0b      	ldr	r3, [pc, #44]	; (800be10 <xTaskGenericNotifyFromISR+0x19c>)
 800bde2:	2201      	movs	r2, #1
 800bde4:	601a      	str	r2, [r3, #0]
 800bde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde8:	617b      	str	r3, [r7, #20]
	__asm volatile
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	f383 8811 	msr	BASEPRI, r3
}
 800bdf0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800bdf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3738      	adds	r7, #56	; 0x38
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	200004b4 	.word	0x200004b4
 800be00:	20000494 	.word	0x20000494
 800be04:	20000390 	.word	0x20000390
 800be08:	2000044c 	.word	0x2000044c
 800be0c:	2000038c 	.word	0x2000038c
 800be10:	200004a0 	.word	0x200004a0

0800be14 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be1e:	4b29      	ldr	r3, [pc, #164]	; (800bec4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be24:	4b28      	ldr	r3, [pc, #160]	; (800bec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	3304      	adds	r3, #4
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7fd ffaa 	bl	8009d84 <uxListRemove>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d10b      	bne.n	800be4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800be36:	4b24      	ldr	r3, [pc, #144]	; (800bec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3c:	2201      	movs	r2, #1
 800be3e:	fa02 f303 	lsl.w	r3, r2, r3
 800be42:	43da      	mvns	r2, r3
 800be44:	4b21      	ldr	r3, [pc, #132]	; (800becc <prvAddCurrentTaskToDelayedList+0xb8>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4013      	ands	r3, r2
 800be4a:	4a20      	ldr	r2, [pc, #128]	; (800becc <prvAddCurrentTaskToDelayedList+0xb8>)
 800be4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be54:	d10a      	bne.n	800be6c <prvAddCurrentTaskToDelayedList+0x58>
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d007      	beq.n	800be6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be5c:	4b1a      	ldr	r3, [pc, #104]	; (800bec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	3304      	adds	r3, #4
 800be62:	4619      	mov	r1, r3
 800be64:	481a      	ldr	r0, [pc, #104]	; (800bed0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800be66:	f7fd ff32 	bl	8009cce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be6a:	e026      	b.n	800beba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be6c:	68fa      	ldr	r2, [r7, #12]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4413      	add	r3, r2
 800be72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be74:	4b14      	ldr	r3, [pc, #80]	; (800bec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	68ba      	ldr	r2, [r7, #8]
 800be7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	429a      	cmp	r2, r3
 800be82:	d209      	bcs.n	800be98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be84:	4b13      	ldr	r3, [pc, #76]	; (800bed4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	4b0f      	ldr	r3, [pc, #60]	; (800bec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	3304      	adds	r3, #4
 800be8e:	4619      	mov	r1, r3
 800be90:	4610      	mov	r0, r2
 800be92:	f7fd ff3f 	bl	8009d14 <vListInsert>
}
 800be96:	e010      	b.n	800beba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be98:	4b0f      	ldr	r3, [pc, #60]	; (800bed8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	4b0a      	ldr	r3, [pc, #40]	; (800bec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	3304      	adds	r3, #4
 800bea2:	4619      	mov	r1, r3
 800bea4:	4610      	mov	r0, r2
 800bea6:	f7fd ff35 	bl	8009d14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800beaa:	4b0c      	ldr	r3, [pc, #48]	; (800bedc <prvAddCurrentTaskToDelayedList+0xc8>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68ba      	ldr	r2, [r7, #8]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d202      	bcs.n	800beba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800beb4:	4a09      	ldr	r2, [pc, #36]	; (800bedc <prvAddCurrentTaskToDelayedList+0xc8>)
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	6013      	str	r3, [r2, #0]
}
 800beba:	bf00      	nop
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	20000490 	.word	0x20000490
 800bec8:	2000038c 	.word	0x2000038c
 800becc:	20000494 	.word	0x20000494
 800bed0:	20000478 	.word	0x20000478
 800bed4:	20000448 	.word	0x20000448
 800bed8:	20000444 	.word	0x20000444
 800bedc:	200004ac 	.word	0x200004ac

0800bee0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	3b04      	subs	r3, #4
 800bef0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	3b04      	subs	r3, #4
 800befe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	f023 0201 	bic.w	r2, r3, #1
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	3b04      	subs	r3, #4
 800bf0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf10:	4a08      	ldr	r2, [pc, #32]	; (800bf34 <pxPortInitialiseStack+0x54>)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	3b14      	subs	r3, #20
 800bf1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	3b20      	subs	r3, #32
 800bf26:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf28:	68fb      	ldr	r3, [r7, #12]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bc80      	pop	{r7}
 800bf32:	4770      	bx	lr
 800bf34:	0800bf39 	.word	0x0800bf39

0800bf38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf42:	4b12      	ldr	r3, [pc, #72]	; (800bf8c <prvTaskExitError+0x54>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4a:	d00a      	beq.n	800bf62 <prvTaskExitError+0x2a>
	__asm volatile
 800bf4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf50:	f383 8811 	msr	BASEPRI, r3
 800bf54:	f3bf 8f6f 	isb	sy
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	60fb      	str	r3, [r7, #12]
}
 800bf5e:	bf00      	nop
 800bf60:	e7fe      	b.n	800bf60 <prvTaskExitError+0x28>
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	60bb      	str	r3, [r7, #8]
}
 800bf74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf76:	bf00      	nop
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d0fc      	beq.n	800bf78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf7e:	bf00      	nop
 800bf80:	bf00      	nop
 800bf82:	3714      	adds	r7, #20
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bc80      	pop	{r7}
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	2000000c 	.word	0x2000000c

0800bf90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf90:	4b07      	ldr	r3, [pc, #28]	; (800bfb0 <pxCurrentTCBConst2>)
 800bf92:	6819      	ldr	r1, [r3, #0]
 800bf94:	6808      	ldr	r0, [r1, #0]
 800bf96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bf9a:	f380 8809 	msr	PSP, r0
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f04f 0000 	mov.w	r0, #0
 800bfa6:	f380 8811 	msr	BASEPRI, r0
 800bfaa:	f04e 0e0d 	orr.w	lr, lr, #13
 800bfae:	4770      	bx	lr

0800bfb0 <pxCurrentTCBConst2>:
 800bfb0:	2000038c 	.word	0x2000038c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bfb4:	bf00      	nop
 800bfb6:	bf00      	nop

0800bfb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800bfb8:	4806      	ldr	r0, [pc, #24]	; (800bfd4 <prvPortStartFirstTask+0x1c>)
 800bfba:	6800      	ldr	r0, [r0, #0]
 800bfbc:	6800      	ldr	r0, [r0, #0]
 800bfbe:	f380 8808 	msr	MSP, r0
 800bfc2:	b662      	cpsie	i
 800bfc4:	b661      	cpsie	f
 800bfc6:	f3bf 8f4f 	dsb	sy
 800bfca:	f3bf 8f6f 	isb	sy
 800bfce:	df00      	svc	0
 800bfd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bfd2:	bf00      	nop
 800bfd4:	e000ed08 	.word	0xe000ed08

0800bfd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bfde:	4b32      	ldr	r3, [pc, #200]	; (800c0a8 <xPortStartScheduler+0xd0>)
 800bfe0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	22ff      	movs	r2, #255	; 0xff
 800bfee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bff8:	78fb      	ldrb	r3, [r7, #3]
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c000:	b2da      	uxtb	r2, r3
 800c002:	4b2a      	ldr	r3, [pc, #168]	; (800c0ac <xPortStartScheduler+0xd4>)
 800c004:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c006:	4b2a      	ldr	r3, [pc, #168]	; (800c0b0 <xPortStartScheduler+0xd8>)
 800c008:	2207      	movs	r2, #7
 800c00a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c00c:	e009      	b.n	800c022 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c00e:	4b28      	ldr	r3, [pc, #160]	; (800c0b0 <xPortStartScheduler+0xd8>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	3b01      	subs	r3, #1
 800c014:	4a26      	ldr	r2, [pc, #152]	; (800c0b0 <xPortStartScheduler+0xd8>)
 800c016:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c018:	78fb      	ldrb	r3, [r7, #3]
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	005b      	lsls	r3, r3, #1
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c022:	78fb      	ldrb	r3, [r7, #3]
 800c024:	b2db      	uxtb	r3, r3
 800c026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c02a:	2b80      	cmp	r3, #128	; 0x80
 800c02c:	d0ef      	beq.n	800c00e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c02e:	4b20      	ldr	r3, [pc, #128]	; (800c0b0 <xPortStartScheduler+0xd8>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f1c3 0307 	rsb	r3, r3, #7
 800c036:	2b04      	cmp	r3, #4
 800c038:	d00a      	beq.n	800c050 <xPortStartScheduler+0x78>
	__asm volatile
 800c03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03e:	f383 8811 	msr	BASEPRI, r3
 800c042:	f3bf 8f6f 	isb	sy
 800c046:	f3bf 8f4f 	dsb	sy
 800c04a:	60bb      	str	r3, [r7, #8]
}
 800c04c:	bf00      	nop
 800c04e:	e7fe      	b.n	800c04e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c050:	4b17      	ldr	r3, [pc, #92]	; (800c0b0 <xPortStartScheduler+0xd8>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	021b      	lsls	r3, r3, #8
 800c056:	4a16      	ldr	r2, [pc, #88]	; (800c0b0 <xPortStartScheduler+0xd8>)
 800c058:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c05a:	4b15      	ldr	r3, [pc, #84]	; (800c0b0 <xPortStartScheduler+0xd8>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c062:	4a13      	ldr	r2, [pc, #76]	; (800c0b0 <xPortStartScheduler+0xd8>)
 800c064:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	b2da      	uxtb	r2, r3
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c06e:	4b11      	ldr	r3, [pc, #68]	; (800c0b4 <xPortStartScheduler+0xdc>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4a10      	ldr	r2, [pc, #64]	; (800c0b4 <xPortStartScheduler+0xdc>)
 800c074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c078:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c07a:	4b0e      	ldr	r3, [pc, #56]	; (800c0b4 <xPortStartScheduler+0xdc>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4a0d      	ldr	r2, [pc, #52]	; (800c0b4 <xPortStartScheduler+0xdc>)
 800c080:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c084:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c086:	f000 f8b9 	bl	800c1fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c08a:	4b0b      	ldr	r3, [pc, #44]	; (800c0b8 <xPortStartScheduler+0xe0>)
 800c08c:	2200      	movs	r2, #0
 800c08e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c090:	f7ff ff92 	bl	800bfb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c094:	f7ff f8bc 	bl	800b210 <vTaskSwitchContext>
	prvTaskExitError();
 800c098:	f7ff ff4e 	bl	800bf38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	e000e400 	.word	0xe000e400
 800c0ac:	200004b8 	.word	0x200004b8
 800c0b0:	200004bc 	.word	0x200004bc
 800c0b4:	e000ed20 	.word	0xe000ed20
 800c0b8:	2000000c 	.word	0x2000000c

0800c0bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
	__asm volatile
 800c0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c6:	f383 8811 	msr	BASEPRI, r3
 800c0ca:	f3bf 8f6f 	isb	sy
 800c0ce:	f3bf 8f4f 	dsb	sy
 800c0d2:	607b      	str	r3, [r7, #4]
}
 800c0d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c0d6:	4b0f      	ldr	r3, [pc, #60]	; (800c114 <vPortEnterCritical+0x58>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	4a0d      	ldr	r2, [pc, #52]	; (800c114 <vPortEnterCritical+0x58>)
 800c0de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c0e0:	4b0c      	ldr	r3, [pc, #48]	; (800c114 <vPortEnterCritical+0x58>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d10f      	bne.n	800c108 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c0e8:	4b0b      	ldr	r3, [pc, #44]	; (800c118 <vPortEnterCritical+0x5c>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d00a      	beq.n	800c108 <vPortEnterCritical+0x4c>
	__asm volatile
 800c0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f6:	f383 8811 	msr	BASEPRI, r3
 800c0fa:	f3bf 8f6f 	isb	sy
 800c0fe:	f3bf 8f4f 	dsb	sy
 800c102:	603b      	str	r3, [r7, #0]
}
 800c104:	bf00      	nop
 800c106:	e7fe      	b.n	800c106 <vPortEnterCritical+0x4a>
	}
}
 800c108:	bf00      	nop
 800c10a:	370c      	adds	r7, #12
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bc80      	pop	{r7}
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	2000000c 	.word	0x2000000c
 800c118:	e000ed04 	.word	0xe000ed04

0800c11c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c122:	4b11      	ldr	r3, [pc, #68]	; (800c168 <vPortExitCritical+0x4c>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d10a      	bne.n	800c140 <vPortExitCritical+0x24>
	__asm volatile
 800c12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12e:	f383 8811 	msr	BASEPRI, r3
 800c132:	f3bf 8f6f 	isb	sy
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	607b      	str	r3, [r7, #4]
}
 800c13c:	bf00      	nop
 800c13e:	e7fe      	b.n	800c13e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c140:	4b09      	ldr	r3, [pc, #36]	; (800c168 <vPortExitCritical+0x4c>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	3b01      	subs	r3, #1
 800c146:	4a08      	ldr	r2, [pc, #32]	; (800c168 <vPortExitCritical+0x4c>)
 800c148:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c14a:	4b07      	ldr	r3, [pc, #28]	; (800c168 <vPortExitCritical+0x4c>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d105      	bne.n	800c15e <vPortExitCritical+0x42>
 800c152:	2300      	movs	r3, #0
 800c154:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	f383 8811 	msr	BASEPRI, r3
}
 800c15c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c15e:	bf00      	nop
 800c160:	370c      	adds	r7, #12
 800c162:	46bd      	mov	sp, r7
 800c164:	bc80      	pop	{r7}
 800c166:	4770      	bx	lr
 800c168:	2000000c 	.word	0x2000000c
 800c16c:	00000000 	.word	0x00000000

0800c170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c170:	f3ef 8009 	mrs	r0, PSP
 800c174:	f3bf 8f6f 	isb	sy
 800c178:	4b0d      	ldr	r3, [pc, #52]	; (800c1b0 <pxCurrentTCBConst>)
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c180:	6010      	str	r0, [r2, #0]
 800c182:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c186:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c18a:	f380 8811 	msr	BASEPRI, r0
 800c18e:	f7ff f83f 	bl	800b210 <vTaskSwitchContext>
 800c192:	f04f 0000 	mov.w	r0, #0
 800c196:	f380 8811 	msr	BASEPRI, r0
 800c19a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c19e:	6819      	ldr	r1, [r3, #0]
 800c1a0:	6808      	ldr	r0, [r1, #0]
 800c1a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c1a6:	f380 8809 	msr	PSP, r0
 800c1aa:	f3bf 8f6f 	isb	sy
 800c1ae:	4770      	bx	lr

0800c1b0 <pxCurrentTCBConst>:
 800c1b0:	2000038c 	.word	0x2000038c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c1b4:	bf00      	nop
 800c1b6:	bf00      	nop

0800c1b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c2:	f383 8811 	msr	BASEPRI, r3
 800c1c6:	f3bf 8f6f 	isb	sy
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	607b      	str	r3, [r7, #4]
}
 800c1d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c1d2:	f7fe ff5f 	bl	800b094 <xTaskIncrementTick>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d003      	beq.n	800c1e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c1dc:	4b06      	ldr	r3, [pc, #24]	; (800c1f8 <SysTick_Handler+0x40>)
 800c1de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1e2:	601a      	str	r2, [r3, #0]
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	f383 8811 	msr	BASEPRI, r3
}
 800c1ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c1f0:	bf00      	nop
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	e000ed04 	.word	0xe000ed04

0800c1fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c200:	4b0a      	ldr	r3, [pc, #40]	; (800c22c <vPortSetupTimerInterrupt+0x30>)
 800c202:	2200      	movs	r2, #0
 800c204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c206:	4b0a      	ldr	r3, [pc, #40]	; (800c230 <vPortSetupTimerInterrupt+0x34>)
 800c208:	2200      	movs	r2, #0
 800c20a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c20c:	4b09      	ldr	r3, [pc, #36]	; (800c234 <vPortSetupTimerInterrupt+0x38>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a09      	ldr	r2, [pc, #36]	; (800c238 <vPortSetupTimerInterrupt+0x3c>)
 800c212:	fba2 2303 	umull	r2, r3, r2, r3
 800c216:	099b      	lsrs	r3, r3, #6
 800c218:	4a08      	ldr	r2, [pc, #32]	; (800c23c <vPortSetupTimerInterrupt+0x40>)
 800c21a:	3b01      	subs	r3, #1
 800c21c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c21e:	4b03      	ldr	r3, [pc, #12]	; (800c22c <vPortSetupTimerInterrupt+0x30>)
 800c220:	2207      	movs	r2, #7
 800c222:	601a      	str	r2, [r3, #0]
}
 800c224:	bf00      	nop
 800c226:	46bd      	mov	sp, r7
 800c228:	bc80      	pop	{r7}
 800c22a:	4770      	bx	lr
 800c22c:	e000e010 	.word	0xe000e010
 800c230:	e000e018 	.word	0xe000e018
 800c234:	20000000 	.word	0x20000000
 800c238:	10624dd3 	.word	0x10624dd3
 800c23c:	e000e014 	.word	0xe000e014

0800c240 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c240:	b480      	push	{r7}
 800c242:	b085      	sub	sp, #20
 800c244:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c246:	f3ef 8305 	mrs	r3, IPSR
 800c24a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2b0f      	cmp	r3, #15
 800c250:	d914      	bls.n	800c27c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c252:	4a16      	ldr	r2, [pc, #88]	; (800c2ac <vPortValidateInterruptPriority+0x6c>)
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	4413      	add	r3, r2
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c25c:	4b14      	ldr	r3, [pc, #80]	; (800c2b0 <vPortValidateInterruptPriority+0x70>)
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	7afa      	ldrb	r2, [r7, #11]
 800c262:	429a      	cmp	r2, r3
 800c264:	d20a      	bcs.n	800c27c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26a:	f383 8811 	msr	BASEPRI, r3
 800c26e:	f3bf 8f6f 	isb	sy
 800c272:	f3bf 8f4f 	dsb	sy
 800c276:	607b      	str	r3, [r7, #4]
}
 800c278:	bf00      	nop
 800c27a:	e7fe      	b.n	800c27a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c27c:	4b0d      	ldr	r3, [pc, #52]	; (800c2b4 <vPortValidateInterruptPriority+0x74>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c284:	4b0c      	ldr	r3, [pc, #48]	; (800c2b8 <vPortValidateInterruptPriority+0x78>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d90a      	bls.n	800c2a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c290:	f383 8811 	msr	BASEPRI, r3
 800c294:	f3bf 8f6f 	isb	sy
 800c298:	f3bf 8f4f 	dsb	sy
 800c29c:	603b      	str	r3, [r7, #0]
}
 800c29e:	bf00      	nop
 800c2a0:	e7fe      	b.n	800c2a0 <vPortValidateInterruptPriority+0x60>
	}
 800c2a2:	bf00      	nop
 800c2a4:	3714      	adds	r7, #20
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bc80      	pop	{r7}
 800c2aa:	4770      	bx	lr
 800c2ac:	e000e3f0 	.word	0xe000e3f0
 800c2b0:	200004b8 	.word	0x200004b8
 800c2b4:	e000ed0c 	.word	0xe000ed0c
 800c2b8:	200004bc 	.word	0x200004bc

0800c2bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b08a      	sub	sp, #40	; 0x28
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c2c8:	f7fe fe3a 	bl	800af40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c2cc:	4b5b      	ldr	r3, [pc, #364]	; (800c43c <pvPortMalloc+0x180>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d101      	bne.n	800c2d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c2d4:	f000 f916 	bl	800c504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c2d8:	4b59      	ldr	r3, [pc, #356]	; (800c440 <pvPortMalloc+0x184>)
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4013      	ands	r3, r2
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f040 808e 	bne.w	800c402 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d01d      	beq.n	800c328 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c2ec:	2208      	movs	r2, #8
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f003 0307 	and.w	r3, r3, #7
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d014      	beq.n	800c328 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f023 0307 	bic.w	r3, r3, #7
 800c304:	3308      	adds	r3, #8
 800c306:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f003 0307 	and.w	r3, r3, #7
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00a      	beq.n	800c328 <pvPortMalloc+0x6c>
	__asm volatile
 800c312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c316:	f383 8811 	msr	BASEPRI, r3
 800c31a:	f3bf 8f6f 	isb	sy
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	617b      	str	r3, [r7, #20]
}
 800c324:	bf00      	nop
 800c326:	e7fe      	b.n	800c326 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d069      	beq.n	800c402 <pvPortMalloc+0x146>
 800c32e:	4b45      	ldr	r3, [pc, #276]	; (800c444 <pvPortMalloc+0x188>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	429a      	cmp	r2, r3
 800c336:	d864      	bhi.n	800c402 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c338:	4b43      	ldr	r3, [pc, #268]	; (800c448 <pvPortMalloc+0x18c>)
 800c33a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c33c:	4b42      	ldr	r3, [pc, #264]	; (800c448 <pvPortMalloc+0x18c>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c342:	e004      	b.n	800c34e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c346:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	429a      	cmp	r2, r3
 800c356:	d903      	bls.n	800c360 <pvPortMalloc+0xa4>
 800c358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1f1      	bne.n	800c344 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c360:	4b36      	ldr	r3, [pc, #216]	; (800c43c <pvPortMalloc+0x180>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c366:	429a      	cmp	r2, r3
 800c368:	d04b      	beq.n	800c402 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c36a:	6a3b      	ldr	r3, [r7, #32]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2208      	movs	r2, #8
 800c370:	4413      	add	r3, r2
 800c372:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	6a3b      	ldr	r3, [r7, #32]
 800c37a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37e:	685a      	ldr	r2, [r3, #4]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	1ad2      	subs	r2, r2, r3
 800c384:	2308      	movs	r3, #8
 800c386:	005b      	lsls	r3, r3, #1
 800c388:	429a      	cmp	r2, r3
 800c38a:	d91f      	bls.n	800c3cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c38c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4413      	add	r3, r2
 800c392:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	f003 0307 	and.w	r3, r3, #7
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d00a      	beq.n	800c3b4 <pvPortMalloc+0xf8>
	__asm volatile
 800c39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a2:	f383 8811 	msr	BASEPRI, r3
 800c3a6:	f3bf 8f6f 	isb	sy
 800c3aa:	f3bf 8f4f 	dsb	sy
 800c3ae:	613b      	str	r3, [r7, #16]
}
 800c3b0:	bf00      	nop
 800c3b2:	e7fe      	b.n	800c3b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b6:	685a      	ldr	r2, [r3, #4]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	1ad2      	subs	r2, r2, r3
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c3c6:	69b8      	ldr	r0, [r7, #24]
 800c3c8:	f000 f8fe 	bl	800c5c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c3cc:	4b1d      	ldr	r3, [pc, #116]	; (800c444 <pvPortMalloc+0x188>)
 800c3ce:	681a      	ldr	r2, [r3, #0]
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	1ad3      	subs	r3, r2, r3
 800c3d6:	4a1b      	ldr	r2, [pc, #108]	; (800c444 <pvPortMalloc+0x188>)
 800c3d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c3da:	4b1a      	ldr	r3, [pc, #104]	; (800c444 <pvPortMalloc+0x188>)
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	4b1b      	ldr	r3, [pc, #108]	; (800c44c <pvPortMalloc+0x190>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d203      	bcs.n	800c3ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c3e6:	4b17      	ldr	r3, [pc, #92]	; (800c444 <pvPortMalloc+0x188>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a18      	ldr	r2, [pc, #96]	; (800c44c <pvPortMalloc+0x190>)
 800c3ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f0:	685a      	ldr	r2, [r3, #4]
 800c3f2:	4b13      	ldr	r3, [pc, #76]	; (800c440 <pvPortMalloc+0x184>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	431a      	orrs	r2, r3
 800c3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fe:	2200      	movs	r2, #0
 800c400:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c402:	f7fe fdab 	bl	800af5c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d101      	bne.n	800c410 <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c40c:	f7f5 fb04 	bl	8001a18 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	f003 0307 	and.w	r3, r3, #7
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00a      	beq.n	800c430 <pvPortMalloc+0x174>
	__asm volatile
 800c41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41e:	f383 8811 	msr	BASEPRI, r3
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	f3bf 8f4f 	dsb	sy
 800c42a:	60fb      	str	r3, [r7, #12]
}
 800c42c:	bf00      	nop
 800c42e:	e7fe      	b.n	800c42e <pvPortMalloc+0x172>
	return pvReturn;
 800c430:	69fb      	ldr	r3, [r7, #28]
}
 800c432:	4618      	mov	r0, r3
 800c434:	3728      	adds	r7, #40	; 0x28
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	2000421c 	.word	0x2000421c
 800c440:	20004228 	.word	0x20004228
 800c444:	20004220 	.word	0x20004220
 800c448:	20004214 	.word	0x20004214
 800c44c:	20004224 	.word	0x20004224

0800c450 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b086      	sub	sp, #24
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d048      	beq.n	800c4f4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c462:	2308      	movs	r3, #8
 800c464:	425b      	negs	r3, r3
 800c466:	697a      	ldr	r2, [r7, #20]
 800c468:	4413      	add	r3, r2
 800c46a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	685a      	ldr	r2, [r3, #4]
 800c474:	4b21      	ldr	r3, [pc, #132]	; (800c4fc <vPortFree+0xac>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4013      	ands	r3, r2
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d10a      	bne.n	800c494 <vPortFree+0x44>
	__asm volatile
 800c47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c482:	f383 8811 	msr	BASEPRI, r3
 800c486:	f3bf 8f6f 	isb	sy
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	60fb      	str	r3, [r7, #12]
}
 800c490:	bf00      	nop
 800c492:	e7fe      	b.n	800c492 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00a      	beq.n	800c4b2 <vPortFree+0x62>
	__asm volatile
 800c49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a0:	f383 8811 	msr	BASEPRI, r3
 800c4a4:	f3bf 8f6f 	isb	sy
 800c4a8:	f3bf 8f4f 	dsb	sy
 800c4ac:	60bb      	str	r3, [r7, #8]
}
 800c4ae:	bf00      	nop
 800c4b0:	e7fe      	b.n	800c4b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	685a      	ldr	r2, [r3, #4]
 800c4b6:	4b11      	ldr	r3, [pc, #68]	; (800c4fc <vPortFree+0xac>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4013      	ands	r3, r2
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d019      	beq.n	800c4f4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d115      	bne.n	800c4f4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	685a      	ldr	r2, [r3, #4]
 800c4cc:	4b0b      	ldr	r3, [pc, #44]	; (800c4fc <vPortFree+0xac>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	43db      	mvns	r3, r3
 800c4d2:	401a      	ands	r2, r3
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c4d8:	f7fe fd32 	bl	800af40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	685a      	ldr	r2, [r3, #4]
 800c4e0:	4b07      	ldr	r3, [pc, #28]	; (800c500 <vPortFree+0xb0>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	4a06      	ldr	r2, [pc, #24]	; (800c500 <vPortFree+0xb0>)
 800c4e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c4ea:	6938      	ldr	r0, [r7, #16]
 800c4ec:	f000 f86c 	bl	800c5c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c4f0:	f7fe fd34 	bl	800af5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c4f4:	bf00      	nop
 800c4f6:	3718      	adds	r7, #24
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	20004228 	.word	0x20004228
 800c500:	20004220 	.word	0x20004220

0800c504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c50a:	f643 5354 	movw	r3, #15700	; 0x3d54
 800c50e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c510:	4b27      	ldr	r3, [pc, #156]	; (800c5b0 <prvHeapInit+0xac>)
 800c512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f003 0307 	and.w	r3, r3, #7
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00c      	beq.n	800c538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	3307      	adds	r3, #7
 800c522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f023 0307 	bic.w	r3, r3, #7
 800c52a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c52c:	68ba      	ldr	r2, [r7, #8]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	4a1f      	ldr	r2, [pc, #124]	; (800c5b0 <prvHeapInit+0xac>)
 800c534:	4413      	add	r3, r2
 800c536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c53c:	4a1d      	ldr	r2, [pc, #116]	; (800c5b4 <prvHeapInit+0xb0>)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c542:	4b1c      	ldr	r3, [pc, #112]	; (800c5b4 <prvHeapInit+0xb0>)
 800c544:	2200      	movs	r2, #0
 800c546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	68ba      	ldr	r2, [r7, #8]
 800c54c:	4413      	add	r3, r2
 800c54e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c550:	2208      	movs	r2, #8
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	1a9b      	subs	r3, r3, r2
 800c556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f023 0307 	bic.w	r3, r3, #7
 800c55e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	4a15      	ldr	r2, [pc, #84]	; (800c5b8 <prvHeapInit+0xb4>)
 800c564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c566:	4b14      	ldr	r3, [pc, #80]	; (800c5b8 <prvHeapInit+0xb4>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2200      	movs	r2, #0
 800c56c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c56e:	4b12      	ldr	r3, [pc, #72]	; (800c5b8 <prvHeapInit+0xb4>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	2200      	movs	r2, #0
 800c574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	1ad2      	subs	r2, r2, r3
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c584:	4b0c      	ldr	r3, [pc, #48]	; (800c5b8 <prvHeapInit+0xb4>)
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	4a0a      	ldr	r2, [pc, #40]	; (800c5bc <prvHeapInit+0xb8>)
 800c592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	4a09      	ldr	r2, [pc, #36]	; (800c5c0 <prvHeapInit+0xbc>)
 800c59a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c59c:	4b09      	ldr	r3, [pc, #36]	; (800c5c4 <prvHeapInit+0xc0>)
 800c59e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c5a2:	601a      	str	r2, [r3, #0]
}
 800c5a4:	bf00      	nop
 800c5a6:	3714      	adds	r7, #20
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bc80      	pop	{r7}
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	200004c0 	.word	0x200004c0
 800c5b4:	20004214 	.word	0x20004214
 800c5b8:	2000421c 	.word	0x2000421c
 800c5bc:	20004224 	.word	0x20004224
 800c5c0:	20004220 	.word	0x20004220
 800c5c4:	20004228 	.word	0x20004228

0800c5c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c5d0:	4b27      	ldr	r3, [pc, #156]	; (800c670 <prvInsertBlockIntoFreeList+0xa8>)
 800c5d2:	60fb      	str	r3, [r7, #12]
 800c5d4:	e002      	b.n	800c5dc <prvInsertBlockIntoFreeList+0x14>
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	60fb      	str	r3, [r7, #12]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d8f7      	bhi.n	800c5d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	68ba      	ldr	r2, [r7, #8]
 800c5f0:	4413      	add	r3, r2
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d108      	bne.n	800c60a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	685a      	ldr	r2, [r3, #4]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	441a      	add	r2, r3
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	68ba      	ldr	r2, [r7, #8]
 800c614:	441a      	add	r2, r3
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d118      	bne.n	800c650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	4b14      	ldr	r3, [pc, #80]	; (800c674 <prvInsertBlockIntoFreeList+0xac>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	429a      	cmp	r2, r3
 800c628:	d00d      	beq.n	800c646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	685a      	ldr	r2, [r3, #4]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	685b      	ldr	r3, [r3, #4]
 800c634:	441a      	add	r2, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	601a      	str	r2, [r3, #0]
 800c644:	e008      	b.n	800c658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c646:	4b0b      	ldr	r3, [pc, #44]	; (800c674 <prvInsertBlockIntoFreeList+0xac>)
 800c648:	681a      	ldr	r2, [r3, #0]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	601a      	str	r2, [r3, #0]
 800c64e:	e003      	b.n	800c658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d002      	beq.n	800c666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c666:	bf00      	nop
 800c668:	3714      	adds	r7, #20
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bc80      	pop	{r7}
 800c66e:	4770      	bx	lr
 800c670:	20004214 	.word	0x20004214
 800c674:	2000421c 	.word	0x2000421c

0800c678 <__errno>:
 800c678:	4b01      	ldr	r3, [pc, #4]	; (800c680 <__errno+0x8>)
 800c67a:	6818      	ldr	r0, [r3, #0]
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	20000010 	.word	0x20000010

0800c684 <__libc_init_array>:
 800c684:	b570      	push	{r4, r5, r6, lr}
 800c686:	2600      	movs	r6, #0
 800c688:	4d0c      	ldr	r5, [pc, #48]	; (800c6bc <__libc_init_array+0x38>)
 800c68a:	4c0d      	ldr	r4, [pc, #52]	; (800c6c0 <__libc_init_array+0x3c>)
 800c68c:	1b64      	subs	r4, r4, r5
 800c68e:	10a4      	asrs	r4, r4, #2
 800c690:	42a6      	cmp	r6, r4
 800c692:	d109      	bne.n	800c6a8 <__libc_init_array+0x24>
 800c694:	f001 fa1a 	bl	800dacc <_init>
 800c698:	2600      	movs	r6, #0
 800c69a:	4d0a      	ldr	r5, [pc, #40]	; (800c6c4 <__libc_init_array+0x40>)
 800c69c:	4c0a      	ldr	r4, [pc, #40]	; (800c6c8 <__libc_init_array+0x44>)
 800c69e:	1b64      	subs	r4, r4, r5
 800c6a0:	10a4      	asrs	r4, r4, #2
 800c6a2:	42a6      	cmp	r6, r4
 800c6a4:	d105      	bne.n	800c6b2 <__libc_init_array+0x2e>
 800c6a6:	bd70      	pop	{r4, r5, r6, pc}
 800c6a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6ac:	4798      	blx	r3
 800c6ae:	3601      	adds	r6, #1
 800c6b0:	e7ee      	b.n	800c690 <__libc_init_array+0xc>
 800c6b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6b6:	4798      	blx	r3
 800c6b8:	3601      	adds	r6, #1
 800c6ba:	e7f2      	b.n	800c6a2 <__libc_init_array+0x1e>
 800c6bc:	0800dc90 	.word	0x0800dc90
 800c6c0:	0800dc90 	.word	0x0800dc90
 800c6c4:	0800dc90 	.word	0x0800dc90
 800c6c8:	0800dc94 	.word	0x0800dc94

0800c6cc <__retarget_lock_acquire_recursive>:
 800c6cc:	4770      	bx	lr

0800c6ce <__retarget_lock_release_recursive>:
 800c6ce:	4770      	bx	lr

0800c6d0 <memcpy>:
 800c6d0:	440a      	add	r2, r1
 800c6d2:	4291      	cmp	r1, r2
 800c6d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6d8:	d100      	bne.n	800c6dc <memcpy+0xc>
 800c6da:	4770      	bx	lr
 800c6dc:	b510      	push	{r4, lr}
 800c6de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6e2:	4291      	cmp	r1, r2
 800c6e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6e8:	d1f9      	bne.n	800c6de <memcpy+0xe>
 800c6ea:	bd10      	pop	{r4, pc}

0800c6ec <memset>:
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	4402      	add	r2, r0
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d100      	bne.n	800c6f6 <memset+0xa>
 800c6f4:	4770      	bx	lr
 800c6f6:	f803 1b01 	strb.w	r1, [r3], #1
 800c6fa:	e7f9      	b.n	800c6f0 <memset+0x4>

0800c6fc <cleanup_glue>:
 800c6fc:	b538      	push	{r3, r4, r5, lr}
 800c6fe:	460c      	mov	r4, r1
 800c700:	6809      	ldr	r1, [r1, #0]
 800c702:	4605      	mov	r5, r0
 800c704:	b109      	cbz	r1, 800c70a <cleanup_glue+0xe>
 800c706:	f7ff fff9 	bl	800c6fc <cleanup_glue>
 800c70a:	4621      	mov	r1, r4
 800c70c:	4628      	mov	r0, r5
 800c70e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c712:	f000 b88b 	b.w	800c82c <_free_r>
	...

0800c718 <_reclaim_reent>:
 800c718:	4b2c      	ldr	r3, [pc, #176]	; (800c7cc <_reclaim_reent+0xb4>)
 800c71a:	b570      	push	{r4, r5, r6, lr}
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4604      	mov	r4, r0
 800c720:	4283      	cmp	r3, r0
 800c722:	d051      	beq.n	800c7c8 <_reclaim_reent+0xb0>
 800c724:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c726:	b143      	cbz	r3, 800c73a <_reclaim_reent+0x22>
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d14a      	bne.n	800c7c4 <_reclaim_reent+0xac>
 800c72e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c730:	6819      	ldr	r1, [r3, #0]
 800c732:	b111      	cbz	r1, 800c73a <_reclaim_reent+0x22>
 800c734:	4620      	mov	r0, r4
 800c736:	f000 f879 	bl	800c82c <_free_r>
 800c73a:	6961      	ldr	r1, [r4, #20]
 800c73c:	b111      	cbz	r1, 800c744 <_reclaim_reent+0x2c>
 800c73e:	4620      	mov	r0, r4
 800c740:	f000 f874 	bl	800c82c <_free_r>
 800c744:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c746:	b111      	cbz	r1, 800c74e <_reclaim_reent+0x36>
 800c748:	4620      	mov	r0, r4
 800c74a:	f000 f86f 	bl	800c82c <_free_r>
 800c74e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c750:	b111      	cbz	r1, 800c758 <_reclaim_reent+0x40>
 800c752:	4620      	mov	r0, r4
 800c754:	f000 f86a 	bl	800c82c <_free_r>
 800c758:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c75a:	b111      	cbz	r1, 800c762 <_reclaim_reent+0x4a>
 800c75c:	4620      	mov	r0, r4
 800c75e:	f000 f865 	bl	800c82c <_free_r>
 800c762:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c764:	b111      	cbz	r1, 800c76c <_reclaim_reent+0x54>
 800c766:	4620      	mov	r0, r4
 800c768:	f000 f860 	bl	800c82c <_free_r>
 800c76c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c76e:	b111      	cbz	r1, 800c776 <_reclaim_reent+0x5e>
 800c770:	4620      	mov	r0, r4
 800c772:	f000 f85b 	bl	800c82c <_free_r>
 800c776:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c778:	b111      	cbz	r1, 800c780 <_reclaim_reent+0x68>
 800c77a:	4620      	mov	r0, r4
 800c77c:	f000 f856 	bl	800c82c <_free_r>
 800c780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c782:	b111      	cbz	r1, 800c78a <_reclaim_reent+0x72>
 800c784:	4620      	mov	r0, r4
 800c786:	f000 f851 	bl	800c82c <_free_r>
 800c78a:	69a3      	ldr	r3, [r4, #24]
 800c78c:	b1e3      	cbz	r3, 800c7c8 <_reclaim_reent+0xb0>
 800c78e:	4620      	mov	r0, r4
 800c790:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c792:	4798      	blx	r3
 800c794:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c796:	b1b9      	cbz	r1, 800c7c8 <_reclaim_reent+0xb0>
 800c798:	4620      	mov	r0, r4
 800c79a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c79e:	f7ff bfad 	b.w	800c6fc <cleanup_glue>
 800c7a2:	5949      	ldr	r1, [r1, r5]
 800c7a4:	b941      	cbnz	r1, 800c7b8 <_reclaim_reent+0xa0>
 800c7a6:	3504      	adds	r5, #4
 800c7a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7aa:	2d80      	cmp	r5, #128	; 0x80
 800c7ac:	68d9      	ldr	r1, [r3, #12]
 800c7ae:	d1f8      	bne.n	800c7a2 <_reclaim_reent+0x8a>
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	f000 f83b 	bl	800c82c <_free_r>
 800c7b6:	e7ba      	b.n	800c72e <_reclaim_reent+0x16>
 800c7b8:	680e      	ldr	r6, [r1, #0]
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	f000 f836 	bl	800c82c <_free_r>
 800c7c0:	4631      	mov	r1, r6
 800c7c2:	e7ef      	b.n	800c7a4 <_reclaim_reent+0x8c>
 800c7c4:	2500      	movs	r5, #0
 800c7c6:	e7ef      	b.n	800c7a8 <_reclaim_reent+0x90>
 800c7c8:	bd70      	pop	{r4, r5, r6, pc}
 800c7ca:	bf00      	nop
 800c7cc:	20000010 	.word	0x20000010

0800c7d0 <modff>:
 800c7d0:	b538      	push	{r3, r4, r5, lr}
 800c7d2:	460c      	mov	r4, r1
 800c7d4:	f3c0 51c7 	ubfx	r1, r0, #23, #8
 800c7d8:	397f      	subs	r1, #127	; 0x7f
 800c7da:	2916      	cmp	r1, #22
 800c7dc:	4603      	mov	r3, r0
 800c7de:	4602      	mov	r2, r0
 800c7e0:	dc0b      	bgt.n	800c7fa <modff+0x2a>
 800c7e2:	2900      	cmp	r1, #0
 800c7e4:	da04      	bge.n	800c7f0 <modff+0x20>
 800c7e6:	f000 4200 	and.w	r2, r0, #2147483648	; 0x80000000
 800c7ea:	6022      	str	r2, [r4, #0]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	bd38      	pop	{r3, r4, r5, pc}
 800c7f0:	4d07      	ldr	r5, [pc, #28]	; (800c810 <modff+0x40>)
 800c7f2:	fa45 f101 	asr.w	r1, r5, r1
 800c7f6:	4208      	tst	r0, r1
 800c7f8:	d103      	bne.n	800c802 <modff+0x32>
 800c7fa:	6023      	str	r3, [r4, #0]
 800c7fc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c800:	e7f4      	b.n	800c7ec <modff+0x1c>
 800c802:	ea20 0101 	bic.w	r1, r0, r1
 800c806:	6021      	str	r1, [r4, #0]
 800c808:	f7f4 f982 	bl	8000b10 <__aeabi_fsub>
 800c80c:	4603      	mov	r3, r0
 800c80e:	e7ed      	b.n	800c7ec <modff+0x1c>
 800c810:	007fffff 	.word	0x007fffff

0800c814 <__malloc_lock>:
 800c814:	4801      	ldr	r0, [pc, #4]	; (800c81c <__malloc_lock+0x8>)
 800c816:	f7ff bf59 	b.w	800c6cc <__retarget_lock_acquire_recursive>
 800c81a:	bf00      	nop
 800c81c:	200044d8 	.word	0x200044d8

0800c820 <__malloc_unlock>:
 800c820:	4801      	ldr	r0, [pc, #4]	; (800c828 <__malloc_unlock+0x8>)
 800c822:	f7ff bf54 	b.w	800c6ce <__retarget_lock_release_recursive>
 800c826:	bf00      	nop
 800c828:	200044d8 	.word	0x200044d8

0800c82c <_free_r>:
 800c82c:	b538      	push	{r3, r4, r5, lr}
 800c82e:	4605      	mov	r5, r0
 800c830:	2900      	cmp	r1, #0
 800c832:	d043      	beq.n	800c8bc <_free_r+0x90>
 800c834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c838:	1f0c      	subs	r4, r1, #4
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	bfb8      	it	lt
 800c83e:	18e4      	addlt	r4, r4, r3
 800c840:	f7ff ffe8 	bl	800c814 <__malloc_lock>
 800c844:	4a1e      	ldr	r2, [pc, #120]	; (800c8c0 <_free_r+0x94>)
 800c846:	6813      	ldr	r3, [r2, #0]
 800c848:	4610      	mov	r0, r2
 800c84a:	b933      	cbnz	r3, 800c85a <_free_r+0x2e>
 800c84c:	6063      	str	r3, [r4, #4]
 800c84e:	6014      	str	r4, [r2, #0]
 800c850:	4628      	mov	r0, r5
 800c852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c856:	f7ff bfe3 	b.w	800c820 <__malloc_unlock>
 800c85a:	42a3      	cmp	r3, r4
 800c85c:	d90a      	bls.n	800c874 <_free_r+0x48>
 800c85e:	6821      	ldr	r1, [r4, #0]
 800c860:	1862      	adds	r2, r4, r1
 800c862:	4293      	cmp	r3, r2
 800c864:	bf01      	itttt	eq
 800c866:	681a      	ldreq	r2, [r3, #0]
 800c868:	685b      	ldreq	r3, [r3, #4]
 800c86a:	1852      	addeq	r2, r2, r1
 800c86c:	6022      	streq	r2, [r4, #0]
 800c86e:	6063      	str	r3, [r4, #4]
 800c870:	6004      	str	r4, [r0, #0]
 800c872:	e7ed      	b.n	800c850 <_free_r+0x24>
 800c874:	461a      	mov	r2, r3
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	b10b      	cbz	r3, 800c87e <_free_r+0x52>
 800c87a:	42a3      	cmp	r3, r4
 800c87c:	d9fa      	bls.n	800c874 <_free_r+0x48>
 800c87e:	6811      	ldr	r1, [r2, #0]
 800c880:	1850      	adds	r0, r2, r1
 800c882:	42a0      	cmp	r0, r4
 800c884:	d10b      	bne.n	800c89e <_free_r+0x72>
 800c886:	6820      	ldr	r0, [r4, #0]
 800c888:	4401      	add	r1, r0
 800c88a:	1850      	adds	r0, r2, r1
 800c88c:	4283      	cmp	r3, r0
 800c88e:	6011      	str	r1, [r2, #0]
 800c890:	d1de      	bne.n	800c850 <_free_r+0x24>
 800c892:	6818      	ldr	r0, [r3, #0]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	4401      	add	r1, r0
 800c898:	6011      	str	r1, [r2, #0]
 800c89a:	6053      	str	r3, [r2, #4]
 800c89c:	e7d8      	b.n	800c850 <_free_r+0x24>
 800c89e:	d902      	bls.n	800c8a6 <_free_r+0x7a>
 800c8a0:	230c      	movs	r3, #12
 800c8a2:	602b      	str	r3, [r5, #0]
 800c8a4:	e7d4      	b.n	800c850 <_free_r+0x24>
 800c8a6:	6820      	ldr	r0, [r4, #0]
 800c8a8:	1821      	adds	r1, r4, r0
 800c8aa:	428b      	cmp	r3, r1
 800c8ac:	bf01      	itttt	eq
 800c8ae:	6819      	ldreq	r1, [r3, #0]
 800c8b0:	685b      	ldreq	r3, [r3, #4]
 800c8b2:	1809      	addeq	r1, r1, r0
 800c8b4:	6021      	streq	r1, [r4, #0]
 800c8b6:	6063      	str	r3, [r4, #4]
 800c8b8:	6054      	str	r4, [r2, #4]
 800c8ba:	e7c9      	b.n	800c850 <_free_r+0x24>
 800c8bc:	bd38      	pop	{r3, r4, r5, pc}
 800c8be:	bf00      	nop
 800c8c0:	2000422c 	.word	0x2000422c

0800c8c4 <fmod>:
 800c8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8c8:	461f      	mov	r7, r3
 800c8ca:	4680      	mov	r8, r0
 800c8cc:	4689      	mov	r9, r1
 800c8ce:	4616      	mov	r6, r2
 800c8d0:	f000 f906 	bl	800cae0 <__ieee754_fmod>
 800c8d4:	4b15      	ldr	r3, [pc, #84]	; (800c92c <fmod+0x68>)
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	f993 3000 	ldrsb.w	r3, [r3]
 800c8dc:	460d      	mov	r5, r1
 800c8de:	3301      	adds	r3, #1
 800c8e0:	d020      	beq.n	800c924 <fmod+0x60>
 800c8e2:	4632      	mov	r2, r6
 800c8e4:	463b      	mov	r3, r7
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	4639      	mov	r1, r7
 800c8ea:	f7f4 f887 	bl	80009fc <__aeabi_dcmpun>
 800c8ee:	b9c8      	cbnz	r0, 800c924 <fmod+0x60>
 800c8f0:	4642      	mov	r2, r8
 800c8f2:	464b      	mov	r3, r9
 800c8f4:	4640      	mov	r0, r8
 800c8f6:	4649      	mov	r1, r9
 800c8f8:	f7f4 f880 	bl	80009fc <__aeabi_dcmpun>
 800c8fc:	b990      	cbnz	r0, 800c924 <fmod+0x60>
 800c8fe:	2200      	movs	r2, #0
 800c900:	2300      	movs	r3, #0
 800c902:	4630      	mov	r0, r6
 800c904:	4639      	mov	r1, r7
 800c906:	f7f4 f847 	bl	8000998 <__aeabi_dcmpeq>
 800c90a:	b158      	cbz	r0, 800c924 <fmod+0x60>
 800c90c:	f7ff feb4 	bl	800c678 <__errno>
 800c910:	2321      	movs	r3, #33	; 0x21
 800c912:	2200      	movs	r2, #0
 800c914:	6003      	str	r3, [r0, #0]
 800c916:	2300      	movs	r3, #0
 800c918:	4610      	mov	r0, r2
 800c91a:	4619      	mov	r1, r3
 800c91c:	f7f3 fefe 	bl	800071c <__aeabi_ddiv>
 800c920:	4604      	mov	r4, r0
 800c922:	460d      	mov	r5, r1
 800c924:	4620      	mov	r0, r4
 800c926:	4629      	mov	r1, r5
 800c928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c92c:	20000074 	.word	0x20000074

0800c930 <pow>:
 800c930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c934:	461f      	mov	r7, r3
 800c936:	4680      	mov	r8, r0
 800c938:	4689      	mov	r9, r1
 800c93a:	4616      	mov	r6, r2
 800c93c:	f000 f9e4 	bl	800cd08 <__ieee754_pow>
 800c940:	4b4d      	ldr	r3, [pc, #308]	; (800ca78 <pow+0x148>)
 800c942:	4604      	mov	r4, r0
 800c944:	f993 3000 	ldrsb.w	r3, [r3]
 800c948:	460d      	mov	r5, r1
 800c94a:	3301      	adds	r3, #1
 800c94c:	d015      	beq.n	800c97a <pow+0x4a>
 800c94e:	4632      	mov	r2, r6
 800c950:	463b      	mov	r3, r7
 800c952:	4630      	mov	r0, r6
 800c954:	4639      	mov	r1, r7
 800c956:	f7f4 f851 	bl	80009fc <__aeabi_dcmpun>
 800c95a:	b970      	cbnz	r0, 800c97a <pow+0x4a>
 800c95c:	4642      	mov	r2, r8
 800c95e:	464b      	mov	r3, r9
 800c960:	4640      	mov	r0, r8
 800c962:	4649      	mov	r1, r9
 800c964:	f7f4 f84a 	bl	80009fc <__aeabi_dcmpun>
 800c968:	2200      	movs	r2, #0
 800c96a:	2300      	movs	r3, #0
 800c96c:	b148      	cbz	r0, 800c982 <pow+0x52>
 800c96e:	4630      	mov	r0, r6
 800c970:	4639      	mov	r1, r7
 800c972:	f7f4 f811 	bl	8000998 <__aeabi_dcmpeq>
 800c976:	2800      	cmp	r0, #0
 800c978:	d17b      	bne.n	800ca72 <pow+0x142>
 800c97a:	4620      	mov	r0, r4
 800c97c:	4629      	mov	r1, r5
 800c97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c982:	4640      	mov	r0, r8
 800c984:	4649      	mov	r1, r9
 800c986:	f7f4 f807 	bl	8000998 <__aeabi_dcmpeq>
 800c98a:	b1e0      	cbz	r0, 800c9c6 <pow+0x96>
 800c98c:	2200      	movs	r2, #0
 800c98e:	2300      	movs	r3, #0
 800c990:	4630      	mov	r0, r6
 800c992:	4639      	mov	r1, r7
 800c994:	f7f4 f800 	bl	8000998 <__aeabi_dcmpeq>
 800c998:	2800      	cmp	r0, #0
 800c99a:	d16a      	bne.n	800ca72 <pow+0x142>
 800c99c:	4630      	mov	r0, r6
 800c99e:	4639      	mov	r1, r7
 800c9a0:	f000 ff77 	bl	800d892 <finite>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	d0e8      	beq.n	800c97a <pow+0x4a>
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	4639      	mov	r1, r7
 800c9b0:	f7f3 fffc 	bl	80009ac <__aeabi_dcmplt>
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	d0e0      	beq.n	800c97a <pow+0x4a>
 800c9b8:	f7ff fe5e 	bl	800c678 <__errno>
 800c9bc:	2321      	movs	r3, #33	; 0x21
 800c9be:	2400      	movs	r4, #0
 800c9c0:	6003      	str	r3, [r0, #0]
 800c9c2:	4d2e      	ldr	r5, [pc, #184]	; (800ca7c <pow+0x14c>)
 800c9c4:	e7d9      	b.n	800c97a <pow+0x4a>
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	f000 ff62 	bl	800d892 <finite>
 800c9ce:	bba8      	cbnz	r0, 800ca3c <pow+0x10c>
 800c9d0:	4640      	mov	r0, r8
 800c9d2:	4649      	mov	r1, r9
 800c9d4:	f000 ff5d 	bl	800d892 <finite>
 800c9d8:	b380      	cbz	r0, 800ca3c <pow+0x10c>
 800c9da:	4630      	mov	r0, r6
 800c9dc:	4639      	mov	r1, r7
 800c9de:	f000 ff58 	bl	800d892 <finite>
 800c9e2:	b358      	cbz	r0, 800ca3c <pow+0x10c>
 800c9e4:	4622      	mov	r2, r4
 800c9e6:	462b      	mov	r3, r5
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	4629      	mov	r1, r5
 800c9ec:	f7f4 f806 	bl	80009fc <__aeabi_dcmpun>
 800c9f0:	b160      	cbz	r0, 800ca0c <pow+0xdc>
 800c9f2:	f7ff fe41 	bl	800c678 <__errno>
 800c9f6:	2321      	movs	r3, #33	; 0x21
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	6003      	str	r3, [r0, #0]
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	4610      	mov	r0, r2
 800ca00:	4619      	mov	r1, r3
 800ca02:	f7f3 fe8b 	bl	800071c <__aeabi_ddiv>
 800ca06:	4604      	mov	r4, r0
 800ca08:	460d      	mov	r5, r1
 800ca0a:	e7b6      	b.n	800c97a <pow+0x4a>
 800ca0c:	f7ff fe34 	bl	800c678 <__errno>
 800ca10:	2322      	movs	r3, #34	; 0x22
 800ca12:	2200      	movs	r2, #0
 800ca14:	6003      	str	r3, [r0, #0]
 800ca16:	4649      	mov	r1, r9
 800ca18:	2300      	movs	r3, #0
 800ca1a:	4640      	mov	r0, r8
 800ca1c:	f7f3 ffc6 	bl	80009ac <__aeabi_dcmplt>
 800ca20:	2400      	movs	r4, #0
 800ca22:	b148      	cbz	r0, 800ca38 <pow+0x108>
 800ca24:	4630      	mov	r0, r6
 800ca26:	4639      	mov	r1, r7
 800ca28:	f000 ff40 	bl	800d8ac <rint>
 800ca2c:	4632      	mov	r2, r6
 800ca2e:	463b      	mov	r3, r7
 800ca30:	f7f3 ffb2 	bl	8000998 <__aeabi_dcmpeq>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d0c4      	beq.n	800c9c2 <pow+0x92>
 800ca38:	4d11      	ldr	r5, [pc, #68]	; (800ca80 <pow+0x150>)
 800ca3a:	e79e      	b.n	800c97a <pow+0x4a>
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	2300      	movs	r3, #0
 800ca40:	4620      	mov	r0, r4
 800ca42:	4629      	mov	r1, r5
 800ca44:	f7f3 ffa8 	bl	8000998 <__aeabi_dcmpeq>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d096      	beq.n	800c97a <pow+0x4a>
 800ca4c:	4640      	mov	r0, r8
 800ca4e:	4649      	mov	r1, r9
 800ca50:	f000 ff1f 	bl	800d892 <finite>
 800ca54:	2800      	cmp	r0, #0
 800ca56:	d090      	beq.n	800c97a <pow+0x4a>
 800ca58:	4630      	mov	r0, r6
 800ca5a:	4639      	mov	r1, r7
 800ca5c:	f000 ff19 	bl	800d892 <finite>
 800ca60:	2800      	cmp	r0, #0
 800ca62:	d08a      	beq.n	800c97a <pow+0x4a>
 800ca64:	f7ff fe08 	bl	800c678 <__errno>
 800ca68:	2322      	movs	r3, #34	; 0x22
 800ca6a:	2400      	movs	r4, #0
 800ca6c:	2500      	movs	r5, #0
 800ca6e:	6003      	str	r3, [r0, #0]
 800ca70:	e783      	b.n	800c97a <pow+0x4a>
 800ca72:	2400      	movs	r4, #0
 800ca74:	4d03      	ldr	r5, [pc, #12]	; (800ca84 <pow+0x154>)
 800ca76:	e780      	b.n	800c97a <pow+0x4a>
 800ca78:	20000074 	.word	0x20000074
 800ca7c:	fff00000 	.word	0xfff00000
 800ca80:	7ff00000 	.word	0x7ff00000
 800ca84:	3ff00000 	.word	0x3ff00000

0800ca88 <sqrt>:
 800ca88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8a:	4606      	mov	r6, r0
 800ca8c:	460f      	mov	r7, r1
 800ca8e:	f000 fe51 	bl	800d734 <__ieee754_sqrt>
 800ca92:	4b12      	ldr	r3, [pc, #72]	; (800cadc <sqrt+0x54>)
 800ca94:	4604      	mov	r4, r0
 800ca96:	f993 3000 	ldrsb.w	r3, [r3]
 800ca9a:	460d      	mov	r5, r1
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	d019      	beq.n	800cad4 <sqrt+0x4c>
 800caa0:	4632      	mov	r2, r6
 800caa2:	463b      	mov	r3, r7
 800caa4:	4630      	mov	r0, r6
 800caa6:	4639      	mov	r1, r7
 800caa8:	f7f3 ffa8 	bl	80009fc <__aeabi_dcmpun>
 800caac:	b990      	cbnz	r0, 800cad4 <sqrt+0x4c>
 800caae:	2200      	movs	r2, #0
 800cab0:	2300      	movs	r3, #0
 800cab2:	4630      	mov	r0, r6
 800cab4:	4639      	mov	r1, r7
 800cab6:	f7f3 ff79 	bl	80009ac <__aeabi_dcmplt>
 800caba:	b158      	cbz	r0, 800cad4 <sqrt+0x4c>
 800cabc:	f7ff fddc 	bl	800c678 <__errno>
 800cac0:	2321      	movs	r3, #33	; 0x21
 800cac2:	2200      	movs	r2, #0
 800cac4:	6003      	str	r3, [r0, #0]
 800cac6:	2300      	movs	r3, #0
 800cac8:	4610      	mov	r0, r2
 800caca:	4619      	mov	r1, r3
 800cacc:	f7f3 fe26 	bl	800071c <__aeabi_ddiv>
 800cad0:	4604      	mov	r4, r0
 800cad2:	460d      	mov	r5, r1
 800cad4:	4620      	mov	r0, r4
 800cad6:	4629      	mov	r1, r5
 800cad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cada:	bf00      	nop
 800cadc:	20000074 	.word	0x20000074

0800cae0 <__ieee754_fmod>:
 800cae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cae4:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 800cae8:	4607      	mov	r7, r0
 800caea:	461d      	mov	r5, r3
 800caec:	4618      	mov	r0, r3
 800caee:	ea58 0302 	orrs.w	r3, r8, r2
 800caf2:	460e      	mov	r6, r1
 800caf4:	4614      	mov	r4, r2
 800caf6:	4694      	mov	ip, r2
 800caf8:	4696      	mov	lr, r2
 800cafa:	d00d      	beq.n	800cb18 <__ieee754_fmod+0x38>
 800cafc:	4a7b      	ldr	r2, [pc, #492]	; (800ccec <__ieee754_fmod+0x20c>)
 800cafe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb02:	4293      	cmp	r3, r2
 800cb04:	468a      	mov	sl, r1
 800cb06:	dc07      	bgt.n	800cb18 <__ieee754_fmod+0x38>
 800cb08:	4262      	negs	r2, r4
 800cb0a:	4979      	ldr	r1, [pc, #484]	; (800ccf0 <__ieee754_fmod+0x210>)
 800cb0c:	4322      	orrs	r2, r4
 800cb0e:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
 800cb12:	428a      	cmp	r2, r1
 800cb14:	460a      	mov	r2, r1
 800cb16:	d90c      	bls.n	800cb32 <__ieee754_fmod+0x52>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	4622      	mov	r2, r4
 800cb1c:	4638      	mov	r0, r7
 800cb1e:	4631      	mov	r1, r6
 800cb20:	f7f3 fcd2 	bl	80004c8 <__aeabi_dmul>
 800cb24:	4602      	mov	r2, r0
 800cb26:	460b      	mov	r3, r1
 800cb28:	f7f3 fdf8 	bl	800071c <__aeabi_ddiv>
 800cb2c:	4607      	mov	r7, r0
 800cb2e:	460e      	mov	r6, r1
 800cb30:	e00f      	b.n	800cb52 <__ieee754_fmod+0x72>
 800cb32:	4543      	cmp	r3, r8
 800cb34:	46b9      	mov	r9, r7
 800cb36:	4639      	mov	r1, r7
 800cb38:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
 800cb3c:	dc0d      	bgt.n	800cb5a <__ieee754_fmod+0x7a>
 800cb3e:	db08      	blt.n	800cb52 <__ieee754_fmod+0x72>
 800cb40:	4567      	cmp	r7, ip
 800cb42:	d306      	bcc.n	800cb52 <__ieee754_fmod+0x72>
 800cb44:	d109      	bne.n	800cb5a <__ieee754_fmod+0x7a>
 800cb46:	4a6b      	ldr	r2, [pc, #428]	; (800ccf4 <__ieee754_fmod+0x214>)
 800cb48:	0fe4      	lsrs	r4, r4, #31
 800cb4a:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 800cb4e:	e9d4 7600 	ldrd	r7, r6, [r4]
 800cb52:	4638      	mov	r0, r7
 800cb54:	4631      	mov	r1, r6
 800cb56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb5a:	ea1a 0f02 	tst.w	sl, r2
 800cb5e:	d14a      	bne.n	800cbf6 <__ieee754_fmod+0x116>
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d141      	bne.n	800cbe8 <__ieee754_fmod+0x108>
 800cb64:	464a      	mov	r2, r9
 800cb66:	4864      	ldr	r0, [pc, #400]	; (800ccf8 <__ieee754_fmod+0x218>)
 800cb68:	2a00      	cmp	r2, #0
 800cb6a:	dc3a      	bgt.n	800cbe2 <__ieee754_fmod+0x102>
 800cb6c:	4a60      	ldr	r2, [pc, #384]	; (800ccf0 <__ieee754_fmod+0x210>)
 800cb6e:	402a      	ands	r2, r5
 800cb70:	2a00      	cmp	r2, #0
 800cb72:	d14f      	bne.n	800cc14 <__ieee754_fmod+0x134>
 800cb74:	f1b8 0f00 	cmp.w	r8, #0
 800cb78:	d144      	bne.n	800cc04 <__ieee754_fmod+0x124>
 800cb7a:	4666      	mov	r6, ip
 800cb7c:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800cb80:	2e00      	cmp	r6, #0
 800cb82:	dc3c      	bgt.n	800cbfe <__ieee754_fmod+0x11e>
 800cb84:	4e5d      	ldr	r6, [pc, #372]	; (800ccfc <__ieee754_fmod+0x21c>)
 800cb86:	42b0      	cmp	r0, r6
 800cb88:	db49      	blt.n	800cc1e <__ieee754_fmod+0x13e>
 800cb8a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800cb8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb92:	4e5a      	ldr	r6, [pc, #360]	; (800ccfc <__ieee754_fmod+0x21c>)
 800cb94:	42b2      	cmp	r2, r6
 800cb96:	db54      	blt.n	800cc42 <__ieee754_fmod+0x162>
 800cb98:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800cb9c:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 800cba0:	1a80      	subs	r0, r0, r2
 800cba2:	1b5e      	subs	r6, r3, r5
 800cba4:	eba1 070e 	sub.w	r7, r1, lr
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	d161      	bne.n	800cc70 <__ieee754_fmod+0x190>
 800cbac:	4571      	cmp	r1, lr
 800cbae:	bf38      	it	cc
 800cbb0:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800cbb4:	2e00      	cmp	r6, #0
 800cbb6:	bfa4      	itt	ge
 800cbb8:	4639      	movge	r1, r7
 800cbba:	4633      	movge	r3, r6
 800cbbc:	ea53 0001 	orrs.w	r0, r3, r1
 800cbc0:	d0c1      	beq.n	800cb46 <__ieee754_fmod+0x66>
 800cbc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cbc6:	db68      	blt.n	800cc9a <__ieee754_fmod+0x1ba>
 800cbc8:	484c      	ldr	r0, [pc, #304]	; (800ccfc <__ieee754_fmod+0x21c>)
 800cbca:	4282      	cmp	r2, r0
 800cbcc:	db6b      	blt.n	800cca6 <__ieee754_fmod+0x1c6>
 800cbce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cbd2:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800cbd6:	431c      	orrs	r4, r3
 800cbd8:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
 800cbdc:	460f      	mov	r7, r1
 800cbde:	464e      	mov	r6, r9
 800cbe0:	e7b7      	b.n	800cb52 <__ieee754_fmod+0x72>
 800cbe2:	3801      	subs	r0, #1
 800cbe4:	0052      	lsls	r2, r2, #1
 800cbe6:	e7bf      	b.n	800cb68 <__ieee754_fmod+0x88>
 800cbe8:	4844      	ldr	r0, [pc, #272]	; (800ccfc <__ieee754_fmod+0x21c>)
 800cbea:	02da      	lsls	r2, r3, #11
 800cbec:	2a00      	cmp	r2, #0
 800cbee:	ddbd      	ble.n	800cb6c <__ieee754_fmod+0x8c>
 800cbf0:	3801      	subs	r0, #1
 800cbf2:	0052      	lsls	r2, r2, #1
 800cbf4:	e7fa      	b.n	800cbec <__ieee754_fmod+0x10c>
 800cbf6:	1518      	asrs	r0, r3, #20
 800cbf8:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800cbfc:	e7b6      	b.n	800cb6c <__ieee754_fmod+0x8c>
 800cbfe:	3a01      	subs	r2, #1
 800cc00:	0076      	lsls	r6, r6, #1
 800cc02:	e7bd      	b.n	800cb80 <__ieee754_fmod+0xa0>
 800cc04:	4a3d      	ldr	r2, [pc, #244]	; (800ccfc <__ieee754_fmod+0x21c>)
 800cc06:	ea4f 26c8 	mov.w	r6, r8, lsl #11
 800cc0a:	2e00      	cmp	r6, #0
 800cc0c:	ddba      	ble.n	800cb84 <__ieee754_fmod+0xa4>
 800cc0e:	3a01      	subs	r2, #1
 800cc10:	0076      	lsls	r6, r6, #1
 800cc12:	e7fa      	b.n	800cc0a <__ieee754_fmod+0x12a>
 800cc14:	ea4f 5228 	mov.w	r2, r8, asr #20
 800cc18:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cc1c:	e7b2      	b.n	800cb84 <__ieee754_fmod+0xa4>
 800cc1e:	1a31      	subs	r1, r6, r0
 800cc20:	291f      	cmp	r1, #31
 800cc22:	dc08      	bgt.n	800cc36 <__ieee754_fmod+0x156>
 800cc24:	f200 461e 	addw	r6, r0, #1054	; 0x41e
 800cc28:	408b      	lsls	r3, r1
 800cc2a:	fa29 f606 	lsr.w	r6, r9, r6
 800cc2e:	4333      	orrs	r3, r6
 800cc30:	fa09 f101 	lsl.w	r1, r9, r1
 800cc34:	e7ad      	b.n	800cb92 <__ieee754_fmod+0xb2>
 800cc36:	4b32      	ldr	r3, [pc, #200]	; (800cd00 <__ieee754_fmod+0x220>)
 800cc38:	2100      	movs	r1, #0
 800cc3a:	1a1b      	subs	r3, r3, r0
 800cc3c:	fa09 f303 	lsl.w	r3, r9, r3
 800cc40:	e7a7      	b.n	800cb92 <__ieee754_fmod+0xb2>
 800cc42:	eba6 0e02 	sub.w	lr, r6, r2
 800cc46:	f1be 0f1f 	cmp.w	lr, #31
 800cc4a:	dc0a      	bgt.n	800cc62 <__ieee754_fmod+0x182>
 800cc4c:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 800cc50:	fa08 f80e 	lsl.w	r8, r8, lr
 800cc54:	fa2c f505 	lsr.w	r5, ip, r5
 800cc58:	ea45 0508 	orr.w	r5, r5, r8
 800cc5c:	fa0c fe0e 	lsl.w	lr, ip, lr
 800cc60:	e79e      	b.n	800cba0 <__ieee754_fmod+0xc0>
 800cc62:	4d27      	ldr	r5, [pc, #156]	; (800cd00 <__ieee754_fmod+0x220>)
 800cc64:	f04f 0e00 	mov.w	lr, #0
 800cc68:	1aad      	subs	r5, r5, r2
 800cc6a:	fa0c f505 	lsl.w	r5, ip, r5
 800cc6e:	e797      	b.n	800cba0 <__ieee754_fmod+0xc0>
 800cc70:	4571      	cmp	r1, lr
 800cc72:	bf38      	it	cc
 800cc74:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800cc78:	2e00      	cmp	r6, #0
 800cc7a:	da05      	bge.n	800cc88 <__ieee754_fmod+0x1a8>
 800cc7c:	0fce      	lsrs	r6, r1, #31
 800cc7e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800cc82:	0049      	lsls	r1, r1, #1
 800cc84:	3801      	subs	r0, #1
 800cc86:	e78c      	b.n	800cba2 <__ieee754_fmod+0xc2>
 800cc88:	ea56 0307 	orrs.w	r3, r6, r7
 800cc8c:	f43f af5b 	beq.w	800cb46 <__ieee754_fmod+0x66>
 800cc90:	0ffb      	lsrs	r3, r7, #31
 800cc92:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800cc96:	0079      	lsls	r1, r7, #1
 800cc98:	e7f4      	b.n	800cc84 <__ieee754_fmod+0x1a4>
 800cc9a:	0fc8      	lsrs	r0, r1, #31
 800cc9c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800cca0:	0049      	lsls	r1, r1, #1
 800cca2:	3a01      	subs	r2, #1
 800cca4:	e78d      	b.n	800cbc2 <__ieee754_fmod+0xe2>
 800cca6:	1a80      	subs	r0, r0, r2
 800cca8:	2814      	cmp	r0, #20
 800ccaa:	dc0a      	bgt.n	800ccc2 <__ieee754_fmod+0x1e2>
 800ccac:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800ccb0:	fa03 f202 	lsl.w	r2, r3, r2
 800ccb4:	40c1      	lsrs	r1, r0
 800ccb6:	430a      	orrs	r2, r1
 800ccb8:	4103      	asrs	r3, r0
 800ccba:	4610      	mov	r0, r2
 800ccbc:	ea43 0104 	orr.w	r1, r3, r4
 800ccc0:	e734      	b.n	800cb2c <__ieee754_fmod+0x4c>
 800ccc2:	281f      	cmp	r0, #31
 800ccc4:	dc07      	bgt.n	800ccd6 <__ieee754_fmod+0x1f6>
 800ccc6:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800ccca:	40c1      	lsrs	r1, r0
 800cccc:	fa03 f202 	lsl.w	r2, r3, r2
 800ccd0:	430a      	orrs	r2, r1
 800ccd2:	4623      	mov	r3, r4
 800ccd4:	e7f1      	b.n	800ccba <__ieee754_fmod+0x1da>
 800ccd6:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800ccda:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ccde:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800cce2:	32e2      	adds	r2, #226	; 0xe2
 800cce4:	fa43 f202 	asr.w	r2, r3, r2
 800cce8:	e7f3      	b.n	800ccd2 <__ieee754_fmod+0x1f2>
 800ccea:	bf00      	nop
 800ccec:	7fefffff 	.word	0x7fefffff
 800ccf0:	7ff00000 	.word	0x7ff00000
 800ccf4:	0800dc38 	.word	0x0800dc38
 800ccf8:	fffffbed 	.word	0xfffffbed
 800ccfc:	fffffc02 	.word	0xfffffc02
 800cd00:	fffffbe2 	.word	0xfffffbe2
 800cd04:	00000000 	.word	0x00000000

0800cd08 <__ieee754_pow>:
 800cd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd0c:	b093      	sub	sp, #76	; 0x4c
 800cd0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd12:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800cd16:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800cd1a:	ea55 0302 	orrs.w	r3, r5, r2
 800cd1e:	4607      	mov	r7, r0
 800cd20:	4688      	mov	r8, r1
 800cd22:	f000 84bf 	beq.w	800d6a4 <__ieee754_pow+0x99c>
 800cd26:	4b7e      	ldr	r3, [pc, #504]	; (800cf20 <__ieee754_pow+0x218>)
 800cd28:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800cd2c:	429c      	cmp	r4, r3
 800cd2e:	4689      	mov	r9, r1
 800cd30:	4682      	mov	sl, r0
 800cd32:	dc09      	bgt.n	800cd48 <__ieee754_pow+0x40>
 800cd34:	d103      	bne.n	800cd3e <__ieee754_pow+0x36>
 800cd36:	b978      	cbnz	r0, 800cd58 <__ieee754_pow+0x50>
 800cd38:	42a5      	cmp	r5, r4
 800cd3a:	dd02      	ble.n	800cd42 <__ieee754_pow+0x3a>
 800cd3c:	e00c      	b.n	800cd58 <__ieee754_pow+0x50>
 800cd3e:	429d      	cmp	r5, r3
 800cd40:	dc02      	bgt.n	800cd48 <__ieee754_pow+0x40>
 800cd42:	429d      	cmp	r5, r3
 800cd44:	d10e      	bne.n	800cd64 <__ieee754_pow+0x5c>
 800cd46:	b16a      	cbz	r2, 800cd64 <__ieee754_pow+0x5c>
 800cd48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cd4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cd50:	ea54 030a 	orrs.w	r3, r4, sl
 800cd54:	f000 84a6 	beq.w	800d6a4 <__ieee754_pow+0x99c>
 800cd58:	4872      	ldr	r0, [pc, #456]	; (800cf24 <__ieee754_pow+0x21c>)
 800cd5a:	b013      	add	sp, #76	; 0x4c
 800cd5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd60:	f000 bd9e 	b.w	800d8a0 <nan>
 800cd64:	f1b9 0f00 	cmp.w	r9, #0
 800cd68:	da39      	bge.n	800cdde <__ieee754_pow+0xd6>
 800cd6a:	4b6f      	ldr	r3, [pc, #444]	; (800cf28 <__ieee754_pow+0x220>)
 800cd6c:	429d      	cmp	r5, r3
 800cd6e:	dc54      	bgt.n	800ce1a <__ieee754_pow+0x112>
 800cd70:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cd74:	429d      	cmp	r5, r3
 800cd76:	f340 84a6 	ble.w	800d6c6 <__ieee754_pow+0x9be>
 800cd7a:	152b      	asrs	r3, r5, #20
 800cd7c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cd80:	2b14      	cmp	r3, #20
 800cd82:	dd0f      	ble.n	800cda4 <__ieee754_pow+0x9c>
 800cd84:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cd88:	fa22 f103 	lsr.w	r1, r2, r3
 800cd8c:	fa01 f303 	lsl.w	r3, r1, r3
 800cd90:	4293      	cmp	r3, r2
 800cd92:	f040 8498 	bne.w	800d6c6 <__ieee754_pow+0x9be>
 800cd96:	f001 0101 	and.w	r1, r1, #1
 800cd9a:	f1c1 0302 	rsb	r3, r1, #2
 800cd9e:	9300      	str	r3, [sp, #0]
 800cda0:	b182      	cbz	r2, 800cdc4 <__ieee754_pow+0xbc>
 800cda2:	e05e      	b.n	800ce62 <__ieee754_pow+0x15a>
 800cda4:	2a00      	cmp	r2, #0
 800cda6:	d15a      	bne.n	800ce5e <__ieee754_pow+0x156>
 800cda8:	f1c3 0314 	rsb	r3, r3, #20
 800cdac:	fa45 f103 	asr.w	r1, r5, r3
 800cdb0:	fa01 f303 	lsl.w	r3, r1, r3
 800cdb4:	42ab      	cmp	r3, r5
 800cdb6:	f040 8483 	bne.w	800d6c0 <__ieee754_pow+0x9b8>
 800cdba:	f001 0101 	and.w	r1, r1, #1
 800cdbe:	f1c1 0302 	rsb	r3, r1, #2
 800cdc2:	9300      	str	r3, [sp, #0]
 800cdc4:	4b59      	ldr	r3, [pc, #356]	; (800cf2c <__ieee754_pow+0x224>)
 800cdc6:	429d      	cmp	r5, r3
 800cdc8:	d130      	bne.n	800ce2c <__ieee754_pow+0x124>
 800cdca:	2e00      	cmp	r6, #0
 800cdcc:	f280 8474 	bge.w	800d6b8 <__ieee754_pow+0x9b0>
 800cdd0:	463a      	mov	r2, r7
 800cdd2:	4643      	mov	r3, r8
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	4955      	ldr	r1, [pc, #340]	; (800cf2c <__ieee754_pow+0x224>)
 800cdd8:	f7f3 fca0 	bl	800071c <__aeabi_ddiv>
 800cddc:	e02f      	b.n	800ce3e <__ieee754_pow+0x136>
 800cdde:	2300      	movs	r3, #0
 800cde0:	9300      	str	r3, [sp, #0]
 800cde2:	2a00      	cmp	r2, #0
 800cde4:	d13d      	bne.n	800ce62 <__ieee754_pow+0x15a>
 800cde6:	4b4e      	ldr	r3, [pc, #312]	; (800cf20 <__ieee754_pow+0x218>)
 800cde8:	429d      	cmp	r5, r3
 800cdea:	d1eb      	bne.n	800cdc4 <__ieee754_pow+0xbc>
 800cdec:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cdf0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cdf4:	ea53 030a 	orrs.w	r3, r3, sl
 800cdf8:	f000 8454 	beq.w	800d6a4 <__ieee754_pow+0x99c>
 800cdfc:	4b4c      	ldr	r3, [pc, #304]	; (800cf30 <__ieee754_pow+0x228>)
 800cdfe:	429c      	cmp	r4, r3
 800ce00:	dd0d      	ble.n	800ce1e <__ieee754_pow+0x116>
 800ce02:	2e00      	cmp	r6, #0
 800ce04:	f280 8454 	bge.w	800d6b0 <__ieee754_pow+0x9a8>
 800ce08:	f04f 0b00 	mov.w	fp, #0
 800ce0c:	f04f 0c00 	mov.w	ip, #0
 800ce10:	4658      	mov	r0, fp
 800ce12:	4661      	mov	r1, ip
 800ce14:	b013      	add	sp, #76	; 0x4c
 800ce16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce1a:	2302      	movs	r3, #2
 800ce1c:	e7e0      	b.n	800cde0 <__ieee754_pow+0xd8>
 800ce1e:	2e00      	cmp	r6, #0
 800ce20:	daf2      	bge.n	800ce08 <__ieee754_pow+0x100>
 800ce22:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800ce26:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800ce2a:	e7f1      	b.n	800ce10 <__ieee754_pow+0x108>
 800ce2c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800ce30:	d108      	bne.n	800ce44 <__ieee754_pow+0x13c>
 800ce32:	463a      	mov	r2, r7
 800ce34:	4643      	mov	r3, r8
 800ce36:	4638      	mov	r0, r7
 800ce38:	4641      	mov	r1, r8
 800ce3a:	f7f3 fb45 	bl	80004c8 <__aeabi_dmul>
 800ce3e:	4683      	mov	fp, r0
 800ce40:	468c      	mov	ip, r1
 800ce42:	e7e5      	b.n	800ce10 <__ieee754_pow+0x108>
 800ce44:	4b3b      	ldr	r3, [pc, #236]	; (800cf34 <__ieee754_pow+0x22c>)
 800ce46:	429e      	cmp	r6, r3
 800ce48:	d10b      	bne.n	800ce62 <__ieee754_pow+0x15a>
 800ce4a:	f1b9 0f00 	cmp.w	r9, #0
 800ce4e:	db08      	blt.n	800ce62 <__ieee754_pow+0x15a>
 800ce50:	4638      	mov	r0, r7
 800ce52:	4641      	mov	r1, r8
 800ce54:	b013      	add	sp, #76	; 0x4c
 800ce56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce5a:	f000 bc6b 	b.w	800d734 <__ieee754_sqrt>
 800ce5e:	2300      	movs	r3, #0
 800ce60:	9300      	str	r3, [sp, #0]
 800ce62:	4638      	mov	r0, r7
 800ce64:	4641      	mov	r1, r8
 800ce66:	f000 fd11 	bl	800d88c <fabs>
 800ce6a:	4683      	mov	fp, r0
 800ce6c:	468c      	mov	ip, r1
 800ce6e:	f1ba 0f00 	cmp.w	sl, #0
 800ce72:	d129      	bne.n	800cec8 <__ieee754_pow+0x1c0>
 800ce74:	b124      	cbz	r4, 800ce80 <__ieee754_pow+0x178>
 800ce76:	4b2d      	ldr	r3, [pc, #180]	; (800cf2c <__ieee754_pow+0x224>)
 800ce78:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d123      	bne.n	800cec8 <__ieee754_pow+0x1c0>
 800ce80:	2e00      	cmp	r6, #0
 800ce82:	da07      	bge.n	800ce94 <__ieee754_pow+0x18c>
 800ce84:	465a      	mov	r2, fp
 800ce86:	4663      	mov	r3, ip
 800ce88:	2000      	movs	r0, #0
 800ce8a:	4928      	ldr	r1, [pc, #160]	; (800cf2c <__ieee754_pow+0x224>)
 800ce8c:	f7f3 fc46 	bl	800071c <__aeabi_ddiv>
 800ce90:	4683      	mov	fp, r0
 800ce92:	468c      	mov	ip, r1
 800ce94:	f1b9 0f00 	cmp.w	r9, #0
 800ce98:	daba      	bge.n	800ce10 <__ieee754_pow+0x108>
 800ce9a:	9b00      	ldr	r3, [sp, #0]
 800ce9c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cea0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cea4:	4323      	orrs	r3, r4
 800cea6:	d108      	bne.n	800ceba <__ieee754_pow+0x1b2>
 800cea8:	465a      	mov	r2, fp
 800ceaa:	4663      	mov	r3, ip
 800ceac:	4658      	mov	r0, fp
 800ceae:	4661      	mov	r1, ip
 800ceb0:	f7f3 f952 	bl	8000158 <__aeabi_dsub>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	460b      	mov	r3, r1
 800ceb8:	e78e      	b.n	800cdd8 <__ieee754_pow+0xd0>
 800ceba:	9b00      	ldr	r3, [sp, #0]
 800cebc:	2b01      	cmp	r3, #1
 800cebe:	d1a7      	bne.n	800ce10 <__ieee754_pow+0x108>
 800cec0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800cec4:	469c      	mov	ip, r3
 800cec6:	e7a3      	b.n	800ce10 <__ieee754_pow+0x108>
 800cec8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800cecc:	3b01      	subs	r3, #1
 800cece:	930c      	str	r3, [sp, #48]	; 0x30
 800ced0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ced2:	9b00      	ldr	r3, [sp, #0]
 800ced4:	4313      	orrs	r3, r2
 800ced6:	d104      	bne.n	800cee2 <__ieee754_pow+0x1da>
 800ced8:	463a      	mov	r2, r7
 800ceda:	4643      	mov	r3, r8
 800cedc:	4638      	mov	r0, r7
 800cede:	4641      	mov	r1, r8
 800cee0:	e7e6      	b.n	800ceb0 <__ieee754_pow+0x1a8>
 800cee2:	4b15      	ldr	r3, [pc, #84]	; (800cf38 <__ieee754_pow+0x230>)
 800cee4:	429d      	cmp	r5, r3
 800cee6:	f340 80f9 	ble.w	800d0dc <__ieee754_pow+0x3d4>
 800ceea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ceee:	429d      	cmp	r5, r3
 800cef0:	4b0f      	ldr	r3, [pc, #60]	; (800cf30 <__ieee754_pow+0x228>)
 800cef2:	dd09      	ble.n	800cf08 <__ieee754_pow+0x200>
 800cef4:	429c      	cmp	r4, r3
 800cef6:	dc0c      	bgt.n	800cf12 <__ieee754_pow+0x20a>
 800cef8:	2e00      	cmp	r6, #0
 800cefa:	da85      	bge.n	800ce08 <__ieee754_pow+0x100>
 800cefc:	a306      	add	r3, pc, #24	; (adr r3, 800cf18 <__ieee754_pow+0x210>)
 800cefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf02:	4610      	mov	r0, r2
 800cf04:	4619      	mov	r1, r3
 800cf06:	e798      	b.n	800ce3a <__ieee754_pow+0x132>
 800cf08:	429c      	cmp	r4, r3
 800cf0a:	dbf5      	blt.n	800cef8 <__ieee754_pow+0x1f0>
 800cf0c:	4b07      	ldr	r3, [pc, #28]	; (800cf2c <__ieee754_pow+0x224>)
 800cf0e:	429c      	cmp	r4, r3
 800cf10:	dd14      	ble.n	800cf3c <__ieee754_pow+0x234>
 800cf12:	2e00      	cmp	r6, #0
 800cf14:	dcf2      	bgt.n	800cefc <__ieee754_pow+0x1f4>
 800cf16:	e777      	b.n	800ce08 <__ieee754_pow+0x100>
 800cf18:	8800759c 	.word	0x8800759c
 800cf1c:	7e37e43c 	.word	0x7e37e43c
 800cf20:	7ff00000 	.word	0x7ff00000
 800cf24:	0800dc48 	.word	0x0800dc48
 800cf28:	433fffff 	.word	0x433fffff
 800cf2c:	3ff00000 	.word	0x3ff00000
 800cf30:	3fefffff 	.word	0x3fefffff
 800cf34:	3fe00000 	.word	0x3fe00000
 800cf38:	41e00000 	.word	0x41e00000
 800cf3c:	4661      	mov	r1, ip
 800cf3e:	2200      	movs	r2, #0
 800cf40:	4658      	mov	r0, fp
 800cf42:	4b61      	ldr	r3, [pc, #388]	; (800d0c8 <__ieee754_pow+0x3c0>)
 800cf44:	f7f3 f908 	bl	8000158 <__aeabi_dsub>
 800cf48:	a355      	add	r3, pc, #340	; (adr r3, 800d0a0 <__ieee754_pow+0x398>)
 800cf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4e:	4604      	mov	r4, r0
 800cf50:	460d      	mov	r5, r1
 800cf52:	f7f3 fab9 	bl	80004c8 <__aeabi_dmul>
 800cf56:	a354      	add	r3, pc, #336	; (adr r3, 800d0a8 <__ieee754_pow+0x3a0>)
 800cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5c:	4606      	mov	r6, r0
 800cf5e:	460f      	mov	r7, r1
 800cf60:	4620      	mov	r0, r4
 800cf62:	4629      	mov	r1, r5
 800cf64:	f7f3 fab0 	bl	80004c8 <__aeabi_dmul>
 800cf68:	2200      	movs	r2, #0
 800cf6a:	4682      	mov	sl, r0
 800cf6c:	468b      	mov	fp, r1
 800cf6e:	4620      	mov	r0, r4
 800cf70:	4629      	mov	r1, r5
 800cf72:	4b56      	ldr	r3, [pc, #344]	; (800d0cc <__ieee754_pow+0x3c4>)
 800cf74:	f7f3 faa8 	bl	80004c8 <__aeabi_dmul>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	a14c      	add	r1, pc, #304	; (adr r1, 800d0b0 <__ieee754_pow+0x3a8>)
 800cf7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf82:	f7f3 f8e9 	bl	8000158 <__aeabi_dsub>
 800cf86:	4622      	mov	r2, r4
 800cf88:	462b      	mov	r3, r5
 800cf8a:	f7f3 fa9d 	bl	80004c8 <__aeabi_dmul>
 800cf8e:	4602      	mov	r2, r0
 800cf90:	460b      	mov	r3, r1
 800cf92:	2000      	movs	r0, #0
 800cf94:	494e      	ldr	r1, [pc, #312]	; (800d0d0 <__ieee754_pow+0x3c8>)
 800cf96:	f7f3 f8df 	bl	8000158 <__aeabi_dsub>
 800cf9a:	4622      	mov	r2, r4
 800cf9c:	462b      	mov	r3, r5
 800cf9e:	4680      	mov	r8, r0
 800cfa0:	4689      	mov	r9, r1
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	f7f3 fa8f 	bl	80004c8 <__aeabi_dmul>
 800cfaa:	4602      	mov	r2, r0
 800cfac:	460b      	mov	r3, r1
 800cfae:	4640      	mov	r0, r8
 800cfb0:	4649      	mov	r1, r9
 800cfb2:	f7f3 fa89 	bl	80004c8 <__aeabi_dmul>
 800cfb6:	a340      	add	r3, pc, #256	; (adr r3, 800d0b8 <__ieee754_pow+0x3b0>)
 800cfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbc:	f7f3 fa84 	bl	80004c8 <__aeabi_dmul>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	4650      	mov	r0, sl
 800cfc6:	4659      	mov	r1, fp
 800cfc8:	f7f3 f8c6 	bl	8000158 <__aeabi_dsub>
 800cfcc:	f04f 0a00 	mov.w	sl, #0
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	460d      	mov	r5, r1
 800cfd8:	4630      	mov	r0, r6
 800cfda:	4639      	mov	r1, r7
 800cfdc:	f7f3 f8be 	bl	800015c <__adddf3>
 800cfe0:	4632      	mov	r2, r6
 800cfe2:	463b      	mov	r3, r7
 800cfe4:	4650      	mov	r0, sl
 800cfe6:	468b      	mov	fp, r1
 800cfe8:	f7f3 f8b6 	bl	8000158 <__aeabi_dsub>
 800cfec:	4602      	mov	r2, r0
 800cfee:	460b      	mov	r3, r1
 800cff0:	4620      	mov	r0, r4
 800cff2:	4629      	mov	r1, r5
 800cff4:	f7f3 f8b0 	bl	8000158 <__aeabi_dsub>
 800cff8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cffc:	9b00      	ldr	r3, [sp, #0]
 800cffe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d000:	3b01      	subs	r3, #1
 800d002:	4313      	orrs	r3, r2
 800d004:	f04f 0600 	mov.w	r6, #0
 800d008:	f04f 0200 	mov.w	r2, #0
 800d00c:	bf0c      	ite	eq
 800d00e:	4b31      	ldreq	r3, [pc, #196]	; (800d0d4 <__ieee754_pow+0x3cc>)
 800d010:	4b2d      	ldrne	r3, [pc, #180]	; (800d0c8 <__ieee754_pow+0x3c0>)
 800d012:	4604      	mov	r4, r0
 800d014:	460d      	mov	r5, r1
 800d016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d01a:	e9cd 2300 	strd	r2, r3, [sp]
 800d01e:	4632      	mov	r2, r6
 800d020:	463b      	mov	r3, r7
 800d022:	f7f3 f899 	bl	8000158 <__aeabi_dsub>
 800d026:	4652      	mov	r2, sl
 800d028:	465b      	mov	r3, fp
 800d02a:	f7f3 fa4d 	bl	80004c8 <__aeabi_dmul>
 800d02e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d032:	4680      	mov	r8, r0
 800d034:	4689      	mov	r9, r1
 800d036:	4620      	mov	r0, r4
 800d038:	4629      	mov	r1, r5
 800d03a:	f7f3 fa45 	bl	80004c8 <__aeabi_dmul>
 800d03e:	4602      	mov	r2, r0
 800d040:	460b      	mov	r3, r1
 800d042:	4640      	mov	r0, r8
 800d044:	4649      	mov	r1, r9
 800d046:	f7f3 f889 	bl	800015c <__adddf3>
 800d04a:	4632      	mov	r2, r6
 800d04c:	463b      	mov	r3, r7
 800d04e:	4680      	mov	r8, r0
 800d050:	4689      	mov	r9, r1
 800d052:	4650      	mov	r0, sl
 800d054:	4659      	mov	r1, fp
 800d056:	f7f3 fa37 	bl	80004c8 <__aeabi_dmul>
 800d05a:	4604      	mov	r4, r0
 800d05c:	460d      	mov	r5, r1
 800d05e:	460b      	mov	r3, r1
 800d060:	4602      	mov	r2, r0
 800d062:	4649      	mov	r1, r9
 800d064:	4640      	mov	r0, r8
 800d066:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d06a:	f7f3 f877 	bl	800015c <__adddf3>
 800d06e:	4b1a      	ldr	r3, [pc, #104]	; (800d0d8 <__ieee754_pow+0x3d0>)
 800d070:	4682      	mov	sl, r0
 800d072:	4299      	cmp	r1, r3
 800d074:	460f      	mov	r7, r1
 800d076:	460e      	mov	r6, r1
 800d078:	f340 82ed 	ble.w	800d656 <__ieee754_pow+0x94e>
 800d07c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d080:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d084:	4303      	orrs	r3, r0
 800d086:	f000 81e7 	beq.w	800d458 <__ieee754_pow+0x750>
 800d08a:	a30d      	add	r3, pc, #52	; (adr r3, 800d0c0 <__ieee754_pow+0x3b8>)
 800d08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d090:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d094:	f7f3 fa18 	bl	80004c8 <__aeabi_dmul>
 800d098:	a309      	add	r3, pc, #36	; (adr r3, 800d0c0 <__ieee754_pow+0x3b8>)
 800d09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09e:	e6cc      	b.n	800ce3a <__ieee754_pow+0x132>
 800d0a0:	60000000 	.word	0x60000000
 800d0a4:	3ff71547 	.word	0x3ff71547
 800d0a8:	f85ddf44 	.word	0xf85ddf44
 800d0ac:	3e54ae0b 	.word	0x3e54ae0b
 800d0b0:	55555555 	.word	0x55555555
 800d0b4:	3fd55555 	.word	0x3fd55555
 800d0b8:	652b82fe 	.word	0x652b82fe
 800d0bc:	3ff71547 	.word	0x3ff71547
 800d0c0:	8800759c 	.word	0x8800759c
 800d0c4:	7e37e43c 	.word	0x7e37e43c
 800d0c8:	3ff00000 	.word	0x3ff00000
 800d0cc:	3fd00000 	.word	0x3fd00000
 800d0d0:	3fe00000 	.word	0x3fe00000
 800d0d4:	bff00000 	.word	0xbff00000
 800d0d8:	408fffff 	.word	0x408fffff
 800d0dc:	4bd4      	ldr	r3, [pc, #848]	; (800d430 <__ieee754_pow+0x728>)
 800d0de:	2200      	movs	r2, #0
 800d0e0:	ea09 0303 	and.w	r3, r9, r3
 800d0e4:	b943      	cbnz	r3, 800d0f8 <__ieee754_pow+0x3f0>
 800d0e6:	4658      	mov	r0, fp
 800d0e8:	4661      	mov	r1, ip
 800d0ea:	4bd2      	ldr	r3, [pc, #840]	; (800d434 <__ieee754_pow+0x72c>)
 800d0ec:	f7f3 f9ec 	bl	80004c8 <__aeabi_dmul>
 800d0f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d0f4:	4683      	mov	fp, r0
 800d0f6:	460c      	mov	r4, r1
 800d0f8:	1523      	asrs	r3, r4, #20
 800d0fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d0fe:	4413      	add	r3, r2
 800d100:	930b      	str	r3, [sp, #44]	; 0x2c
 800d102:	4bcd      	ldr	r3, [pc, #820]	; (800d438 <__ieee754_pow+0x730>)
 800d104:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d108:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d10c:	429c      	cmp	r4, r3
 800d10e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d112:	dd08      	ble.n	800d126 <__ieee754_pow+0x41e>
 800d114:	4bc9      	ldr	r3, [pc, #804]	; (800d43c <__ieee754_pow+0x734>)
 800d116:	429c      	cmp	r4, r3
 800d118:	f340 819c 	ble.w	800d454 <__ieee754_pow+0x74c>
 800d11c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d11e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d122:	3301      	adds	r3, #1
 800d124:	930b      	str	r3, [sp, #44]	; 0x2c
 800d126:	2600      	movs	r6, #0
 800d128:	00f3      	lsls	r3, r6, #3
 800d12a:	930d      	str	r3, [sp, #52]	; 0x34
 800d12c:	4bc4      	ldr	r3, [pc, #784]	; (800d440 <__ieee754_pow+0x738>)
 800d12e:	4658      	mov	r0, fp
 800d130:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d134:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d138:	4629      	mov	r1, r5
 800d13a:	461a      	mov	r2, r3
 800d13c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800d140:	4623      	mov	r3, r4
 800d142:	f7f3 f809 	bl	8000158 <__aeabi_dsub>
 800d146:	46da      	mov	sl, fp
 800d148:	462b      	mov	r3, r5
 800d14a:	4652      	mov	r2, sl
 800d14c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d150:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d154:	f7f3 f802 	bl	800015c <__adddf3>
 800d158:	4602      	mov	r2, r0
 800d15a:	460b      	mov	r3, r1
 800d15c:	2000      	movs	r0, #0
 800d15e:	49b9      	ldr	r1, [pc, #740]	; (800d444 <__ieee754_pow+0x73c>)
 800d160:	f7f3 fadc 	bl	800071c <__aeabi_ddiv>
 800d164:	4602      	mov	r2, r0
 800d166:	460b      	mov	r3, r1
 800d168:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d16c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d170:	f7f3 f9aa 	bl	80004c8 <__aeabi_dmul>
 800d174:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d178:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d17c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d180:	2300      	movs	r3, #0
 800d182:	2200      	movs	r2, #0
 800d184:	46ab      	mov	fp, r5
 800d186:	106d      	asrs	r5, r5, #1
 800d188:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d18c:	9304      	str	r3, [sp, #16]
 800d18e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d192:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d196:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800d19a:	4640      	mov	r0, r8
 800d19c:	4649      	mov	r1, r9
 800d19e:	4614      	mov	r4, r2
 800d1a0:	461d      	mov	r5, r3
 800d1a2:	f7f3 f991 	bl	80004c8 <__aeabi_dmul>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d1ae:	f7f2 ffd3 	bl	8000158 <__aeabi_dsub>
 800d1b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d1b6:	4606      	mov	r6, r0
 800d1b8:	460f      	mov	r7, r1
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	4629      	mov	r1, r5
 800d1be:	f7f2 ffcb 	bl	8000158 <__aeabi_dsub>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	4650      	mov	r0, sl
 800d1c8:	4659      	mov	r1, fp
 800d1ca:	f7f2 ffc5 	bl	8000158 <__aeabi_dsub>
 800d1ce:	4642      	mov	r2, r8
 800d1d0:	464b      	mov	r3, r9
 800d1d2:	f7f3 f979 	bl	80004c8 <__aeabi_dmul>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	460b      	mov	r3, r1
 800d1da:	4630      	mov	r0, r6
 800d1dc:	4639      	mov	r1, r7
 800d1de:	f7f2 ffbb 	bl	8000158 <__aeabi_dsub>
 800d1e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d1e6:	f7f3 f96f 	bl	80004c8 <__aeabi_dmul>
 800d1ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d1f2:	4610      	mov	r0, r2
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	f7f3 f967 	bl	80004c8 <__aeabi_dmul>
 800d1fa:	a37b      	add	r3, pc, #492	; (adr r3, 800d3e8 <__ieee754_pow+0x6e0>)
 800d1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d200:	4604      	mov	r4, r0
 800d202:	460d      	mov	r5, r1
 800d204:	f7f3 f960 	bl	80004c8 <__aeabi_dmul>
 800d208:	a379      	add	r3, pc, #484	; (adr r3, 800d3f0 <__ieee754_pow+0x6e8>)
 800d20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20e:	f7f2 ffa5 	bl	800015c <__adddf3>
 800d212:	4622      	mov	r2, r4
 800d214:	462b      	mov	r3, r5
 800d216:	f7f3 f957 	bl	80004c8 <__aeabi_dmul>
 800d21a:	a377      	add	r3, pc, #476	; (adr r3, 800d3f8 <__ieee754_pow+0x6f0>)
 800d21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d220:	f7f2 ff9c 	bl	800015c <__adddf3>
 800d224:	4622      	mov	r2, r4
 800d226:	462b      	mov	r3, r5
 800d228:	f7f3 f94e 	bl	80004c8 <__aeabi_dmul>
 800d22c:	a374      	add	r3, pc, #464	; (adr r3, 800d400 <__ieee754_pow+0x6f8>)
 800d22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d232:	f7f2 ff93 	bl	800015c <__adddf3>
 800d236:	4622      	mov	r2, r4
 800d238:	462b      	mov	r3, r5
 800d23a:	f7f3 f945 	bl	80004c8 <__aeabi_dmul>
 800d23e:	a372      	add	r3, pc, #456	; (adr r3, 800d408 <__ieee754_pow+0x700>)
 800d240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d244:	f7f2 ff8a 	bl	800015c <__adddf3>
 800d248:	4622      	mov	r2, r4
 800d24a:	462b      	mov	r3, r5
 800d24c:	f7f3 f93c 	bl	80004c8 <__aeabi_dmul>
 800d250:	a36f      	add	r3, pc, #444	; (adr r3, 800d410 <__ieee754_pow+0x708>)
 800d252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d256:	f7f2 ff81 	bl	800015c <__adddf3>
 800d25a:	4622      	mov	r2, r4
 800d25c:	4606      	mov	r6, r0
 800d25e:	460f      	mov	r7, r1
 800d260:	462b      	mov	r3, r5
 800d262:	4620      	mov	r0, r4
 800d264:	4629      	mov	r1, r5
 800d266:	f7f3 f92f 	bl	80004c8 <__aeabi_dmul>
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	4630      	mov	r0, r6
 800d270:	4639      	mov	r1, r7
 800d272:	f7f3 f929 	bl	80004c8 <__aeabi_dmul>
 800d276:	4604      	mov	r4, r0
 800d278:	460d      	mov	r5, r1
 800d27a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d27e:	4642      	mov	r2, r8
 800d280:	464b      	mov	r3, r9
 800d282:	f7f2 ff6b 	bl	800015c <__adddf3>
 800d286:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d28a:	f7f3 f91d 	bl	80004c8 <__aeabi_dmul>
 800d28e:	4622      	mov	r2, r4
 800d290:	462b      	mov	r3, r5
 800d292:	f7f2 ff63 	bl	800015c <__adddf3>
 800d296:	4642      	mov	r2, r8
 800d298:	4606      	mov	r6, r0
 800d29a:	460f      	mov	r7, r1
 800d29c:	464b      	mov	r3, r9
 800d29e:	4640      	mov	r0, r8
 800d2a0:	4649      	mov	r1, r9
 800d2a2:	f7f3 f911 	bl	80004c8 <__aeabi_dmul>
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	4b67      	ldr	r3, [pc, #412]	; (800d448 <__ieee754_pow+0x740>)
 800d2aa:	4682      	mov	sl, r0
 800d2ac:	468b      	mov	fp, r1
 800d2ae:	f7f2 ff55 	bl	800015c <__adddf3>
 800d2b2:	4632      	mov	r2, r6
 800d2b4:	463b      	mov	r3, r7
 800d2b6:	f7f2 ff51 	bl	800015c <__adddf3>
 800d2ba:	9c04      	ldr	r4, [sp, #16]
 800d2bc:	460d      	mov	r5, r1
 800d2be:	4622      	mov	r2, r4
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	4640      	mov	r0, r8
 800d2c4:	4649      	mov	r1, r9
 800d2c6:	f7f3 f8ff 	bl	80004c8 <__aeabi_dmul>
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	4680      	mov	r8, r0
 800d2ce:	4689      	mov	r9, r1
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	4629      	mov	r1, r5
 800d2d4:	4b5c      	ldr	r3, [pc, #368]	; (800d448 <__ieee754_pow+0x740>)
 800d2d6:	f7f2 ff3f 	bl	8000158 <__aeabi_dsub>
 800d2da:	4652      	mov	r2, sl
 800d2dc:	465b      	mov	r3, fp
 800d2de:	f7f2 ff3b 	bl	8000158 <__aeabi_dsub>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	4630      	mov	r0, r6
 800d2e8:	4639      	mov	r1, r7
 800d2ea:	f7f2 ff35 	bl	8000158 <__aeabi_dsub>
 800d2ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d2f2:	f7f3 f8e9 	bl	80004c8 <__aeabi_dmul>
 800d2f6:	4622      	mov	r2, r4
 800d2f8:	4606      	mov	r6, r0
 800d2fa:	460f      	mov	r7, r1
 800d2fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d300:	462b      	mov	r3, r5
 800d302:	f7f3 f8e1 	bl	80004c8 <__aeabi_dmul>
 800d306:	4602      	mov	r2, r0
 800d308:	460b      	mov	r3, r1
 800d30a:	4630      	mov	r0, r6
 800d30c:	4639      	mov	r1, r7
 800d30e:	f7f2 ff25 	bl	800015c <__adddf3>
 800d312:	4606      	mov	r6, r0
 800d314:	460f      	mov	r7, r1
 800d316:	4602      	mov	r2, r0
 800d318:	460b      	mov	r3, r1
 800d31a:	4640      	mov	r0, r8
 800d31c:	4649      	mov	r1, r9
 800d31e:	f7f2 ff1d 	bl	800015c <__adddf3>
 800d322:	a33d      	add	r3, pc, #244	; (adr r3, 800d418 <__ieee754_pow+0x710>)
 800d324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d328:	9c04      	ldr	r4, [sp, #16]
 800d32a:	460d      	mov	r5, r1
 800d32c:	4620      	mov	r0, r4
 800d32e:	f7f3 f8cb 	bl	80004c8 <__aeabi_dmul>
 800d332:	4642      	mov	r2, r8
 800d334:	464b      	mov	r3, r9
 800d336:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d33a:	4620      	mov	r0, r4
 800d33c:	4629      	mov	r1, r5
 800d33e:	f7f2 ff0b 	bl	8000158 <__aeabi_dsub>
 800d342:	4602      	mov	r2, r0
 800d344:	460b      	mov	r3, r1
 800d346:	4630      	mov	r0, r6
 800d348:	4639      	mov	r1, r7
 800d34a:	f7f2 ff05 	bl	8000158 <__aeabi_dsub>
 800d34e:	a334      	add	r3, pc, #208	; (adr r3, 800d420 <__ieee754_pow+0x718>)
 800d350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d354:	f7f3 f8b8 	bl	80004c8 <__aeabi_dmul>
 800d358:	a333      	add	r3, pc, #204	; (adr r3, 800d428 <__ieee754_pow+0x720>)
 800d35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35e:	4606      	mov	r6, r0
 800d360:	460f      	mov	r7, r1
 800d362:	4620      	mov	r0, r4
 800d364:	4629      	mov	r1, r5
 800d366:	f7f3 f8af 	bl	80004c8 <__aeabi_dmul>
 800d36a:	4602      	mov	r2, r0
 800d36c:	460b      	mov	r3, r1
 800d36e:	4630      	mov	r0, r6
 800d370:	4639      	mov	r1, r7
 800d372:	f7f2 fef3 	bl	800015c <__adddf3>
 800d376:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d378:	4b34      	ldr	r3, [pc, #208]	; (800d44c <__ieee754_pow+0x744>)
 800d37a:	4413      	add	r3, r2
 800d37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d380:	f7f2 feec 	bl	800015c <__adddf3>
 800d384:	4680      	mov	r8, r0
 800d386:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d388:	4689      	mov	r9, r1
 800d38a:	f7f3 f833 	bl	80003f4 <__aeabi_i2d>
 800d38e:	4604      	mov	r4, r0
 800d390:	460d      	mov	r5, r1
 800d392:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d394:	4b2e      	ldr	r3, [pc, #184]	; (800d450 <__ieee754_pow+0x748>)
 800d396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d39a:	4413      	add	r3, r2
 800d39c:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d3a0:	4642      	mov	r2, r8
 800d3a2:	464b      	mov	r3, r9
 800d3a4:	f7f2 feda 	bl	800015c <__adddf3>
 800d3a8:	4632      	mov	r2, r6
 800d3aa:	463b      	mov	r3, r7
 800d3ac:	f7f2 fed6 	bl	800015c <__adddf3>
 800d3b0:	4622      	mov	r2, r4
 800d3b2:	462b      	mov	r3, r5
 800d3b4:	f7f2 fed2 	bl	800015c <__adddf3>
 800d3b8:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d3bc:	4622      	mov	r2, r4
 800d3be:	462b      	mov	r3, r5
 800d3c0:	4650      	mov	r0, sl
 800d3c2:	468b      	mov	fp, r1
 800d3c4:	f7f2 fec8 	bl	8000158 <__aeabi_dsub>
 800d3c8:	4632      	mov	r2, r6
 800d3ca:	463b      	mov	r3, r7
 800d3cc:	f7f2 fec4 	bl	8000158 <__aeabi_dsub>
 800d3d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3d4:	f7f2 fec0 	bl	8000158 <__aeabi_dsub>
 800d3d8:	4602      	mov	r2, r0
 800d3da:	460b      	mov	r3, r1
 800d3dc:	4640      	mov	r0, r8
 800d3de:	4649      	mov	r1, r9
 800d3e0:	e608      	b.n	800cff4 <__ieee754_pow+0x2ec>
 800d3e2:	bf00      	nop
 800d3e4:	f3af 8000 	nop.w
 800d3e8:	4a454eef 	.word	0x4a454eef
 800d3ec:	3fca7e28 	.word	0x3fca7e28
 800d3f0:	93c9db65 	.word	0x93c9db65
 800d3f4:	3fcd864a 	.word	0x3fcd864a
 800d3f8:	a91d4101 	.word	0xa91d4101
 800d3fc:	3fd17460 	.word	0x3fd17460
 800d400:	518f264d 	.word	0x518f264d
 800d404:	3fd55555 	.word	0x3fd55555
 800d408:	db6fabff 	.word	0xdb6fabff
 800d40c:	3fdb6db6 	.word	0x3fdb6db6
 800d410:	33333303 	.word	0x33333303
 800d414:	3fe33333 	.word	0x3fe33333
 800d418:	e0000000 	.word	0xe0000000
 800d41c:	3feec709 	.word	0x3feec709
 800d420:	dc3a03fd 	.word	0xdc3a03fd
 800d424:	3feec709 	.word	0x3feec709
 800d428:	145b01f5 	.word	0x145b01f5
 800d42c:	be3e2fe0 	.word	0xbe3e2fe0
 800d430:	7ff00000 	.word	0x7ff00000
 800d434:	43400000 	.word	0x43400000
 800d438:	0003988e 	.word	0x0003988e
 800d43c:	000bb679 	.word	0x000bb679
 800d440:	0800dc50 	.word	0x0800dc50
 800d444:	3ff00000 	.word	0x3ff00000
 800d448:	40080000 	.word	0x40080000
 800d44c:	0800dc70 	.word	0x0800dc70
 800d450:	0800dc60 	.word	0x0800dc60
 800d454:	2601      	movs	r6, #1
 800d456:	e667      	b.n	800d128 <__ieee754_pow+0x420>
 800d458:	a39d      	add	r3, pc, #628	; (adr r3, 800d6d0 <__ieee754_pow+0x9c8>)
 800d45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45e:	4640      	mov	r0, r8
 800d460:	4649      	mov	r1, r9
 800d462:	f7f2 fe7b 	bl	800015c <__adddf3>
 800d466:	4622      	mov	r2, r4
 800d468:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d46c:	462b      	mov	r3, r5
 800d46e:	4650      	mov	r0, sl
 800d470:	4639      	mov	r1, r7
 800d472:	f7f2 fe71 	bl	8000158 <__aeabi_dsub>
 800d476:	4602      	mov	r2, r0
 800d478:	460b      	mov	r3, r1
 800d47a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d47e:	f7f3 fab3 	bl	80009e8 <__aeabi_dcmpgt>
 800d482:	2800      	cmp	r0, #0
 800d484:	f47f ae01 	bne.w	800d08a <__ieee754_pow+0x382>
 800d488:	4aa5      	ldr	r2, [pc, #660]	; (800d720 <__ieee754_pow+0xa18>)
 800d48a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800d48e:	4293      	cmp	r3, r2
 800d490:	f340 8103 	ble.w	800d69a <__ieee754_pow+0x992>
 800d494:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d498:	2000      	movs	r0, #0
 800d49a:	151b      	asrs	r3, r3, #20
 800d49c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d4a0:	fa4a f303 	asr.w	r3, sl, r3
 800d4a4:	4433      	add	r3, r6
 800d4a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d4aa:	4f9e      	ldr	r7, [pc, #632]	; (800d724 <__ieee754_pow+0xa1c>)
 800d4ac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d4b0:	4117      	asrs	r7, r2
 800d4b2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d4b6:	ea23 0107 	bic.w	r1, r3, r7
 800d4ba:	f1c2 0214 	rsb	r2, r2, #20
 800d4be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	fa4a fa02 	asr.w	sl, sl, r2
 800d4c8:	2e00      	cmp	r6, #0
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	4629      	mov	r1, r5
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	bfb8      	it	lt
 800d4d2:	f1ca 0a00 	rsblt	sl, sl, #0
 800d4d6:	f7f2 fe3f 	bl	8000158 <__aeabi_dsub>
 800d4da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4e2:	2400      	movs	r4, #0
 800d4e4:	4642      	mov	r2, r8
 800d4e6:	464b      	mov	r3, r9
 800d4e8:	f7f2 fe38 	bl	800015c <__adddf3>
 800d4ec:	a37a      	add	r3, pc, #488	; (adr r3, 800d6d8 <__ieee754_pow+0x9d0>)
 800d4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	460d      	mov	r5, r1
 800d4f6:	f7f2 ffe7 	bl	80004c8 <__aeabi_dmul>
 800d4fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4fe:	4606      	mov	r6, r0
 800d500:	460f      	mov	r7, r1
 800d502:	4620      	mov	r0, r4
 800d504:	4629      	mov	r1, r5
 800d506:	f7f2 fe27 	bl	8000158 <__aeabi_dsub>
 800d50a:	4602      	mov	r2, r0
 800d50c:	460b      	mov	r3, r1
 800d50e:	4640      	mov	r0, r8
 800d510:	4649      	mov	r1, r9
 800d512:	f7f2 fe21 	bl	8000158 <__aeabi_dsub>
 800d516:	a372      	add	r3, pc, #456	; (adr r3, 800d6e0 <__ieee754_pow+0x9d8>)
 800d518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51c:	f7f2 ffd4 	bl	80004c8 <__aeabi_dmul>
 800d520:	a371      	add	r3, pc, #452	; (adr r3, 800d6e8 <__ieee754_pow+0x9e0>)
 800d522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d526:	4680      	mov	r8, r0
 800d528:	4689      	mov	r9, r1
 800d52a:	4620      	mov	r0, r4
 800d52c:	4629      	mov	r1, r5
 800d52e:	f7f2 ffcb 	bl	80004c8 <__aeabi_dmul>
 800d532:	4602      	mov	r2, r0
 800d534:	460b      	mov	r3, r1
 800d536:	4640      	mov	r0, r8
 800d538:	4649      	mov	r1, r9
 800d53a:	f7f2 fe0f 	bl	800015c <__adddf3>
 800d53e:	4604      	mov	r4, r0
 800d540:	460d      	mov	r5, r1
 800d542:	4602      	mov	r2, r0
 800d544:	460b      	mov	r3, r1
 800d546:	4630      	mov	r0, r6
 800d548:	4639      	mov	r1, r7
 800d54a:	f7f2 fe07 	bl	800015c <__adddf3>
 800d54e:	4632      	mov	r2, r6
 800d550:	463b      	mov	r3, r7
 800d552:	4680      	mov	r8, r0
 800d554:	4689      	mov	r9, r1
 800d556:	f7f2 fdff 	bl	8000158 <__aeabi_dsub>
 800d55a:	4602      	mov	r2, r0
 800d55c:	460b      	mov	r3, r1
 800d55e:	4620      	mov	r0, r4
 800d560:	4629      	mov	r1, r5
 800d562:	f7f2 fdf9 	bl	8000158 <__aeabi_dsub>
 800d566:	4642      	mov	r2, r8
 800d568:	4606      	mov	r6, r0
 800d56a:	460f      	mov	r7, r1
 800d56c:	464b      	mov	r3, r9
 800d56e:	4640      	mov	r0, r8
 800d570:	4649      	mov	r1, r9
 800d572:	f7f2 ffa9 	bl	80004c8 <__aeabi_dmul>
 800d576:	a35e      	add	r3, pc, #376	; (adr r3, 800d6f0 <__ieee754_pow+0x9e8>)
 800d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57c:	4604      	mov	r4, r0
 800d57e:	460d      	mov	r5, r1
 800d580:	f7f2 ffa2 	bl	80004c8 <__aeabi_dmul>
 800d584:	a35c      	add	r3, pc, #368	; (adr r3, 800d6f8 <__ieee754_pow+0x9f0>)
 800d586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58a:	f7f2 fde5 	bl	8000158 <__aeabi_dsub>
 800d58e:	4622      	mov	r2, r4
 800d590:	462b      	mov	r3, r5
 800d592:	f7f2 ff99 	bl	80004c8 <__aeabi_dmul>
 800d596:	a35a      	add	r3, pc, #360	; (adr r3, 800d700 <__ieee754_pow+0x9f8>)
 800d598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59c:	f7f2 fdde 	bl	800015c <__adddf3>
 800d5a0:	4622      	mov	r2, r4
 800d5a2:	462b      	mov	r3, r5
 800d5a4:	f7f2 ff90 	bl	80004c8 <__aeabi_dmul>
 800d5a8:	a357      	add	r3, pc, #348	; (adr r3, 800d708 <__ieee754_pow+0xa00>)
 800d5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ae:	f7f2 fdd3 	bl	8000158 <__aeabi_dsub>
 800d5b2:	4622      	mov	r2, r4
 800d5b4:	462b      	mov	r3, r5
 800d5b6:	f7f2 ff87 	bl	80004c8 <__aeabi_dmul>
 800d5ba:	a355      	add	r3, pc, #340	; (adr r3, 800d710 <__ieee754_pow+0xa08>)
 800d5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c0:	f7f2 fdcc 	bl	800015c <__adddf3>
 800d5c4:	4622      	mov	r2, r4
 800d5c6:	462b      	mov	r3, r5
 800d5c8:	f7f2 ff7e 	bl	80004c8 <__aeabi_dmul>
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	460b      	mov	r3, r1
 800d5d0:	4640      	mov	r0, r8
 800d5d2:	4649      	mov	r1, r9
 800d5d4:	f7f2 fdc0 	bl	8000158 <__aeabi_dsub>
 800d5d8:	4604      	mov	r4, r0
 800d5da:	460d      	mov	r5, r1
 800d5dc:	4602      	mov	r2, r0
 800d5de:	460b      	mov	r3, r1
 800d5e0:	4640      	mov	r0, r8
 800d5e2:	4649      	mov	r1, r9
 800d5e4:	f7f2 ff70 	bl	80004c8 <__aeabi_dmul>
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	4629      	mov	r1, r5
 800d5f6:	f7f2 fdaf 	bl	8000158 <__aeabi_dsub>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d602:	f7f3 f88b 	bl	800071c <__aeabi_ddiv>
 800d606:	4632      	mov	r2, r6
 800d608:	4604      	mov	r4, r0
 800d60a:	460d      	mov	r5, r1
 800d60c:	463b      	mov	r3, r7
 800d60e:	4640      	mov	r0, r8
 800d610:	4649      	mov	r1, r9
 800d612:	f7f2 ff59 	bl	80004c8 <__aeabi_dmul>
 800d616:	4632      	mov	r2, r6
 800d618:	463b      	mov	r3, r7
 800d61a:	f7f2 fd9f 	bl	800015c <__adddf3>
 800d61e:	4602      	mov	r2, r0
 800d620:	460b      	mov	r3, r1
 800d622:	4620      	mov	r0, r4
 800d624:	4629      	mov	r1, r5
 800d626:	f7f2 fd97 	bl	8000158 <__aeabi_dsub>
 800d62a:	4642      	mov	r2, r8
 800d62c:	464b      	mov	r3, r9
 800d62e:	f7f2 fd93 	bl	8000158 <__aeabi_dsub>
 800d632:	4602      	mov	r2, r0
 800d634:	460b      	mov	r3, r1
 800d636:	2000      	movs	r0, #0
 800d638:	493b      	ldr	r1, [pc, #236]	; (800d728 <__ieee754_pow+0xa20>)
 800d63a:	f7f2 fd8d 	bl	8000158 <__aeabi_dsub>
 800d63e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d642:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d646:	da2b      	bge.n	800d6a0 <__ieee754_pow+0x998>
 800d648:	4652      	mov	r2, sl
 800d64a:	f000 f9b9 	bl	800d9c0 <scalbn>
 800d64e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d652:	f7ff bbf2 	b.w	800ce3a <__ieee754_pow+0x132>
 800d656:	4b35      	ldr	r3, [pc, #212]	; (800d72c <__ieee754_pow+0xa24>)
 800d658:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800d65c:	429f      	cmp	r7, r3
 800d65e:	f77f af13 	ble.w	800d488 <__ieee754_pow+0x780>
 800d662:	4b33      	ldr	r3, [pc, #204]	; (800d730 <__ieee754_pow+0xa28>)
 800d664:	440b      	add	r3, r1
 800d666:	4303      	orrs	r3, r0
 800d668:	d00b      	beq.n	800d682 <__ieee754_pow+0x97a>
 800d66a:	a32b      	add	r3, pc, #172	; (adr r3, 800d718 <__ieee754_pow+0xa10>)
 800d66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d670:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d674:	f7f2 ff28 	bl	80004c8 <__aeabi_dmul>
 800d678:	a327      	add	r3, pc, #156	; (adr r3, 800d718 <__ieee754_pow+0xa10>)
 800d67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67e:	f7ff bbdc 	b.w	800ce3a <__ieee754_pow+0x132>
 800d682:	4622      	mov	r2, r4
 800d684:	462b      	mov	r3, r5
 800d686:	f7f2 fd67 	bl	8000158 <__aeabi_dsub>
 800d68a:	4642      	mov	r2, r8
 800d68c:	464b      	mov	r3, r9
 800d68e:	f7f3 f9a1 	bl	80009d4 <__aeabi_dcmpge>
 800d692:	2800      	cmp	r0, #0
 800d694:	f43f aef8 	beq.w	800d488 <__ieee754_pow+0x780>
 800d698:	e7e7      	b.n	800d66a <__ieee754_pow+0x962>
 800d69a:	f04f 0a00 	mov.w	sl, #0
 800d69e:	e71e      	b.n	800d4de <__ieee754_pow+0x7d6>
 800d6a0:	4621      	mov	r1, r4
 800d6a2:	e7d4      	b.n	800d64e <__ieee754_pow+0x946>
 800d6a4:	f04f 0b00 	mov.w	fp, #0
 800d6a8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d728 <__ieee754_pow+0xa20>
 800d6ac:	f7ff bbb0 	b.w	800ce10 <__ieee754_pow+0x108>
 800d6b0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800d6b4:	f7ff bbac 	b.w	800ce10 <__ieee754_pow+0x108>
 800d6b8:	4638      	mov	r0, r7
 800d6ba:	4641      	mov	r1, r8
 800d6bc:	f7ff bbbf 	b.w	800ce3e <__ieee754_pow+0x136>
 800d6c0:	9200      	str	r2, [sp, #0]
 800d6c2:	f7ff bb7f 	b.w	800cdc4 <__ieee754_pow+0xbc>
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	f7ff bb69 	b.w	800cd9e <__ieee754_pow+0x96>
 800d6cc:	f3af 8000 	nop.w
 800d6d0:	652b82fe 	.word	0x652b82fe
 800d6d4:	3c971547 	.word	0x3c971547
 800d6d8:	00000000 	.word	0x00000000
 800d6dc:	3fe62e43 	.word	0x3fe62e43
 800d6e0:	fefa39ef 	.word	0xfefa39ef
 800d6e4:	3fe62e42 	.word	0x3fe62e42
 800d6e8:	0ca86c39 	.word	0x0ca86c39
 800d6ec:	be205c61 	.word	0xbe205c61
 800d6f0:	72bea4d0 	.word	0x72bea4d0
 800d6f4:	3e663769 	.word	0x3e663769
 800d6f8:	c5d26bf1 	.word	0xc5d26bf1
 800d6fc:	3ebbbd41 	.word	0x3ebbbd41
 800d700:	af25de2c 	.word	0xaf25de2c
 800d704:	3f11566a 	.word	0x3f11566a
 800d708:	16bebd93 	.word	0x16bebd93
 800d70c:	3f66c16c 	.word	0x3f66c16c
 800d710:	5555553e 	.word	0x5555553e
 800d714:	3fc55555 	.word	0x3fc55555
 800d718:	c2f8f359 	.word	0xc2f8f359
 800d71c:	01a56e1f 	.word	0x01a56e1f
 800d720:	3fe00000 	.word	0x3fe00000
 800d724:	000fffff 	.word	0x000fffff
 800d728:	3ff00000 	.word	0x3ff00000
 800d72c:	4090cbff 	.word	0x4090cbff
 800d730:	3f6f3400 	.word	0x3f6f3400

0800d734 <__ieee754_sqrt>:
 800d734:	f8df c150 	ldr.w	ip, [pc, #336]	; 800d888 <__ieee754_sqrt+0x154>
 800d738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d73c:	ea3c 0c01 	bics.w	ip, ip, r1
 800d740:	460b      	mov	r3, r1
 800d742:	4606      	mov	r6, r0
 800d744:	460d      	mov	r5, r1
 800d746:	460a      	mov	r2, r1
 800d748:	4607      	mov	r7, r0
 800d74a:	4604      	mov	r4, r0
 800d74c:	d10e      	bne.n	800d76c <__ieee754_sqrt+0x38>
 800d74e:	4602      	mov	r2, r0
 800d750:	f7f2 feba 	bl	80004c8 <__aeabi_dmul>
 800d754:	4602      	mov	r2, r0
 800d756:	460b      	mov	r3, r1
 800d758:	4630      	mov	r0, r6
 800d75a:	4629      	mov	r1, r5
 800d75c:	f7f2 fcfe 	bl	800015c <__adddf3>
 800d760:	4606      	mov	r6, r0
 800d762:	460d      	mov	r5, r1
 800d764:	4630      	mov	r0, r6
 800d766:	4629      	mov	r1, r5
 800d768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d76c:	2900      	cmp	r1, #0
 800d76e:	dc0d      	bgt.n	800d78c <__ieee754_sqrt+0x58>
 800d770:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800d774:	ea5c 0707 	orrs.w	r7, ip, r7
 800d778:	d0f4      	beq.n	800d764 <__ieee754_sqrt+0x30>
 800d77a:	b139      	cbz	r1, 800d78c <__ieee754_sqrt+0x58>
 800d77c:	4602      	mov	r2, r0
 800d77e:	f7f2 fceb 	bl	8000158 <__aeabi_dsub>
 800d782:	4602      	mov	r2, r0
 800d784:	460b      	mov	r3, r1
 800d786:	f7f2 ffc9 	bl	800071c <__aeabi_ddiv>
 800d78a:	e7e9      	b.n	800d760 <__ieee754_sqrt+0x2c>
 800d78c:	1512      	asrs	r2, r2, #20
 800d78e:	d074      	beq.n	800d87a <__ieee754_sqrt+0x146>
 800d790:	2000      	movs	r0, #0
 800d792:	07d5      	lsls	r5, r2, #31
 800d794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d798:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800d79c:	bf5e      	ittt	pl
 800d79e:	0fe3      	lsrpl	r3, r4, #31
 800d7a0:	0064      	lslpl	r4, r4, #1
 800d7a2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800d7a6:	0fe3      	lsrs	r3, r4, #31
 800d7a8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d7ac:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800d7b0:	2516      	movs	r5, #22
 800d7b2:	4601      	mov	r1, r0
 800d7b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d7b8:	1076      	asrs	r6, r6, #1
 800d7ba:	0064      	lsls	r4, r4, #1
 800d7bc:	188f      	adds	r7, r1, r2
 800d7be:	429f      	cmp	r7, r3
 800d7c0:	bfde      	ittt	le
 800d7c2:	1bdb      	suble	r3, r3, r7
 800d7c4:	18b9      	addle	r1, r7, r2
 800d7c6:	1880      	addle	r0, r0, r2
 800d7c8:	005b      	lsls	r3, r3, #1
 800d7ca:	3d01      	subs	r5, #1
 800d7cc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d7d0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d7d4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d7d8:	d1f0      	bne.n	800d7bc <__ieee754_sqrt+0x88>
 800d7da:	462a      	mov	r2, r5
 800d7dc:	f04f 0e20 	mov.w	lr, #32
 800d7e0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800d7e4:	428b      	cmp	r3, r1
 800d7e6:	eb07 0c05 	add.w	ip, r7, r5
 800d7ea:	dc02      	bgt.n	800d7f2 <__ieee754_sqrt+0xbe>
 800d7ec:	d113      	bne.n	800d816 <__ieee754_sqrt+0xe2>
 800d7ee:	45a4      	cmp	ip, r4
 800d7f0:	d811      	bhi.n	800d816 <__ieee754_sqrt+0xe2>
 800d7f2:	f1bc 0f00 	cmp.w	ip, #0
 800d7f6:	eb0c 0507 	add.w	r5, ip, r7
 800d7fa:	da43      	bge.n	800d884 <__ieee754_sqrt+0x150>
 800d7fc:	2d00      	cmp	r5, #0
 800d7fe:	db41      	blt.n	800d884 <__ieee754_sqrt+0x150>
 800d800:	f101 0801 	add.w	r8, r1, #1
 800d804:	1a5b      	subs	r3, r3, r1
 800d806:	4641      	mov	r1, r8
 800d808:	45a4      	cmp	ip, r4
 800d80a:	bf88      	it	hi
 800d80c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d810:	eba4 040c 	sub.w	r4, r4, ip
 800d814:	443a      	add	r2, r7
 800d816:	005b      	lsls	r3, r3, #1
 800d818:	f1be 0e01 	subs.w	lr, lr, #1
 800d81c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d820:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800d824:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d828:	d1dc      	bne.n	800d7e4 <__ieee754_sqrt+0xb0>
 800d82a:	4323      	orrs	r3, r4
 800d82c:	d006      	beq.n	800d83c <__ieee754_sqrt+0x108>
 800d82e:	1c54      	adds	r4, r2, #1
 800d830:	bf0b      	itete	eq
 800d832:	4672      	moveq	r2, lr
 800d834:	3201      	addne	r2, #1
 800d836:	3001      	addeq	r0, #1
 800d838:	f022 0201 	bicne.w	r2, r2, #1
 800d83c:	1043      	asrs	r3, r0, #1
 800d83e:	07c1      	lsls	r1, r0, #31
 800d840:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d844:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d848:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d84c:	bf48      	it	mi
 800d84e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d852:	4610      	mov	r0, r2
 800d854:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800d858:	e782      	b.n	800d760 <__ieee754_sqrt+0x2c>
 800d85a:	0ae3      	lsrs	r3, r4, #11
 800d85c:	3915      	subs	r1, #21
 800d85e:	0564      	lsls	r4, r4, #21
 800d860:	2b00      	cmp	r3, #0
 800d862:	d0fa      	beq.n	800d85a <__ieee754_sqrt+0x126>
 800d864:	02de      	lsls	r6, r3, #11
 800d866:	d50a      	bpl.n	800d87e <__ieee754_sqrt+0x14a>
 800d868:	f1c2 0020 	rsb	r0, r2, #32
 800d86c:	fa24 f000 	lsr.w	r0, r4, r0
 800d870:	1e55      	subs	r5, r2, #1
 800d872:	4094      	lsls	r4, r2
 800d874:	4303      	orrs	r3, r0
 800d876:	1b4a      	subs	r2, r1, r5
 800d878:	e78a      	b.n	800d790 <__ieee754_sqrt+0x5c>
 800d87a:	4611      	mov	r1, r2
 800d87c:	e7f0      	b.n	800d860 <__ieee754_sqrt+0x12c>
 800d87e:	005b      	lsls	r3, r3, #1
 800d880:	3201      	adds	r2, #1
 800d882:	e7ef      	b.n	800d864 <__ieee754_sqrt+0x130>
 800d884:	4688      	mov	r8, r1
 800d886:	e7bd      	b.n	800d804 <__ieee754_sqrt+0xd0>
 800d888:	7ff00000 	.word	0x7ff00000

0800d88c <fabs>:
 800d88c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d890:	4770      	bx	lr

0800d892 <finite>:
 800d892:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800d896:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d89a:	0fc0      	lsrs	r0, r0, #31
 800d89c:	4770      	bx	lr
	...

0800d8a0 <nan>:
 800d8a0:	2000      	movs	r0, #0
 800d8a2:	4901      	ldr	r1, [pc, #4]	; (800d8a8 <nan+0x8>)
 800d8a4:	4770      	bx	lr
 800d8a6:	bf00      	nop
 800d8a8:	7ff80000 	.word	0x7ff80000

0800d8ac <rint>:
 800d8ac:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800d8b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8b2:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800d8b6:	2f13      	cmp	r7, #19
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	460c      	mov	r4, r1
 800d8be:	4605      	mov	r5, r0
 800d8c0:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800d8c4:	dc59      	bgt.n	800d97a <rint+0xce>
 800d8c6:	2f00      	cmp	r7, #0
 800d8c8:	da2a      	bge.n	800d920 <rint+0x74>
 800d8ca:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d8ce:	4301      	orrs	r1, r0
 800d8d0:	d022      	beq.n	800d918 <rint+0x6c>
 800d8d2:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800d8d6:	4301      	orrs	r1, r0
 800d8d8:	424d      	negs	r5, r1
 800d8da:	430d      	orrs	r5, r1
 800d8dc:	4936      	ldr	r1, [pc, #216]	; (800d9b8 <rint+0x10c>)
 800d8de:	0c5c      	lsrs	r4, r3, #17
 800d8e0:	0b2d      	lsrs	r5, r5, #12
 800d8e2:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800d8e6:	0464      	lsls	r4, r4, #17
 800d8e8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d8ec:	ea45 0304 	orr.w	r3, r5, r4
 800d8f0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	4629      	mov	r1, r5
 800d8f8:	f7f2 fc30 	bl	800015c <__adddf3>
 800d8fc:	e9cd 0100 	strd	r0, r1, [sp]
 800d900:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d904:	462b      	mov	r3, r5
 800d906:	4622      	mov	r2, r4
 800d908:	f7f2 fc26 	bl	8000158 <__aeabi_dsub>
 800d90c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d910:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800d914:	4602      	mov	r2, r0
 800d916:	460b      	mov	r3, r1
 800d918:	4610      	mov	r0, r2
 800d91a:	4619      	mov	r1, r3
 800d91c:	b003      	add	sp, #12
 800d91e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d920:	4926      	ldr	r1, [pc, #152]	; (800d9bc <rint+0x110>)
 800d922:	4139      	asrs	r1, r7
 800d924:	ea03 0001 	and.w	r0, r3, r1
 800d928:	4310      	orrs	r0, r2
 800d92a:	d0f5      	beq.n	800d918 <rint+0x6c>
 800d92c:	084b      	lsrs	r3, r1, #1
 800d92e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800d932:	ea52 0501 	orrs.w	r5, r2, r1
 800d936:	d00c      	beq.n	800d952 <rint+0xa6>
 800d938:	ea24 0303 	bic.w	r3, r4, r3
 800d93c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800d940:	2f13      	cmp	r7, #19
 800d942:	bf0c      	ite	eq
 800d944:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800d948:	2500      	movne	r5, #0
 800d94a:	fa44 f707 	asr.w	r7, r4, r7
 800d94e:	ea43 0407 	orr.w	r4, r3, r7
 800d952:	4919      	ldr	r1, [pc, #100]	; (800d9b8 <rint+0x10c>)
 800d954:	4623      	mov	r3, r4
 800d956:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800d95a:	462a      	mov	r2, r5
 800d95c:	e9d6 4500 	ldrd	r4, r5, [r6]
 800d960:	4620      	mov	r0, r4
 800d962:	4629      	mov	r1, r5
 800d964:	f7f2 fbfa 	bl	800015c <__adddf3>
 800d968:	e9cd 0100 	strd	r0, r1, [sp]
 800d96c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d970:	4622      	mov	r2, r4
 800d972:	462b      	mov	r3, r5
 800d974:	f7f2 fbf0 	bl	8000158 <__aeabi_dsub>
 800d978:	e7cc      	b.n	800d914 <rint+0x68>
 800d97a:	2f33      	cmp	r7, #51	; 0x33
 800d97c:	dd05      	ble.n	800d98a <rint+0xde>
 800d97e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800d982:	d1c9      	bne.n	800d918 <rint+0x6c>
 800d984:	f7f2 fbea 	bl	800015c <__adddf3>
 800d988:	e7c4      	b.n	800d914 <rint+0x68>
 800d98a:	f04f 31ff 	mov.w	r1, #4294967295
 800d98e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800d992:	fa21 f10c 	lsr.w	r1, r1, ip
 800d996:	4208      	tst	r0, r1
 800d998:	d0be      	beq.n	800d918 <rint+0x6c>
 800d99a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800d99e:	bf18      	it	ne
 800d9a0:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800d9a4:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800d9a8:	bf1e      	ittt	ne
 800d9aa:	ea20 0303 	bicne.w	r3, r0, r3
 800d9ae:	fa45 fc0c 	asrne.w	ip, r5, ip
 800d9b2:	ea43 050c 	orrne.w	r5, r3, ip
 800d9b6:	e7cc      	b.n	800d952 <rint+0xa6>
 800d9b8:	0800dc80 	.word	0x0800dc80
 800d9bc:	000fffff 	.word	0x000fffff

0800d9c0 <scalbn>:
 800d9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9c2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	460d      	mov	r5, r1
 800d9ca:	4617      	mov	r7, r2
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	b996      	cbnz	r6, 800d9f6 <scalbn+0x36>
 800d9d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d9d4:	4303      	orrs	r3, r0
 800d9d6:	d039      	beq.n	800da4c <scalbn+0x8c>
 800d9d8:	4b35      	ldr	r3, [pc, #212]	; (800dab0 <scalbn+0xf0>)
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f7f2 fd74 	bl	80004c8 <__aeabi_dmul>
 800d9e0:	4b34      	ldr	r3, [pc, #208]	; (800dab4 <scalbn+0xf4>)
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	429f      	cmp	r7, r3
 800d9e6:	460d      	mov	r5, r1
 800d9e8:	da0f      	bge.n	800da0a <scalbn+0x4a>
 800d9ea:	a32d      	add	r3, pc, #180	; (adr r3, 800daa0 <scalbn+0xe0>)
 800d9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f0:	f7f2 fd6a 	bl	80004c8 <__aeabi_dmul>
 800d9f4:	e006      	b.n	800da04 <scalbn+0x44>
 800d9f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d9fa:	4296      	cmp	r6, r2
 800d9fc:	d10a      	bne.n	800da14 <scalbn+0x54>
 800d9fe:	4602      	mov	r2, r0
 800da00:	f7f2 fbac 	bl	800015c <__adddf3>
 800da04:	4604      	mov	r4, r0
 800da06:	460d      	mov	r5, r1
 800da08:	e020      	b.n	800da4c <scalbn+0x8c>
 800da0a:	460b      	mov	r3, r1
 800da0c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800da10:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800da14:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800da18:	19b9      	adds	r1, r7, r6
 800da1a:	4291      	cmp	r1, r2
 800da1c:	dd0e      	ble.n	800da3c <scalbn+0x7c>
 800da1e:	a322      	add	r3, pc, #136	; (adr r3, 800daa8 <scalbn+0xe8>)
 800da20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da24:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800da28:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800da2c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800da30:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800da34:	4820      	ldr	r0, [pc, #128]	; (800dab8 <scalbn+0xf8>)
 800da36:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800da3a:	e7d9      	b.n	800d9f0 <scalbn+0x30>
 800da3c:	2900      	cmp	r1, #0
 800da3e:	dd08      	ble.n	800da52 <scalbn+0x92>
 800da40:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800da44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800da48:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800da4c:	4620      	mov	r0, r4
 800da4e:	4629      	mov	r1, r5
 800da50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da52:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800da56:	da16      	bge.n	800da86 <scalbn+0xc6>
 800da58:	f24c 3350 	movw	r3, #50000	; 0xc350
 800da5c:	429f      	cmp	r7, r3
 800da5e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800da62:	dd08      	ble.n	800da76 <scalbn+0xb6>
 800da64:	4c15      	ldr	r4, [pc, #84]	; (800dabc <scalbn+0xfc>)
 800da66:	4814      	ldr	r0, [pc, #80]	; (800dab8 <scalbn+0xf8>)
 800da68:	f363 74df 	bfi	r4, r3, #31, #1
 800da6c:	a30e      	add	r3, pc, #56	; (adr r3, 800daa8 <scalbn+0xe8>)
 800da6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da72:	4621      	mov	r1, r4
 800da74:	e7bc      	b.n	800d9f0 <scalbn+0x30>
 800da76:	4c12      	ldr	r4, [pc, #72]	; (800dac0 <scalbn+0x100>)
 800da78:	4812      	ldr	r0, [pc, #72]	; (800dac4 <scalbn+0x104>)
 800da7a:	f363 74df 	bfi	r4, r3, #31, #1
 800da7e:	a308      	add	r3, pc, #32	; (adr r3, 800daa0 <scalbn+0xe0>)
 800da80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da84:	e7f5      	b.n	800da72 <scalbn+0xb2>
 800da86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800da8a:	3136      	adds	r1, #54	; 0x36
 800da8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800da90:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800da94:	4620      	mov	r0, r4
 800da96:	4629      	mov	r1, r5
 800da98:	2200      	movs	r2, #0
 800da9a:	4b0b      	ldr	r3, [pc, #44]	; (800dac8 <scalbn+0x108>)
 800da9c:	e7a8      	b.n	800d9f0 <scalbn+0x30>
 800da9e:	bf00      	nop
 800daa0:	c2f8f359 	.word	0xc2f8f359
 800daa4:	01a56e1f 	.word	0x01a56e1f
 800daa8:	8800759c 	.word	0x8800759c
 800daac:	7e37e43c 	.word	0x7e37e43c
 800dab0:	43500000 	.word	0x43500000
 800dab4:	ffff3cb0 	.word	0xffff3cb0
 800dab8:	8800759c 	.word	0x8800759c
 800dabc:	7e37e43c 	.word	0x7e37e43c
 800dac0:	01a56e1f 	.word	0x01a56e1f
 800dac4:	c2f8f359 	.word	0xc2f8f359
 800dac8:	3c900000 	.word	0x3c900000

0800dacc <_init>:
 800dacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dace:	bf00      	nop
 800dad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dad2:	bc08      	pop	{r3}
 800dad4:	469e      	mov	lr, r3
 800dad6:	4770      	bx	lr

0800dad8 <_fini>:
 800dad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dada:	bf00      	nop
 800dadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dade:	bc08      	pop	{r3}
 800dae0:	469e      	mov	lr, r3
 800dae2:	4770      	bx	lr
