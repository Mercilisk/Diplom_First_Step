
Diplom_First_Step.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d48  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  08007e58  08007e58  00017e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085f0  080085f0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080085f0  080085f0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085f0  080085f0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085f0  080085f0  000185f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085f4  080085f4  000185f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080085f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000256c  20000078  08008670  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025e4  08008670  000225e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d536  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040c7  00000000  00000000  0003d5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  000416a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  00042ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb72  00000000  00000000  000441a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000195e3  00000000  00000000  0005fd1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000976dd  00000000  00000000  000792fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001109da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006378  00000000  00000000  00110a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08007e40 	.word	0x08007e40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08007e40 	.word	0x08007e40

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_fmul>:
 80003b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003bc:	bf1e      	ittt	ne
 80003be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003c2:	ea92 0f0c 	teqne	r2, ip
 80003c6:	ea93 0f0c 	teqne	r3, ip
 80003ca:	d06f      	beq.n	80004ac <__aeabi_fmul+0xf8>
 80003cc:	441a      	add	r2, r3
 80003ce:	ea80 0c01 	eor.w	ip, r0, r1
 80003d2:	0240      	lsls	r0, r0, #9
 80003d4:	bf18      	it	ne
 80003d6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003da:	d01e      	beq.n	800041a <__aeabi_fmul+0x66>
 80003dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003e0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003e4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003e8:	fba0 3101 	umull	r3, r1, r0, r1
 80003ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003f0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003f4:	bf3e      	ittt	cc
 80003f6:	0049      	lslcc	r1, r1, #1
 80003f8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003fc:	005b      	lslcc	r3, r3, #1
 80003fe:	ea40 0001 	orr.w	r0, r0, r1
 8000402:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000406:	2afd      	cmp	r2, #253	; 0xfd
 8000408:	d81d      	bhi.n	8000446 <__aeabi_fmul+0x92>
 800040a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800040e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000412:	bf08      	it	eq
 8000414:	f020 0001 	biceq.w	r0, r0, #1
 8000418:	4770      	bx	lr
 800041a:	f090 0f00 	teq	r0, #0
 800041e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000422:	bf08      	it	eq
 8000424:	0249      	lsleq	r1, r1, #9
 8000426:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800042a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800042e:	3a7f      	subs	r2, #127	; 0x7f
 8000430:	bfc2      	ittt	gt
 8000432:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000436:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800043a:	4770      	bxgt	lr
 800043c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000440:	f04f 0300 	mov.w	r3, #0
 8000444:	3a01      	subs	r2, #1
 8000446:	dc5d      	bgt.n	8000504 <__aeabi_fmul+0x150>
 8000448:	f112 0f19 	cmn.w	r2, #25
 800044c:	bfdc      	itt	le
 800044e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000452:	4770      	bxle	lr
 8000454:	f1c2 0200 	rsb	r2, r2, #0
 8000458:	0041      	lsls	r1, r0, #1
 800045a:	fa21 f102 	lsr.w	r1, r1, r2
 800045e:	f1c2 0220 	rsb	r2, r2, #32
 8000462:	fa00 fc02 	lsl.w	ip, r0, r2
 8000466:	ea5f 0031 	movs.w	r0, r1, rrx
 800046a:	f140 0000 	adc.w	r0, r0, #0
 800046e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000472:	bf08      	it	eq
 8000474:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000478:	4770      	bx	lr
 800047a:	f092 0f00 	teq	r2, #0
 800047e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000482:	bf02      	ittt	eq
 8000484:	0040      	lsleq	r0, r0, #1
 8000486:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800048a:	3a01      	subeq	r2, #1
 800048c:	d0f9      	beq.n	8000482 <__aeabi_fmul+0xce>
 800048e:	ea40 000c 	orr.w	r0, r0, ip
 8000492:	f093 0f00 	teq	r3, #0
 8000496:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800049a:	bf02      	ittt	eq
 800049c:	0049      	lsleq	r1, r1, #1
 800049e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80004a2:	3b01      	subeq	r3, #1
 80004a4:	d0f9      	beq.n	800049a <__aeabi_fmul+0xe6>
 80004a6:	ea41 010c 	orr.w	r1, r1, ip
 80004aa:	e78f      	b.n	80003cc <__aeabi_fmul+0x18>
 80004ac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	bf18      	it	ne
 80004b6:	ea93 0f0c 	teqne	r3, ip
 80004ba:	d00a      	beq.n	80004d2 <__aeabi_fmul+0x11e>
 80004bc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004c0:	bf18      	it	ne
 80004c2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004c6:	d1d8      	bne.n	800047a <__aeabi_fmul+0xc6>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d0:	4770      	bx	lr
 80004d2:	f090 0f00 	teq	r0, #0
 80004d6:	bf17      	itett	ne
 80004d8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004dc:	4608      	moveq	r0, r1
 80004de:	f091 0f00 	teqne	r1, #0
 80004e2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004e6:	d014      	beq.n	8000512 <__aeabi_fmul+0x15e>
 80004e8:	ea92 0f0c 	teq	r2, ip
 80004ec:	d101      	bne.n	80004f2 <__aeabi_fmul+0x13e>
 80004ee:	0242      	lsls	r2, r0, #9
 80004f0:	d10f      	bne.n	8000512 <__aeabi_fmul+0x15e>
 80004f2:	ea93 0f0c 	teq	r3, ip
 80004f6:	d103      	bne.n	8000500 <__aeabi_fmul+0x14c>
 80004f8:	024b      	lsls	r3, r1, #9
 80004fa:	bf18      	it	ne
 80004fc:	4608      	movne	r0, r1
 80004fe:	d108      	bne.n	8000512 <__aeabi_fmul+0x15e>
 8000500:	ea80 0001 	eor.w	r0, r0, r1
 8000504:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000508:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800050c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000510:	4770      	bx	lr
 8000512:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000516:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800051a:	4770      	bx	lr

0800051c <__aeabi_drsub>:
 800051c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e002      	b.n	8000528 <__adddf3>
 8000522:	bf00      	nop

08000524 <__aeabi_dsub>:
 8000524:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000528 <__adddf3>:
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800052e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000532:	ea94 0f05 	teq	r4, r5
 8000536:	bf08      	it	eq
 8000538:	ea90 0f02 	teqeq	r0, r2
 800053c:	bf1f      	itttt	ne
 800053e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000542:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000546:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800054a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800054e:	f000 80e2 	beq.w	8000716 <__adddf3+0x1ee>
 8000552:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000556:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800055a:	bfb8      	it	lt
 800055c:	426d      	neglt	r5, r5
 800055e:	dd0c      	ble.n	800057a <__adddf3+0x52>
 8000560:	442c      	add	r4, r5
 8000562:	ea80 0202 	eor.w	r2, r0, r2
 8000566:	ea81 0303 	eor.w	r3, r1, r3
 800056a:	ea82 0000 	eor.w	r0, r2, r0
 800056e:	ea83 0101 	eor.w	r1, r3, r1
 8000572:	ea80 0202 	eor.w	r2, r0, r2
 8000576:	ea81 0303 	eor.w	r3, r1, r3
 800057a:	2d36      	cmp	r5, #54	; 0x36
 800057c:	bf88      	it	hi
 800057e:	bd30      	pophi	{r4, r5, pc}
 8000580:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000584:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000588:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800058c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000590:	d002      	beq.n	8000598 <__adddf3+0x70>
 8000592:	4240      	negs	r0, r0
 8000594:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000598:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800059c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005a4:	d002      	beq.n	80005ac <__adddf3+0x84>
 80005a6:	4252      	negs	r2, r2
 80005a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005ac:	ea94 0f05 	teq	r4, r5
 80005b0:	f000 80a7 	beq.w	8000702 <__adddf3+0x1da>
 80005b4:	f1a4 0401 	sub.w	r4, r4, #1
 80005b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005bc:	db0d      	blt.n	80005da <__adddf3+0xb2>
 80005be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005c2:	fa22 f205 	lsr.w	r2, r2, r5
 80005c6:	1880      	adds	r0, r0, r2
 80005c8:	f141 0100 	adc.w	r1, r1, #0
 80005cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d0:	1880      	adds	r0, r0, r2
 80005d2:	fa43 f305 	asr.w	r3, r3, r5
 80005d6:	4159      	adcs	r1, r3
 80005d8:	e00e      	b.n	80005f8 <__adddf3+0xd0>
 80005da:	f1a5 0520 	sub.w	r5, r5, #32
 80005de:	f10e 0e20 	add.w	lr, lr, #32
 80005e2:	2a01      	cmp	r2, #1
 80005e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e8:	bf28      	it	cs
 80005ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ee:	fa43 f305 	asr.w	r3, r3, r5
 80005f2:	18c0      	adds	r0, r0, r3
 80005f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	d507      	bpl.n	800060e <__adddf3+0xe6>
 80005fe:	f04f 0e00 	mov.w	lr, #0
 8000602:	f1dc 0c00 	rsbs	ip, ip, #0
 8000606:	eb7e 0000 	sbcs.w	r0, lr, r0
 800060a:	eb6e 0101 	sbc.w	r1, lr, r1
 800060e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000612:	d31b      	bcc.n	800064c <__adddf3+0x124>
 8000614:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000618:	d30c      	bcc.n	8000634 <__adddf3+0x10c>
 800061a:	0849      	lsrs	r1, r1, #1
 800061c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000620:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000624:	f104 0401 	add.w	r4, r4, #1
 8000628:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800062c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000630:	f080 809a 	bcs.w	8000768 <__adddf3+0x240>
 8000634:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800063e:	f150 0000 	adcs.w	r0, r0, #0
 8000642:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000646:	ea41 0105 	orr.w	r1, r1, r5
 800064a:	bd30      	pop	{r4, r5, pc}
 800064c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000650:	4140      	adcs	r0, r0
 8000652:	eb41 0101 	adc.w	r1, r1, r1
 8000656:	3c01      	subs	r4, #1
 8000658:	bf28      	it	cs
 800065a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800065e:	d2e9      	bcs.n	8000634 <__adddf3+0x10c>
 8000660:	f091 0f00 	teq	r1, #0
 8000664:	bf04      	itt	eq
 8000666:	4601      	moveq	r1, r0
 8000668:	2000      	moveq	r0, #0
 800066a:	fab1 f381 	clz	r3, r1
 800066e:	bf08      	it	eq
 8000670:	3320      	addeq	r3, #32
 8000672:	f1a3 030b 	sub.w	r3, r3, #11
 8000676:	f1b3 0220 	subs.w	r2, r3, #32
 800067a:	da0c      	bge.n	8000696 <__adddf3+0x16e>
 800067c:	320c      	adds	r2, #12
 800067e:	dd08      	ble.n	8000692 <__adddf3+0x16a>
 8000680:	f102 0c14 	add.w	ip, r2, #20
 8000684:	f1c2 020c 	rsb	r2, r2, #12
 8000688:	fa01 f00c 	lsl.w	r0, r1, ip
 800068c:	fa21 f102 	lsr.w	r1, r1, r2
 8000690:	e00c      	b.n	80006ac <__adddf3+0x184>
 8000692:	f102 0214 	add.w	r2, r2, #20
 8000696:	bfd8      	it	le
 8000698:	f1c2 0c20 	rsble	ip, r2, #32
 800069c:	fa01 f102 	lsl.w	r1, r1, r2
 80006a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006a4:	bfdc      	itt	le
 80006a6:	ea41 010c 	orrle.w	r1, r1, ip
 80006aa:	4090      	lslle	r0, r2
 80006ac:	1ae4      	subs	r4, r4, r3
 80006ae:	bfa2      	ittt	ge
 80006b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006b4:	4329      	orrge	r1, r5
 80006b6:	bd30      	popge	{r4, r5, pc}
 80006b8:	ea6f 0404 	mvn.w	r4, r4
 80006bc:	3c1f      	subs	r4, #31
 80006be:	da1c      	bge.n	80006fa <__adddf3+0x1d2>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc0e      	bgt.n	80006e2 <__adddf3+0x1ba>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0220 	rsb	r2, r4, #32
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f302 	lsl.w	r3, r1, r2
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	fa21 f304 	lsr.w	r3, r1, r4
 80006dc:	ea45 0103 	orr.w	r1, r5, r3
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	f1c4 040c 	rsb	r4, r4, #12
 80006e6:	f1c4 0220 	rsb	r2, r4, #32
 80006ea:	fa20 f002 	lsr.w	r0, r0, r2
 80006ee:	fa01 f304 	lsl.w	r3, r1, r4
 80006f2:	ea40 0003 	orr.w	r0, r0, r3
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	fa21 f004 	lsr.w	r0, r1, r4
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	f094 0f00 	teq	r4, #0
 8000706:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800070a:	bf06      	itte	eq
 800070c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000710:	3401      	addeq	r4, #1
 8000712:	3d01      	subne	r5, #1
 8000714:	e74e      	b.n	80005b4 <__adddf3+0x8c>
 8000716:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800071a:	bf18      	it	ne
 800071c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000720:	d029      	beq.n	8000776 <__adddf3+0x24e>
 8000722:	ea94 0f05 	teq	r4, r5
 8000726:	bf08      	it	eq
 8000728:	ea90 0f02 	teqeq	r0, r2
 800072c:	d005      	beq.n	800073a <__adddf3+0x212>
 800072e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000732:	bf04      	itt	eq
 8000734:	4619      	moveq	r1, r3
 8000736:	4610      	moveq	r0, r2
 8000738:	bd30      	pop	{r4, r5, pc}
 800073a:	ea91 0f03 	teq	r1, r3
 800073e:	bf1e      	ittt	ne
 8000740:	2100      	movne	r1, #0
 8000742:	2000      	movne	r0, #0
 8000744:	bd30      	popne	{r4, r5, pc}
 8000746:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800074a:	d105      	bne.n	8000758 <__adddf3+0x230>
 800074c:	0040      	lsls	r0, r0, #1
 800074e:	4149      	adcs	r1, r1
 8000750:	bf28      	it	cs
 8000752:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd30      	pop	{r4, r5, pc}
 8000758:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800075c:	bf3c      	itt	cc
 800075e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000762:	bd30      	popcc	{r4, r5, pc}
 8000764:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000768:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800076c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800077a:	bf1a      	itte	ne
 800077c:	4619      	movne	r1, r3
 800077e:	4610      	movne	r0, r2
 8000780:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000784:	bf1c      	itt	ne
 8000786:	460b      	movne	r3, r1
 8000788:	4602      	movne	r2, r0
 800078a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800078e:	bf06      	itte	eq
 8000790:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000794:	ea91 0f03 	teqeq	r1, r3
 8000798:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800079c:	bd30      	pop	{r4, r5, pc}
 800079e:	bf00      	nop

080007a0 <__aeabi_ui2d>:
 80007a0:	f090 0f00 	teq	r0, #0
 80007a4:	bf04      	itt	eq
 80007a6:	2100      	moveq	r1, #0
 80007a8:	4770      	bxeq	lr
 80007aa:	b530      	push	{r4, r5, lr}
 80007ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b4:	f04f 0500 	mov.w	r5, #0
 80007b8:	f04f 0100 	mov.w	r1, #0
 80007bc:	e750      	b.n	8000660 <__adddf3+0x138>
 80007be:	bf00      	nop

080007c0 <__aeabi_i2d>:
 80007c0:	f090 0f00 	teq	r0, #0
 80007c4:	bf04      	itt	eq
 80007c6:	2100      	moveq	r1, #0
 80007c8:	4770      	bxeq	lr
 80007ca:	b530      	push	{r4, r5, lr}
 80007cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	f04f 0100 	mov.w	r1, #0
 80007e0:	e73e      	b.n	8000660 <__adddf3+0x138>
 80007e2:	bf00      	nop

080007e4 <__aeabi_f2d>:
 80007e4:	0042      	lsls	r2, r0, #1
 80007e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007f2:	bf1f      	itttt	ne
 80007f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000800:	4770      	bxne	lr
 8000802:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000806:	bf08      	it	eq
 8000808:	4770      	bxeq	lr
 800080a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800080e:	bf04      	itt	eq
 8000810:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000814:	4770      	bxeq	lr
 8000816:	b530      	push	{r4, r5, lr}
 8000818:	f44f 7460 	mov.w	r4, #896	; 0x380
 800081c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000824:	e71c      	b.n	8000660 <__adddf3+0x138>
 8000826:	bf00      	nop

08000828 <__aeabi_ul2d>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	f04f 0500 	mov.w	r5, #0
 8000836:	e00a      	b.n	800084e <__aeabi_l2d+0x16>

08000838 <__aeabi_l2d>:
 8000838:	ea50 0201 	orrs.w	r2, r0, r1
 800083c:	bf08      	it	eq
 800083e:	4770      	bxeq	lr
 8000840:	b530      	push	{r4, r5, lr}
 8000842:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000846:	d502      	bpl.n	800084e <__aeabi_l2d+0x16>
 8000848:	4240      	negs	r0, r0
 800084a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800084e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000852:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000856:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800085a:	f43f aed8 	beq.w	800060e <__adddf3+0xe6>
 800085e:	f04f 0203 	mov.w	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000876:	f1c2 0320 	rsb	r3, r2, #32
 800087a:	fa00 fc03 	lsl.w	ip, r0, r3
 800087e:	fa20 f002 	lsr.w	r0, r0, r2
 8000882:	fa01 fe03 	lsl.w	lr, r1, r3
 8000886:	ea40 000e 	orr.w	r0, r0, lr
 800088a:	fa21 f102 	lsr.w	r1, r1, r2
 800088e:	4414      	add	r4, r2
 8000890:	e6bd      	b.n	800060e <__adddf3+0xe6>
 8000892:	bf00      	nop

08000894 <__aeabi_d2f>:
 8000894:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000898:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800089c:	bf24      	itt	cs
 800089e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008a6:	d90d      	bls.n	80008c4 <__aeabi_d2f+0x30>
 80008a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008bc:	bf08      	it	eq
 80008be:	f020 0001 	biceq.w	r0, r0, #1
 80008c2:	4770      	bx	lr
 80008c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008c8:	d121      	bne.n	800090e <__aeabi_d2f+0x7a>
 80008ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008ce:	bfbc      	itt	lt
 80008d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008d4:	4770      	bxlt	lr
 80008d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008de:	f1c2 0218 	rsb	r2, r2, #24
 80008e2:	f1c2 0c20 	rsb	ip, r2, #32
 80008e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008ea:	fa20 f002 	lsr.w	r0, r0, r2
 80008ee:	bf18      	it	ne
 80008f0:	f040 0001 	orrne.w	r0, r0, #1
 80008f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000900:	ea40 000c 	orr.w	r0, r0, ip
 8000904:	fa23 f302 	lsr.w	r3, r3, r2
 8000908:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800090c:	e7cc      	b.n	80008a8 <__aeabi_d2f+0x14>
 800090e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000912:	d107      	bne.n	8000924 <__aeabi_d2f+0x90>
 8000914:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000918:	bf1e      	ittt	ne
 800091a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800091e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000922:	4770      	bxne	lr
 8000924:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000928:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800092c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <__aeabi_frsub>:
 8000934:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000938:	e002      	b.n	8000940 <__addsf3>
 800093a:	bf00      	nop

0800093c <__aeabi_fsub>:
 800093c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000940 <__addsf3>:
 8000940:	0042      	lsls	r2, r0, #1
 8000942:	bf1f      	itttt	ne
 8000944:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000948:	ea92 0f03 	teqne	r2, r3
 800094c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000950:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000954:	d06a      	beq.n	8000a2c <__addsf3+0xec>
 8000956:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800095a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800095e:	bfc1      	itttt	gt
 8000960:	18d2      	addgt	r2, r2, r3
 8000962:	4041      	eorgt	r1, r0
 8000964:	4048      	eorgt	r0, r1
 8000966:	4041      	eorgt	r1, r0
 8000968:	bfb8      	it	lt
 800096a:	425b      	neglt	r3, r3
 800096c:	2b19      	cmp	r3, #25
 800096e:	bf88      	it	hi
 8000970:	4770      	bxhi	lr
 8000972:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000976:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800097a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800097e:	bf18      	it	ne
 8000980:	4240      	negne	r0, r0
 8000982:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000986:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800098a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800098e:	bf18      	it	ne
 8000990:	4249      	negne	r1, r1
 8000992:	ea92 0f03 	teq	r2, r3
 8000996:	d03f      	beq.n	8000a18 <__addsf3+0xd8>
 8000998:	f1a2 0201 	sub.w	r2, r2, #1
 800099c:	fa41 fc03 	asr.w	ip, r1, r3
 80009a0:	eb10 000c 	adds.w	r0, r0, ip
 80009a4:	f1c3 0320 	rsb	r3, r3, #32
 80009a8:	fa01 f103 	lsl.w	r1, r1, r3
 80009ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009b0:	d502      	bpl.n	80009b8 <__addsf3+0x78>
 80009b2:	4249      	negs	r1, r1
 80009b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009bc:	d313      	bcc.n	80009e6 <__addsf3+0xa6>
 80009be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009c2:	d306      	bcc.n	80009d2 <__addsf3+0x92>
 80009c4:	0840      	lsrs	r0, r0, #1
 80009c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80009ca:	f102 0201 	add.w	r2, r2, #1
 80009ce:	2afe      	cmp	r2, #254	; 0xfe
 80009d0:	d251      	bcs.n	8000a76 <__addsf3+0x136>
 80009d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009da:	bf08      	it	eq
 80009dc:	f020 0001 	biceq.w	r0, r0, #1
 80009e0:	ea40 0003 	orr.w	r0, r0, r3
 80009e4:	4770      	bx	lr
 80009e6:	0049      	lsls	r1, r1, #1
 80009e8:	eb40 0000 	adc.w	r0, r0, r0
 80009ec:	3a01      	subs	r2, #1
 80009ee:	bf28      	it	cs
 80009f0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009f4:	d2ed      	bcs.n	80009d2 <__addsf3+0x92>
 80009f6:	fab0 fc80 	clz	ip, r0
 80009fa:	f1ac 0c08 	sub.w	ip, ip, #8
 80009fe:	ebb2 020c 	subs.w	r2, r2, ip
 8000a02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a06:	bfaa      	itet	ge
 8000a08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a0c:	4252      	neglt	r2, r2
 8000a0e:	4318      	orrge	r0, r3
 8000a10:	bfbc      	itt	lt
 8000a12:	40d0      	lsrlt	r0, r2
 8000a14:	4318      	orrlt	r0, r3
 8000a16:	4770      	bx	lr
 8000a18:	f092 0f00 	teq	r2, #0
 8000a1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a20:	bf06      	itte	eq
 8000a22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a26:	3201      	addeq	r2, #1
 8000a28:	3b01      	subne	r3, #1
 8000a2a:	e7b5      	b.n	8000998 <__addsf3+0x58>
 8000a2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3a:	d021      	beq.n	8000a80 <__addsf3+0x140>
 8000a3c:	ea92 0f03 	teq	r2, r3
 8000a40:	d004      	beq.n	8000a4c <__addsf3+0x10c>
 8000a42:	f092 0f00 	teq	r2, #0
 8000a46:	bf08      	it	eq
 8000a48:	4608      	moveq	r0, r1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea90 0f01 	teq	r0, r1
 8000a50:	bf1c      	itt	ne
 8000a52:	2000      	movne	r0, #0
 8000a54:	4770      	bxne	lr
 8000a56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a5a:	d104      	bne.n	8000a66 <__addsf3+0x126>
 8000a5c:	0040      	lsls	r0, r0, #1
 8000a5e:	bf28      	it	cs
 8000a60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a64:	4770      	bx	lr
 8000a66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a6a:	bf3c      	itt	cc
 8000a6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a70:	4770      	bxcc	lr
 8000a72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a7e:	4770      	bx	lr
 8000a80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a84:	bf16      	itet	ne
 8000a86:	4608      	movne	r0, r1
 8000a88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a8c:	4601      	movne	r1, r0
 8000a8e:	0242      	lsls	r2, r0, #9
 8000a90:	bf06      	itte	eq
 8000a92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a96:	ea90 0f01 	teqeq	r0, r1
 8000a9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_ui2f>:
 8000aa0:	f04f 0300 	mov.w	r3, #0
 8000aa4:	e004      	b.n	8000ab0 <__aeabi_i2f+0x8>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_i2f>:
 8000aa8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000aac:	bf48      	it	mi
 8000aae:	4240      	negmi	r0, r0
 8000ab0:	ea5f 0c00 	movs.w	ip, r0
 8000ab4:	bf08      	it	eq
 8000ab6:	4770      	bxeq	lr
 8000ab8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000abc:	4601      	mov	r1, r0
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	e01c      	b.n	8000afe <__aeabi_l2f+0x2a>

08000ac4 <__aeabi_ul2f>:
 8000ac4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac8:	bf08      	it	eq
 8000aca:	4770      	bxeq	lr
 8000acc:	f04f 0300 	mov.w	r3, #0
 8000ad0:	e00a      	b.n	8000ae8 <__aeabi_l2f+0x14>
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_l2f>:
 8000ad4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad8:	bf08      	it	eq
 8000ada:	4770      	bxeq	lr
 8000adc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ae0:	d502      	bpl.n	8000ae8 <__aeabi_l2f+0x14>
 8000ae2:	4240      	negs	r0, r0
 8000ae4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae8:	ea5f 0c01 	movs.w	ip, r1
 8000aec:	bf02      	ittt	eq
 8000aee:	4684      	moveq	ip, r0
 8000af0:	4601      	moveq	r1, r0
 8000af2:	2000      	moveq	r0, #0
 8000af4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000af8:	bf08      	it	eq
 8000afa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000afe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b02:	fabc f28c 	clz	r2, ip
 8000b06:	3a08      	subs	r2, #8
 8000b08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b0c:	db10      	blt.n	8000b30 <__aeabi_l2f+0x5c>
 8000b0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b12:	4463      	add	r3, ip
 8000b14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b18:	f1c2 0220 	rsb	r2, r2, #32
 8000b1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b20:	fa20 f202 	lsr.w	r2, r0, r2
 8000b24:	eb43 0002 	adc.w	r0, r3, r2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f102 0220 	add.w	r2, r2, #32
 8000b34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b38:	f1c2 0220 	rsb	r2, r2, #32
 8000b3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b40:	fa21 f202 	lsr.w	r2, r1, r2
 8000b44:	eb43 0002 	adc.w	r0, r3, r2
 8000b48:	bf08      	it	eq
 8000b4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b4e:	4770      	bx	lr

08000b50 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <vApplicationGetIdleTaskMemory+0x28>)
 8000b60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <vApplicationGetIdleTaskMemory+0x2c>)
 8000b66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2280      	movs	r2, #128	; 0x80
 8000b6c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b6e:	bf00      	nop
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	20000094 	.word	0x20000094
 8000b7c:	20000148 	.word	0x20000148

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b5b0      	push	{r4, r5, r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b86:	f000 fc33 	bl	80013f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8a:	f000 f821 	bl	8000bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8e:	f000 f8c5 	bl	8000d1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b92:	f000 f899 	bl	8000cc8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000b96:	f000 f861 	bl	8000c5c <MX_SPI2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, ADXL345_Data_Collector_Task, osPriorityNormal, 0, 1024);
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <main+0x48>)
 8000b9c:	1d3c      	adds	r4, r7, #4
 8000b9e:	461d      	mov	r5, r3
 8000ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f004 f871 	bl	8004c98 <osThreadCreate>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <main+0x4c>)
 8000bba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  UART_Cobs_Config();
 8000bbc:	f000 f96e 	bl	8000e9c <UART_Cobs_Config>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bc0:	f004 f863 	bl	8004c8a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <main+0x44>
 8000bc6:	bf00      	nop
 8000bc8:	08007e64 	.word	0x08007e64
 8000bcc:	200024ac 	.word	0x200024ac

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b090      	sub	sp, #64	; 0x40
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	2228      	movs	r2, #40	; 0x28
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f006 fbe5 	bl	80073ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bf6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bfa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c00:	2301      	movs	r3, #1
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c04:	2302      	movs	r3, #2
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c0e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fff5 	bl	8001c08 <HAL_RCC_OscConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c24:	f000 f9c6 	bl	8000fb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c28:	230f      	movs	r3, #15
 8000c2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2102      	movs	r1, #2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fa60 	bl	8002108 <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c4e:	f000 f9b1 	bl	8000fb4 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3740      	adds	r7, #64	; 0x40
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_SPI2_Init+0x64>)
 8000c62:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <MX_SPI2_Init+0x68>)
 8000c64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <MX_SPI2_Init+0x64>)
 8000c68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_SPI2_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_SPI2_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_SPI2_Init+0x64>)
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_SPI2_Init+0x64>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_SPI2_Init+0x64>)
 8000c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_SPI2_Init+0x64>)
 8000c90:	2218      	movs	r2, #24
 8000c92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <MX_SPI2_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_SPI2_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <MX_SPI2_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_SPI2_Init+0x64>)
 8000ca8:	220a      	movs	r2, #10
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <MX_SPI2_Init+0x64>)
 8000cae:	f001 fbf5 	bl	800249c <HAL_SPI_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000cb8:	f000 f97c 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200024b0 	.word	0x200024b0
 8000cc4:	40003800 	.word	0x40003800

08000cc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <MX_USART2_UART_Init+0x50>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000d00:	f002 fd1e 	bl	8003740 <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d0a:	f000 f953 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20002530 	.word	0x20002530
 8000d18:	40004400 	.word	0x40004400

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d30:	4b37      	ldr	r3, [pc, #220]	; (8000e10 <MX_GPIO_Init+0xf4>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a36      	ldr	r2, [pc, #216]	; (8000e10 <MX_GPIO_Init+0xf4>)
 8000d36:	f043 0310 	orr.w	r3, r3, #16
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b34      	ldr	r3, [pc, #208]	; (8000e10 <MX_GPIO_Init+0xf4>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0310 	and.w	r3, r3, #16
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d48:	4b31      	ldr	r3, [pc, #196]	; (8000e10 <MX_GPIO_Init+0xf4>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a30      	ldr	r2, [pc, #192]	; (8000e10 <MX_GPIO_Init+0xf4>)
 8000d4e:	f043 0320 	orr.w	r3, r3, #32
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <MX_GPIO_Init+0xf4>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0320 	and.w	r3, r3, #32
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <MX_GPIO_Init+0xf4>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a2a      	ldr	r2, [pc, #168]	; (8000e10 <MX_GPIO_Init+0xf4>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <MX_GPIO_Init+0xf4>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <MX_GPIO_Init+0xf4>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a24      	ldr	r2, [pc, #144]	; (8000e10 <MX_GPIO_Init+0xf4>)
 8000d7e:	f043 0308 	orr.w	r3, r3, #8
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <MX_GPIO_Init+0xf4>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2120      	movs	r1, #32
 8000d94:	481f      	ldr	r0, [pc, #124]	; (8000e14 <MX_GPIO_Init+0xf8>)
 8000d96:	f000 fefd 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2140      	movs	r1, #64	; 0x40
 8000d9e:	481e      	ldr	r0, [pc, #120]	; (8000e18 <MX_GPIO_Init+0xfc>)
 8000da0:	f000 fef8 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <MX_GPIO_Init+0x100>)
 8000dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0310 	add.w	r3, r7, #16
 8000db6:	4619      	mov	r1, r3
 8000db8:	4819      	ldr	r0, [pc, #100]	; (8000e20 <MX_GPIO_Init+0x104>)
 8000dba:	f000 fd67 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_Pin */
  GPIO_InitStruct.Pin = Green_Pin;
 8000dbe:	2320      	movs	r3, #32
 8000dc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Green_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480f      	ldr	r0, [pc, #60]	; (8000e14 <MX_GPIO_Init+0xf8>)
 8000dd6:	f000 fd59 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000dda:	2340      	movs	r3, #64	; 0x40
 8000ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	4619      	mov	r1, r3
 8000df0:	4809      	ldr	r0, [pc, #36]	; (8000e18 <MX_GPIO_Init+0xfc>)
 8000df2:	f000 fd4b 	bl	800188c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2105      	movs	r1, #5
 8000dfa:	2028      	movs	r0, #40	; 0x28
 8000dfc:	f000 fbdf 	bl	80015be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e00:	2028      	movs	r0, #40	; 0x28
 8000e02:	f000 fbf8 	bl	80015f6 <HAL_NVIC_EnableIRQ>

}
 8000e06:	bf00      	nop
 8000e08:	3720      	adds	r7, #32
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010800 	.word	0x40010800
 8000e18:	40010c00 	.word	0x40010c00
 8000e1c:	10110000 	.word	0x10110000
 8000e20:	40011000 	.word	0x40011000

08000e24 <ADXL345_Config>:

/* USER CODE BEGIN 4 */
void ADXL345_Config()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
	ADXL_ConfigTypeDef_t ADXL 					=	{0};
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	811a      	strh	r2, [r3, #8]

	ADXL.PowerMode 								= 	NormalPower;
 8000e34:	2300      	movs	r3, #0
 8000e36:	713b      	strb	r3, [r7, #4]
	ADXL.BWRate	 								=	BWRATE_400;
 8000e38:	230c      	movs	r3, #12
 8000e3a:	717b      	strb	r3, [r7, #5]
	ADXL.WakeUpRate 							=	WakeUpRate_8;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	71bb      	strb	r3, [r7, #6]
	ADXL.AutoSleepConfig.AutoSleep 				=	AutoSleepOFF;
 8000e40:	2300      	movs	r3, #0
 8000e42:	71fb      	strb	r3, [r7, #7]
	ADXL.AutoSleepConfig.ThreshInact 			=	10;
 8000e44:	230a      	movs	r3, #10
 8000e46:	723b      	strb	r3, [r7, #8]
	ADXL.AutoSleepConfig.TimeInact				=	10;
 8000e48:	230a      	movs	r3, #10
 8000e4a:	727b      	strb	r3, [r7, #9]
	ADXL.Format.Resolution 						=	RESFULL;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	72bb      	strb	r3, [r7, #10]
	ADXL.Format.Range	 						=	RANGE_16G;
 8000e50:	2303      	movs	r3, #3
 8000e52:	72fb      	strb	r3, [r7, #11]
	ADXL.Format.IntInvert 						=	ACTIVE_HIGH;
 8000e54:	2300      	movs	r3, #0
 8000e56:	733b      	strb	r3, [r7, #12]
	ADXL.Format.SPI_Mode 						=	FORE_WIRE_MODE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	737b      	strb	r3, [r7, #13]
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2140      	movs	r1, #64	; 0x40
 8000e60:	480b      	ldr	r0, [pc, #44]	; (8000e90 <ADXL345_Config+0x6c>)
 8000e62:	f000 fe97 	bl	8001b94 <HAL_GPIO_WritePin>
#ifdef 	Debug_Active
	ADXL_Status ADXLStatus 						= 	ADXL345_Init(&ADXL, &hspi2);
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	490a      	ldr	r1, [pc, #40]	; (8000e94 <ADXL345_Config+0x70>)
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 fb2a 	bl	80044c4 <ADXL345_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	73fb      	strb	r3, [r7, #15]
	if (ADXLStatus == ADXL_ERR)
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d103      	bne.n	8000e82 <ADXL345_Config+0x5e>
	{
		perror("Error: Accelerometer is not found");
 8000e7a:	4807      	ldr	r0, [pc, #28]	; (8000e98 <ADXL345_Config+0x74>)
 8000e7c:	f006 fb94 	bl	80075a8 <perror>
		while(1)
 8000e80:	e7fe      	b.n	8000e80 <ADXL345_Config+0x5c>
	{
		ADXLStatus 					= 	ADXL345_Init(ADXL, hspi2);
	}
#endif

	ADXL345_MeasureON();
 8000e82:	f003 fc0b 	bl	800469c <ADXL345_MeasureON>

}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40010c00 	.word	0x40010c00
 8000e94:	200024b0 	.word	0x200024b0
 8000e98:	08007e80 	.word	0x08007e80

08000e9c <UART_Cobs_Config>:

void UART_Cobs_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af02      	add	r7, sp, #8

	Cobs_UART.huart -> huart						=	(UART_HandleTypeDef *) &huart2;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <UART_Cobs_Config+0x4c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a11      	ldr	r2, [pc, #68]	; (8000eec <UART_Cobs_Config+0x50>)
 8000ea8:	601a      	str	r2, [r3, #0]
	Cobs_UART.max_frame_size 						=	(size_t) Length_Realization;
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <UART_Cobs_Config+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	711a      	strb	r2, [r3, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f042 0204 	orr.w	r2, r2, #4
 8000eb6:	715a      	strb	r2, [r3, #5]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	719a      	strb	r2, [r3, #6]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	71da      	strb	r2, [r3, #7]
	Cobs_UART.queue_depth 							=	1;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <UART_Cobs_Config+0x4c>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	721a      	strb	r2, [r3, #8]
	uart_cobs_service_tx_create(					"Task_uart_cobs_service_tx",
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <UART_Cobs_Config+0x4c>)
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	f44f 7335 	mov.w	r3, #724	; 0x2d4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <UART_Cobs_Config+0x54>)
 8000ed4:	f003 fcee 	bl	80048b4 <uart_cobs_service_tx_create>
													osPriorityNormal,
													0,
													724,
													&Cobs_UART
								);
	uart_freertos_init(								Cobs_UART.huart
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <UART_Cobs_Config+0x4c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f003 fd6b 	bl	80049b8 <uart_freertos_init>
					  );

}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20002574 	.word	0x20002574
 8000eec:	20002530 	.word	0x20002530
 8000ef0:	08007ea4 	.word	0x08007ea4

08000ef4 <ADXL345_Data_Collector_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ADXL345_Data_Collector_Task */
void ADXL345_Data_Collector_Task(void const * argument)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	3b0c      	subs	r3, #12
 8000f04:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

	ADXL345_Config();
 8000f06:	f7ff ff8d 	bl	8000e24 <ADXL345_Config>

	float	Signal[Length_Realization] 			=	{0};
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	4618      	mov	r0, r3
 8000f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f16:	461a      	mov	r2, r3
 8000f18:	2100      	movs	r1, #0
 8000f1a:	f006 fa48 	bl	80073ae <memset>

	/* Infinite loop */
	for(uint16_t Index_Count = 0;; Index_Count++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000f24:	f102 020e 	add.w	r2, r2, #14
 8000f28:	8013      	strh	r3, [r2, #0]
	{
		//	Записать данные в очередь, когда буфер переполниться
		if (Index_Count > Length_Realization)
 8000f2a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000f2e:	f103 030e 	add.w	r3, r3, #14
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f38:	d90e      	bls.n	8000f58 <ADXL345_Data_Collector_Task+0x64>
		{
			Index_Count = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000f40:	f102 020e 	add.w	r2, r2, #14
 8000f44:	8013      	strh	r3, [r2, #0]
			uart_cobs_send(&Cobs_UART, &Signal, Length_Realization, 10 * portTICK_PERIOD_MS);
 8000f46:	f107 0110 	add.w	r1, r7, #16
 8000f4a:	3904      	subs	r1, #4
 8000f4c:	230a      	movs	r3, #10
 8000f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f52:	480e      	ldr	r0, [pc, #56]	; (8000f8c <ADXL345_Data_Collector_Task+0x98>)
 8000f54:	f003 fc10 	bl	8004778 <uart_cobs_send>
		}

		Signal[Index_Count] 					=	ADXL345_GetGValue(Yaxis);
 8000f58:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000f5c:	f103 030e 	add.w	r3, r3, #14
 8000f60:	881c      	ldrh	r4, [r3, #0]
 8000f62:	2034      	movs	r0, #52	; 0x34
 8000f64:	f003 fb64 	bl	8004630 <ADXL345_GetGValue>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	3b04      	subs	r3, #4
 8000f70:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for(uint16_t Index_Count = 0;; Index_Count++)
 8000f74:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000f78:	f103 030e 	add.w	r3, r3, #14
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000f84:	f102 020e 	add.w	r2, r2, #14
 8000f88:	8013      	strh	r3, [r2, #0]
		if (Index_Count > Length_Realization)
 8000f8a:	e7ce      	b.n	8000f2a <ADXL345_Data_Collector_Task+0x36>
 8000f8c:	20002574 	.word	0x20002574

08000f90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fa2:	f000 fa3b 	bl	800141c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40000800 	.word	0x40000800

08000fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb8:	b672      	cpsid	i
}
 8000fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <Error_Handler+0x8>
	...

08000fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <HAL_MspInit+0x68>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	4a17      	ldr	r2, [pc, #92]	; (8001028 <HAL_MspInit+0x68>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6193      	str	r3, [r2, #24]
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_MspInit+0x68>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_MspInit+0x68>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a11      	ldr	r2, [pc, #68]	; (8001028 <HAL_MspInit+0x68>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <HAL_MspInit+0x68>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	210f      	movs	r1, #15
 8000ffa:	f06f 0001 	mvn.w	r0, #1
 8000ffe:	f000 fade 	bl	80015be <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_MspInit+0x6c>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_MspInit+0x6c>)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000
 800102c:	40010000 	.word	0x40010000

08001030 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a20      	ldr	r2, [pc, #128]	; (80010cc <HAL_SPI_MspInit+0x9c>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d139      	bne.n	80010c4 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <HAL_SPI_MspInit+0xa0>)
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <HAL_SPI_MspInit+0xa0>)
 8001056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105a:	61d3      	str	r3, [r2, #28]
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <HAL_SPI_MspInit+0xa0>)
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_SPI_MspInit+0xa0>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a18      	ldr	r2, [pc, #96]	; (80010d0 <HAL_SPI_MspInit+0xa0>)
 800106e:	f043 0308 	orr.w	r3, r3, #8
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <HAL_SPI_MspInit+0xa0>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001080:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001084:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	4619      	mov	r1, r3
 8001094:	480f      	ldr	r0, [pc, #60]	; (80010d4 <HAL_SPI_MspInit+0xa4>)
 8001096:	f000 fbf9 	bl	800188c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800109a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800109e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4619      	mov	r1, r3
 80010ae:	4809      	ldr	r0, [pc, #36]	; (80010d4 <HAL_SPI_MspInit+0xa4>)
 80010b0:	f000 fbec 	bl	800188c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2105      	movs	r1, #5
 80010b8:	2024      	movs	r0, #36	; 0x24
 80010ba:	f000 fa80 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80010be:	2024      	movs	r0, #36	; 0x24
 80010c0:	f000 fa99 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40003800 	.word	0x40003800
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010c00 	.word	0x40010c00

080010d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a19      	ldr	r2, [pc, #100]	; (8001158 <HAL_UART_MspInit+0x80>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d12b      	bne.n	8001150 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <HAL_UART_MspInit+0x84>)
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	4a17      	ldr	r2, [pc, #92]	; (800115c <HAL_UART_MspInit+0x84>)
 80010fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001102:	61d3      	str	r3, [r2, #28]
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_UART_MspInit+0x84>)
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_UART_MspInit+0x84>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a11      	ldr	r2, [pc, #68]	; (800115c <HAL_UART_MspInit+0x84>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <HAL_UART_MspInit+0x84>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001128:	230c      	movs	r3, #12
 800112a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2302      	movs	r3, #2
 8001132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	4619      	mov	r1, r3
 800113a:	4809      	ldr	r0, [pc, #36]	; (8001160 <HAL_UART_MspInit+0x88>)
 800113c:	f000 fba6 	bl	800188c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2105      	movs	r1, #5
 8001144:	2026      	movs	r0, #38	; 0x26
 8001146:	f000 fa3a 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800114a:	2026      	movs	r0, #38	; 0x26
 800114c:	f000 fa53 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001150:	bf00      	nop
 8001152:	3720      	adds	r7, #32
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40004400 	.word	0x40004400
 800115c:	40021000 	.word	0x40021000
 8001160:	40010800 	.word	0x40010800

08001164 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	; 0x30
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	201e      	movs	r0, #30
 800117a:	f000 fa20 	bl	80015be <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800117e:	201e      	movs	r0, #30
 8001180:	f000 fa39 	bl	80015f6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <HAL_InitTick+0xa0>)
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <HAL_InitTick+0xa0>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	61d3      	str	r3, [r2, #28]
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <HAL_InitTick+0xa0>)
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800119c:	f107 0210 	add.w	r2, r7, #16
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4611      	mov	r1, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 f92a 	bl	8002400 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80011ac:	f001 f900 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 80011b0:	4603      	mov	r3, r0
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b8:	4a13      	ldr	r2, [pc, #76]	; (8001208 <HAL_InitTick+0xa4>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	0c9b      	lsrs	r3, r3, #18
 80011c0:	3b01      	subs	r3, #1
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_InitTick+0xa8>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <HAL_InitTick+0xac>)
 80011c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_InitTick+0xa8>)
 80011cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_InitTick+0xa8>)
 80011d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_InitTick+0xa8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_InitTick+0xa8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80011e4:	4809      	ldr	r0, [pc, #36]	; (800120c <HAL_InitTick+0xa8>)
 80011e6:	f002 f861 	bl	80032ac <HAL_TIM_Base_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d104      	bne.n	80011fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80011f0:	4806      	ldr	r0, [pc, #24]	; (800120c <HAL_InitTick+0xa8>)
 80011f2:	f002 f8b3 	bl	800335c <HAL_TIM_Base_Start_IT>
 80011f6:	4603      	mov	r3, r0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3730      	adds	r7, #48	; 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000
 8001208:	431bde83 	.word	0x431bde83
 800120c:	20002588 	.word	0x20002588
 8001210:	40000800 	.word	0x40000800

08001214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <NMI_Handler+0x4>

0800121a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <MemManage_Handler+0x4>

08001226 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <UsageFault_Handler+0x4>

08001232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
	...

08001240 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <TIM4_IRQHandler+0x10>)
 8001246:	f002 f8db 	bl	8003400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20002588 	.word	0x20002588

08001254 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <SPI2_IRQHandler+0x10>)
 800125a:	f001 fb91 	bl	8002980 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200024b0 	.word	0x200024b0

08001268 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <USART2_IRQHandler+0x10>)
 800126e:	f002 fbf7 	bl	8003a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20002530 	.word	0x20002530

0800127c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001280:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001284:	f000 fc9e 	bl	8001bc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	e00a      	b.n	80012b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800129e:	f3af 8000 	nop.w
 80012a2:	4601      	mov	r1, r0
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	60ba      	str	r2, [r7, #8]
 80012aa:	b2ca      	uxtb	r2, r1
 80012ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbf0      	blt.n	800129e <_read+0x12>
	}

return len;
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	e009      	b.n	80012ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	60ba      	str	r2, [r7, #8]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dbf1      	blt.n	80012d8 <_write+0x12>
	}
	return len;
 80012f4:	687b      	ldr	r3, [r7, #4]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <_close>:

int _close(int file)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
	return -1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
	return 0;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <_sbrk+0x5c>)
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <_sbrk+0x60>)
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <_sbrk+0x64>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <_sbrk+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	429a      	cmp	r2, r3
 800135a:	d207      	bcs.n	800136c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800135c:	f005 fef6 	bl	800714c <__errno>
 8001360:	4603      	mov	r3, r0
 8001362:	220c      	movs	r2, #12
 8001364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e009      	b.n	8001380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <_sbrk+0x64>)
 800137c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20005000 	.word	0x20005000
 800138c:	00000400 	.word	0x00000400
 8001390:	20000348 	.word	0x20000348
 8001394:	200025e8 	.word	0x200025e8

08001398 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013a6:	490d      	ldr	r1, [pc, #52]	; (80013dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013bc:	4c0a      	ldr	r4, [pc, #40]	; (80013e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013ca:	f7ff ffe5 	bl	8001398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ce:	f005 ffb9 	bl	8007344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013d2:	f7ff fbd5 	bl	8000b80 <main>
  bx lr
 80013d6:	4770      	bx	lr
  ldr r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013dc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80013e0:	080085f8 	.word	0x080085f8
  ldr r2, =_sbss
 80013e4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80013e8:	200025e4 	.word	0x200025e4

080013ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC1_2_IRQHandler>
	...

080013f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_Init+0x28>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_Init+0x28>)
 80013fa:	f043 0310 	orr.w	r3, r3, #16
 80013fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001400:	2003      	movs	r0, #3
 8001402:	f000 f8d1 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001406:	200f      	movs	r0, #15
 8001408:	f7ff feac 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800140c:	f7ff fdd8 	bl	8000fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40022000 	.word	0x40022000

0800141c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_IncTick+0x1c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_IncTick+0x20>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4413      	add	r3, r2
 800142c:	4a03      	ldr	r2, [pc, #12]	; (800143c <HAL_IncTick+0x20>)
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	20000008 	.word	0x20000008
 800143c:	200025d0 	.word	0x200025d0

08001440 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b02      	ldr	r3, [pc, #8]	; (8001450 <HAL_GetTick+0x10>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	200025d0 	.word	0x200025d0

08001454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001470:	4013      	ands	r3, r2
 8001472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800147c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001486:	4a04      	ldr	r2, [pc, #16]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	60d3      	str	r3, [r2, #12]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <__NVIC_GetPriorityGrouping+0x18>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	f003 0307 	and.w	r3, r3, #7
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db0b      	blt.n	80014e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	f003 021f 	and.w	r2, r3, #31
 80014d0:	4906      	ldr	r1, [pc, #24]	; (80014ec <__NVIC_EnableIRQ+0x34>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	2001      	movs	r0, #1
 80014da:	fa00 f202 	lsl.w	r2, r0, r2
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	e000e100 	.word	0xe000e100

080014f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	db0a      	blt.n	800151a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	490c      	ldr	r1, [pc, #48]	; (800153c <__NVIC_SetPriority+0x4c>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	440b      	add	r3, r1
 8001514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001518:	e00a      	b.n	8001530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4908      	ldr	r1, [pc, #32]	; (8001540 <__NVIC_SetPriority+0x50>)
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	3b04      	subs	r3, #4
 8001528:	0112      	lsls	r2, r2, #4
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	440b      	add	r3, r1
 800152e:	761a      	strb	r2, [r3, #24]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000e100 	.word	0xe000e100
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	; 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f1c3 0307 	rsb	r3, r3, #7
 800155e:	2b04      	cmp	r3, #4
 8001560:	bf28      	it	cs
 8001562:	2304      	movcs	r3, #4
 8001564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3304      	adds	r3, #4
 800156a:	2b06      	cmp	r3, #6
 800156c:	d902      	bls.n	8001574 <NVIC_EncodePriority+0x30>
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3b03      	subs	r3, #3
 8001572:	e000      	b.n	8001576 <NVIC_EncodePriority+0x32>
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	f04f 32ff 	mov.w	r2, #4294967295
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	401a      	ands	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43d9      	mvns	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	4313      	orrs	r3, r2
         );
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3724      	adds	r7, #36	; 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff4f 	bl	8001454 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff64 	bl	800149c <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ffb2 	bl	8001544 <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff81 	bl	80014f0 <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff57 	bl	80014b8 <__NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d101      	bne.n	8001632 <HAL_DMA_Start_IT+0x20>
 800162e:	2302      	movs	r3, #2
 8001630:	e04a      	b.n	80016c8 <HAL_DMA_Start_IT+0xb6>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001640:	2b01      	cmp	r3, #1
 8001642:	d13a      	bne.n	80016ba <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2202      	movs	r2, #2
 8001648:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0201 	bic.w	r2, r2, #1
 8001660:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	68b9      	ldr	r1, [r7, #8]
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 f8e1 	bl	8001830 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001672:	2b00      	cmp	r3, #0
 8001674:	d008      	beq.n	8001688 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 020e 	orr.w	r2, r2, #14
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e00f      	b.n	80016a8 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0204 	bic.w	r2, r2, #4
 8001696:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 020a 	orr.w	r2, r2, #10
 80016a6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e005      	b.n	80016c6 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80016c2:	2302      	movs	r3, #2
 80016c4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80016c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d008      	beq.n	80016f8 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2204      	movs	r2, #4
 80016ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e020      	b.n	800173a <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 020e 	bic.w	r2, r2, #14
 8001706:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0201 	bic.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001720:	2101      	movs	r1, #1
 8001722:	fa01 f202 	lsl.w	r2, r1, r2
 8001726:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001738:	7bfb      	ldrb	r3, [r7, #15]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001756:	2b02      	cmp	r3, #2
 8001758:	d005      	beq.n	8001766 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2204      	movs	r2, #4
 800175e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e051      	b.n	800180a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 020e 	bic.w	r2, r2, #14
 8001774:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0201 	bic.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a22      	ldr	r2, [pc, #136]	; (8001814 <HAL_DMA_Abort_IT+0xd0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d029      	beq.n	80017e4 <HAL_DMA_Abort_IT+0xa0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a20      	ldr	r2, [pc, #128]	; (8001818 <HAL_DMA_Abort_IT+0xd4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d022      	beq.n	80017e0 <HAL_DMA_Abort_IT+0x9c>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a1f      	ldr	r2, [pc, #124]	; (800181c <HAL_DMA_Abort_IT+0xd8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d01a      	beq.n	80017da <HAL_DMA_Abort_IT+0x96>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_DMA_Abort_IT+0xdc>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d012      	beq.n	80017d4 <HAL_DMA_Abort_IT+0x90>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_DMA_Abort_IT+0xe0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d00a      	beq.n	80017ce <HAL_DMA_Abort_IT+0x8a>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a1a      	ldr	r2, [pc, #104]	; (8001828 <HAL_DMA_Abort_IT+0xe4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d102      	bne.n	80017c8 <HAL_DMA_Abort_IT+0x84>
 80017c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017c6:	e00e      	b.n	80017e6 <HAL_DMA_Abort_IT+0xa2>
 80017c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017cc:	e00b      	b.n	80017e6 <HAL_DMA_Abort_IT+0xa2>
 80017ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d2:	e008      	b.n	80017e6 <HAL_DMA_Abort_IT+0xa2>
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	e005      	b.n	80017e6 <HAL_DMA_Abort_IT+0xa2>
 80017da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017de:	e002      	b.n	80017e6 <HAL_DMA_Abort_IT+0xa2>
 80017e0:	2310      	movs	r3, #16
 80017e2:	e000      	b.n	80017e6 <HAL_DMA_Abort_IT+0xa2>
 80017e4:	2301      	movs	r3, #1
 80017e6:	4a11      	ldr	r2, [pc, #68]	; (800182c <HAL_DMA_Abort_IT+0xe8>)
 80017e8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	4798      	blx	r3
    } 
  }
  return status;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40020008 	.word	0x40020008
 8001818:	4002001c 	.word	0x4002001c
 800181c:	40020030 	.word	0x40020030
 8001820:	40020044 	.word	0x40020044
 8001824:	40020058 	.word	0x40020058
 8001828:	4002006c 	.word	0x4002006c
 800182c:	40020000 	.word	0x40020000

08001830 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f202 	lsl.w	r2, r1, r2
 800184c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b10      	cmp	r3, #16
 800185c:	d108      	bne.n	8001870 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800186e:	e007      	b.n	8001880 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	60da      	str	r2, [r3, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
	...

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b08b      	sub	sp, #44	; 0x2c
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	e169      	b.n	8001b74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018a0:	2201      	movs	r2, #1
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f040 8158 	bne.w	8001b6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4a9a      	ldr	r2, [pc, #616]	; (8001b2c <HAL_GPIO_Init+0x2a0>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d05e      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018c8:	4a98      	ldr	r2, [pc, #608]	; (8001b2c <HAL_GPIO_Init+0x2a0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d875      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018ce:	4a98      	ldr	r2, [pc, #608]	; (8001b30 <HAL_GPIO_Init+0x2a4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d058      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018d4:	4a96      	ldr	r2, [pc, #600]	; (8001b30 <HAL_GPIO_Init+0x2a4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d86f      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018da:	4a96      	ldr	r2, [pc, #600]	; (8001b34 <HAL_GPIO_Init+0x2a8>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d052      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018e0:	4a94      	ldr	r2, [pc, #592]	; (8001b34 <HAL_GPIO_Init+0x2a8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d869      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018e6:	4a94      	ldr	r2, [pc, #592]	; (8001b38 <HAL_GPIO_Init+0x2ac>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d04c      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018ec:	4a92      	ldr	r2, [pc, #584]	; (8001b38 <HAL_GPIO_Init+0x2ac>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d863      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018f2:	4a92      	ldr	r2, [pc, #584]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d046      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018f8:	4a90      	ldr	r2, [pc, #576]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d85d      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d82a      	bhi.n	8001958 <HAL_GPIO_Init+0xcc>
 8001902:	2b12      	cmp	r3, #18
 8001904:	d859      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 8001906:	a201      	add	r2, pc, #4	; (adr r2, 800190c <HAL_GPIO_Init+0x80>)
 8001908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190c:	08001987 	.word	0x08001987
 8001910:	08001961 	.word	0x08001961
 8001914:	08001973 	.word	0x08001973
 8001918:	080019b5 	.word	0x080019b5
 800191c:	080019bb 	.word	0x080019bb
 8001920:	080019bb 	.word	0x080019bb
 8001924:	080019bb 	.word	0x080019bb
 8001928:	080019bb 	.word	0x080019bb
 800192c:	080019bb 	.word	0x080019bb
 8001930:	080019bb 	.word	0x080019bb
 8001934:	080019bb 	.word	0x080019bb
 8001938:	080019bb 	.word	0x080019bb
 800193c:	080019bb 	.word	0x080019bb
 8001940:	080019bb 	.word	0x080019bb
 8001944:	080019bb 	.word	0x080019bb
 8001948:	080019bb 	.word	0x080019bb
 800194c:	080019bb 	.word	0x080019bb
 8001950:	08001969 	.word	0x08001969
 8001954:	0800197d 	.word	0x0800197d
 8001958:	4a79      	ldr	r2, [pc, #484]	; (8001b40 <HAL_GPIO_Init+0x2b4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800195e:	e02c      	b.n	80019ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	623b      	str	r3, [r7, #32]
          break;
 8001966:	e029      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	3304      	adds	r3, #4
 800196e:	623b      	str	r3, [r7, #32]
          break;
 8001970:	e024      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	3308      	adds	r3, #8
 8001978:	623b      	str	r3, [r7, #32]
          break;
 800197a:	e01f      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	330c      	adds	r3, #12
 8001982:	623b      	str	r3, [r7, #32]
          break;
 8001984:	e01a      	b.n	80019bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800198e:	2304      	movs	r3, #4
 8001990:	623b      	str	r3, [r7, #32]
          break;
 8001992:	e013      	b.n	80019bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800199c:	2308      	movs	r3, #8
 800199e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	611a      	str	r2, [r3, #16]
          break;
 80019a6:	e009      	b.n	80019bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a8:	2308      	movs	r3, #8
 80019aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	615a      	str	r2, [r3, #20]
          break;
 80019b2:	e003      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
          break;
 80019b8:	e000      	b.n	80019bc <HAL_GPIO_Init+0x130>
          break;
 80019ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2bff      	cmp	r3, #255	; 0xff
 80019c0:	d801      	bhi.n	80019c6 <HAL_GPIO_Init+0x13a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	e001      	b.n	80019ca <HAL_GPIO_Init+0x13e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3304      	adds	r3, #4
 80019ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2bff      	cmp	r3, #255	; 0xff
 80019d0:	d802      	bhi.n	80019d8 <HAL_GPIO_Init+0x14c>
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	e002      	b.n	80019de <HAL_GPIO_Init+0x152>
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	3b08      	subs	r3, #8
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	210f      	movs	r1, #15
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	401a      	ands	r2, r3
 80019f0:	6a39      	ldr	r1, [r7, #32]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	431a      	orrs	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80b1 	beq.w	8001b6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a0c:	4b4d      	ldr	r3, [pc, #308]	; (8001b44 <HAL_GPIO_Init+0x2b8>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a4c      	ldr	r2, [pc, #304]	; (8001b44 <HAL_GPIO_Init+0x2b8>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b4a      	ldr	r3, [pc, #296]	; (8001b44 <HAL_GPIO_Init+0x2b8>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a24:	4a48      	ldr	r2, [pc, #288]	; (8001b48 <HAL_GPIO_Init+0x2bc>)
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a40      	ldr	r2, [pc, #256]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d013      	beq.n	8001a78 <HAL_GPIO_Init+0x1ec>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a3f      	ldr	r2, [pc, #252]	; (8001b50 <HAL_GPIO_Init+0x2c4>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d00d      	beq.n	8001a74 <HAL_GPIO_Init+0x1e8>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a3e      	ldr	r2, [pc, #248]	; (8001b54 <HAL_GPIO_Init+0x2c8>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d007      	beq.n	8001a70 <HAL_GPIO_Init+0x1e4>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a3d      	ldr	r2, [pc, #244]	; (8001b58 <HAL_GPIO_Init+0x2cc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_GPIO_Init+0x1e0>
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e006      	b.n	8001a7a <HAL_GPIO_Init+0x1ee>
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	e004      	b.n	8001a7a <HAL_GPIO_Init+0x1ee>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e002      	b.n	8001a7a <HAL_GPIO_Init+0x1ee>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <HAL_GPIO_Init+0x1ee>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a7c:	f002 0203 	and.w	r2, r2, #3
 8001a80:	0092      	lsls	r2, r2, #2
 8001a82:	4093      	lsls	r3, r2
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a8a:	492f      	ldr	r1, [pc, #188]	; (8001b48 <HAL_GPIO_Init+0x2bc>)
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001aa4:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	492c      	ldr	r1, [pc, #176]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	600b      	str	r3, [r1, #0]
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4928      	ldr	r1, [pc, #160]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d006      	beq.n	8001ada <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001acc:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	4922      	ldr	r1, [pc, #136]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	491e      	ldr	r1, [pc, #120]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	4918      	ldr	r1, [pc, #96]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b02:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	4914      	ldr	r1, [pc, #80]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d021      	beq.n	8001b60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	490e      	ldr	r1, [pc, #56]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	60cb      	str	r3, [r1, #12]
 8001b28:	e021      	b.n	8001b6e <HAL_GPIO_Init+0x2e2>
 8001b2a:	bf00      	nop
 8001b2c:	10320000 	.word	0x10320000
 8001b30:	10310000 	.word	0x10310000
 8001b34:	10220000 	.word	0x10220000
 8001b38:	10210000 	.word	0x10210000
 8001b3c:	10120000 	.word	0x10120000
 8001b40:	10110000 	.word	0x10110000
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40010000 	.word	0x40010000
 8001b4c:	40010800 	.word	0x40010800
 8001b50:	40010c00 	.word	0x40010c00
 8001b54:	40011000 	.word	0x40011000
 8001b58:	40011400 	.word	0x40011400
 8001b5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	4909      	ldr	r1, [pc, #36]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	3301      	adds	r3, #1
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f47f ae8e 	bne.w	80018a0 <HAL_GPIO_Init+0x14>
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	372c      	adds	r7, #44	; 0x2c
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	40010400 	.word	0x40010400

08001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ba4:	787b      	ldrb	r3, [r7, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bb0:	e003      	b.n	8001bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	041a      	lsls	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	611a      	str	r2, [r3, #16]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bd0:	695a      	ldr	r2, [r3, #20]
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d006      	beq.n	8001be8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 f806 	bl	8001bf4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40010400 	.word	0x40010400

08001bf4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e26c      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8087 	beq.w	8001d36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c28:	4b92      	ldr	r3, [pc, #584]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d00c      	beq.n	8001c4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c34:	4b8f      	ldr	r3, [pc, #572]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d112      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
 8001c40:	4b8c      	ldr	r3, [pc, #560]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4c:	d10b      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4e:	4b89      	ldr	r3, [pc, #548]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d06c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x12c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d168      	bne.n	8001d34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e246      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x76>
 8001c70:	4b80      	ldr	r3, [pc, #512]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a7f      	ldr	r2, [pc, #508]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e02e      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x98>
 8001c86:	4b7b      	ldr	r3, [pc, #492]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7a      	ldr	r2, [pc, #488]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b78      	ldr	r3, [pc, #480]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a77      	ldr	r2, [pc, #476]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e01d      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xbc>
 8001caa:	4b72      	ldr	r3, [pc, #456]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a71      	ldr	r2, [pc, #452]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b6f      	ldr	r3, [pc, #444]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a6e      	ldr	r2, [pc, #440]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001cc4:	4b6b      	ldr	r3, [pc, #428]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a6a      	ldr	r2, [pc, #424]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b68      	ldr	r3, [pc, #416]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a67      	ldr	r2, [pc, #412]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d013      	beq.n	8001d0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fbac 	bl	8001440 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff fba8 	bl	8001440 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1fa      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b5d      	ldr	r3, [pc, #372]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0xe4>
 8001d0a:	e014      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fb98 	bl	8001440 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff fb94 	bl	8001440 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e1e6      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x10c>
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d063      	beq.n	8001e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d42:	4b4c      	ldr	r3, [pc, #304]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d4e:	4b49      	ldr	r3, [pc, #292]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d11c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x18c>
 8001d5a:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d116      	bne.n	8001d94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e1ba      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4939      	ldr	r1, [pc, #228]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	e03a      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d020      	beq.n	8001dde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9c:	4b36      	ldr	r3, [pc, #216]	; (8001e78 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff fb4d 	bl	8001440 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001daa:	f7ff fb49 	bl	8001440 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e19b      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4927      	ldr	r1, [pc, #156]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]
 8001ddc:	e015      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dde:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <HAL_RCC_OscConfig+0x270>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff fb2c 	bl	8001440 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dec:	f7ff fb28 	bl	8001440 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e17a      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d03a      	beq.n	8001e8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d019      	beq.n	8001e52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_RCC_OscConfig+0x274>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7ff fb0c 	bl	8001440 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fb08 	bl	8001440 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e15a      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f000 fb08 	bl	8002460 <RCC_Delay>
 8001e50:	e01c      	b.n	8001e8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_RCC_OscConfig+0x274>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7ff faf2 	bl	8001440 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5e:	e00f      	b.n	8001e80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff faee 	bl	8001440 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d908      	bls.n	8001e80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e140      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	42420000 	.word	0x42420000
 8001e7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	4b9e      	ldr	r3, [pc, #632]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1e9      	bne.n	8001e60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80a6 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9e:	4b97      	ldr	r3, [pc, #604]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	4b94      	ldr	r3, [pc, #592]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a93      	ldr	r2, [pc, #588]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	61d3      	str	r3, [r2, #28]
 8001eb6:	4b91      	ldr	r3, [pc, #580]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec6:	4b8e      	ldr	r3, [pc, #568]	; (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d118      	bne.n	8001f04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed2:	4b8b      	ldr	r3, [pc, #556]	; (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a8a      	ldr	r2, [pc, #552]	; (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ede:	f7ff faaf 	bl	8001440 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7ff faab 	bl	8001440 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b64      	cmp	r3, #100	; 0x64
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e0fd      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	4b81      	ldr	r3, [pc, #516]	; (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x312>
 8001f0c:	4b7b      	ldr	r3, [pc, #492]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a7a      	ldr	r2, [pc, #488]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	e02d      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x334>
 8001f22:	4b76      	ldr	r3, [pc, #472]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a75      	ldr	r2, [pc, #468]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	4b73      	ldr	r3, [pc, #460]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a72      	ldr	r2, [pc, #456]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	6213      	str	r3, [r2, #32]
 8001f3a:	e01c      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d10c      	bne.n	8001f5e <HAL_RCC_OscConfig+0x356>
 8001f44:	4b6d      	ldr	r3, [pc, #436]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a6c      	ldr	r2, [pc, #432]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	4b6a      	ldr	r3, [pc, #424]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4a69      	ldr	r2, [pc, #420]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6213      	str	r3, [r2, #32]
 8001f5c:	e00b      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f5e:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a66      	ldr	r2, [pc, #408]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	4b64      	ldr	r3, [pc, #400]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a63      	ldr	r2, [pc, #396]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d015      	beq.n	8001faa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff fa5f 	bl	8001440 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7ff fa5b 	bl	8001440 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e0ab      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	4b57      	ldr	r3, [pc, #348]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0ee      	beq.n	8001f86 <HAL_RCC_OscConfig+0x37e>
 8001fa8:	e014      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7ff fa49 	bl	8001440 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb0:	e00a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7ff fa45 	bl	8001440 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e095      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	4b4c      	ldr	r3, [pc, #304]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1ee      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d105      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fda:	4b48      	ldr	r3, [pc, #288]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a47      	ldr	r2, [pc, #284]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8081 	beq.w	80020f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff0:	4b42      	ldr	r3, [pc, #264]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d061      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d146      	bne.n	8002092 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002004:	4b3f      	ldr	r3, [pc, #252]	; (8002104 <HAL_RCC_OscConfig+0x4fc>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7ff fa19 	bl	8001440 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002012:	f7ff fa15 	bl	8001440 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e067      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002024:	4b35      	ldr	r3, [pc, #212]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f0      	bne.n	8002012 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002038:	d108      	bne.n	800204c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	492d      	ldr	r1, [pc, #180]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204c:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a19      	ldr	r1, [r3, #32]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	430b      	orrs	r3, r1
 800205e:	4927      	ldr	r1, [pc, #156]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002064:	4b27      	ldr	r3, [pc, #156]	; (8002104 <HAL_RCC_OscConfig+0x4fc>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7ff f9e9 	bl	8001440 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002072:	f7ff f9e5 	bl	8001440 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e037      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002084:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x46a>
 8002090:	e02f      	b.n	80020f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002092:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <HAL_RCC_OscConfig+0x4fc>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7ff f9d2 	bl	8001440 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7ff f9ce 	bl	8001440 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e020      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x498>
 80020be:	e018      	b.n	80020f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e013      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	40007000 	.word	0x40007000
 8002104:	42420060 	.word	0x42420060

08002108 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0d0      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d910      	bls.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b67      	ldr	r3, [pc, #412]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 0207 	bic.w	r2, r3, #7
 8002132:	4965      	ldr	r1, [pc, #404]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0b8      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002164:	4b59      	ldr	r3, [pc, #356]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800216e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800217c:	4b53      	ldr	r3, [pc, #332]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a52      	ldr	r2, [pc, #328]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002186:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	4b50      	ldr	r3, [pc, #320]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	494d      	ldr	r1, [pc, #308]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d040      	beq.n	8002228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d115      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e07f      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c6:	4b41      	ldr	r3, [pc, #260]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e073      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d6:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e06b      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e6:	4b39      	ldr	r3, [pc, #228]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f023 0203 	bic.w	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4936      	ldr	r1, [pc, #216]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f8:	f7ff f922 	bl	8001440 <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002200:	f7ff f91e 	bl	8001440 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e053      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	4b2d      	ldr	r3, [pc, #180]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 020c 	and.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	429a      	cmp	r2, r3
 8002226:	d1eb      	bne.n	8002200 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d210      	bcs.n	8002258 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 0207 	bic.w	r2, r3, #7
 800223e:	4922      	ldr	r1, [pc, #136]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e032      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4916      	ldr	r1, [pc, #88]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	490e      	ldr	r1, [pc, #56]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002296:	f000 f821 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 800229a:	4602      	mov	r2, r0
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	490a      	ldr	r1, [pc, #40]	; (80022d0 <HAL_RCC_ClockConfig+0x1c8>)
 80022a8:	5ccb      	ldrb	r3, [r1, r3]
 80022aa:	fa22 f303 	lsr.w	r3, r2, r3
 80022ae:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1cc>)
 80022b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x1d0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe ff54 	bl	8001164 <HAL_InitTick>

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40022000 	.word	0x40022000
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08007ed8 	.word	0x08007ed8
 80022d4:	20000000 	.word	0x20000000
 80022d8:	20000004 	.word	0x20000004

080022dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	b490      	push	{r4, r7}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022e2:	4b2a      	ldr	r3, [pc, #168]	; (800238c <HAL_RCC_GetSysClockFreq+0xb0>)
 80022e4:	1d3c      	adds	r4, r7, #4
 80022e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022ec:	f240 2301 	movw	r3, #513	; 0x201
 80022f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002306:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b04      	cmp	r3, #4
 8002314:	d002      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x40>
 8002316:	2b08      	cmp	r3, #8
 8002318:	d003      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0x46>
 800231a:	e02d      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800231c:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <HAL_RCC_GetSysClockFreq+0xb8>)
 800231e:	623b      	str	r3, [r7, #32]
      break;
 8002320:	e02d      	b.n	800237e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	0c9b      	lsrs	r3, r3, #18
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800232e:	4413      	add	r3, r2
 8002330:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002334:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	0c5b      	lsrs	r3, r3, #17
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800234e:	4413      	add	r3, r2
 8002350:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002354:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <HAL_RCC_GetSysClockFreq+0xb8>)
 800235a:	fb02 f203 	mul.w	r2, r2, r3
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
 8002366:	e004      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <HAL_RCC_GetSysClockFreq+0xbc>)
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	623b      	str	r3, [r7, #32]
      break;
 8002376:	e002      	b.n	800237e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_RCC_GetSysClockFreq+0xb8>)
 800237a:	623b      	str	r3, [r7, #32]
      break;
 800237c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237e:	6a3b      	ldr	r3, [r7, #32]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3728      	adds	r7, #40	; 0x28
 8002384:	46bd      	mov	sp, r7
 8002386:	bc90      	pop	{r4, r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	08007ec0 	.word	0x08007ec0
 8002390:	40021000 	.word	0x40021000
 8002394:	007a1200 	.word	0x007a1200
 8002398:	003d0900 	.word	0x003d0900

0800239c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a0:	4b02      	ldr	r3, [pc, #8]	; (80023ac <HAL_RCC_GetHCLKFreq+0x10>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	20000000 	.word	0x20000000

080023b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023b4:	f7ff fff2 	bl	800239c <HAL_RCC_GetHCLKFreq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	0a1b      	lsrs	r3, r3, #8
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	4903      	ldr	r1, [pc, #12]	; (80023d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c6:	5ccb      	ldrb	r3, [r1, r3]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	08007ee8 	.word	0x08007ee8

080023d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023dc:	f7ff ffde 	bl	800239c <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	0adb      	lsrs	r3, r3, #11
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4903      	ldr	r1, [pc, #12]	; (80023fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	08007ee8 	.word	0x08007ee8

08002400 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	220f      	movs	r2, #15
 800240e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_RCC_GetClockConfig+0x58>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0203 	and.w	r2, r3, #3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <HAL_RCC_GetClockConfig+0x58>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_RCC_GetClockConfig+0x58>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <HAL_RCC_GetClockConfig+0x58>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	08db      	lsrs	r3, r3, #3
 800243a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_RCC_GetClockConfig+0x5c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0207 	and.w	r2, r3, #7
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	40021000 	.word	0x40021000
 800245c:	40022000 	.word	0x40022000

08002460 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002468:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <RCC_Delay+0x34>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <RCC_Delay+0x38>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	0a5b      	lsrs	r3, r3, #9
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800247c:	bf00      	nop
  }
  while (Delay --);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1e5a      	subs	r2, r3, #1
 8002482:	60fa      	str	r2, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f9      	bne.n	800247c <RCC_Delay+0x1c>
}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	20000000 	.word	0x20000000
 8002498:	10624dd3 	.word	0x10624dd3

0800249c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e096      	b.n	80025dc <HAL_SPI_Init+0x140>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d108      	bne.n	80024c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024be:	d009      	beq.n	80024d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	61da      	str	r2, [r3, #28]
 80024c6:	e005      	b.n	80024d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d126      	bne.n	8002534 <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a3c      	ldr	r2, [pc, #240]	; (80025e4 <HAL_SPI_Init+0x148>)
 80024f2:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a3c      	ldr	r2, [pc, #240]	; (80025e8 <HAL_SPI_Init+0x14c>)
 80024f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a3b      	ldr	r2, [pc, #236]	; (80025ec <HAL_SPI_Init+0x150>)
 80024fe:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a3b      	ldr	r2, [pc, #236]	; (80025f0 <HAL_SPI_Init+0x154>)
 8002504:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a3a      	ldr	r2, [pc, #232]	; (80025f4 <HAL_SPI_Init+0x158>)
 800250a:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a3a      	ldr	r2, [pc, #232]	; (80025f8 <HAL_SPI_Init+0x15c>)
 8002510:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a39      	ldr	r2, [pc, #228]	; (80025fc <HAL_SPI_Init+0x160>)
 8002516:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a39      	ldr	r2, [pc, #228]	; (8002600 <HAL_SPI_Init+0x164>)
 800251c:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a36      	ldr	r2, [pc, #216]	; (8002604 <HAL_SPI_Init+0x168>)
 800252a:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800254a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002598:	ea42 0103 	orr.w	r1, r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	0c1a      	lsrs	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f002 0204 	and.w	r2, r2, #4
 80025ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	69da      	ldr	r2, [r3, #28]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	080043d9 	.word	0x080043d9
 80025e8:	08004499 	.word	0x08004499
 80025ec:	08002b51 	.word	0x08002b51
 80025f0:	08002b63 	.word	0x08002b63
 80025f4:	08002b75 	.word	0x08002b75
 80025f8:	08002b87 	.word	0x08002b87
 80025fc:	08002b99 	.word	0x08002b99
 8002600:	08002bab 	.word	0x08002bab
 8002604:	08001031 	.word	0x08001031

08002608 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	4613      	mov	r3, r2
 8002614:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_SPI_Transmit_IT+0x20>
 8002624:	2302      	movs	r3, #2
 8002626:	e06f      	b.n	8002708 <HAL_SPI_Transmit_IT+0x100>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <HAL_SPI_Transmit_IT+0x34>
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d102      	bne.n	8002642 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002640:	e05d      	b.n	80026fe <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d002      	beq.n	8002654 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800264e:	2302      	movs	r3, #2
 8002650:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002652:	e054      	b.n	80026fe <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2203      	movs	r2, #3
 8002658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	88fa      	ldrh	r2, [r7, #6]
 800266c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	88fa      	ldrh	r2, [r7, #6]
 8002672:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <HAL_SPI_Transmit_IT+0x10c>)
 8002698:	645a      	str	r2, [r3, #68]	; 0x44
 800269a:	e002      	b.n	80026a2 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <HAL_SPI_Transmit_IT+0x110>)
 80026a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026aa:	d10f      	bne.n	80026cc <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80026da:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e6:	2b40      	cmp	r3, #64	; 0x40
 80026e8:	d008      	beq.n	80026fc <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e000      	b.n	80026fe <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80026fc:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002706:	7dfb      	ldrb	r3, [r7, #23]
}
 8002708:	4618      	mov	r0, r3
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	08002e3f 	.word	0x08002e3f
 8002718:	08002df9 	.word	0x08002df9

0800271c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	4613      	mov	r3, r2
 8002728:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d110      	bne.n	8002758 <HAL_SPI_Receive_IT+0x3c>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800273e:	d10b      	bne.n	8002758 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2204      	movs	r2, #4
 8002744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f882 	bl	8002858 <HAL_SPI_TransmitReceive_IT>
 8002754:	4603      	mov	r3, r0
 8002756:	e076      	b.n	8002846 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_SPI_Receive_IT+0x4a>
 8002762:	2302      	movs	r3, #2
 8002764:	e06f      	b.n	8002846 <HAL_SPI_Receive_IT+0x12a>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b01      	cmp	r3, #1
 8002778:	d002      	beq.n	8002780 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800277a:	2302      	movs	r3, #2
 800277c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800277e:	e05d      	b.n	800283c <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <HAL_SPI_Receive_IT+0x70>
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002790:	e054      	b.n	800283c <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2204      	movs	r2, #4
 8002796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	88fa      	ldrh	r2, [r7, #6]
 80027aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	88fa      	ldrh	r2, [r7, #6]
 80027b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4a1e      	ldr	r2, [pc, #120]	; (8002850 <HAL_SPI_Receive_IT+0x134>)
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40
 80027d8:	e002      	b.n	80027e0 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <HAL_SPI_Receive_IT+0x138>)
 80027de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027e8:	d10f      	bne.n	800280a <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002808:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002818:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002824:	2b40      	cmp	r3, #64	; 0x40
 8002826:	d008      	beq.n	800283a <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	e000      	b.n	800283c <HAL_SPI_Receive_IT+0x120>
  }

error :
 800283a:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002844:	7dfb      	ldrb	r3, [r7, #23]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	08002db3 	.word	0x08002db3
 8002854:	08002d69 	.word	0x08002d69

08002858 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_SPI_TransmitReceive_IT+0x20>
 8002874:	2302      	movs	r3, #2
 8002876:	e075      	b.n	8002964 <HAL_SPI_TransmitReceive_IT+0x10c>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002886:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800288e:	7dbb      	ldrb	r3, [r7, #22]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d00d      	beq.n	80028b0 <HAL_SPI_TransmitReceive_IT+0x58>
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800289a:	d106      	bne.n	80028aa <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <HAL_SPI_TransmitReceive_IT+0x52>
 80028a4:	7dbb      	ldrb	r3, [r7, #22]
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d002      	beq.n	80028b0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80028aa:	2302      	movs	r3, #2
 80028ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028ae:	e054      	b.n	800295a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80028bc:	887b      	ldrh	r3, [r7, #2]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d102      	bne.n	80028c8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028c6:	e048      	b.n	800295a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d003      	beq.n	80028dc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2205      	movs	r2, #5
 80028d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	887a      	ldrh	r2, [r7, #2]
 80028f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	887a      	ldrh	r2, [r7, #2]
 80028fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	887a      	ldrh	r2, [r7, #2]
 8002904:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d006      	beq.n	800291c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4a17      	ldr	r2, [pc, #92]	; (8002970 <HAL_SPI_TransmitReceive_IT+0x118>)
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4a17      	ldr	r2, [pc, #92]	; (8002974 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8002918:	645a      	str	r2, [r3, #68]	; 0x44
 800291a:	e005      	b.n	8002928 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4a16      	ldr	r2, [pc, #88]	; (8002978 <HAL_SPI_TransmitReceive_IT+0x120>)
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4a15      	ldr	r2, [pc, #84]	; (800297c <HAL_SPI_TransmitReceive_IT+0x124>)
 8002926:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002936:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b40      	cmp	r3, #64	; 0x40
 8002944:	d008      	beq.n	8002958 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	e000      	b.n	800295a <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8002958:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002962:	7dfb      	ldrb	r3, [r7, #23]
}
 8002964:	4618      	mov	r0, r3
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	08002cab 	.word	0x08002cab
 8002974:	08002d0b 	.word	0x08002d0b
 8002978:	08002be7 	.word	0x08002be7
 800297c:	08002c4b 	.word	0x08002c4b

08002980 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	099b      	lsrs	r3, r3, #6
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10f      	bne.n	80029c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	099b      	lsrs	r3, r3, #6
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d004      	beq.n	80029c4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
    return;
 80029c2:	e0bf      	b.n	8002b44 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_SPI_IRQHandler+0x66>
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	09db      	lsrs	r3, r3, #7
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d004      	beq.n	80029e6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4798      	blx	r3
    return;
 80029e4:	e0ae      	b.n	8002b44 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <HAL_SPI_IRQHandler+0x80>
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	099b      	lsrs	r3, r3, #6
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80a2 	beq.w	8002b44 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 809b 	beq.w	8002b44 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	099b      	lsrs	r3, r3, #6
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d023      	beq.n	8002a62 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d011      	beq.n	8002a4a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	f043 0204 	orr.w	r2, r3, #4
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	e00b      	b.n	8002a62 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	693b      	ldr	r3, [r7, #16]
        return;
 8002a60:	e070      	b.n	8002b44 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d014      	beq.n	8002a98 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	f043 0201 	orr.w	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d050      	beq.n	8002b42 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002aae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d104      	bne.n	8002acc <HAL_SPI_IRQHandler+0x14c>
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d034      	beq.n	8002b36 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0203 	bic.w	r2, r2, #3
 8002ada:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d011      	beq.n	8002b08 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae8:	4a18      	ldr	r2, [pc, #96]	; (8002b4c <HAL_SPI_IRQHandler+0x1cc>)
 8002aea:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe fe27 	bl	8001744 <HAL_DMA_Abort_IT>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d017      	beq.n	8002b40 <HAL_SPI_IRQHandler+0x1c0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b14:	4a0d      	ldr	r2, [pc, #52]	; (8002b4c <HAL_SPI_IRQHandler+0x1cc>)
 8002b16:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe fe11 	bl	8001744 <HAL_DMA_Abort_IT>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00b      	beq.n	8002b40 <HAL_SPI_IRQHandler+0x1c0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002b34:	e004      	b.n	8002b40 <HAL_SPI_IRQHandler+0x1c0>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002b3e:	e000      	b.n	8002b42 <HAL_SPI_IRQHandler+0x1c2>
        if (hspi->hdmatx != NULL)
 8002b40:	bf00      	nop
    return;
 8002b42:	bf00      	nop
  }
}
 8002b44:	3720      	adds	r7, #32
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	08002bbd 	.word	0x08002bbd

08002b50 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f103 020c 	add.w	r2, r3, #12
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	7812      	ldrb	r2, [r2, #0]
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10f      	bne.n	8002c42 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c30:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d102      	bne.n	8002c42 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fa19 	bl	8003074 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	330c      	adds	r3, #12
 8002c5c:	7812      	ldrb	r2, [r2, #0]
 8002c5e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10f      	bne.n	8002ca2 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c90:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f9e9 	bl	8003074 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	b292      	uxth	r2, r2
 8002cbe:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	1c9a      	adds	r2, r3, #2
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10f      	bne.n	8002d02 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cf0:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f9b9 	bl	8003074 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	881a      	ldrh	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	1c9a      	adds	r2, r3, #2
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10f      	bne.n	8002d60 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d4e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f98a 	bl	8003074 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f103 020c 	add.w	r2, r3, #12
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	7812      	ldrb	r2, [r2, #0]
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f9db 	bl	8003160 <SPI_CloseRx_ISR>
  }
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	b292      	uxth	r2, r2
 8002dc6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	1c9a      	adds	r2, r3, #2
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d102      	bne.n	8002df0 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f9b8 	bl	8003160 <SPI_CloseRx_ISR>
  }
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	330c      	adds	r3, #12
 8002e0a:	7812      	ldrb	r2, [r2, #0]
 8002e0c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d102      	bne.n	8002e36 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f9d7 	bl	80031e4 <SPI_CloseTx_ISR>
  }
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	881a      	ldrh	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	1c9a      	adds	r2, r3, #2
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d102      	bne.n	8002e7a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f9b5 	bl	80031e4 <SPI_CloseTx_ISR>
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e94:	f7fe fad4 	bl	8001440 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ea4:	f7fe facc 	bl	8001440 <HAL_GetTick>
 8002ea8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002eaa:	4b39      	ldr	r3, [pc, #228]	; (8002f90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	015b      	lsls	r3, r3, #5
 8002eb0:	0d1b      	lsrs	r3, r3, #20
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	fb02 f303 	mul.w	r3, r2, r3
 8002eb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eba:	e054      	b.n	8002f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec2:	d050      	beq.n	8002f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ec4:	f7fe fabc 	bl	8001440 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d902      	bls.n	8002eda <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d13d      	bne.n	8002f56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ee8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ef2:	d111      	bne.n	8002f18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efc:	d004      	beq.n	8002f08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f06:	d107      	bne.n	8002f18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f20:	d10f      	bne.n	8002f42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e017      	b.n	8002f86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	bf0c      	ite	eq
 8002f76:	2301      	moveq	r3, #1
 8002f78:	2300      	movne	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d19b      	bne.n	8002ebc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000000 	.word	0x20000000

08002f94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fa8:	d111      	bne.n	8002fce <SPI_EndRxTransaction+0x3a>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb2:	d004      	beq.n	8002fbe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fbc:	d107      	bne.n	8002fce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fcc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fd6:	d117      	bne.n	8003008 <SPI_EndRxTransaction+0x74>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe0:	d112      	bne.n	8003008 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2101      	movs	r1, #1
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f7ff ff49 	bl	8002e84 <SPI_WaitFlagStateUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01a      	beq.n	800302e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffc:	f043 0220 	orr.w	r2, r3, #32
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e013      	b.n	8003030 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2200      	movs	r2, #0
 8003010:	2180      	movs	r1, #128	; 0x80
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f7ff ff36 	bl	8002e84 <SPI_WaitFlagStateUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d007      	beq.n	800302e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	f043 0220 	orr.w	r2, r3, #32
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e000      	b.n	8003030 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2200      	movs	r2, #0
 800304c:	2180      	movs	r1, #128	; 0x80
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f7ff ff18 	bl	8002e84 <SPI_WaitFlagStateUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305e:	f043 0220 	orr.w	r2, r3, #32
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e000      	b.n	800306c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800307c:	4b36      	ldr	r3, [pc, #216]	; (8003158 <SPI_CloseRxTx_ISR+0xe4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a36      	ldr	r2, [pc, #216]	; (800315c <SPI_CloseRxTx_ISR+0xe8>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	0a5b      	lsrs	r3, r3, #9
 8003088:	2264      	movs	r2, #100	; 0x64
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003090:	f7fe f9d6 	bl	8001440 <HAL_GetTick>
 8003094:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0220 	bic.w	r2, r2, #32
 80030a4:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d106      	bne.n	80030ba <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b0:	f043 0220 	orr.w	r2, r3, #32
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80030b8:	e009      	b.n	80030ce <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	3b01      	subs	r3, #1
 80030be:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0eb      	beq.n	80030a6 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	2164      	movs	r1, #100	; 0x64
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff ffb0 	bl	8003038 <SPI_EndRxTxTransaction>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e2:	f043 0220 	orr.w	r2, r3, #32
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10a      	bne.n	8003108 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310c:	2b00      	cmp	r3, #0
 800310e:	d117      	bne.n	8003140 <SPI_CloseRxTx_ISR+0xcc>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b04      	cmp	r3, #4
 800311a:	d108      	bne.n	800312e <SPI_CloseRxTx_ISR+0xba>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	4798      	blx	r3
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800312c:	e010      	b.n	8003150 <SPI_CloseRxTx_ISR+0xdc>
        hspi->State = HAL_SPI_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        hspi->TxRxCpltCallback(hspi);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	4798      	blx	r3
}
 800313e:	e007      	b.n	8003150 <SPI_CloseRxTx_ISR+0xdc>
      hspi->State = HAL_SPI_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      hspi->ErrorCallback(hspi);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
}
 8003150:	bf00      	nop
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20000000 	.word	0x20000000
 800315c:	057619f1 	.word	0x057619f1

08003160 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003176:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003178:	f7fe f962 	bl	8001440 <HAL_GetTick>
 800317c:	4603      	mov	r3, r0
 800317e:	461a      	mov	r2, r3
 8003180:	2164      	movs	r1, #100	; 0x64
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff ff06 	bl	8002f94 <SPI_EndRxTransaction>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003192:	f043 0220 	orr.w	r2, r3, #32
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d104      	bne.n	80031d2 <SPI_CloseRx_ISR+0x72>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	4798      	blx	r3
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80031d0:	e003      	b.n	80031da <SPI_CloseRx_ISR+0x7a>
      hspi->ErrorCallback(hspi);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	4798      	blx	r3
}
 80031da:	bf00      	nop
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80031ec:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <SPI_CloseTx_ISR+0xc0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a2d      	ldr	r2, [pc, #180]	; (80032a8 <SPI_CloseTx_ISR+0xc4>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	0a5b      	lsrs	r3, r3, #9
 80031f8:	2264      	movs	r2, #100	; 0x64
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003200:	f7fe f91e 	bl	8001440 <HAL_GetTick>
 8003204:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d106      	bne.n	800321a <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003218:	e009      	b.n	800322e <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	3b01      	subs	r3, #1
 800321e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0eb      	beq.n	8003206 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800323c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	2164      	movs	r1, #100	; 0x64
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff fef8 	bl	8003038 <SPI_EndRxTxTransaction>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	f043 0220 	orr.w	r2, r3, #32
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10a      	bne.n	8003278 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003284:	2b00      	cmp	r3, #0
 8003286:	d004      	beq.n	8003292 <SPI_CloseTx_ISR+0xae>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003290:	e003      	b.n	800329a <SPI_CloseTx_ISR+0xb6>
    hspi->TxCpltCallback(hspi);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	4798      	blx	r3
}
 800329a:	bf00      	nop
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20000000 	.word	0x20000000
 80032a8:	057619f1 	.word	0x057619f1

080032ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e041      	b.n	8003342 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f839 	bl	800334a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3304      	adds	r3, #4
 80032e8:	4619      	mov	r1, r3
 80032ea:	4610      	mov	r0, r2
 80032ec:	f000 f9b4 	bl	8003658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d001      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e03a      	b.n	80033ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <HAL_TIM_Base_Start_IT+0x98>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00e      	beq.n	80033b4 <HAL_TIM_Base_Start_IT+0x58>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339e:	d009      	beq.n	80033b4 <HAL_TIM_Base_Start_IT+0x58>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d004      	beq.n	80033b4 <HAL_TIM_Base_Start_IT+0x58>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a13      	ldr	r2, [pc, #76]	; (80033fc <HAL_TIM_Base_Start_IT+0xa0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d111      	bne.n	80033d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b06      	cmp	r3, #6
 80033c4:	d010      	beq.n	80033e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d6:	e007      	b.n	80033e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40000400 	.word	0x40000400
 80033fc:	40000800 	.word	0x40000800

08003400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b02      	cmp	r3, #2
 8003414:	d122      	bne.n	800345c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b02      	cmp	r3, #2
 8003422:	d11b      	bne.n	800345c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0202 	mvn.w	r2, #2
 800342c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f8ed 	bl	8003622 <HAL_TIM_IC_CaptureCallback>
 8003448:	e005      	b.n	8003456 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f8e0 	bl	8003610 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f8ef 	bl	8003634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b04      	cmp	r3, #4
 8003468:	d122      	bne.n	80034b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b04      	cmp	r3, #4
 8003476:	d11b      	bne.n	80034b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0204 	mvn.w	r2, #4
 8003480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2202      	movs	r2, #2
 8003486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f8c3 	bl	8003622 <HAL_TIM_IC_CaptureCallback>
 800349c:	e005      	b.n	80034aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f8b6 	bl	8003610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f8c5 	bl	8003634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d122      	bne.n	8003504 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d11b      	bne.n	8003504 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0208 	mvn.w	r2, #8
 80034d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2204      	movs	r2, #4
 80034da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f899 	bl	8003622 <HAL_TIM_IC_CaptureCallback>
 80034f0:	e005      	b.n	80034fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f88c 	bl	8003610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f89b 	bl	8003634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b10      	cmp	r3, #16
 8003510:	d122      	bne.n	8003558 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b10      	cmp	r3, #16
 800351e:	d11b      	bne.n	8003558 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0210 	mvn.w	r2, #16
 8003528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2208      	movs	r2, #8
 800352e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f86f 	bl	8003622 <HAL_TIM_IC_CaptureCallback>
 8003544:	e005      	b.n	8003552 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f862 	bl	8003610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f871 	bl	8003634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b01      	cmp	r3, #1
 8003564:	d10e      	bne.n	8003584 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b01      	cmp	r3, #1
 8003572:	d107      	bne.n	8003584 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0201 	mvn.w	r2, #1
 800357c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd fd06 	bl	8000f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358e:	2b80      	cmp	r3, #128	; 0x80
 8003590:	d10e      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359c:	2b80      	cmp	r3, #128	; 0x80
 800359e:	d107      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f8bf 	bl	800372e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	d10e      	bne.n	80035dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b40      	cmp	r3, #64	; 0x40
 80035ca:	d107      	bne.n	80035dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f835 	bl	8003646 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d10e      	bne.n	8003608 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d107      	bne.n	8003608 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0220 	mvn.w	r2, #32
 8003600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f88a 	bl	800371c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr

08003622 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr

08003646 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a29      	ldr	r2, [pc, #164]	; (8003710 <TIM_Base_SetConfig+0xb8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00b      	beq.n	8003688 <TIM_Base_SetConfig+0x30>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003676:	d007      	beq.n	8003688 <TIM_Base_SetConfig+0x30>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a26      	ldr	r2, [pc, #152]	; (8003714 <TIM_Base_SetConfig+0xbc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d003      	beq.n	8003688 <TIM_Base_SetConfig+0x30>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a25      	ldr	r2, [pc, #148]	; (8003718 <TIM_Base_SetConfig+0xc0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d108      	bne.n	800369a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a1c      	ldr	r2, [pc, #112]	; (8003710 <TIM_Base_SetConfig+0xb8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00b      	beq.n	80036ba <TIM_Base_SetConfig+0x62>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a8:	d007      	beq.n	80036ba <TIM_Base_SetConfig+0x62>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a19      	ldr	r2, [pc, #100]	; (8003714 <TIM_Base_SetConfig+0xbc>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d003      	beq.n	80036ba <TIM_Base_SetConfig+0x62>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a18      	ldr	r2, [pc, #96]	; (8003718 <TIM_Base_SetConfig+0xc0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d108      	bne.n	80036cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a07      	ldr	r2, [pc, #28]	; (8003710 <TIM_Base_SetConfig+0xb8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d103      	bne.n	8003700 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	615a      	str	r2, [r3, #20]
}
 8003706:	bf00      	nop
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40000400 	.word	0x40000400
 8003718:	40000800 	.word	0x40000800

0800371c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr

0800372e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e03f      	b.n	80037d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fd fcb6 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2224      	movs	r2, #36	; 0x24
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003782:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fd63 	bl	8004250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003798:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b08a      	sub	sp, #40	; 0x28
 80037de:	af02      	add	r7, sp, #8
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	603b      	str	r3, [r7, #0]
 80037e6:	4613      	mov	r3, r2
 80037e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d17c      	bne.n	80038f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_UART_Transmit+0x2c>
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e075      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_UART_Transmit+0x3e>
 8003814:	2302      	movs	r3, #2
 8003816:	e06e      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2221      	movs	r2, #33	; 0x21
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800382e:	f7fd fe07 	bl	8001440 <HAL_GetTick>
 8003832:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	88fa      	ldrh	r2, [r7, #6]
 8003838:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	88fa      	ldrh	r2, [r7, #6]
 800383e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003848:	d108      	bne.n	800385c <HAL_UART_Transmit+0x82>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	e003      	b.n	8003864 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003860:	2300      	movs	r3, #0
 8003862:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800386c:	e02a      	b.n	80038c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2200      	movs	r2, #0
 8003876:	2180      	movs	r1, #128	; 0x80
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fb39 	bl	8003ef0 <UART_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e036      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10b      	bne.n	80038a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800389c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	3302      	adds	r3, #2
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	e007      	b.n	80038b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	3301      	adds	r3, #1
 80038b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1cf      	bne.n	800386e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2200      	movs	r2, #0
 80038d6:	2140      	movs	r1, #64	; 0x40
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fb09 	bl	8003ef0 <UART_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e006      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	e000      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038f4:	2302      	movs	r3, #2
  }
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3720      	adds	r7, #32
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038fe:	b480      	push	{r7}
 8003900:	b085      	sub	sp, #20
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	4613      	mov	r3, r2
 800390a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b20      	cmp	r3, #32
 8003916:	d130      	bne.n	800397a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_UART_Transmit_IT+0x26>
 800391e:	88fb      	ldrh	r3, [r7, #6]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e029      	b.n	800397c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HAL_UART_Transmit_IT+0x38>
 8003932:	2302      	movs	r3, #2
 8003934:	e022      	b.n	800397c <HAL_UART_Transmit_IT+0x7e>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	88fa      	ldrh	r2, [r7, #6]
 8003948:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	88fa      	ldrh	r2, [r7, #6]
 800394e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2221      	movs	r2, #33	; 0x21
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003974:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e000      	b.n	800397c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800397a:	2302      	movs	r3, #2
  }
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr
	...

08003988 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	4613      	mov	r3, r2
 8003994:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d153      	bne.n	8003a4a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <HAL_UART_Transmit_DMA+0x26>
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e04c      	b.n	8003a4c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_UART_Transmit_DMA+0x38>
 80039bc:	2302      	movs	r3, #2
 80039be:	e045      	b.n	8003a4c <HAL_UART_Transmit_DMA+0xc4>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	88fa      	ldrh	r2, [r7, #6]
 80039d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	88fa      	ldrh	r2, [r7, #6]
 80039d8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2221      	movs	r2, #33	; 0x21
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ec:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <HAL_UART_Transmit_DMA+0xcc>)
 80039ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f4:	4a18      	ldr	r2, [pc, #96]	; (8003a58 <HAL_UART_Transmit_DMA+0xd0>)
 80039f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fc:	4a17      	ldr	r2, [pc, #92]	; (8003a5c <HAL_UART_Transmit_DMA+0xd4>)
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a04:	2200      	movs	r2, #0
 8003a06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8003a08:	f107 0308 	add.w	r3, r7, #8
 8003a0c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	6819      	ldr	r1, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	f7fd fdf7 	bl	8001612 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a2c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a44:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	e000      	b.n	8003a4c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003a4a:	2302      	movs	r3, #2
  }
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	08003def 	.word	0x08003def
 8003a58:	08003e41 	.word	0x08003e41
 8003a5c:	08003e5d 	.word	0x08003e5d

08003a60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	; 0x28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10d      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x52>
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fb26 	bl	80040fc <UART_Receive_IT>
      return;
 8003ab0:	e17b      	b.n	8003daa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80b1 	beq.w	8003c1c <HAL_UART_IRQHandler+0x1bc>
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d105      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x70>
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 80a6 	beq.w	8003c1c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <HAL_UART_IRQHandler+0x90>
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	f043 0201 	orr.w	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HAL_UART_IRQHandler+0xb0>
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	f043 0202 	orr.w	r2, r3, #2
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <HAL_UART_IRQHandler+0xd0>
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	f043 0204 	orr.w	r2, r3, #4
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00f      	beq.n	8003b5a <HAL_UART_IRQHandler+0xfa>
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d104      	bne.n	8003b4e <HAL_UART_IRQHandler+0xee>
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f043 0208 	orr.w	r2, r3, #8
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 811e 	beq.w	8003da0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <HAL_UART_IRQHandler+0x11e>
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fabf 	bl	80040fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf14      	ite	ne
 8003b8c:	2301      	movne	r3, #1
 8003b8e:	2300      	moveq	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x146>
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d031      	beq.n	8003c0a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fa01 	bl	8003fae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d023      	beq.n	8003c02 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695a      	ldr	r2, [r3, #20]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d013      	beq.n	8003bfa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	4a76      	ldr	r2, [pc, #472]	; (8003db0 <HAL_UART_IRQHandler+0x350>)
 8003bd8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fd fdb0 	bl	8001744 <HAL_DMA_Abort_IT>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d016      	beq.n	8003c18 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf8:	e00e      	b.n	8003c18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f8e3 	bl	8003dc6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c00:	e00a      	b.n	8003c18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f8df 	bl	8003dc6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c08:	e006      	b.n	8003c18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f8db 	bl	8003dc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c16:	e0c3      	b.n	8003da0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c18:	bf00      	nop
    return;
 8003c1a:	e0c1      	b.n	8003da0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	f040 80a1 	bne.w	8003d68 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 809b 	beq.w	8003d68 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 8095 	beq.w	8003d68 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d04e      	beq.n	8003d00 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003c6c:	8a3b      	ldrh	r3, [r7, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 8098 	beq.w	8003da4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c78:	8a3a      	ldrh	r2, [r7, #16]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	f080 8092 	bcs.w	8003da4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8a3a      	ldrh	r2, [r7, #16]
 8003c84:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d02b      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c9e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695a      	ldr	r2, [r3, #20]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cbe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0210 	bic.w	r2, r2, #16
 8003cdc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fd fcf4 	bl	80016d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f86d 	bl	8003dd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003cfe:	e051      	b.n	8003da4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d047      	beq.n	8003da8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003d18:	8a7b      	ldrh	r3, [r7, #18]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d044      	beq.n	8003da8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d2c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0210 	bic.w	r2, r2, #16
 8003d5a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d5c:	8a7b      	ldrh	r3, [r7, #18]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f839 	bl	8003dd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d66:	e01f      	b.n	8003da8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <HAL_UART_IRQHandler+0x324>
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f956 	bl	800402e <UART_Transmit_IT>
    return;
 8003d82:	e012      	b.n	8003daa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00d      	beq.n	8003daa <HAL_UART_IRQHandler+0x34a>
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f997 	bl	80040cc <UART_EndTransmit_IT>
    return;
 8003d9e:	e004      	b.n	8003daa <HAL_UART_IRQHandler+0x34a>
    return;
 8003da0:	bf00      	nop
 8003da2:	e002      	b.n	8003daa <HAL_UART_IRQHandler+0x34a>
      return;
 8003da4:	bf00      	nop
 8003da6:	e000      	b.n	8003daa <HAL_UART_IRQHandler+0x34a>
      return;
 8003da8:	bf00      	nop
  }
}
 8003daa:	3728      	adds	r7, #40	; 0x28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	08004007 	.word	0x08004007

08003db4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr

08003dee <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0320 	and.w	r3, r3, #32
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d113      	bne.n	8003e32 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e1e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e2e:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e30:	e002      	b.n	8003e38 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 feea 	bl	8004c0c <HAL_UART_TxCpltCallback>
}
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f7ff ffb0 	bl	8003db4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	bf14      	ite	ne
 8003e7c:	2301      	movne	r3, #1
 8003e7e:	2300      	moveq	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b21      	cmp	r3, #33	; 0x21
 8003e8e:	d108      	bne.n	8003ea2 <UART_DMAError+0x46>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003e9c:	68b8      	ldr	r0, [r7, #8]
 8003e9e:	f000 f871 	bl	8003f84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf14      	ite	ne
 8003eb0:	2301      	movne	r3, #1
 8003eb2:	2300      	moveq	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b22      	cmp	r3, #34	; 0x22
 8003ec2:	d108      	bne.n	8003ed6 <UART_DMAError+0x7a>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d005      	beq.n	8003ed6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003ed0:	68b8      	ldr	r0, [r7, #8]
 8003ed2:	f000 f86c 	bl	8003fae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f043 0210 	orr.w	r2, r3, #16
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ee2:	68b8      	ldr	r0, [r7, #8]
 8003ee4:	f7ff ff6f 	bl	8003dc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ee8:	bf00      	nop
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	4613      	mov	r3, r2
 8003efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f00:	e02c      	b.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f08:	d028      	beq.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f10:	f7fd fa96 	bl	8001440 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d21d      	bcs.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f2e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695a      	ldr	r2, [r3, #20]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0201 	bic.w	r2, r2, #1
 8003f3e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e00f      	b.n	8003f7c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	4013      	ands	r3, r2
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2301      	moveq	r3, #1
 8003f6e:	2300      	movne	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d0c3      	beq.n	8003f02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003f9a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr

08003fae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fc4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0201 	bic.w	r2, r2, #1
 8003fd4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d107      	bne.n	8003fee <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0210 	bic.w	r2, r2, #16
 8003fec:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr

08004006 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7ff fed0 	bl	8003dc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b21      	cmp	r3, #33	; 0x21
 8004040:	d13e      	bne.n	80040c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404a:	d114      	bne.n	8004076 <UART_Transmit_IT+0x48>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d110      	bne.n	8004076 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004068:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	1c9a      	adds	r2, r3, #2
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	621a      	str	r2, [r3, #32]
 8004074:	e008      	b.n	8004088 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	1c59      	adds	r1, r3, #1
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6211      	str	r1, [r2, #32]
 8004080:	781a      	ldrb	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29b      	uxth	r3, r3
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	4619      	mov	r1, r3
 8004096:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10f      	bne.n	80040bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	e000      	b.n	80040c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040c0:	2302      	movs	r3, #2
  }
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr

080040cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fd8d 	bl	8004c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b22      	cmp	r3, #34	; 0x22
 800410e:	f040 8099 	bne.w	8004244 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411a:	d117      	bne.n	800414c <UART_Receive_IT+0x50>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d113      	bne.n	800414c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	b29b      	uxth	r3, r3
 8004136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413a:	b29a      	uxth	r2, r3
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004144:	1c9a      	adds	r2, r3, #2
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	629a      	str	r2, [r3, #40]	; 0x28
 800414a:	e026      	b.n	800419a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415e:	d007      	beq.n	8004170 <UART_Receive_IT+0x74>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10a      	bne.n	800417e <UART_Receive_IT+0x82>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d106      	bne.n	800417e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	b2da      	uxtb	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	e008      	b.n	8004190 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800418a:	b2da      	uxtb	r2, r3
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	4619      	mov	r1, r3
 80041a8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d148      	bne.n	8004240 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0220 	bic.w	r2, r2, #32
 80041bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695a      	ldr	r2, [r3, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0201 	bic.w	r2, r2, #1
 80041dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d123      	bne.n	8004236 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0210 	bic.w	r2, r2, #16
 8004202:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b10      	cmp	r3, #16
 8004210:	d10a      	bne.n	8004228 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800422c:	4619      	mov	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff fdd2 	bl	8003dd8 <HAL_UARTEx_RxEventCallback>
 8004234:	e002      	b.n	800423c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fcc0 	bl	8004bbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	e002      	b.n	8004246 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	e000      	b.n	8004246 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004244:	2302      	movs	r3, #2
  }
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800428a:	f023 030c 	bic.w	r3, r3, #12
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	430b      	orrs	r3, r1
 8004296:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a2c      	ldr	r2, [pc, #176]	; (8004364 <UART_SetConfig+0x114>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d103      	bne.n	80042c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042b8:	f7fe f88e 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	e002      	b.n	80042c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042c0:	f7fe f876 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 80042c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	009a      	lsls	r2, r3, #2
 80042d0:	441a      	add	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042dc:	4a22      	ldr	r2, [pc, #136]	; (8004368 <UART_SetConfig+0x118>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	0119      	lsls	r1, r3, #4
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4613      	mov	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	009a      	lsls	r2, r3, #2
 80042f0:	441a      	add	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042fc:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <UART_SetConfig+0x118>)
 80042fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	2064      	movs	r0, #100	; 0x64
 8004306:	fb00 f303 	mul.w	r3, r0, r3
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	3332      	adds	r3, #50	; 0x32
 8004310:	4a15      	ldr	r2, [pc, #84]	; (8004368 <UART_SetConfig+0x118>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800431c:	4419      	add	r1, r3
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	009a      	lsls	r2, r3, #2
 8004328:	441a      	add	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	fbb2 f2f3 	udiv	r2, r2, r3
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <UART_SetConfig+0x118>)
 8004336:	fba3 0302 	umull	r0, r3, r3, r2
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	2064      	movs	r0, #100	; 0x64
 800433e:	fb00 f303 	mul.w	r3, r0, r3
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	3332      	adds	r3, #50	; 0x32
 8004348:	4a07      	ldr	r2, [pc, #28]	; (8004368 <UART_SetConfig+0x118>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	f003 020f 	and.w	r2, r3, #15
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	440a      	add	r2, r1
 800435a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800435c:	bf00      	nop
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40013800 	.word	0x40013800
 8004368:	51eb851f 	.word	0x51eb851f

0800436c <regWrite>:
 *
 * @retval Void
 */

void regWrite(uint8_t Reg, uint8_t Value)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	460a      	mov	r2, r1
 8004376:	71fb      	strb	r3, [r7, #7]
 8004378:	4613      	mov	r3, r2
 800437a:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteData[2] = {0};
 800437c:	2300      	movs	r3, #0
 800437e:	81bb      	strh	r3, [r7, #12]
	WriteData[0] = Reg & ( ~(1<<7u) ) /*| 1<<6u;*/& ( ~(1<<6u) );
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004386:	b2db      	uxtb	r3, r3
 8004388:	733b      	strb	r3, [r7, #12]
	WriteData[1] = Value;
 800438a:	79bb      	ldrb	r3, [r7, #6]
 800438c:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800438e:	2200      	movs	r2, #0
 8004390:	2140      	movs	r1, #64	; 0x40
 8004392:	480e      	ldr	r0, [pc, #56]	; (80043cc <regWrite+0x60>)
 8004394:	f7fd fbfe 	bl	8001b94 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_IT(ADXL345_SPI, (uint8_t *) &WriteData, 2);
 8004398:	4b0d      	ldr	r3, [pc, #52]	; (80043d0 <regWrite+0x64>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f107 010c 	add.w	r1, r7, #12
 80043a0:	2202      	movs	r2, #2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fe f930 	bl	8002608 <HAL_SPI_Transmit_IT>
	while(1)
	{
		if(ADXL345_To_Slave_OK == 1)
 80043a8:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <regWrite+0x68>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d1fb      	bne.n	80043a8 <regWrite+0x3c>
		{
			ADXL345_To_Slave_OK 	=	0;
 80043b0:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <regWrite+0x68>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	701a      	strb	r2, [r3, #0]
			break;
 80043b6:	bf00      	nop
		}
	}
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80043b8:	2201      	movs	r2, #1
 80043ba:	2140      	movs	r1, #64	; 0x40
 80043bc:	4803      	ldr	r0, [pc, #12]	; (80043cc <regWrite+0x60>)
 80043be:	f7fd fbe9 	bl	8001b94 <HAL_GPIO_WritePin>
	//HAL_I2C_Mem_Write(&hi2c1, ADXL345_I2C_SLAVE_ADDRESS, Reg, 1, Value, 1, 10);  or using this.
}
 80043c2:	bf00      	nop
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40010c00 	.word	0x40010c00
 80043d0:	2000034c 	.word	0x2000034c
 80043d4:	20000350 	.word	0x20000350

080043d8 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	if (hspi -> Instance == SPI2)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a05      	ldr	r2, [pc, #20]	; (80043fc <HAL_SPI_TxCpltCallback+0x24>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d102      	bne.n	80043f0 <HAL_SPI_TxCpltCallback+0x18>
	{
		ADXL345_To_Slave_OK 		=	1;
 80043ea:	4b05      	ldr	r3, [pc, #20]	; (8004400 <HAL_SPI_TxCpltCallback+0x28>)
 80043ec:	2201      	movs	r2, #1
 80043ee:	701a      	strb	r2, [r3, #0]
	}
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40003800 	.word	0x40003800
 8004400:	20000350 	.word	0x20000350

08004404 <regRead>:
 * @param ByteSize = Byte length to be read
 *
 * @retval Void
 */
void regRead(uint8_t Reg, uint8_t *Value, uint16_t ByteSize)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	6039      	str	r1, [r7, #0]
 800440e:	71fb      	strb	r3, [r7, #7]
 8004410:	4613      	mov	r3, r2
 8004412:	80bb      	strh	r3, [r7, #4]

	if (ByteSize > 1)
 8004414:	88bb      	ldrh	r3, [r7, #4]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d905      	bls.n	8004426 <regRead+0x22>
	{
		Reg |= 1<<7u | 1<<6u;
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004420:	b2db      	uxtb	r3, r3
 8004422:	71fb      	strb	r3, [r7, #7]
 8004424:	e004      	b.n	8004430 <regRead+0x2c>
	}
	else
	{
		Reg |= 1<<7u & ( ~(1<<6u) );
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800442c:	b2db      	uxtb	r3, r3
 800442e:	71fb      	strb	r3, [r7, #7]
	}

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8004430:	2200      	movs	r2, #0
 8004432:	2140      	movs	r1, #64	; 0x40
 8004434:	4814      	ldr	r0, [pc, #80]	; (8004488 <regRead+0x84>)
 8004436:	f7fd fbad 	bl	8001b94 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_IT(ADXL345_SPI, (uint8_t *) &Reg, 1);
 800443a:	4b14      	ldr	r3, [pc, #80]	; (800448c <regRead+0x88>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	1df9      	adds	r1, r7, #7
 8004440:	2201      	movs	r2, #1
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe f8e0 	bl	8002608 <HAL_SPI_Transmit_IT>
	while(1)
	{
		if(ADXL345_To_Slave_OK == 1)
 8004448:	4b11      	ldr	r3, [pc, #68]	; (8004490 <regRead+0x8c>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d1fb      	bne.n	8004448 <regRead+0x44>
		{
			ADXL345_To_Slave_OK 	=	0;
 8004450:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <regRead+0x8c>)
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
			break;
 8004456:	bf00      	nop
		}
	}
	HAL_SPI_Receive_IT(ADXL345_SPI, Value, ByteSize);
 8004458:	4b0c      	ldr	r3, [pc, #48]	; (800448c <regRead+0x88>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	88ba      	ldrh	r2, [r7, #4]
 800445e:	6839      	ldr	r1, [r7, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f7fe f95b 	bl	800271c <HAL_SPI_Receive_IT>
	while(1)
	{
		if(ADXL345_To_Master_OK == 1)
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <regRead+0x90>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d1fb      	bne.n	8004466 <regRead+0x62>
		{
			ADXL345_To_Master_OK 	=	0;
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <regRead+0x90>)
 8004470:	2200      	movs	r2, #0
 8004472:	701a      	strb	r2, [r3, #0]
			break;
 8004474:	bf00      	nop
		}
	}
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8004476:	2201      	movs	r2, #1
 8004478:	2140      	movs	r1, #64	; 0x40
 800447a:	4803      	ldr	r0, [pc, #12]	; (8004488 <regRead+0x84>)
 800447c:	f7fd fb8a 	bl	8001b94 <HAL_GPIO_WritePin>
	//HAL_I2C_Master_Transmit(&hi2c1, ADXL345_I2C_SLAVE_ADDRESS, &Reg, 1, 100);
	//HAL_I2C_Master_Receive(&hi2c1, ADXL345_I2C_SLAVE_ADDRESS, Value, 1, 100);	or using these.

}
 8004480:	bf00      	nop
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40010c00 	.word	0x40010c00
 800448c:	2000034c 	.word	0x2000034c
 8004490:	20000350 	.word	0x20000350
 8004494:	20000351 	.word	0x20000351

08004498 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
	if (hspi -> Instance == SPI2)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a05      	ldr	r2, [pc, #20]	; (80044bc <HAL_SPI_RxCpltCallback+0x24>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d102      	bne.n	80044b0 <HAL_SPI_RxCpltCallback+0x18>
	{
		ADXL345_To_Master_OK 		=	1;
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_SPI_RxCpltCallback+0x28>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	701a      	strb	r2, [r3, #0]
	}
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40003800 	.word	0x40003800
 80044c0:	20000351 	.word	0x20000351

080044c4 <ADXL345_Init>:
 * @param I2CHandle = STM32 I2C Handle
 *
 * @retval ADXL_Status
 */
ADXL_Status ADXL345_Init(ADXL_ConfigTypeDef_t *ADXL, SPI_HandleTypeDef *hspi)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
	ADXL345_SPI = hspi;
 80044ce:	4a43      	ldr	r2, [pc, #268]	; (80045dc <ADXL345_Init+0x118>)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	6013      	str	r3, [r2, #0]

	uint8_t testDEVID;
	regRead(DEVID_ID, &testDEVID,1);
 80044d4:	f107 030d 	add.w	r3, r7, #13
 80044d8:	2201      	movs	r2, #1
 80044da:	4619      	mov	r1, r3
 80044dc:	2000      	movs	r0, #0
 80044de:	f7ff ff91 	bl	8004404 <regRead>
	if(testDEVID != 0xE5)
 80044e2:	7b7b      	ldrb	r3, [r7, #13]
 80044e4:	2be5      	cmp	r3, #229	; 0xe5
 80044e6:	d001      	beq.n	80044ec <ADXL345_Init+0x28>
	{
		return ADXL_ERR;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e073      	b.n	80045d4 <ADXL345_Init+0x110>
	}

	/*********** BW_Rate Config ***********/

	uint8_t regBWRate = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	73fb      	strb	r3, [r7, #15]

	regWrite(BW_RATE, 0);
 80044f0:	2100      	movs	r1, #0
 80044f2:	202c      	movs	r0, #44	; 0x2c
 80044f4:	f7ff ff3a 	bl	800436c <regWrite>

	if(ADXL->PowerMode == LowPower)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d10d      	bne.n	800451c <ADXL345_Init+0x58>
	{
		if(ADXL->BWRate < BWRATE_12_5)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	785b      	ldrb	r3, [r3, #1]
 8004504:	2b06      	cmp	r3, #6
 8004506:	d802      	bhi.n	800450e <ADXL345_Init+0x4a>
		{
			ADXL->BWRate = BWRATE_12_5;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2207      	movs	r2, #7
 800450c:	705a      	strb	r2, [r3, #1]
		}
		if(ADXL->BWRate > BWRATE_400)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	785b      	ldrb	r3, [r3, #1]
 8004512:	2b0c      	cmp	r3, #12
 8004514:	d902      	bls.n	800451c <ADXL345_Init+0x58>
		{
			ADXL->BWRate = BWRATE_400;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	220c      	movs	r2, #12
 800451a:	705a      	strb	r2, [r3, #1]
		}
	}

	regBWRate = ( ADXL->PowerMode | ADXL->BWRate);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	781a      	ldrb	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	4313      	orrs	r3, r2
 8004526:	73fb      	strb	r3, [r7, #15]

	regWrite(BW_RATE, regBWRate);
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	4619      	mov	r1, r3
 800452c:	202c      	movs	r0, #44	; 0x2c
 800452e:	f7ff ff1d 	bl	800436c <regWrite>

	/********* AutoSleepMode Config and WakeUpRate Config ********/

	uint8_t regValue = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	73bb      	strb	r3, [r7, #14]

	regWrite(POWER_CTL, regValue);
 8004536:	7bbb      	ldrb	r3, [r7, #14]
 8004538:	4619      	mov	r1, r3
 800453a:	202d      	movs	r0, #45	; 0x2d
 800453c:	f7ff ff16 	bl	800436c <regWrite>

//	regValue |= ADXL->AutoSleepConfig.AutoSleep | ADXL->WakeUpRate;

//	regWrite(POWER_CTL, regValue);

	regWrite(THRESH_INACT,0x00);
 8004540:	2100      	movs	r1, #0
 8004542:	2025      	movs	r0, #37	; 0x25
 8004544:	f7ff ff12 	bl	800436c <regWrite>
	regWrite(TIME_INACT,0x00);
 8004548:	2100      	movs	r1, #0
 800454a:	2026      	movs	r0, #38	; 0x26
 800454c:	f7ff ff0e 	bl	800436c <regWrite>
//	regWrite(THRESH_INACT,ADXL->AutoSleepConfig.ThreshInact);
//	regWrite(TIME_INACT,ADXL->AutoSleepConfig.TimeInact);

	/********* Data Format Config ********/

	regValue = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	73bb      	strb	r3, [r7, #14]

	regWrite(DATA_FORMAT, regValue);
 8004554:	7bbb      	ldrb	r3, [r7, #14]
 8004556:	4619      	mov	r1, r3
 8004558:	2031      	movs	r0, #49	; 0x31
 800455a:	f7ff ff07 	bl	800436c <regWrite>

	regValue = (ADXL->Format.Resolution | ADXL->Format.Range | ADXL->Format.IntInvert | ADXL->Format.SPI_Mode);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	799a      	ldrb	r2, [r3, #6]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	79db      	ldrb	r3, [r3, #7]
 8004566:	4313      	orrs	r3, r2
 8004568:	b2da      	uxtb	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	7a1b      	ldrb	r3, [r3, #8]
 800456e:	4313      	orrs	r3, r2
 8004570:	b2da      	uxtb	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	7a5b      	ldrb	r3, [r3, #9]
 8004576:	4313      	orrs	r3, r2
 8004578:	73bb      	strb	r3, [r7, #14]

	regWrite(DATA_FORMAT, regValue);
 800457a:	7bbb      	ldrb	r3, [r7, #14]
 800457c:	4619      	mov	r1, r3
 800457e:	2031      	movs	r0, #49	; 0x31
 8004580:	f7ff fef4 	bl	800436c <regWrite>

	if(ADXL->Format.Resolution == RESFULL || ADXL->Format.Range == RANGE_2G)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	799b      	ldrb	r3, [r3, #6]
 8004588:	2b08      	cmp	r3, #8
 800458a:	d003      	beq.n	8004594 <ADXL345_Init+0xd0>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	79db      	ldrb	r3, [r3, #7]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d104      	bne.n	800459e <ADXL345_Init+0xda>
	{
		ScaleFactor = (float)1/256.0;
 8004594:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <ADXL345_Init+0x11c>)
 8004596:	f04f 526e 	mov.w	r2, #998244352	; 0x3b800000
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	e019      	b.n	80045d2 <ADXL345_Init+0x10e>
	}
	else
	{
		switch(ADXL->Format.Range)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	79db      	ldrb	r3, [r3, #7]
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d010      	beq.n	80045c8 <ADXL345_Init+0x104>
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	dc13      	bgt.n	80045d2 <ADXL345_Init+0x10e>
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d002      	beq.n	80045b4 <ADXL345_Init+0xf0>
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d005      	beq.n	80045be <ADXL345_Init+0xfa>
 80045b2:	e00e      	b.n	80045d2 <ADXL345_Init+0x10e>
		{
			case (RANGE_4G):
			{
				ScaleFactor = (float)1/128.0;
 80045b4:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <ADXL345_Init+0x11c>)
 80045b6:	f04f 5270 	mov.w	r2, #1006632960	; 0x3c000000
 80045ba:	601a      	str	r2, [r3, #0]
				break;
 80045bc:	e009      	b.n	80045d2 <ADXL345_Init+0x10e>
			}
			case (RANGE_8G):
			{
				ScaleFactor = (float)1/64.0;
 80045be:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <ADXL345_Init+0x11c>)
 80045c0:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 80045c4:	601a      	str	r2, [r3, #0]
				break;
 80045c6:	e004      	b.n	80045d2 <ADXL345_Init+0x10e>
			}
			case (RANGE_16G):
			{
				ScaleFactor = (float)1/32.0;
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <ADXL345_Init+0x11c>)
 80045ca:	f04f 5274 	mov.w	r2, #1023410176	; 0x3d000000
 80045ce:	601a      	str	r2, [r3, #0]
				break;
 80045d0:	bf00      	nop
			}
		}
	}
	
	
	return ADXL_OK;
 80045d2:	2301      	movs	r3, #1
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	2000034c 	.word	0x2000034c
 80045e0:	2000000c 	.word	0x2000000c

080045e4 <ADXL345_GetValue>:
 * @param Axis = X, Y and Z axis select
 *
 * @retval int16_t
 */
int16_t ADXL345_GetValue(uint8_t Axis)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	71fb      	strb	r3, [r7, #7]
	uint8_t Data[2] = { 0, 0 };
 80045ee:	2300      	movs	r3, #0
 80045f0:	81bb      	strh	r3, [r7, #12]
	int16_t OutputData;

	regRead(Axis, &Data[0], 1);
 80045f2:	f107 010c 	add.w	r1, r7, #12
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	2201      	movs	r2, #1
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff ff02 	bl	8004404 <regRead>
	regRead(Axis+1, &Data[1], 1);
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	3301      	adds	r3, #1
 8004604:	b2d8      	uxtb	r0, r3
 8004606:	f107 030c 	add.w	r3, r7, #12
 800460a:	3301      	adds	r3, #1
 800460c:	2201      	movs	r2, #1
 800460e:	4619      	mov	r1, r3
 8004610:	f7ff fef8 	bl	8004404 <regRead>

	OutputData = ((Data[1] << 8) | Data[0]);
 8004614:	7b7b      	ldrb	r3, [r7, #13]
 8004616:	021b      	lsls	r3, r3, #8
 8004618:	b21a      	sxth	r2, r3
 800461a:	7b3b      	ldrb	r3, [r7, #12]
 800461c:	b21b      	sxth	r3, r3
 800461e:	4313      	orrs	r3, r2
 8004620:	81fb      	strh	r3, [r7, #14]

	return OutputData;
 8004622:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <ADXL345_GetGValue>:
 * @param Axis = X, Y and Z axis select @def_group Axis_Select
 *
 * @retval float
 */
float ADXL345_GetGValue(uint8_t Axis)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
	float OutputData = 0;
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]

	OutputData = ADXL345_GetValue(Axis);
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff ffce 	bl	80045e4 <ADXL345_GetValue>
 8004648:	4603      	mov	r3, r0
 800464a:	4618      	mov	r0, r3
 800464c:	f7fc fa2c 	bl	8000aa8 <__aeabi_i2f>
 8004650:	4603      	mov	r3, r0
 8004652:	60fb      	str	r3, [r7, #12]

	OutputData = (float)(OutputData * ScaleFactor * M_G);
 8004654:	4b10      	ldr	r3, [pc, #64]	; (8004698 <ADXL345_GetGValue+0x68>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68f9      	ldr	r1, [r7, #12]
 800465a:	4618      	mov	r0, r3
 800465c:	f7fb feaa 	bl	80003b4 <__aeabi_fmul>
 8004660:	4603      	mov	r3, r0
 8004662:	4618      	mov	r0, r3
 8004664:	f7fc f8be 	bl	80007e4 <__aeabi_f2d>
 8004668:	a309      	add	r3, pc, #36	; (adr r3, 8004690 <ADXL345_GetGValue+0x60>)
 800466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466e:	f7fb fd77 	bl	8000160 <__aeabi_dmul>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4610      	mov	r0, r2
 8004678:	4619      	mov	r1, r3
 800467a:	f7fc f90b 	bl	8000894 <__aeabi_d2f>
 800467e:	4603      	mov	r3, r0
 8004680:	60fb      	str	r3, [r7, #12]

	return OutputData;
 8004682:	68fb      	ldr	r3, [r7, #12]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	f3af 8000 	nop.w
 8004690:	3a92a305 	.word	0x3a92a305
 8004694:	40239d01 	.word	0x40239d01
 8004698:	2000000c 	.word	0x2000000c

0800469c <ADXL345_MeasureON>:
 * @brief ADXL345_MeasureON, Measure Mode On, Sleep Mode and Standby Mode Off
 *
 * @retval void
 */
void ADXL345_MeasureON()
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
	uint8_t regValue = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	71fb      	strb	r3, [r7, #7]

	regRead(POWER_CTL, &regValue, 1);
 80046a6:	1dfb      	adds	r3, r7, #7
 80046a8:	2201      	movs	r2, #1
 80046aa:	4619      	mov	r1, r3
 80046ac:	202d      	movs	r0, #45	; 0x2d
 80046ae:	f7ff fea9 	bl	8004404 <regRead>

	regValue |= ( 1 << 3 );
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	f043 0308 	orr.w	r3, r3, #8
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	71fb      	strb	r3, [r7, #7]
	regValue &= ~( 1 << 2 );
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	f023 0304 	bic.w	r3, r3, #4
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	71fb      	strb	r3, [r7, #7]

	regWrite(POWER_CTL, regValue);
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	4619      	mov	r1, r3
 80046ca:	202d      	movs	r0, #45	; 0x2d
 80046cc:	f7ff fe4e 	bl	800436c <regWrite>
}
 80046d0:	bf00      	nop
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <cobs_encode>:
 * Remove the "restrict" qualifiers if compiling with a
 * pre-C99 C dialect.
 */
size_t cobs_encode(const uint8_t * restrict input, size_t length,
	uint8_t * restrict output)
{
 80046d8:	b480      	push	{r7}
 80046da:	b089      	sub	sp, #36	; 0x24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
    size_t read_index = 0;
 80046e4:	2300      	movs	r3, #0
 80046e6:	61fb      	str	r3, [r7, #28]
    size_t write_index = 1;
 80046e8:	2301      	movs	r3, #1
 80046ea:	61bb      	str	r3, [r7, #24]
    size_t code_index = 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
    uint8_t code = 1;
 80046f0:	2301      	movs	r3, #1
 80046f2:	74fb      	strb	r3, [r7, #19]

    while(read_index < length)
 80046f4:	e031      	b.n	800475a <cobs_encode+0x82>
    {
        if(input[read_index] == 0)
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	4413      	add	r3, r2
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10e      	bne.n	8004720 <cobs_encode+0x48>
        {
            output[code_index] = code;
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	4413      	add	r3, r2
 8004708:	7cfa      	ldrb	r2, [r7, #19]
 800470a:	701a      	strb	r2, [r3, #0]
            code = 1;
 800470c:	2301      	movs	r3, #1
 800470e:	74fb      	strb	r3, [r7, #19]
            code_index = write_index++;
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	61ba      	str	r2, [r7, #24]
 8004716:	617b      	str	r3, [r7, #20]
            read_index++;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	3301      	adds	r3, #1
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	e01c      	b.n	800475a <cobs_encode+0x82>
        }
        else
        {
            output[write_index++] = input[read_index++];
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	61fa      	str	r2, [r7, #28]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	441a      	add	r2, r3
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	1c59      	adds	r1, r3, #1
 800472e:	61b9      	str	r1, [r7, #24]
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	440b      	add	r3, r1
 8004734:	7812      	ldrb	r2, [r2, #0]
 8004736:	701a      	strb	r2, [r3, #0]
            code++;
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	3301      	adds	r3, #1
 800473c:	74fb      	strb	r3, [r7, #19]
            if(code == 0xFF)
 800473e:	7cfb      	ldrb	r3, [r7, #19]
 8004740:	2bff      	cmp	r3, #255	; 0xff
 8004742:	d10a      	bne.n	800475a <cobs_encode+0x82>
            {
                output[code_index] = code;
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	4413      	add	r3, r2
 800474a:	7cfa      	ldrb	r2, [r7, #19]
 800474c:	701a      	strb	r2, [r3, #0]
                code = 1;
 800474e:	2301      	movs	r3, #1
 8004750:	74fb      	strb	r3, [r7, #19]
                code_index = write_index++;
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	61ba      	str	r2, [r7, #24]
 8004758:	617b      	str	r3, [r7, #20]
    while(read_index < length)
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	429a      	cmp	r2, r3
 8004760:	d3c9      	bcc.n	80046f6 <cobs_encode+0x1e>
            }
        }
    }

    output[code_index] = code;
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	4413      	add	r3, r2
 8004768:	7cfa      	ldrb	r2, [r7, #19]
 800476a:	701a      	strb	r2, [r3, #0]

    return write_index;
 800476c:	69bb      	ldr	r3, [r7, #24]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3724      	adds	r7, #36	; 0x24
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr

08004778 <uart_cobs_send>:
#include "cobs.h"
#include "uart_cobs_service.h"

size_t uart_cobs_send(uart_cobs_service_t* h, void* data, size_t size,
	TickType_t timeout)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
	if(h->input_queue == NULL)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f8d3 300a 	ldr.w	r3, [r3, #10]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <uart_cobs_send+0x1c>
		return 0;
 8004790:	2300      	movs	r3, #0
 8004792:	e012      	b.n	80047ba <uart_cobs_send+0x42>
	uart_cobs_frame_t frame;
	frame.data = data;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	613b      	str	r3, [r7, #16]
	frame.size = size;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	617b      	str	r3, [r7, #20]
	if(xQueueSend(h->input_queue, &frame, timeout) == pdFALSE)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f8d3 000a 	ldr.w	r0, [r3, #10]
 80047a2:	f107 0110 	add.w	r1, r7, #16
 80047a6:	2300      	movs	r3, #0
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	f000 fc69 	bl	8005080 <xQueueGenericSend>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <uart_cobs_send+0x40>
		return 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	e000      	b.n	80047ba <uart_cobs_send+0x42>
	else
		return size;
 80047b8:	687b      	ldr	r3, [r7, #4]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <uart_cobs_service_tx_task>:
			frame.data = (void *) framebuffer;
	}
}

void uart_cobs_service_tx_task(void const * argument)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08a      	sub	sp, #40	; 0x28
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	6078      	str	r0, [r7, #4]
	uart_cobs_service_t* h = (uart_cobs_service_t *) argument;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	61fb      	str	r3, [r7, #28]
	h->input_queue = xQueueCreate(h->queue_depth, sizeof(uart_cobs_frame_t));
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	7a1b      	ldrb	r3, [r3, #8]
 80047d4:	2200      	movs	r2, #0
 80047d6:	2108      	movs	r1, #8
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 fbc1 	bl	8004f60 <xQueueGenericCreate>
 80047de:	4602      	mov	r2, r0
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f8c3 200a 	str.w	r2, [r3, #10]
	/* Data frame handler */
	uart_cobs_frame_t frame = {.data = NULL, .size = 0};
 80047e6:	2300      	movs	r3, #0
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
	/* Buffer for COBS */
	size_t cobs_buffer_size = h->max_frame_size + h->max_frame_size/254 + 2;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	492d      	ldr	r1, [pc, #180]	; (80048b0 <uart_cobs_service_tx_task+0xec>)
 80047fa:	fba1 1303 	umull	r1, r3, r1, r3
 80047fe:	099b      	lsrs	r3, r3, #6
 8004800:	4413      	add	r3, r2
 8004802:	3302      	adds	r3, #2
 8004804:	61bb      	str	r3, [r7, #24]
	uint8_t *buf = pvPortMalloc(cobs_buffer_size);
 8004806:	69b8      	ldr	r0, [r7, #24]
 8004808:	f002 fac8 	bl	8006d9c <pvPortMalloc>
 800480c:	6178      	str	r0, [r7, #20]
	if(!buf) Error_Handler();
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <uart_cobs_service_tx_task+0x54>
 8004814:	f7fc fbce 	bl	8000fb4 <Error_Handler>
	size_t size = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	613b      	str	r3, [r7, #16]
	while(1)
	{
		xQueueReceive(h->input_queue, &frame, portMAX_DELAY);
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8004822:	f107 0108 	add.w	r1, r7, #8
 8004826:	f04f 32ff 	mov.w	r2, #4294967295
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fdb4 	bl	8005398 <xQueueReceive>
		size = cobs_encode((uint8_t *) frame.data, frame.size, buf);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	68f9      	ldr	r1, [r7, #12]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff ff4e 	bl	80046d8 <cobs_encode>
 800483c:	6138      	str	r0, [r7, #16]
		buf[size++] = 0;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	613a      	str	r2, [r7, #16]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4413      	add	r3, r2
 8004848:	2200      	movs	r2, #0
 800484a:	701a      	strb	r2, [r3, #0]
		switch(h->mode)
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	7a5b      	ldrb	r3, [r3, #9]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d01e      	beq.n	8004892 <uart_cobs_service_tx_task+0xce>
 8004854:	2b02      	cmp	r3, #2
 8004856:	dc28      	bgt.n	80048aa <uart_cobs_service_tx_task+0xe6>
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <uart_cobs_service_tx_task+0x9e>
 800485c:	2b01      	cmp	r3, #1
 800485e:	d00c      	beq.n	800487a <uart_cobs_service_tx_task+0xb6>
		case UART_COBS_DMA:
			uart_freertos_tx_dma(h->huart, buf, size,
				portMAX_DELAY, portMAX_DELAY);
			break;
		default:
			break;
 8004860:	e023      	b.n	80048aa <uart_cobs_service_tx_task+0xe6>
			uart_freertos_tx(h->huart, buf, size,
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	f04f 33ff 	mov.w	r3, #4294967295
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	f04f 33ff 	mov.w	r3, #4294967295
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	6979      	ldr	r1, [r7, #20]
 8004874:	f000 f8ed 	bl	8004a52 <uart_freertos_tx>
			break;
 8004878:	e018      	b.n	80048ac <uart_cobs_service_tx_task+0xe8>
			uart_freertos_tx_it(h->huart, buf, size,
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	f04f 33ff 	mov.w	r3, #4294967295
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	f04f 33ff 	mov.w	r3, #4294967295
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	6979      	ldr	r1, [r7, #20]
 800488c:	f000 f90d 	bl	8004aaa <uart_freertos_tx_it>
			break;
 8004890:	e00c      	b.n	80048ac <uart_cobs_service_tx_task+0xe8>
			uart_freertos_tx_dma(h->huart, buf, size,
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	f04f 33ff 	mov.w	r3, #4294967295
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	f04f 33ff 	mov.w	r3, #4294967295
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	6979      	ldr	r1, [r7, #20]
 80048a4:	f000 f945 	bl	8004b32 <uart_freertos_tx_dma>
			break;
 80048a8:	e000      	b.n	80048ac <uart_cobs_service_tx_task+0xe8>
			break;
 80048aa:	bf00      	nop
		xQueueReceive(h->input_queue, &frame, portMAX_DELAY);
 80048ac:	e7b6      	b.n	800481c <uart_cobs_service_tx_task+0x58>
 80048ae:	bf00      	nop
 80048b0:	81020409 	.word	0x81020409

080048b4 <uart_cobs_service_tx_create>:
	return osThreadCreate(&thread, (void *) h);
}

osThreadId uart_cobs_service_tx_create(char *name, osPriority priority,
	uint32_t instances, uint32_t stack_size, uart_cobs_service_t* h)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08c      	sub	sp, #48	; 0x30
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	607a      	str	r2, [r7, #4]
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	460b      	mov	r3, r1
 80048c2:	817b      	strh	r3, [r7, #10]

	/* create treads */
	osThreadDef_t thread = {
 80048c4:	f107 0314 	add.w	r3, r7, #20
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	609a      	str	r2, [r3, #8]
 80048d0:	60da      	str	r2, [r3, #12]
 80048d2:	611a      	str	r2, [r3, #16]
 80048d4:	615a      	str	r2, [r3, #20]
 80048d6:	619a      	str	r2, [r3, #24]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	4b09      	ldr	r3, [pc, #36]	; (8004904 <uart_cobs_service_tx_create+0x50>)
 80048de:	61bb      	str	r3, [r7, #24]
 80048e0:	897b      	ldrh	r3, [r7, #10]
 80048e2:	83bb      	strh	r3, [r7, #28]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	623b      	str	r3, [r7, #32]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	627b      	str	r3, [r7, #36]	; 0x24
		.tpriority	= priority,
		.instances	= instances,
		.stacksize	= stack_size
	};

	return osThreadCreate(&thread, (void *) h);
 80048ec:	f107 0314 	add.w	r3, r7, #20
 80048f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 f9d0 	bl	8004c98 <osThreadCreate>
 80048f8:	4603      	mov	r3, r0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3730      	adds	r7, #48	; 0x30
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	080047c5 	.word	0x080047c5

08004908 <uart_rtos_list_append>:
/* Root of UART FreeRTOS list */
static struct uart_rtos_list *uart_rtos_list_begin = NULL;

/* Append the item at the end of UART FreeRTOS list */
static struct uart_rtos_list* uart_rtos_list_append(uart_freertos_t *uart_rtos)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	/* if list is empty, create and return the begin of list */
	if(uart_rtos_list_begin == NULL)
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <uart_rtos_list_append+0x70>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d110      	bne.n	800493a <uart_rtos_list_append+0x32>
	{
		uart_rtos_list_begin = (struct uart_rtos_list*)
			pvPortMalloc(sizeof(struct uart_rtos_list));
 8004918:	2008      	movs	r0, #8
 800491a:	f002 fa3f 	bl	8006d9c <pvPortMalloc>
 800491e:	4603      	mov	r3, r0
		uart_rtos_list_begin = (struct uart_rtos_list*)
 8004920:	4a15      	ldr	r2, [pc, #84]	; (8004978 <uart_rtos_list_append+0x70>)
 8004922:	6013      	str	r3, [r2, #0]
		uart_rtos_list_begin->uart_rtos = uart_rtos;
 8004924:	4b14      	ldr	r3, [pc, #80]	; (8004978 <uart_rtos_list_append+0x70>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	601a      	str	r2, [r3, #0]
		uart_rtos_list_begin->next = NULL;
 800492c:	4b12      	ldr	r3, [pc, #72]	; (8004978 <uart_rtos_list_append+0x70>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2200      	movs	r2, #0
 8004932:	605a      	str	r2, [r3, #4]
		return uart_rtos_list_begin;
 8004934:	4b10      	ldr	r3, [pc, #64]	; (8004978 <uart_rtos_list_append+0x70>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	e01a      	b.n	8004970 <uart_rtos_list_append+0x68>
	}
	/* else find end of list */
	struct uart_rtos_list *item = uart_rtos_list_begin;
 800493a:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <uart_rtos_list_append+0x70>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]
	while(item->next != NULL)
 8004940:	e002      	b.n	8004948 <uart_rtos_list_append+0x40>
		item = item->next;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	60fb      	str	r3, [r7, #12]
	while(item->next != NULL)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f8      	bne.n	8004942 <uart_rtos_list_append+0x3a>
	/* and create and append item at the end of list */
	item->next = (struct uart_rtos_list*)
		pvPortMalloc(sizeof(struct uart_rtos_list));
 8004950:	2008      	movs	r0, #8
 8004952:	f002 fa23 	bl	8006d9c <pvPortMalloc>
 8004956:	4602      	mov	r2, r0
	item->next = (struct uart_rtos_list*)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	605a      	str	r2, [r3, #4]
	item->next->uart_rtos = uart_rtos;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	601a      	str	r2, [r3, #0]
	item->next->next = NULL;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	605a      	str	r2, [r3, #4]
	return item->next;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	685b      	ldr	r3, [r3, #4]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20000354 	.word	0x20000354

0800497c <uart_rtos_list_find_item>:
}

/* Find item in SPI FreeRTOS list with mached SPI_HandleTypeDef */
static struct uart_rtos_list* uart_rtos_list_find_item
	(UART_HandleTypeDef* huart)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]

	struct uart_rtos_list *item = uart_rtos_list_begin;
 8004984:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <uart_rtos_list_find_item+0x38>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 800498a:	e008      	b.n	800499e <uart_rtos_list_find_item+0x22>
	{
		if(item->uart_rtos->huart == huart)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	d006      	beq.n	80049a6 <uart_rtos_list_find_item+0x2a>
			break;
		else
			item = item->next;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1f3      	bne.n	800498c <uart_rtos_list_find_item+0x10>
 80049a4:	e000      	b.n	80049a8 <uart_rtos_list_find_item+0x2c>
			break;
 80049a6:	bf00      	nop
	}
	return item;
 80049a8:	68fb      	ldr	r3, [r7, #12]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr
 80049b4:	20000354 	.word	0x20000354

080049b8 <uart_freertos_init>:

/* Initialize UART with FreeRTOS mutexes and semaphores */
uart_freertos_status uart_freertos_init(uart_freertos_t* uart_rtos)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
	/* find hspi into list */
	if(uart_rtos_list_find_item(uart_rtos->huart) != NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff ffd9 	bl	800497c <uart_rtos_list_find_item>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <uart_freertos_init+0x1c>
		return UART_FREERTOS_EXIST;
 80049d0:	2305      	movs	r3, #5
 80049d2:	e01f      	b.n	8004a14 <uart_freertos_init+0x5c>
	/* if hspi not found, create semaphores and mutexes */
	uart_rtos->tx_mutex = xSemaphoreCreateMutex();
 80049d4:	2001      	movs	r0, #1
 80049d6:	f000 fb3a 	bl	800504e <xQueueCreateMutex>
 80049da:	4602      	mov	r2, r0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	609a      	str	r2, [r3, #8]
	uart_rtos->rx_mutex = xSemaphoreCreateMutex();
 80049e0:	2001      	movs	r0, #1
 80049e2:	f000 fb34 	bl	800504e <xQueueCreateMutex>
 80049e6:	4602      	mov	r2, r0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	605a      	str	r2, [r3, #4]
	uart_rtos->tx_complete = xSemaphoreCreateBinary();
 80049ec:	2203      	movs	r2, #3
 80049ee:	2100      	movs	r1, #0
 80049f0:	2001      	movs	r0, #1
 80049f2:	f000 fab5 	bl	8004f60 <xQueueGenericCreate>
 80049f6:	4602      	mov	r2, r0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	611a      	str	r2, [r3, #16]
	uart_rtos->rx_complete = xSemaphoreCreateBinary();
 80049fc:	2203      	movs	r2, #3
 80049fe:	2100      	movs	r1, #0
 8004a00:	2001      	movs	r0, #1
 8004a02:	f000 faad 	bl	8004f60 <xQueueGenericCreate>
 8004a06:	4602      	mov	r2, r0
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	60da      	str	r2, [r3, #12]

	/* register spi_freertos_base into list */
	uart_rtos_list_append(uart_rtos);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ff7b 	bl	8004908 <uart_rtos_list_append>
	return UART_FREERTOS_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <parse_hal_status>:
	uart_rtos_list_delete(uart_rtos);
}

/* Parse HAL status */
static inline uart_freertos_status parse_hal_status(HAL_StatusTypeDef status)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	71fb      	strb	r3, [r7, #7]
  switch(status)
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d00a      	beq.n	8004a42 <parse_hal_status+0x26>
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	dc0a      	bgt.n	8004a46 <parse_hal_status+0x2a>
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d002      	beq.n	8004a3a <parse_hal_status+0x1e>
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d002      	beq.n	8004a3e <parse_hal_status+0x22>
 8004a38:	e005      	b.n	8004a46 <parse_hal_status+0x2a>
  {
  case HAL_ERROR:
    return UART_FREERTOS_ERR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e004      	b.n	8004a48 <parse_hal_status+0x2c>
  case HAL_BUSY:
    return UART_FREERTOS_BUSY;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e002      	b.n	8004a48 <parse_hal_status+0x2c>
  case HAL_TIMEOUT:
    return UART_FREERTOS_TIMEOUT;
 8004a42:	2304      	movs	r3, #4
 8004a44:	e000      	b.n	8004a48 <parse_hal_status+0x2c>
  default:
    return UART_FREERTOS_OK;
 8004a46:	2300      	movs	r3, #0
  }
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr

08004a52 <uart_freertos_tx>:

/* Transmit data through UART whithout interupts */
uart_freertos_status uart_freertos_tx (uart_freertos_t* uart, const void* data, size_t data_size, TickType_t mutex_timeout, uint32_t transfer_timeout)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b086      	sub	sp, #24
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
 8004a5e:	603b      	str	r3, [r7, #0]
	uart_freertos_status rtn;

	if(xSemaphoreTake(uart->tx_mutex, mutex_timeout) == pdFALSE)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	6839      	ldr	r1, [r7, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fd76 	bl	8005558 <xQueueSemaphoreTake>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <uart_freertos_tx+0x24>
	{
		return UART_FREERTOS_BUSY;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e015      	b.n	8004aa2 <uart_freertos_tx+0x50>
	}

	rtn = parse_hal_status (HAL_UART_Transmit(uart->huart,(void*) data, data_size, transfer_timeout));
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	68b9      	ldr	r1, [r7, #8]
 8004a82:	f7fe feaa 	bl	80037da <HAL_UART_Transmit>
 8004a86:	4603      	mov	r3, r0
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff ffc7 	bl	8004a1c <parse_hal_status>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	75fb      	strb	r3, [r7, #23]

	/* Give back UART mutex */
	xSemaphoreGive(uart->tx_mutex);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6898      	ldr	r0, [r3, #8]
 8004a96:	2300      	movs	r3, #0
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	f000 faf0 	bl	8005080 <xQueueGenericSend>

	return rtn;
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <uart_freertos_tx_it>:
}


/* Transmit data through UART with interupts */
uart_freertos_status uart_freertos_tx_it (uart_freertos_t* uart, const void* data, size_t data_size, TickType_t mutex_timeout, TickType_t transfer_timeout)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b086      	sub	sp, #24
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	603b      	str	r3, [r7, #0]
	uart_freertos_status rtn = UART_FREERTOS_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	75fb      	strb	r3, [r7, #23]

	if(xSemaphoreTake(uart->tx_mutex, mutex_timeout) == pdFALSE)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	6839      	ldr	r1, [r7, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fd48 	bl	8005558 <xQueueSemaphoreTake>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <uart_freertos_tx_it+0x2a>
	{
		rtn = UART_FREERTOS_BUSY;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8004ad2:	e029      	b.n	8004b28 <uart_freertos_tx_it+0x7e>
	}

	rtn =  parse_hal_status ( HAL_UART_Transmit_IT(uart->huart,(void*) data, data_size));
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	b292      	uxth	r2, r2
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe ff0d 	bl	80038fe <HAL_UART_Transmit_IT>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff ff98 	bl	8004a1c <parse_hal_status>
 8004aec:	4603      	mov	r3, r0
 8004aee:	75fb      	strb	r3, [r7, #23]

	if ((rtn == UART_FREERTOS_ERR) || (rtn == UART_FREERTOS_BUSY) ) goto end_of_transaction;
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d00e      	beq.n	8004b14 <uart_freertos_tx_it+0x6a>
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d00b      	beq.n	8004b14 <uart_freertos_tx_it+0x6a>

	/* Waiting for tx complete */
	if(xSemaphoreTake(uart->tx_complete,transfer_timeout) == pdFALSE)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	6a39      	ldr	r1, [r7, #32]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fd28 	bl	8005558 <xQueueSemaphoreTake>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d104      	bne.n	8004b18 <uart_freertos_tx_it+0x6e>
	{
		rtn = UART_FREERTOS_TIMEOUT;
 8004b0e:	2304      	movs	r3, #4
 8004b10:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004b12:	e002      	b.n	8004b1a <uart_freertos_tx_it+0x70>
	if ((rtn == UART_FREERTOS_ERR) || (rtn == UART_FREERTOS_BUSY) ) goto end_of_transaction;
 8004b14:	bf00      	nop
 8004b16:	e000      	b.n	8004b1a <uart_freertos_tx_it+0x70>
	}

	end_of_transaction:
 8004b18:	bf00      	nop

	/* Give back UART mutex */
	xSemaphoreGive(uart->tx_mutex);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6898      	ldr	r0, [r3, #8]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	2200      	movs	r2, #0
 8004b22:	2100      	movs	r1, #0
 8004b24:	f000 faac 	bl	8005080 <xQueueGenericSend>

	exit:
	return rtn;
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <uart_freertos_tx_dma>:
}


/* Transmit data through UART whithout interupts */
uart_freertos_status uart_freertos_tx_dma (uart_freertos_t* uart, const void* data, size_t data_size, TickType_t mutex_timeout, TickType_t transfer_timeout)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b086      	sub	sp, #24
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	60b9      	str	r1, [r7, #8]
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	603b      	str	r3, [r7, #0]
	uart_freertos_status rtn = UART_FREERTOS_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	75fb      	strb	r3, [r7, #23]

	if(xSemaphoreTake(uart->tx_mutex, mutex_timeout) == pdFALSE)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	6839      	ldr	r1, [r7, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fd04 	bl	8005558 <xQueueSemaphoreTake>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d102      	bne.n	8004b5c <uart_freertos_tx_dma+0x2a>
	{
		rtn = UART_FREERTOS_BUSY;
 8004b56:	2303      	movs	r3, #3
 8004b58:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8004b5a:	e029      	b.n	8004bb0 <uart_freertos_tx_dma+0x7e>
	}

	rtn =  parse_hal_status ( HAL_UART_Transmit_DMA(uart->huart,(void*) data, data_size));
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	b292      	uxth	r2, r2
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fe ff0e 	bl	8003988 <HAL_UART_Transmit_DMA>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff ff54 	bl	8004a1c <parse_hal_status>
 8004b74:	4603      	mov	r3, r0
 8004b76:	75fb      	strb	r3, [r7, #23]

	if ((rtn == UART_FREERTOS_ERR) || (rtn == UART_FREERTOS_BUSY) ) goto end_of_transaction;
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d00e      	beq.n	8004b9c <uart_freertos_tx_dma+0x6a>
 8004b7e:	7dfb      	ldrb	r3, [r7, #23]
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d00b      	beq.n	8004b9c <uart_freertos_tx_dma+0x6a>

	/* Waiting for tx complete */
	if(xSemaphoreTake(uart->tx_complete,transfer_timeout) == pdFALSE)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	6a39      	ldr	r1, [r7, #32]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 fce4 	bl	8005558 <xQueueSemaphoreTake>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d104      	bne.n	8004ba0 <uart_freertos_tx_dma+0x6e>
	{
		rtn = UART_FREERTOS_TIMEOUT;
 8004b96:	2304      	movs	r3, #4
 8004b98:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004b9a:	e002      	b.n	8004ba2 <uart_freertos_tx_dma+0x70>
	if ((rtn == UART_FREERTOS_ERR) || (rtn == UART_FREERTOS_BUSY) ) goto end_of_transaction;
 8004b9c:	bf00      	nop
 8004b9e:	e000      	b.n	8004ba2 <uart_freertos_tx_dma+0x70>
	}

	end_of_transaction:
 8004ba0:	bf00      	nop

	/* Give back UART mutex */
	xSemaphoreGive(uart->tx_mutex);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6898      	ldr	r0, [r3, #8]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2100      	movs	r1, #0
 8004bac:	f000 fa68 	bl	8005080 <xQueueGenericSend>

	exit:
	return rtn;
 8004bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <HAL_UART_RxCpltCallback>:
	return rtn;
}

/* USART RX complete inperrupt */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60bb      	str	r3, [r7, #8]
	struct uart_rtos_list *item = uart_rtos_list_find_item(huart);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff fed7 	bl	800497c <uart_rtos_list_find_item>
 8004bce:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d014      	beq.n	8004c00 <HAL_UART_RxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->uart_rtos->rx_complete,	&xHigherPriorityTaskWoken);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f107 0208 	add.w	r2, r7, #8
 8004be0:	4611      	mov	r1, r2
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fb4a 	bl	800527c <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d009      	beq.n	8004c02 <HAL_UART_RxCpltCallback+0x46>
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <HAL_UART_RxCpltCallback+0x4c>)
 8004bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	e000      	b.n	8004c02 <HAL_UART_RxCpltCallback+0x46>
	if(item == NULL) return;
 8004c00:	bf00      	nop
}
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	e000ed04 	.word	0xe000ed04

08004c0c <HAL_UART_TxCpltCallback>:

/* USART TX complete inperrupt */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60bb      	str	r3, [r7, #8]
	struct uart_rtos_list *item = uart_rtos_list_find_item(huart);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff feaf 	bl	800497c <uart_rtos_list_find_item>
 8004c1e:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d014      	beq.n	8004c50 <HAL_UART_TxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->uart_rtos->tx_complete,	&xHigherPriorityTaskWoken);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	f107 0208 	add.w	r2, r7, #8
 8004c30:	4611      	mov	r1, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fb22 	bl	800527c <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d009      	beq.n	8004c52 <HAL_UART_TxCpltCallback+0x46>
 8004c3e:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <HAL_UART_TxCpltCallback+0x4c>)
 8004c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	e000      	b.n	8004c52 <HAL_UART_TxCpltCallback+0x46>
	if(item == NULL) return;
 8004c50:	bf00      	nop
}
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	e000ed04 	.word	0xe000ed04

08004c5c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4603      	mov	r3, r0
 8004c64:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c6e:	2b84      	cmp	r3, #132	; 0x84
 8004c70:	d005      	beq.n	8004c7e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004c72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4413      	add	r3, r2
 8004c7a:	3303      	adds	r3, #3
 8004c7c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bc80      	pop	{r7}
 8004c88:	4770      	bx	lr

08004c8a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004c8e:	f001 f837 	bl	8005d00 <vTaskStartScheduler>
  
  return osOK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9a:	b089      	sub	sp, #36	; 0x24
 8004c9c:	af04      	add	r7, sp, #16
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d020      	beq.n	8004cec <osThreadCreate+0x54>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01c      	beq.n	8004cec <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685c      	ldr	r4, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681d      	ldr	r5, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691e      	ldr	r6, [r3, #16]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7ff ffc9 	bl	8004c5c <makeFreeRtosPriority>
 8004cca:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cd4:	9202      	str	r2, [sp, #8]
 8004cd6:	9301      	str	r3, [sp, #4]
 8004cd8:	9100      	str	r1, [sp, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	4632      	mov	r2, r6
 8004cde:	4629      	mov	r1, r5
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f000 fe6c 	bl	80059be <xTaskCreateStatic>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	e01c      	b.n	8004d26 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685c      	ldr	r4, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cf8:	b29e      	uxth	r6, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff ffab 	bl	8004c5c <makeFreeRtosPriority>
 8004d06:	4602      	mov	r2, r0
 8004d08:	f107 030c 	add.w	r3, r7, #12
 8004d0c:	9301      	str	r3, [sp, #4]
 8004d0e:	9200      	str	r2, [sp, #0]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	4632      	mov	r2, r6
 8004d14:	4629      	mov	r1, r5
 8004d16:	4620      	mov	r0, r4
 8004d18:	f000 fead 	bl	8005a76 <xTaskCreate>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d001      	beq.n	8004d26 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e000      	b.n	8004d28 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004d26:	68fb      	ldr	r3, [r7, #12]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f103 0208 	add.w	r2, r3, #8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f04f 32ff 	mov.w	r2, #4294967295
 8004d48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f103 0208 	add.w	r2, r3, #8
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f103 0208 	add.w	r2, r3, #8
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr

08004d6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc80      	pop	{r7}
 8004d84:	4770      	bx	lr

08004d86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d86:	b480      	push	{r7}
 8004d88:	b085      	sub	sp, #20
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	601a      	str	r2, [r3, #0]
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr

08004dcc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de2:	d103      	bne.n	8004dec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	e00c      	b.n	8004e06 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3308      	adds	r3, #8
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	e002      	b.n	8004dfa <vListInsert+0x2e>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d2f6      	bcs.n	8004df4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	601a      	str	r2, [r3, #0]
}
 8004e32:	bf00      	nop
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6892      	ldr	r2, [r2, #8]
 8004e52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6852      	ldr	r2, [r2, #4]
 8004e5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d103      	bne.n	8004e70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	1e5a      	subs	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr
	...

08004e90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10a      	bne.n	8004eba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004eba:	f001 fe6f 	bl	8006b9c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec6:	68f9      	ldr	r1, [r7, #12]
 8004ec8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004eca:	fb01 f303 	mul.w	r3, r1, r3
 8004ece:	441a      	add	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eea:	3b01      	subs	r3, #1
 8004eec:	68f9      	ldr	r1, [r7, #12]
 8004eee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ef0:	fb01 f303 	mul.w	r3, r1, r3
 8004ef4:	441a      	add	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	22ff      	movs	r2, #255	; 0xff
 8004efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	22ff      	movs	r2, #255	; 0xff
 8004f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d114      	bne.n	8004f3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d01a      	beq.n	8004f4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	3310      	adds	r3, #16
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f001 f947 	bl	80061b0 <xTaskRemoveFromEventList>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d012      	beq.n	8004f4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f28:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <xQueueGenericReset+0xcc>)
 8004f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	e009      	b.n	8004f4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3310      	adds	r3, #16
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff fef6 	bl	8004d30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3324      	adds	r3, #36	; 0x24
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fef1 	bl	8004d30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f4e:	f001 fe55 	bl	8006bfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f52:	2301      	movs	r3, #1
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	e000ed04 	.word	0xe000ed04

08004f60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08a      	sub	sp, #40	; 0x28
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10a      	bne.n	8004f8a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	613b      	str	r3, [r7, #16]
}
 8004f86:	bf00      	nop
 8004f88:	e7fe      	b.n	8004f88 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d102      	bne.n	8004f96 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	61fb      	str	r3, [r7, #28]
 8004f94:	e004      	b.n	8004fa0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	fb02 f303 	mul.w	r3, r2, r3
 8004f9e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	3348      	adds	r3, #72	; 0x48
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f001 fef9 	bl	8006d9c <pvPortMalloc>
 8004faa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00f      	beq.n	8004fd2 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	3348      	adds	r3, #72	; 0x48
 8004fb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fc0:	79fa      	ldrb	r2, [r7, #7]
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 f805 	bl	8004fdc <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004fd2:	69bb      	ldr	r3, [r7, #24]
	}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3720      	adds	r7, #32
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d103      	bne.n	8004ff8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	e002      	b.n	8004ffe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800500a:	2101      	movs	r1, #1
 800500c:	69b8      	ldr	r0, [r7, #24]
 800500e:	f7ff ff3f 	bl	8004e90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005012:	bf00      	nop
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800501a:	b580      	push	{r7, lr}
 800501c:	b082      	sub	sp, #8
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00e      	beq.n	8005046 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800503a:	2300      	movs	r3, #0
 800503c:	2200      	movs	r2, #0
 800503e:	2100      	movs	r1, #0
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f81d 	bl	8005080 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005046:	bf00      	nop
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800504e:	b580      	push	{r7, lr}
 8005050:	b086      	sub	sp, #24
 8005052:	af00      	add	r7, sp, #0
 8005054:	4603      	mov	r3, r0
 8005056:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005058:	2301      	movs	r3, #1
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	2300      	movs	r3, #0
 800505e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	461a      	mov	r2, r3
 8005064:	6939      	ldr	r1, [r7, #16]
 8005066:	6978      	ldr	r0, [r7, #20]
 8005068:	f7ff ff7a 	bl	8004f60 <xQueueGenericCreate>
 800506c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f7ff ffd3 	bl	800501a <prvInitialiseMutex>

		return pxNewQueue;
 8005074:	68fb      	ldr	r3, [r7, #12]
	}
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08e      	sub	sp, #56	; 0x38
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800508e:	2300      	movs	r3, #0
 8005090:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10a      	bne.n	80050b2 <xQueueGenericSend+0x32>
	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050ae:	bf00      	nop
 80050b0:	e7fe      	b.n	80050b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d103      	bne.n	80050c0 <xQueueGenericSend+0x40>
 80050b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <xQueueGenericSend+0x44>
 80050c0:	2301      	movs	r3, #1
 80050c2:	e000      	b.n	80050c6 <xQueueGenericSend+0x46>
 80050c4:	2300      	movs	r3, #0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10a      	bne.n	80050e0 <xQueueGenericSend+0x60>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050dc:	bf00      	nop
 80050de:	e7fe      	b.n	80050de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d103      	bne.n	80050ee <xQueueGenericSend+0x6e>
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <xQueueGenericSend+0x72>
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <xQueueGenericSend+0x74>
 80050f2:	2300      	movs	r3, #0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10a      	bne.n	800510e <xQueueGenericSend+0x8e>
	__asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	623b      	str	r3, [r7, #32]
}
 800510a:	bf00      	nop
 800510c:	e7fe      	b.n	800510c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800510e:	f001 fa13 	bl	8006538 <xTaskGetSchedulerState>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d102      	bne.n	800511e <xQueueGenericSend+0x9e>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <xQueueGenericSend+0xa2>
 800511e:	2301      	movs	r3, #1
 8005120:	e000      	b.n	8005124 <xQueueGenericSend+0xa4>
 8005122:	2300      	movs	r3, #0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <xQueueGenericSend+0xbe>
	__asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	61fb      	str	r3, [r7, #28]
}
 800513a:	bf00      	nop
 800513c:	e7fe      	b.n	800513c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800513e:	f001 fd2d 	bl	8006b9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514a:	429a      	cmp	r2, r3
 800514c:	d302      	bcc.n	8005154 <xQueueGenericSend+0xd4>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d129      	bne.n	80051a8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800515a:	f000 fb20 	bl	800579e <prvCopyDataToQueue>
 800515e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	2b00      	cmp	r3, #0
 8005166:	d010      	beq.n	800518a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516a:	3324      	adds	r3, #36	; 0x24
 800516c:	4618      	mov	r0, r3
 800516e:	f001 f81f 	bl	80061b0 <xTaskRemoveFromEventList>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d013      	beq.n	80051a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005178:	4b3f      	ldr	r3, [pc, #252]	; (8005278 <xQueueGenericSend+0x1f8>)
 800517a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	e00a      	b.n	80051a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	2b00      	cmp	r3, #0
 800518e:	d007      	beq.n	80051a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005190:	4b39      	ldr	r3, [pc, #228]	; (8005278 <xQueueGenericSend+0x1f8>)
 8005192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051a0:	f001 fd2c 	bl	8006bfc <vPortExitCritical>
				return pdPASS;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e063      	b.n	8005270 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d103      	bne.n	80051b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051ae:	f001 fd25 	bl	8006bfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	e05c      	b.n	8005270 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d106      	bne.n	80051ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051bc:	f107 0314 	add.w	r3, r7, #20
 80051c0:	4618      	mov	r0, r3
 80051c2:	f001 f857 	bl	8006274 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051c6:	2301      	movs	r3, #1
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051ca:	f001 fd17 	bl	8006bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051ce:	f000 fe01 	bl	8005dd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051d2:	f001 fce3 	bl	8006b9c <vPortEnterCritical>
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051dc:	b25b      	sxtb	r3, r3
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e2:	d103      	bne.n	80051ec <xQueueGenericSend+0x16c>
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051f2:	b25b      	sxtb	r3, r3
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f8:	d103      	bne.n	8005202 <xQueueGenericSend+0x182>
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005202:	f001 fcfb 	bl	8006bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005206:	1d3a      	adds	r2, r7, #4
 8005208:	f107 0314 	add.w	r3, r7, #20
 800520c:	4611      	mov	r1, r2
 800520e:	4618      	mov	r0, r3
 8005210:	f001 f846 	bl	80062a0 <xTaskCheckForTimeOut>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d124      	bne.n	8005264 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800521a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800521c:	f000 fbb7 	bl	800598e <prvIsQueueFull>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d018      	beq.n	8005258 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	3310      	adds	r3, #16
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	4611      	mov	r1, r2
 800522e:	4618      	mov	r0, r3
 8005230:	f000 ff9a 	bl	8006168 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005236:	f000 fb42 	bl	80058be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800523a:	f000 fdd9 	bl	8005df0 <xTaskResumeAll>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	f47f af7c 	bne.w	800513e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005246:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <xQueueGenericSend+0x1f8>)
 8005248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	e772      	b.n	800513e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800525a:	f000 fb30 	bl	80058be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800525e:	f000 fdc7 	bl	8005df0 <xTaskResumeAll>
 8005262:	e76c      	b.n	800513e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005266:	f000 fb2a 	bl	80058be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800526a:	f000 fdc1 	bl	8005df0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800526e:	2300      	movs	r3, #0
		}
	}
}
 8005270:	4618      	mov	r0, r3
 8005272:	3738      	adds	r7, #56	; 0x38
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	e000ed04 	.word	0xe000ed04

0800527c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08e      	sub	sp, #56	; 0x38
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10a      	bne.n	80052a6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	623b      	str	r3, [r7, #32]
}
 80052a2:	bf00      	nop
 80052a4:	e7fe      	b.n	80052a4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <xQueueGiveFromISR+0x48>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	61fb      	str	r3, [r7, #28]
}
 80052c0:	bf00      	nop
 80052c2:	e7fe      	b.n	80052c2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d103      	bne.n	80052d4 <xQueueGiveFromISR+0x58>
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <xQueueGiveFromISR+0x5c>
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <xQueueGiveFromISR+0x5e>
 80052d8:	2300      	movs	r3, #0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10a      	bne.n	80052f4 <xQueueGiveFromISR+0x78>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	61bb      	str	r3, [r7, #24]
}
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052f4:	f001 fd14 	bl	8006d20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052f8:	f3ef 8211 	mrs	r2, BASEPRI
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	617a      	str	r2, [r7, #20]
 800530e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005310:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005312:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005318:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005320:	429a      	cmp	r2, r3
 8005322:	d22b      	bcs.n	800537c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800532a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005336:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800533a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533e:	d112      	bne.n	8005366 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	2b00      	cmp	r3, #0
 8005346:	d016      	beq.n	8005376 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534a:	3324      	adds	r3, #36	; 0x24
 800534c:	4618      	mov	r0, r3
 800534e:	f000 ff2f 	bl	80061b0 <xTaskRemoveFromEventList>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00e      	beq.n	8005376 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00b      	beq.n	8005376 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2201      	movs	r2, #1
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	e007      	b.n	8005376 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800536a:	3301      	adds	r3, #1
 800536c:	b2db      	uxtb	r3, r3
 800536e:	b25a      	sxtb	r2, r3
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005376:	2301      	movs	r3, #1
 8005378:	637b      	str	r3, [r7, #52]	; 0x34
 800537a:	e001      	b.n	8005380 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800537c:	2300      	movs	r3, #0
 800537e:	637b      	str	r3, [r7, #52]	; 0x34
 8005380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005382:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800538a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800538c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800538e:	4618      	mov	r0, r3
 8005390:	3738      	adds	r7, #56	; 0x38
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08c      	sub	sp, #48	; 0x30
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053a4:	2300      	movs	r3, #0
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10a      	bne.n	80053c8 <xQueueReceive+0x30>
	__asm volatile
 80053b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	623b      	str	r3, [r7, #32]
}
 80053c4:	bf00      	nop
 80053c6:	e7fe      	b.n	80053c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d103      	bne.n	80053d6 <xQueueReceive+0x3e>
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <xQueueReceive+0x42>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <xQueueReceive+0x44>
 80053da:	2300      	movs	r3, #0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <xQueueReceive+0x5e>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	61fb      	str	r3, [r7, #28]
}
 80053f2:	bf00      	nop
 80053f4:	e7fe      	b.n	80053f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053f6:	f001 f89f 	bl	8006538 <xTaskGetSchedulerState>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d102      	bne.n	8005406 <xQueueReceive+0x6e>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <xQueueReceive+0x72>
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <xQueueReceive+0x74>
 800540a:	2300      	movs	r3, #0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <xQueueReceive+0x8e>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	61bb      	str	r3, [r7, #24]
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005426:	f001 fbb9 	bl	8006b9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800542a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	2b00      	cmp	r3, #0
 8005434:	d01f      	beq.n	8005476 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800543a:	f000 fa1a 	bl	8005872 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	1e5a      	subs	r2, r3, #1
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00f      	beq.n	800546e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800544e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005450:	3310      	adds	r3, #16
 8005452:	4618      	mov	r0, r3
 8005454:	f000 feac 	bl	80061b0 <xTaskRemoveFromEventList>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d007      	beq.n	800546e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800545e:	4b3d      	ldr	r3, [pc, #244]	; (8005554 <xQueueReceive+0x1bc>)
 8005460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800546e:	f001 fbc5 	bl	8006bfc <vPortExitCritical>
				return pdPASS;
 8005472:	2301      	movs	r3, #1
 8005474:	e069      	b.n	800554a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d103      	bne.n	8005484 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800547c:	f001 fbbe 	bl	8006bfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005480:	2300      	movs	r3, #0
 8005482:	e062      	b.n	800554a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800548a:	f107 0310 	add.w	r3, r7, #16
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fef0 	bl	8006274 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005494:	2301      	movs	r3, #1
 8005496:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005498:	f001 fbb0 	bl	8006bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800549c:	f000 fc9a 	bl	8005dd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054a0:	f001 fb7c 	bl	8006b9c <vPortEnterCritical>
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054aa:	b25b      	sxtb	r3, r3
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b0:	d103      	bne.n	80054ba <xQueueReceive+0x122>
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054c0:	b25b      	sxtb	r3, r3
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c6:	d103      	bne.n	80054d0 <xQueueReceive+0x138>
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054d0:	f001 fb94 	bl	8006bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054d4:	1d3a      	adds	r2, r7, #4
 80054d6:	f107 0310 	add.w	r3, r7, #16
 80054da:	4611      	mov	r1, r2
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fedf 	bl	80062a0 <xTaskCheckForTimeOut>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d123      	bne.n	8005530 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ea:	f000 fa3a 	bl	8005962 <prvIsQueueEmpty>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d017      	beq.n	8005524 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	3324      	adds	r3, #36	; 0x24
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	4611      	mov	r1, r2
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 fe33 	bl	8006168 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005504:	f000 f9db 	bl	80058be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005508:	f000 fc72 	bl	8005df0 <xTaskResumeAll>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d189      	bne.n	8005426 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005512:	4b10      	ldr	r3, [pc, #64]	; (8005554 <xQueueReceive+0x1bc>)
 8005514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	e780      	b.n	8005426 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005526:	f000 f9ca 	bl	80058be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800552a:	f000 fc61 	bl	8005df0 <xTaskResumeAll>
 800552e:	e77a      	b.n	8005426 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005532:	f000 f9c4 	bl	80058be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005536:	f000 fc5b 	bl	8005df0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800553a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800553c:	f000 fa11 	bl	8005962 <prvIsQueueEmpty>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	f43f af6f 	beq.w	8005426 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005548:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800554a:	4618      	mov	r0, r3
 800554c:	3730      	adds	r7, #48	; 0x30
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	e000ed04 	.word	0xe000ed04

08005558 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08e      	sub	sp, #56	; 0x38
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005562:	2300      	movs	r3, #0
 8005564:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800556a:	2300      	movs	r3, #0
 800556c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	623b      	str	r3, [r7, #32]
}
 8005586:	bf00      	nop
 8005588:	e7fe      	b.n	8005588 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800558a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	61fb      	str	r3, [r7, #28]
}
 80055a4:	bf00      	nop
 80055a6:	e7fe      	b.n	80055a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055a8:	f000 ffc6 	bl	8006538 <xTaskGetSchedulerState>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d102      	bne.n	80055b8 <xQueueSemaphoreTake+0x60>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <xQueueSemaphoreTake+0x64>
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <xQueueSemaphoreTake+0x66>
 80055bc:	2300      	movs	r3, #0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10a      	bne.n	80055d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	61bb      	str	r3, [r7, #24]
}
 80055d4:	bf00      	nop
 80055d6:	e7fe      	b.n	80055d6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80055d8:	f001 fae0 	bl	8006b9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d024      	beq.n	8005632 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	1e5a      	subs	r2, r3, #1
 80055ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d104      	bne.n	8005602 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80055f8:	f001 f968 	bl	80068cc <pvTaskIncrementMutexHeldCount>
 80055fc:	4602      	mov	r2, r0
 80055fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005600:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00f      	beq.n	800562a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	3310      	adds	r3, #16
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fdce 	bl	80061b0 <xTaskRemoveFromEventList>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d007      	beq.n	800562a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800561a:	4b54      	ldr	r3, [pc, #336]	; (800576c <xQueueSemaphoreTake+0x214>)
 800561c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800562a:	f001 fae7 	bl	8006bfc <vPortExitCritical>
				return pdPASS;
 800562e:	2301      	movs	r3, #1
 8005630:	e097      	b.n	8005762 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d111      	bne.n	800565c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	617b      	str	r3, [r7, #20]
}
 8005650:	bf00      	nop
 8005652:	e7fe      	b.n	8005652 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005654:	f001 fad2 	bl	8006bfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005658:	2300      	movs	r3, #0
 800565a:	e082      	b.n	8005762 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800565c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565e:	2b00      	cmp	r3, #0
 8005660:	d106      	bne.n	8005670 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005662:	f107 030c 	add.w	r3, r7, #12
 8005666:	4618      	mov	r0, r3
 8005668:	f000 fe04 	bl	8006274 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800566c:	2301      	movs	r3, #1
 800566e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005670:	f001 fac4 	bl	8006bfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005674:	f000 fbae 	bl	8005dd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005678:	f001 fa90 	bl	8006b9c <vPortEnterCritical>
 800567c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005682:	b25b      	sxtb	r3, r3
 8005684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005688:	d103      	bne.n	8005692 <xQueueSemaphoreTake+0x13a>
 800568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005698:	b25b      	sxtb	r3, r3
 800569a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569e:	d103      	bne.n	80056a8 <xQueueSemaphoreTake+0x150>
 80056a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056a8:	f001 faa8 	bl	8006bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056ac:	463a      	mov	r2, r7
 80056ae:	f107 030c 	add.w	r3, r7, #12
 80056b2:	4611      	mov	r1, r2
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fdf3 	bl	80062a0 <xTaskCheckForTimeOut>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d132      	bne.n	8005726 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056c2:	f000 f94e 	bl	8005962 <prvIsQueueEmpty>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d026      	beq.n	800571a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d109      	bne.n	80056e8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80056d4:	f001 fa62 	bl	8006b9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 ff49 	bl	8006574 <xTaskPriorityInherit>
 80056e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80056e4:	f001 fa8a 	bl	8006bfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ea:	3324      	adds	r3, #36	; 0x24
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	4611      	mov	r1, r2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fd39 	bl	8006168 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056f8:	f000 f8e1 	bl	80058be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056fc:	f000 fb78 	bl	8005df0 <xTaskResumeAll>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	f47f af68 	bne.w	80055d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005708:	4b18      	ldr	r3, [pc, #96]	; (800576c <xQueueSemaphoreTake+0x214>)
 800570a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	e75e      	b.n	80055d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800571a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800571c:	f000 f8cf 	bl	80058be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005720:	f000 fb66 	bl	8005df0 <xTaskResumeAll>
 8005724:	e758      	b.n	80055d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005726:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005728:	f000 f8c9 	bl	80058be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800572c:	f000 fb60 	bl	8005df0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005730:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005732:	f000 f916 	bl	8005962 <prvIsQueueEmpty>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	f43f af4d 	beq.w	80055d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00d      	beq.n	8005760 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005744:	f001 fa2a 	bl	8006b9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005748:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800574a:	f000 f811 	bl	8005770 <prvGetDisinheritPriorityAfterTimeout>
 800574e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005756:	4618      	mov	r0, r3
 8005758:	f001 f818 	bl	800678c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800575c:	f001 fa4e 	bl	8006bfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005760:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005762:	4618      	mov	r0, r3
 8005764:	3738      	adds	r7, #56	; 0x38
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	e000ed04 	.word	0xe000ed04

08005770 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	2b00      	cmp	r3, #0
 800577e:	d006      	beq.n	800578e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f1c3 0307 	rsb	r3, r3, #7
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	e001      	b.n	8005792 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005792:	68fb      	ldr	r3, [r7, #12]
	}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr

0800579e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b086      	sub	sp, #24
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10d      	bne.n	80057d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d14d      	bne.n	8005860 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 ff59 	bl	8006680 <xTaskPriorityDisinherit>
 80057ce:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	605a      	str	r2, [r3, #4]
 80057d6:	e043      	b.n	8005860 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d119      	bne.n	8005812 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6898      	ldr	r0, [r3, #8]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	461a      	mov	r2, r3
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	f001 fdd2 	bl	8007392 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	441a      	add	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	d32b      	bcc.n	8005860 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	609a      	str	r2, [r3, #8]
 8005810:	e026      	b.n	8005860 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	68d8      	ldr	r0, [r3, #12]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	461a      	mov	r2, r3
 800581c:	68b9      	ldr	r1, [r7, #8]
 800581e:	f001 fdb8 	bl	8007392 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	425b      	negs	r3, r3
 800582c:	441a      	add	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d207      	bcs.n	800584e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	425b      	negs	r3, r3
 8005848:	441a      	add	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d105      	bne.n	8005860 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	3b01      	subs	r3, #1
 800585e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005868:	697b      	ldr	r3, [r7, #20]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b082      	sub	sp, #8
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	2b00      	cmp	r3, #0
 8005882:	d018      	beq.n	80058b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	441a      	add	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	429a      	cmp	r2, r3
 800589c:	d303      	bcc.n	80058a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68d9      	ldr	r1, [r3, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	461a      	mov	r2, r3
 80058b0:	6838      	ldr	r0, [r7, #0]
 80058b2:	f001 fd6e 	bl	8007392 <memcpy>
	}
}
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b084      	sub	sp, #16
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058c6:	f001 f969 	bl	8006b9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058d2:	e011      	b.n	80058f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d012      	beq.n	8005902 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3324      	adds	r3, #36	; 0x24
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fc65 	bl	80061b0 <xTaskRemoveFromEventList>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058ec:	f000 fd3a 	bl	8006364 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	dce9      	bgt.n	80058d4 <prvUnlockQueue+0x16>
 8005900:	e000      	b.n	8005904 <prvUnlockQueue+0x46>
					break;
 8005902:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	22ff      	movs	r2, #255	; 0xff
 8005908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800590c:	f001 f976 	bl	8006bfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005910:	f001 f944 	bl	8006b9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800591a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800591c:	e011      	b.n	8005942 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d012      	beq.n	800594c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3310      	adds	r3, #16
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fc40 	bl	80061b0 <xTaskRemoveFromEventList>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005936:	f000 fd15 	bl	8006364 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800593a:	7bbb      	ldrb	r3, [r7, #14]
 800593c:	3b01      	subs	r3, #1
 800593e:	b2db      	uxtb	r3, r3
 8005940:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005942:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005946:	2b00      	cmp	r3, #0
 8005948:	dce9      	bgt.n	800591e <prvUnlockQueue+0x60>
 800594a:	e000      	b.n	800594e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800594c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	22ff      	movs	r2, #255	; 0xff
 8005952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005956:	f001 f951 	bl	8006bfc <vPortExitCritical>
}
 800595a:	bf00      	nop
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800596a:	f001 f917 	bl	8006b9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	2b00      	cmp	r3, #0
 8005974:	d102      	bne.n	800597c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005976:	2301      	movs	r3, #1
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	e001      	b.n	8005980 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005980:	f001 f93c 	bl	8006bfc <vPortExitCritical>

	return xReturn;
 8005984:	68fb      	ldr	r3, [r7, #12]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005996:	f001 f901 	bl	8006b9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d102      	bne.n	80059ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80059a6:	2301      	movs	r3, #1
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	e001      	b.n	80059b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059b0:	f001 f924 	bl	8006bfc <vPortExitCritical>

	return xReturn;
 80059b4:	68fb      	ldr	r3, [r7, #12]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b08e      	sub	sp, #56	; 0x38
 80059c2:	af04      	add	r7, sp, #16
 80059c4:	60f8      	str	r0, [r7, #12]
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	607a      	str	r2, [r7, #4]
 80059ca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10a      	bne.n	80059e8 <xTaskCreateStatic+0x2a>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	623b      	str	r3, [r7, #32]
}
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10a      	bne.n	8005a04 <xTaskCreateStatic+0x46>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	61fb      	str	r3, [r7, #28]
}
 8005a00:	bf00      	nop
 8005a02:	e7fe      	b.n	8005a02 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a04:	23b4      	movs	r3, #180	; 0xb4
 8005a06:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2bb4      	cmp	r3, #180	; 0xb4
 8005a0c:	d00a      	beq.n	8005a24 <xTaskCreateStatic+0x66>
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	61bb      	str	r3, [r7, #24]
}
 8005a20:	bf00      	nop
 8005a22:	e7fe      	b.n	8005a22 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d01e      	beq.n	8005a68 <xTaskCreateStatic+0xaa>
 8005a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d01b      	beq.n	8005a68 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a42:	2300      	movs	r3, #0
 8005a44:	9303      	str	r3, [sp, #12]
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	9302      	str	r3, [sp, #8]
 8005a4a:	f107 0314 	add.w	r3, r7, #20
 8005a4e:	9301      	str	r3, [sp, #4]
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	68b9      	ldr	r1, [r7, #8]
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 f850 	bl	8005b00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a62:	f000 f8e3 	bl	8005c2c <prvAddNewTaskToReadyList>
 8005a66:	e001      	b.n	8005a6c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a6c:	697b      	ldr	r3, [r7, #20]
	}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3728      	adds	r7, #40	; 0x28
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b08c      	sub	sp, #48	; 0x30
 8005a7a:	af04      	add	r7, sp, #16
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	603b      	str	r3, [r7, #0]
 8005a82:	4613      	mov	r3, r2
 8005a84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a86:	88fb      	ldrh	r3, [r7, #6]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f001 f986 	bl	8006d9c <pvPortMalloc>
 8005a90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00e      	beq.n	8005ab6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005a98:	20b4      	movs	r0, #180	; 0xb4
 8005a9a:	f001 f97f 	bl	8006d9c <pvPortMalloc>
 8005a9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8005aac:	e005      	b.n	8005aba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005aae:	6978      	ldr	r0, [r7, #20]
 8005ab0:	f001 fa38 	bl	8006f24 <vPortFree>
 8005ab4:	e001      	b.n	8005aba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d017      	beq.n	8005af0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ac8:	88fa      	ldrh	r2, [r7, #6]
 8005aca:	2300      	movs	r3, #0
 8005acc:	9303      	str	r3, [sp, #12]
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	9302      	str	r3, [sp, #8]
 8005ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f80e 	bl	8005b00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ae4:	69f8      	ldr	r0, [r7, #28]
 8005ae6:	f000 f8a1 	bl	8005c2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005aea:	2301      	movs	r3, #1
 8005aec:	61bb      	str	r3, [r7, #24]
 8005aee:	e002      	b.n	8005af6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005af0:	f04f 33ff 	mov.w	r3, #4294967295
 8005af4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005af6:	69bb      	ldr	r3, [r7, #24]
	}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3720      	adds	r7, #32
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	f023 0307 	bic.w	r3, r3, #7
 8005b26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	617b      	str	r3, [r7, #20]
}
 8005b44:	bf00      	nop
 8005b46:	e7fe      	b.n	8005b46 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61fb      	str	r3, [r7, #28]
 8005b4c:	e012      	b.n	8005b74 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	4413      	add	r3, r2
 8005b54:	7819      	ldrb	r1, [r3, #0]
 8005b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	3334      	adds	r3, #52	; 0x34
 8005b5e:	460a      	mov	r2, r1
 8005b60:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	4413      	add	r3, r2
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d006      	beq.n	8005b7c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	3301      	adds	r3, #1
 8005b72:	61fb      	str	r3, [r7, #28]
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	2b0f      	cmp	r3, #15
 8005b78:	d9e9      	bls.n	8005b4e <prvInitialiseNewTask+0x4e>
 8005b7a:	e000      	b.n	8005b7e <prvInitialiseNewTask+0x7e>
		{
			break;
 8005b7c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	2b06      	cmp	r3, #6
 8005b8a:	d901      	bls.n	8005b90 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b8c:	2306      	movs	r3, #6
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b9a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff f8e1 	bl	8004d6e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	3318      	adds	r3, #24
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff f8dc 	bl	8004d6e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	f1c3 0207 	rsb	r2, r3, #7
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	334c      	adds	r3, #76	; 0x4c
 8005be0:	2260      	movs	r2, #96	; 0x60
 8005be2:	2100      	movs	r1, #0
 8005be4:	4618      	mov	r0, r3
 8005be6:	f001 fbe2 	bl	80073ae <memset>
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	4a0c      	ldr	r2, [pc, #48]	; (8005c20 <prvInitialiseNewTask+0x120>)
 8005bee:	651a      	str	r2, [r3, #80]	; 0x50
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf2:	4a0c      	ldr	r2, [pc, #48]	; (8005c24 <prvInitialiseNewTask+0x124>)
 8005bf4:	655a      	str	r2, [r3, #84]	; 0x54
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	4a0b      	ldr	r2, [pc, #44]	; (8005c28 <prvInitialiseNewTask+0x128>)
 8005bfa:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	68f9      	ldr	r1, [r7, #12]
 8005c00:	69b8      	ldr	r0, [r7, #24]
 8005c02:	f000 fedd 	bl	80069c0 <pxPortInitialiseStack>
 8005c06:	4602      	mov	r2, r0
 8005c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d002      	beq.n	8005c18 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c18:	bf00      	nop
 8005c1a:	3720      	adds	r7, #32
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	08007f10 	.word	0x08007f10
 8005c24:	08007f30 	.word	0x08007f30
 8005c28:	08007ef0 	.word	0x08007ef0

08005c2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c34:	f000 ffb2 	bl	8006b9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c38:	4b2a      	ldr	r3, [pc, #168]	; (8005ce4 <prvAddNewTaskToReadyList+0xb8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	4a29      	ldr	r2, [pc, #164]	; (8005ce4 <prvAddNewTaskToReadyList+0xb8>)
 8005c40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c42:	4b29      	ldr	r3, [pc, #164]	; (8005ce8 <prvAddNewTaskToReadyList+0xbc>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c4a:	4a27      	ldr	r2, [pc, #156]	; (8005ce8 <prvAddNewTaskToReadyList+0xbc>)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c50:	4b24      	ldr	r3, [pc, #144]	; (8005ce4 <prvAddNewTaskToReadyList+0xb8>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d110      	bne.n	8005c7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c58:	f000 fba8 	bl	80063ac <prvInitialiseTaskLists>
 8005c5c:	e00d      	b.n	8005c7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c5e:	4b23      	ldr	r3, [pc, #140]	; (8005cec <prvAddNewTaskToReadyList+0xc0>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c66:	4b20      	ldr	r3, [pc, #128]	; (8005ce8 <prvAddNewTaskToReadyList+0xbc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d802      	bhi.n	8005c7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c74:	4a1c      	ldr	r2, [pc, #112]	; (8005ce8 <prvAddNewTaskToReadyList+0xbc>)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c7a:	4b1d      	ldr	r3, [pc, #116]	; (8005cf0 <prvAddNewTaskToReadyList+0xc4>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	4a1b      	ldr	r2, [pc, #108]	; (8005cf0 <prvAddNewTaskToReadyList+0xc4>)
 8005c82:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	2201      	movs	r2, #1
 8005c8a:	409a      	lsls	r2, r3
 8005c8c:	4b19      	ldr	r3, [pc, #100]	; (8005cf4 <prvAddNewTaskToReadyList+0xc8>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	4a18      	ldr	r2, [pc, #96]	; (8005cf4 <prvAddNewTaskToReadyList+0xc8>)
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4a15      	ldr	r2, [pc, #84]	; (8005cf8 <prvAddNewTaskToReadyList+0xcc>)
 8005ca4:	441a      	add	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	3304      	adds	r3, #4
 8005caa:	4619      	mov	r1, r3
 8005cac:	4610      	mov	r0, r2
 8005cae:	f7ff f86a 	bl	8004d86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cb2:	f000 ffa3 	bl	8006bfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cb6:	4b0d      	ldr	r3, [pc, #52]	; (8005cec <prvAddNewTaskToReadyList+0xc0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00e      	beq.n	8005cdc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cbe:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <prvAddNewTaskToReadyList+0xbc>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d207      	bcs.n	8005cdc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ccc:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <prvAddNewTaskToReadyList+0xd0>)
 8005cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cdc:	bf00      	nop
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	20000458 	.word	0x20000458
 8005ce8:	20000358 	.word	0x20000358
 8005cec:	20000464 	.word	0x20000464
 8005cf0:	20000474 	.word	0x20000474
 8005cf4:	20000460 	.word	0x20000460
 8005cf8:	2000035c 	.word	0x2000035c
 8005cfc:	e000ed04 	.word	0xe000ed04

08005d00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08a      	sub	sp, #40	; 0x28
 8005d04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d0e:	463a      	mov	r2, r7
 8005d10:	1d39      	adds	r1, r7, #4
 8005d12:	f107 0308 	add.w	r3, r7, #8
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fa ff1a 	bl	8000b50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d1c:	6839      	ldr	r1, [r7, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	9202      	str	r2, [sp, #8]
 8005d24:	9301      	str	r3, [sp, #4]
 8005d26:	2300      	movs	r3, #0
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	460a      	mov	r2, r1
 8005d2e:	4921      	ldr	r1, [pc, #132]	; (8005db4 <vTaskStartScheduler+0xb4>)
 8005d30:	4821      	ldr	r0, [pc, #132]	; (8005db8 <vTaskStartScheduler+0xb8>)
 8005d32:	f7ff fe44 	bl	80059be <xTaskCreateStatic>
 8005d36:	4603      	mov	r3, r0
 8005d38:	4a20      	ldr	r2, [pc, #128]	; (8005dbc <vTaskStartScheduler+0xbc>)
 8005d3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d3c:	4b1f      	ldr	r3, [pc, #124]	; (8005dbc <vTaskStartScheduler+0xbc>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d44:	2301      	movs	r3, #1
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	e001      	b.n	8005d4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d11b      	bne.n	8005d8c <vTaskStartScheduler+0x8c>
	__asm volatile
 8005d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	613b      	str	r3, [r7, #16]
}
 8005d66:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d68:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <vTaskStartScheduler+0xc0>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	334c      	adds	r3, #76	; 0x4c
 8005d6e:	4a15      	ldr	r2, [pc, #84]	; (8005dc4 <vTaskStartScheduler+0xc4>)
 8005d70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d72:	4b15      	ldr	r3, [pc, #84]	; (8005dc8 <vTaskStartScheduler+0xc8>)
 8005d74:	f04f 32ff 	mov.w	r2, #4294967295
 8005d78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d7a:	4b14      	ldr	r3, [pc, #80]	; (8005dcc <vTaskStartScheduler+0xcc>)
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005d80:	4b13      	ldr	r3, [pc, #76]	; (8005dd0 <vTaskStartScheduler+0xd0>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d86:	f000 fe97 	bl	8006ab8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d8a:	e00e      	b.n	8005daa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d92:	d10a      	bne.n	8005daa <vTaskStartScheduler+0xaa>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	60fb      	str	r3, [r7, #12]
}
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <vTaskStartScheduler+0xa8>
}
 8005daa:	bf00      	nop
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	08007ed0 	.word	0x08007ed0
 8005db8:	0800637d 	.word	0x0800637d
 8005dbc:	2000047c 	.word	0x2000047c
 8005dc0:	20000358 	.word	0x20000358
 8005dc4:	20000014 	.word	0x20000014
 8005dc8:	20000478 	.word	0x20000478
 8005dcc:	20000464 	.word	0x20000464
 8005dd0:	2000045c 	.word	0x2000045c

08005dd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005dd8:	4b04      	ldr	r3, [pc, #16]	; (8005dec <vTaskSuspendAll+0x18>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	4a03      	ldr	r2, [pc, #12]	; (8005dec <vTaskSuspendAll+0x18>)
 8005de0:	6013      	str	r3, [r2, #0]
}
 8005de2:	bf00      	nop
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bc80      	pop	{r7}
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	20000480 	.word	0x20000480

08005df0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005dfe:	4b41      	ldr	r3, [pc, #260]	; (8005f04 <xTaskResumeAll+0x114>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10a      	bne.n	8005e1c <xTaskResumeAll+0x2c>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	603b      	str	r3, [r7, #0]
}
 8005e18:	bf00      	nop
 8005e1a:	e7fe      	b.n	8005e1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e1c:	f000 febe 	bl	8006b9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e20:	4b38      	ldr	r3, [pc, #224]	; (8005f04 <xTaskResumeAll+0x114>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	4a37      	ldr	r2, [pc, #220]	; (8005f04 <xTaskResumeAll+0x114>)
 8005e28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e2a:	4b36      	ldr	r3, [pc, #216]	; (8005f04 <xTaskResumeAll+0x114>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d161      	bne.n	8005ef6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e32:	4b35      	ldr	r3, [pc, #212]	; (8005f08 <xTaskResumeAll+0x118>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d05d      	beq.n	8005ef6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e3a:	e02e      	b.n	8005e9a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005e3c:	4b33      	ldr	r3, [pc, #204]	; (8005f0c <xTaskResumeAll+0x11c>)
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	3318      	adds	r3, #24
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fe fff7 	bl	8004e3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3304      	adds	r3, #4
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe fff2 	bl	8004e3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	409a      	lsls	r2, r3
 8005e60:	4b2b      	ldr	r3, [pc, #172]	; (8005f10 <xTaskResumeAll+0x120>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	4a2a      	ldr	r2, [pc, #168]	; (8005f10 <xTaskResumeAll+0x120>)
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4a27      	ldr	r2, [pc, #156]	; (8005f14 <xTaskResumeAll+0x124>)
 8005e78:	441a      	add	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4610      	mov	r0, r2
 8005e82:	f7fe ff80 	bl	8004d86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8a:	4b23      	ldr	r3, [pc, #140]	; (8005f18 <xTaskResumeAll+0x128>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d302      	bcc.n	8005e9a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005e94:	4b21      	ldr	r3, [pc, #132]	; (8005f1c <xTaskResumeAll+0x12c>)
 8005e96:	2201      	movs	r2, #1
 8005e98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e9a:	4b1c      	ldr	r3, [pc, #112]	; (8005f0c <xTaskResumeAll+0x11c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1cc      	bne.n	8005e3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ea8:	f000 fb22 	bl	80064f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005eac:	4b1c      	ldr	r3, [pc, #112]	; (8005f20 <xTaskResumeAll+0x130>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d010      	beq.n	8005eda <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005eb8:	f000 f836 	bl	8005f28 <xTaskIncrementTick>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005ec2:	4b16      	ldr	r3, [pc, #88]	; (8005f1c <xTaskResumeAll+0x12c>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1f1      	bne.n	8005eb8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005ed4:	4b12      	ldr	r3, [pc, #72]	; (8005f20 <xTaskResumeAll+0x130>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005eda:	4b10      	ldr	r3, [pc, #64]	; (8005f1c <xTaskResumeAll+0x12c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d009      	beq.n	8005ef6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ee6:	4b0f      	ldr	r3, [pc, #60]	; (8005f24 <xTaskResumeAll+0x134>)
 8005ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ef6:	f000 fe81 	bl	8006bfc <vPortExitCritical>

	return xAlreadyYielded;
 8005efa:	68bb      	ldr	r3, [r7, #8]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	20000480 	.word	0x20000480
 8005f08:	20000458 	.word	0x20000458
 8005f0c:	20000418 	.word	0x20000418
 8005f10:	20000460 	.word	0x20000460
 8005f14:	2000035c 	.word	0x2000035c
 8005f18:	20000358 	.word	0x20000358
 8005f1c:	2000046c 	.word	0x2000046c
 8005f20:	20000468 	.word	0x20000468
 8005f24:	e000ed04 	.word	0xe000ed04

08005f28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f32:	4b51      	ldr	r3, [pc, #324]	; (8006078 <xTaskIncrementTick+0x150>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f040 808d 	bne.w	8006056 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f3c:	4b4f      	ldr	r3, [pc, #316]	; (800607c <xTaskIncrementTick+0x154>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3301      	adds	r3, #1
 8005f42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f44:	4a4d      	ldr	r2, [pc, #308]	; (800607c <xTaskIncrementTick+0x154>)
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d120      	bne.n	8005f92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f50:	4b4b      	ldr	r3, [pc, #300]	; (8006080 <xTaskIncrementTick+0x158>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <xTaskIncrementTick+0x48>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	603b      	str	r3, [r7, #0]
}
 8005f6c:	bf00      	nop
 8005f6e:	e7fe      	b.n	8005f6e <xTaskIncrementTick+0x46>
 8005f70:	4b43      	ldr	r3, [pc, #268]	; (8006080 <xTaskIncrementTick+0x158>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	4b43      	ldr	r3, [pc, #268]	; (8006084 <xTaskIncrementTick+0x15c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a41      	ldr	r2, [pc, #260]	; (8006080 <xTaskIncrementTick+0x158>)
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	4a41      	ldr	r2, [pc, #260]	; (8006084 <xTaskIncrementTick+0x15c>)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	4b40      	ldr	r3, [pc, #256]	; (8006088 <xTaskIncrementTick+0x160>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	4a3f      	ldr	r2, [pc, #252]	; (8006088 <xTaskIncrementTick+0x160>)
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	f000 faaf 	bl	80064f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f92:	4b3e      	ldr	r3, [pc, #248]	; (800608c <xTaskIncrementTick+0x164>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d34d      	bcc.n	8006038 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f9c:	4b38      	ldr	r3, [pc, #224]	; (8006080 <xTaskIncrementTick+0x158>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <xTaskIncrementTick+0x82>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <xTaskIncrementTick+0x84>
 8005faa:	2300      	movs	r3, #0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d004      	beq.n	8005fba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb0:	4b36      	ldr	r3, [pc, #216]	; (800608c <xTaskIncrementTick+0x164>)
 8005fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb6:	601a      	str	r2, [r3, #0]
					break;
 8005fb8:	e03e      	b.n	8006038 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005fba:	4b31      	ldr	r3, [pc, #196]	; (8006080 <xTaskIncrementTick+0x158>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d203      	bcs.n	8005fda <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005fd2:	4a2e      	ldr	r2, [pc, #184]	; (800608c <xTaskIncrementTick+0x164>)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6013      	str	r3, [r2, #0]
						break;
 8005fd8:	e02e      	b.n	8006038 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe ff2c 	bl	8004e3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d004      	beq.n	8005ff6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	3318      	adds	r3, #24
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fe ff23 	bl	8004e3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	409a      	lsls	r2, r3
 8005ffe:	4b24      	ldr	r3, [pc, #144]	; (8006090 <xTaskIncrementTick+0x168>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4313      	orrs	r3, r2
 8006004:	4a22      	ldr	r2, [pc, #136]	; (8006090 <xTaskIncrementTick+0x168>)
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4a1f      	ldr	r2, [pc, #124]	; (8006094 <xTaskIncrementTick+0x16c>)
 8006016:	441a      	add	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	3304      	adds	r3, #4
 800601c:	4619      	mov	r1, r3
 800601e:	4610      	mov	r0, r2
 8006020:	f7fe feb1 	bl	8004d86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006028:	4b1b      	ldr	r3, [pc, #108]	; (8006098 <xTaskIncrementTick+0x170>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602e:	429a      	cmp	r2, r3
 8006030:	d3b4      	bcc.n	8005f9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006032:	2301      	movs	r3, #1
 8006034:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006036:	e7b1      	b.n	8005f9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006038:	4b17      	ldr	r3, [pc, #92]	; (8006098 <xTaskIncrementTick+0x170>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603e:	4915      	ldr	r1, [pc, #84]	; (8006094 <xTaskIncrementTick+0x16c>)
 8006040:	4613      	mov	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d907      	bls.n	8006060 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006050:	2301      	movs	r3, #1
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	e004      	b.n	8006060 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006056:	4b11      	ldr	r3, [pc, #68]	; (800609c <xTaskIncrementTick+0x174>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3301      	adds	r3, #1
 800605c:	4a0f      	ldr	r2, [pc, #60]	; (800609c <xTaskIncrementTick+0x174>)
 800605e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006060:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <xTaskIncrementTick+0x178>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006068:	2301      	movs	r3, #1
 800606a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800606c:	697b      	ldr	r3, [r7, #20]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20000480 	.word	0x20000480
 800607c:	2000045c 	.word	0x2000045c
 8006080:	20000410 	.word	0x20000410
 8006084:	20000414 	.word	0x20000414
 8006088:	20000470 	.word	0x20000470
 800608c:	20000478 	.word	0x20000478
 8006090:	20000460 	.word	0x20000460
 8006094:	2000035c 	.word	0x2000035c
 8006098:	20000358 	.word	0x20000358
 800609c:	20000468 	.word	0x20000468
 80060a0:	2000046c 	.word	0x2000046c

080060a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060aa:	4b29      	ldr	r3, [pc, #164]	; (8006150 <vTaskSwitchContext+0xac>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060b2:	4b28      	ldr	r3, [pc, #160]	; (8006154 <vTaskSwitchContext+0xb0>)
 80060b4:	2201      	movs	r2, #1
 80060b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060b8:	e044      	b.n	8006144 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80060ba:	4b26      	ldr	r3, [pc, #152]	; (8006154 <vTaskSwitchContext+0xb0>)
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80060c0:	4b25      	ldr	r3, [pc, #148]	; (8006158 <vTaskSwitchContext+0xb4>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	fab3 f383 	clz	r3, r3
 80060cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80060ce:	7afb      	ldrb	r3, [r7, #11]
 80060d0:	f1c3 031f 	rsb	r3, r3, #31
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	4921      	ldr	r1, [pc, #132]	; (800615c <vTaskSwitchContext+0xb8>)
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10a      	bne.n	8006100 <vTaskSwitchContext+0x5c>
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	607b      	str	r3, [r7, #4]
}
 80060fc:	bf00      	nop
 80060fe:	e7fe      	b.n	80060fe <vTaskSwitchContext+0x5a>
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4a14      	ldr	r2, [pc, #80]	; (800615c <vTaskSwitchContext+0xb8>)
 800610c:	4413      	add	r3, r2
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	605a      	str	r2, [r3, #4]
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	3308      	adds	r3, #8
 8006122:	429a      	cmp	r2, r3
 8006124:	d104      	bne.n	8006130 <vTaskSwitchContext+0x8c>
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	605a      	str	r2, [r3, #4]
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <vTaskSwitchContext+0xbc>)
 8006138:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800613a:	4b09      	ldr	r3, [pc, #36]	; (8006160 <vTaskSwitchContext+0xbc>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	334c      	adds	r3, #76	; 0x4c
 8006140:	4a08      	ldr	r2, [pc, #32]	; (8006164 <vTaskSwitchContext+0xc0>)
 8006142:	6013      	str	r3, [r2, #0]
}
 8006144:	bf00      	nop
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	bc80      	pop	{r7}
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	20000480 	.word	0x20000480
 8006154:	2000046c 	.word	0x2000046c
 8006158:	20000460 	.word	0x20000460
 800615c:	2000035c 	.word	0x2000035c
 8006160:	20000358 	.word	0x20000358
 8006164:	20000014 	.word	0x20000014

08006168 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	60fb      	str	r3, [r7, #12]
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800618e:	4b07      	ldr	r3, [pc, #28]	; (80061ac <vTaskPlaceOnEventList+0x44>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3318      	adds	r3, #24
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fe fe18 	bl	8004dcc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800619c:	2101      	movs	r1, #1
 800619e:	6838      	ldr	r0, [r7, #0]
 80061a0:	f000 fba8 	bl	80068f4 <prvAddCurrentTaskToDelayedList>
}
 80061a4:	bf00      	nop
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20000358 	.word	0x20000358

080061b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10a      	bne.n	80061dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	60fb      	str	r3, [r7, #12]
}
 80061d8:	bf00      	nop
 80061da:	e7fe      	b.n	80061da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	3318      	adds	r3, #24
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fe fe2b 	bl	8004e3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061e6:	4b1d      	ldr	r3, [pc, #116]	; (800625c <xTaskRemoveFromEventList+0xac>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d11c      	bne.n	8006228 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	3304      	adds	r3, #4
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fe fe22 	bl	8004e3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fc:	2201      	movs	r2, #1
 80061fe:	409a      	lsls	r2, r3
 8006200:	4b17      	ldr	r3, [pc, #92]	; (8006260 <xTaskRemoveFromEventList+0xb0>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4313      	orrs	r3, r2
 8006206:	4a16      	ldr	r2, [pc, #88]	; (8006260 <xTaskRemoveFromEventList+0xb0>)
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4a13      	ldr	r2, [pc, #76]	; (8006264 <xTaskRemoveFromEventList+0xb4>)
 8006218:	441a      	add	r2, r3
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	3304      	adds	r3, #4
 800621e:	4619      	mov	r1, r3
 8006220:	4610      	mov	r0, r2
 8006222:	f7fe fdb0 	bl	8004d86 <vListInsertEnd>
 8006226:	e005      	b.n	8006234 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	3318      	adds	r3, #24
 800622c:	4619      	mov	r1, r3
 800622e:	480e      	ldr	r0, [pc, #56]	; (8006268 <xTaskRemoveFromEventList+0xb8>)
 8006230:	f7fe fda9 	bl	8004d86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006238:	4b0c      	ldr	r3, [pc, #48]	; (800626c <xTaskRemoveFromEventList+0xbc>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623e:	429a      	cmp	r2, r3
 8006240:	d905      	bls.n	800624e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006242:	2301      	movs	r3, #1
 8006244:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006246:	4b0a      	ldr	r3, [pc, #40]	; (8006270 <xTaskRemoveFromEventList+0xc0>)
 8006248:	2201      	movs	r2, #1
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	e001      	b.n	8006252 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006252:	697b      	ldr	r3, [r7, #20]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	20000480 	.word	0x20000480
 8006260:	20000460 	.word	0x20000460
 8006264:	2000035c 	.word	0x2000035c
 8006268:	20000418 	.word	0x20000418
 800626c:	20000358 	.word	0x20000358
 8006270:	2000046c 	.word	0x2000046c

08006274 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800627c:	4b06      	ldr	r3, [pc, #24]	; (8006298 <vTaskInternalSetTimeOutState+0x24>)
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006284:	4b05      	ldr	r3, [pc, #20]	; (800629c <vTaskInternalSetTimeOutState+0x28>)
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	605a      	str	r2, [r3, #4]
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	20000470 	.word	0x20000470
 800629c:	2000045c 	.word	0x2000045c

080062a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10a      	bne.n	80062c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	613b      	str	r3, [r7, #16]
}
 80062c2:	bf00      	nop
 80062c4:	e7fe      	b.n	80062c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	60fb      	str	r3, [r7, #12]
}
 80062de:	bf00      	nop
 80062e0:	e7fe      	b.n	80062e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80062e2:	f000 fc5b 	bl	8006b9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062e6:	4b1d      	ldr	r3, [pc, #116]	; (800635c <xTaskCheckForTimeOut+0xbc>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fe:	d102      	bne.n	8006306 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006300:	2300      	movs	r3, #0
 8006302:	61fb      	str	r3, [r7, #28]
 8006304:	e023      	b.n	800634e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	4b15      	ldr	r3, [pc, #84]	; (8006360 <xTaskCheckForTimeOut+0xc0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d007      	beq.n	8006322 <xTaskCheckForTimeOut+0x82>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	429a      	cmp	r2, r3
 800631a:	d302      	bcc.n	8006322 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800631c:	2301      	movs	r3, #1
 800631e:	61fb      	str	r3, [r7, #28]
 8006320:	e015      	b.n	800634e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	429a      	cmp	r2, r3
 800632a:	d20b      	bcs.n	8006344 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	1ad2      	subs	r2, r2, r3
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7ff ff9b 	bl	8006274 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800633e:	2300      	movs	r3, #0
 8006340:	61fb      	str	r3, [r7, #28]
 8006342:	e004      	b.n	800634e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800634a:	2301      	movs	r3, #1
 800634c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800634e:	f000 fc55 	bl	8006bfc <vPortExitCritical>

	return xReturn;
 8006352:	69fb      	ldr	r3, [r7, #28]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3720      	adds	r7, #32
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	2000045c 	.word	0x2000045c
 8006360:	20000470 	.word	0x20000470

08006364 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006368:	4b03      	ldr	r3, [pc, #12]	; (8006378 <vTaskMissedYield+0x14>)
 800636a:	2201      	movs	r2, #1
 800636c:	601a      	str	r2, [r3, #0]
}
 800636e:	bf00      	nop
 8006370:	46bd      	mov	sp, r7
 8006372:	bc80      	pop	{r7}
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	2000046c 	.word	0x2000046c

0800637c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006384:	f000 f852 	bl	800642c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006388:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <prvIdleTask+0x28>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d9f9      	bls.n	8006384 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006390:	4b05      	ldr	r3, [pc, #20]	; (80063a8 <prvIdleTask+0x2c>)
 8006392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80063a0:	e7f0      	b.n	8006384 <prvIdleTask+0x8>
 80063a2:	bf00      	nop
 80063a4:	2000035c 	.word	0x2000035c
 80063a8:	e000ed04 	.word	0xe000ed04

080063ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063b2:	2300      	movs	r3, #0
 80063b4:	607b      	str	r3, [r7, #4]
 80063b6:	e00c      	b.n	80063d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	4613      	mov	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4a12      	ldr	r2, [pc, #72]	; (800640c <prvInitialiseTaskLists+0x60>)
 80063c4:	4413      	add	r3, r2
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe fcb2 	bl	8004d30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3301      	adds	r3, #1
 80063d0:	607b      	str	r3, [r7, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b06      	cmp	r3, #6
 80063d6:	d9ef      	bls.n	80063b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063d8:	480d      	ldr	r0, [pc, #52]	; (8006410 <prvInitialiseTaskLists+0x64>)
 80063da:	f7fe fca9 	bl	8004d30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063de:	480d      	ldr	r0, [pc, #52]	; (8006414 <prvInitialiseTaskLists+0x68>)
 80063e0:	f7fe fca6 	bl	8004d30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063e4:	480c      	ldr	r0, [pc, #48]	; (8006418 <prvInitialiseTaskLists+0x6c>)
 80063e6:	f7fe fca3 	bl	8004d30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063ea:	480c      	ldr	r0, [pc, #48]	; (800641c <prvInitialiseTaskLists+0x70>)
 80063ec:	f7fe fca0 	bl	8004d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063f0:	480b      	ldr	r0, [pc, #44]	; (8006420 <prvInitialiseTaskLists+0x74>)
 80063f2:	f7fe fc9d 	bl	8004d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063f6:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <prvInitialiseTaskLists+0x78>)
 80063f8:	4a05      	ldr	r2, [pc, #20]	; (8006410 <prvInitialiseTaskLists+0x64>)
 80063fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063fc:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <prvInitialiseTaskLists+0x7c>)
 80063fe:	4a05      	ldr	r2, [pc, #20]	; (8006414 <prvInitialiseTaskLists+0x68>)
 8006400:	601a      	str	r2, [r3, #0]
}
 8006402:	bf00      	nop
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	2000035c 	.word	0x2000035c
 8006410:	200003e8 	.word	0x200003e8
 8006414:	200003fc 	.word	0x200003fc
 8006418:	20000418 	.word	0x20000418
 800641c:	2000042c 	.word	0x2000042c
 8006420:	20000444 	.word	0x20000444
 8006424:	20000410 	.word	0x20000410
 8006428:	20000414 	.word	0x20000414

0800642c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006432:	e019      	b.n	8006468 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006434:	f000 fbb2 	bl	8006b9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006438:	4b10      	ldr	r3, [pc, #64]	; (800647c <prvCheckTasksWaitingTermination+0x50>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3304      	adds	r3, #4
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe fcf9 	bl	8004e3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800644a:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <prvCheckTasksWaitingTermination+0x54>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3b01      	subs	r3, #1
 8006450:	4a0b      	ldr	r2, [pc, #44]	; (8006480 <prvCheckTasksWaitingTermination+0x54>)
 8006452:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006454:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <prvCheckTasksWaitingTermination+0x58>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3b01      	subs	r3, #1
 800645a:	4a0a      	ldr	r2, [pc, #40]	; (8006484 <prvCheckTasksWaitingTermination+0x58>)
 800645c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800645e:	f000 fbcd 	bl	8006bfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f810 	bl	8006488 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006468:	4b06      	ldr	r3, [pc, #24]	; (8006484 <prvCheckTasksWaitingTermination+0x58>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e1      	bne.n	8006434 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006470:	bf00      	nop
 8006472:	bf00      	nop
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	2000042c 	.word	0x2000042c
 8006480:	20000458 	.word	0x20000458
 8006484:	20000440 	.word	0x20000440

08006488 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	334c      	adds	r3, #76	; 0x4c
 8006494:	4618      	mov	r0, r3
 8006496:	f001 f89d 	bl	80075d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d108      	bne.n	80064b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fd3b 	bl	8006f24 <vPortFree>
				vPortFree( pxTCB );
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fd38 	bl	8006f24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80064b4:	e018      	b.n	80064e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d103      	bne.n	80064c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fd2f 	bl	8006f24 <vPortFree>
	}
 80064c6:	e00f      	b.n	80064e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d00a      	beq.n	80064e8 <prvDeleteTCB+0x60>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	60fb      	str	r3, [r7, #12]
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <prvDeleteTCB+0x5e>
	}
 80064e8:	bf00      	nop
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064f6:	4b0e      	ldr	r3, [pc, #56]	; (8006530 <prvResetNextTaskUnblockTime+0x40>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <prvResetNextTaskUnblockTime+0x14>
 8006500:	2301      	movs	r3, #1
 8006502:	e000      	b.n	8006506 <prvResetNextTaskUnblockTime+0x16>
 8006504:	2300      	movs	r3, #0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d004      	beq.n	8006514 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800650a:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <prvResetNextTaskUnblockTime+0x44>)
 800650c:	f04f 32ff 	mov.w	r2, #4294967295
 8006510:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006512:	e008      	b.n	8006526 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006514:	4b06      	ldr	r3, [pc, #24]	; (8006530 <prvResetNextTaskUnblockTime+0x40>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	4a04      	ldr	r2, [pc, #16]	; (8006534 <prvResetNextTaskUnblockTime+0x44>)
 8006524:	6013      	str	r3, [r2, #0]
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr
 8006530:	20000410 	.word	0x20000410
 8006534:	20000478 	.word	0x20000478

08006538 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800653e:	4b0b      	ldr	r3, [pc, #44]	; (800656c <xTaskGetSchedulerState+0x34>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d102      	bne.n	800654c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006546:	2301      	movs	r3, #1
 8006548:	607b      	str	r3, [r7, #4]
 800654a:	e008      	b.n	800655e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800654c:	4b08      	ldr	r3, [pc, #32]	; (8006570 <xTaskGetSchedulerState+0x38>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d102      	bne.n	800655a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006554:	2302      	movs	r3, #2
 8006556:	607b      	str	r3, [r7, #4]
 8006558:	e001      	b.n	800655e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800655a:	2300      	movs	r3, #0
 800655c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800655e:	687b      	ldr	r3, [r7, #4]
	}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	20000464 	.word	0x20000464
 8006570:	20000480 	.word	0x20000480

08006574 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d06e      	beq.n	8006668 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658e:	4b39      	ldr	r3, [pc, #228]	; (8006674 <xTaskPriorityInherit+0x100>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	429a      	cmp	r2, r3
 8006596:	d25e      	bcs.n	8006656 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	db06      	blt.n	80065ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065a0:	4b34      	ldr	r3, [pc, #208]	; (8006674 <xTaskPriorityInherit+0x100>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a6:	f1c3 0207 	rsb	r2, r3, #7
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	6959      	ldr	r1, [r3, #20]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4a2e      	ldr	r2, [pc, #184]	; (8006678 <xTaskPriorityInherit+0x104>)
 80065c0:	4413      	add	r3, r2
 80065c2:	4299      	cmp	r1, r3
 80065c4:	d101      	bne.n	80065ca <xTaskPriorityInherit+0x56>
 80065c6:	2301      	movs	r3, #1
 80065c8:	e000      	b.n	80065cc <xTaskPriorityInherit+0x58>
 80065ca:	2300      	movs	r3, #0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d03a      	beq.n	8006646 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	3304      	adds	r3, #4
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fe fc31 	bl	8004e3c <uxListRemove>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d115      	bne.n	800660c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e4:	4924      	ldr	r1, [pc, #144]	; (8006678 <xTaskPriorityInherit+0x104>)
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	440b      	add	r3, r1
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10a      	bne.n	800660c <xTaskPriorityInherit+0x98>
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	2201      	movs	r2, #1
 80065fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006600:	43da      	mvns	r2, r3
 8006602:	4b1e      	ldr	r3, [pc, #120]	; (800667c <xTaskPriorityInherit+0x108>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4013      	ands	r3, r2
 8006608:	4a1c      	ldr	r2, [pc, #112]	; (800667c <xTaskPriorityInherit+0x108>)
 800660a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800660c:	4b19      	ldr	r3, [pc, #100]	; (8006674 <xTaskPriorityInherit+0x100>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661a:	2201      	movs	r2, #1
 800661c:	409a      	lsls	r2, r3
 800661e:	4b17      	ldr	r3, [pc, #92]	; (800667c <xTaskPriorityInherit+0x108>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4313      	orrs	r3, r2
 8006624:	4a15      	ldr	r2, [pc, #84]	; (800667c <xTaskPriorityInherit+0x108>)
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800662c:	4613      	mov	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4a10      	ldr	r2, [pc, #64]	; (8006678 <xTaskPriorityInherit+0x104>)
 8006636:	441a      	add	r2, r3
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	3304      	adds	r3, #4
 800663c:	4619      	mov	r1, r3
 800663e:	4610      	mov	r0, r2
 8006640:	f7fe fba1 	bl	8004d86 <vListInsertEnd>
 8006644:	e004      	b.n	8006650 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006646:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <xTaskPriorityInherit+0x100>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006650:	2301      	movs	r3, #1
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	e008      	b.n	8006668 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800665a:	4b06      	ldr	r3, [pc, #24]	; (8006674 <xTaskPriorityInherit+0x100>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	429a      	cmp	r2, r3
 8006662:	d201      	bcs.n	8006668 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006664:	2301      	movs	r3, #1
 8006666:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006668:	68fb      	ldr	r3, [r7, #12]
	}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000358 	.word	0x20000358
 8006678:	2000035c 	.word	0x2000035c
 800667c:	20000460 	.word	0x20000460

08006680 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800668c:	2300      	movs	r3, #0
 800668e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d06e      	beq.n	8006774 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006696:	4b3a      	ldr	r3, [pc, #232]	; (8006780 <xTaskPriorityDisinherit+0x100>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	429a      	cmp	r2, r3
 800669e:	d00a      	beq.n	80066b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	60fb      	str	r3, [r7, #12]
}
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10a      	bne.n	80066d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	60bb      	str	r3, [r7, #8]
}
 80066d0:	bf00      	nop
 80066d2:	e7fe      	b.n	80066d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d8:	1e5a      	subs	r2, r3, #1
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d044      	beq.n	8006774 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d140      	bne.n	8006774 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	3304      	adds	r3, #4
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fe fba0 	bl	8004e3c <uxListRemove>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d115      	bne.n	800672e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006706:	491f      	ldr	r1, [pc, #124]	; (8006784 <xTaskPriorityDisinherit+0x104>)
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <xTaskPriorityDisinherit+0xae>
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671c:	2201      	movs	r2, #1
 800671e:	fa02 f303 	lsl.w	r3, r2, r3
 8006722:	43da      	mvns	r2, r3
 8006724:	4b18      	ldr	r3, [pc, #96]	; (8006788 <xTaskPriorityDisinherit+0x108>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4013      	ands	r3, r2
 800672a:	4a17      	ldr	r2, [pc, #92]	; (8006788 <xTaskPriorityDisinherit+0x108>)
 800672c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673a:	f1c3 0207 	rsb	r2, r3, #7
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	2201      	movs	r2, #1
 8006748:	409a      	lsls	r2, r3
 800674a:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <xTaskPriorityDisinherit+0x108>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4313      	orrs	r3, r2
 8006750:	4a0d      	ldr	r2, [pc, #52]	; (8006788 <xTaskPriorityDisinherit+0x108>)
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006758:	4613      	mov	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4a08      	ldr	r2, [pc, #32]	; (8006784 <xTaskPriorityDisinherit+0x104>)
 8006762:	441a      	add	r2, r3
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	3304      	adds	r3, #4
 8006768:	4619      	mov	r1, r3
 800676a:	4610      	mov	r0, r2
 800676c:	f7fe fb0b 	bl	8004d86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006770:	2301      	movs	r3, #1
 8006772:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006774:	697b      	ldr	r3, [r7, #20]
	}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	20000358 	.word	0x20000358
 8006784:	2000035c 	.word	0x2000035c
 8006788:	20000460 	.word	0x20000460

0800678c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800678c:	b580      	push	{r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800679a:	2301      	movs	r3, #1
 800679c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 8088 	beq.w	80068b6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10a      	bne.n	80067c4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	60fb      	str	r3, [r7, #12]
}
 80067c0:	bf00      	nop
 80067c2:	e7fe      	b.n	80067c2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d902      	bls.n	80067d4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	61fb      	str	r3, [r7, #28]
 80067d2:	e002      	b.n	80067da <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	69fa      	ldr	r2, [r7, #28]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d068      	beq.n	80068b6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d163      	bne.n	80068b6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80067ee:	4b34      	ldr	r3, [pc, #208]	; (80068c0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d10a      	bne.n	800680e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	60bb      	str	r3, [r7, #8]
}
 800680a:	bf00      	nop
 800680c:	e7fe      	b.n	800680c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	69fa      	ldr	r2, [r7, #28]
 8006818:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	2b00      	cmp	r3, #0
 8006820:	db04      	blt.n	800682c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	f1c3 0207 	rsb	r2, r3, #7
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	6959      	ldr	r1, [r3, #20]
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4a22      	ldr	r2, [pc, #136]	; (80068c4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800683c:	4413      	add	r3, r2
 800683e:	4299      	cmp	r1, r3
 8006840:	d101      	bne.n	8006846 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006842:	2301      	movs	r3, #1
 8006844:	e000      	b.n	8006848 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8006846:	2300      	movs	r3, #0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d034      	beq.n	80068b6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	3304      	adds	r3, #4
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe faf3 	bl	8004e3c <uxListRemove>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d115      	bne.n	8006888 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006860:	4918      	ldr	r1, [pc, #96]	; (80068c4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	440b      	add	r3, r1
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10a      	bne.n	8006888 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006876:	2201      	movs	r2, #1
 8006878:	fa02 f303 	lsl.w	r3, r2, r3
 800687c:	43da      	mvns	r2, r3
 800687e:	4b12      	ldr	r3, [pc, #72]	; (80068c8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4013      	ands	r3, r2
 8006884:	4a10      	ldr	r2, [pc, #64]	; (80068c8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006886:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	2201      	movs	r2, #1
 800688e:	409a      	lsls	r2, r3
 8006890:	4b0d      	ldr	r3, [pc, #52]	; (80068c8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4313      	orrs	r3, r2
 8006896:	4a0c      	ldr	r2, [pc, #48]	; (80068c8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4a07      	ldr	r2, [pc, #28]	; (80068c4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80068a8:	441a      	add	r2, r3
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	3304      	adds	r3, #4
 80068ae:	4619      	mov	r1, r3
 80068b0:	4610      	mov	r0, r2
 80068b2:	f7fe fa68 	bl	8004d86 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068b6:	bf00      	nop
 80068b8:	3720      	adds	r7, #32
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20000358 	.word	0x20000358
 80068c4:	2000035c 	.word	0x2000035c
 80068c8:	20000460 	.word	0x20000460

080068cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80068cc:	b480      	push	{r7}
 80068ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80068d0:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d004      	beq.n	80068e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80068d8:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068de:	3201      	adds	r2, #1
 80068e0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80068e2:	4b03      	ldr	r3, [pc, #12]	; (80068f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80068e4:	681b      	ldr	r3, [r3, #0]
	}
 80068e6:	4618      	mov	r0, r3
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bc80      	pop	{r7}
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	20000358 	.word	0x20000358

080068f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80068fe:	4b29      	ldr	r3, [pc, #164]	; (80069a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006904:	4b28      	ldr	r3, [pc, #160]	; (80069a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3304      	adds	r3, #4
 800690a:	4618      	mov	r0, r3
 800690c:	f7fe fa96 	bl	8004e3c <uxListRemove>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10b      	bne.n	800692e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006916:	4b24      	ldr	r3, [pc, #144]	; (80069a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691c:	2201      	movs	r2, #1
 800691e:	fa02 f303 	lsl.w	r3, r2, r3
 8006922:	43da      	mvns	r2, r3
 8006924:	4b21      	ldr	r3, [pc, #132]	; (80069ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4013      	ands	r3, r2
 800692a:	4a20      	ldr	r2, [pc, #128]	; (80069ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800692c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006934:	d10a      	bne.n	800694c <prvAddCurrentTaskToDelayedList+0x58>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d007      	beq.n	800694c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800693c:	4b1a      	ldr	r3, [pc, #104]	; (80069a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3304      	adds	r3, #4
 8006942:	4619      	mov	r1, r3
 8006944:	481a      	ldr	r0, [pc, #104]	; (80069b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006946:	f7fe fa1e 	bl	8004d86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800694a:	e026      	b.n	800699a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4413      	add	r3, r2
 8006952:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006954:	4b14      	ldr	r3, [pc, #80]	; (80069a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	429a      	cmp	r2, r3
 8006962:	d209      	bcs.n	8006978 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006964:	4b13      	ldr	r3, [pc, #76]	; (80069b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	4b0f      	ldr	r3, [pc, #60]	; (80069a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3304      	adds	r3, #4
 800696e:	4619      	mov	r1, r3
 8006970:	4610      	mov	r0, r2
 8006972:	f7fe fa2b 	bl	8004dcc <vListInsert>
}
 8006976:	e010      	b.n	800699a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006978:	4b0f      	ldr	r3, [pc, #60]	; (80069b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	4b0a      	ldr	r3, [pc, #40]	; (80069a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3304      	adds	r3, #4
 8006982:	4619      	mov	r1, r3
 8006984:	4610      	mov	r0, r2
 8006986:	f7fe fa21 	bl	8004dcc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800698a:	4b0c      	ldr	r3, [pc, #48]	; (80069bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	429a      	cmp	r2, r3
 8006992:	d202      	bcs.n	800699a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006994:	4a09      	ldr	r2, [pc, #36]	; (80069bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	6013      	str	r3, [r2, #0]
}
 800699a:	bf00      	nop
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	2000045c 	.word	0x2000045c
 80069a8:	20000358 	.word	0x20000358
 80069ac:	20000460 	.word	0x20000460
 80069b0:	20000444 	.word	0x20000444
 80069b4:	20000414 	.word	0x20000414
 80069b8:	20000410 	.word	0x20000410
 80069bc:	20000478 	.word	0x20000478

080069c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3b04      	subs	r3, #4
 80069d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3b04      	subs	r3, #4
 80069de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f023 0201 	bic.w	r2, r3, #1
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3b04      	subs	r3, #4
 80069ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069f0:	4a08      	ldr	r2, [pc, #32]	; (8006a14 <pxPortInitialiseStack+0x54>)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3b14      	subs	r3, #20
 80069fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3b20      	subs	r3, #32
 8006a06:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a08:	68fb      	ldr	r3, [r7, #12]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr
 8006a14:	08006a19 	.word	0x08006a19

08006a18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a22:	4b12      	ldr	r3, [pc, #72]	; (8006a6c <prvTaskExitError+0x54>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2a:	d00a      	beq.n	8006a42 <prvTaskExitError+0x2a>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	60fb      	str	r3, [r7, #12]
}
 8006a3e:	bf00      	nop
 8006a40:	e7fe      	b.n	8006a40 <prvTaskExitError+0x28>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	60bb      	str	r3, [r7, #8]
}
 8006a54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a56:	bf00      	nop
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0fc      	beq.n	8006a58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a5e:	bf00      	nop
 8006a60:	bf00      	nop
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bc80      	pop	{r7}
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	20000010 	.word	0x20000010

08006a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a70:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <pxCurrentTCBConst2>)
 8006a72:	6819      	ldr	r1, [r3, #0]
 8006a74:	6808      	ldr	r0, [r1, #0]
 8006a76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a7a:	f380 8809 	msr	PSP, r0
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f04f 0000 	mov.w	r0, #0
 8006a86:	f380 8811 	msr	BASEPRI, r0
 8006a8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006a8e:	4770      	bx	lr

08006a90 <pxCurrentTCBConst2>:
 8006a90:	20000358 	.word	0x20000358
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop

08006a98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006a98:	4806      	ldr	r0, [pc, #24]	; (8006ab4 <prvPortStartFirstTask+0x1c>)
 8006a9a:	6800      	ldr	r0, [r0, #0]
 8006a9c:	6800      	ldr	r0, [r0, #0]
 8006a9e:	f380 8808 	msr	MSP, r0
 8006aa2:	b662      	cpsie	i
 8006aa4:	b661      	cpsie	f
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	df00      	svc	0
 8006ab0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ab2:	bf00      	nop
 8006ab4:	e000ed08 	.word	0xe000ed08

08006ab8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006abe:	4b32      	ldr	r3, [pc, #200]	; (8006b88 <xPortStartScheduler+0xd0>)
 8006ac0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	22ff      	movs	r2, #255	; 0xff
 8006ace:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	4b2a      	ldr	r3, [pc, #168]	; (8006b8c <xPortStartScheduler+0xd4>)
 8006ae4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ae6:	4b2a      	ldr	r3, [pc, #168]	; (8006b90 <xPortStartScheduler+0xd8>)
 8006ae8:	2207      	movs	r2, #7
 8006aea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006aec:	e009      	b.n	8006b02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006aee:	4b28      	ldr	r3, [pc, #160]	; (8006b90 <xPortStartScheduler+0xd8>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3b01      	subs	r3, #1
 8006af4:	4a26      	ldr	r2, [pc, #152]	; (8006b90 <xPortStartScheduler+0xd8>)
 8006af6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b02:	78fb      	ldrb	r3, [r7, #3]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0a:	2b80      	cmp	r3, #128	; 0x80
 8006b0c:	d0ef      	beq.n	8006aee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b0e:	4b20      	ldr	r3, [pc, #128]	; (8006b90 <xPortStartScheduler+0xd8>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f1c3 0307 	rsb	r3, r3, #7
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d00a      	beq.n	8006b30 <xPortStartScheduler+0x78>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	60bb      	str	r3, [r7, #8]
}
 8006b2c:	bf00      	nop
 8006b2e:	e7fe      	b.n	8006b2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b30:	4b17      	ldr	r3, [pc, #92]	; (8006b90 <xPortStartScheduler+0xd8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	4a16      	ldr	r2, [pc, #88]	; (8006b90 <xPortStartScheduler+0xd8>)
 8006b38:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b3a:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <xPortStartScheduler+0xd8>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b42:	4a13      	ldr	r2, [pc, #76]	; (8006b90 <xPortStartScheduler+0xd8>)
 8006b44:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b4e:	4b11      	ldr	r3, [pc, #68]	; (8006b94 <xPortStartScheduler+0xdc>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a10      	ldr	r2, [pc, #64]	; (8006b94 <xPortStartScheduler+0xdc>)
 8006b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b5a:	4b0e      	ldr	r3, [pc, #56]	; (8006b94 <xPortStartScheduler+0xdc>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a0d      	ldr	r2, [pc, #52]	; (8006b94 <xPortStartScheduler+0xdc>)
 8006b60:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b64:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b66:	f000 f8b9 	bl	8006cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b6a:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <xPortStartScheduler+0xe0>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b70:	f7ff ff92 	bl	8006a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b74:	f7ff fa96 	bl	80060a4 <vTaskSwitchContext>
	prvTaskExitError();
 8006b78:	f7ff ff4e 	bl	8006a18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	e000e400 	.word	0xe000e400
 8006b8c:	20000484 	.word	0x20000484
 8006b90:	20000488 	.word	0x20000488
 8006b94:	e000ed20 	.word	0xe000ed20
 8006b98:	20000010 	.word	0x20000010

08006b9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	607b      	str	r3, [r7, #4]
}
 8006bb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bb6:	4b0f      	ldr	r3, [pc, #60]	; (8006bf4 <vPortEnterCritical+0x58>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	4a0d      	ldr	r2, [pc, #52]	; (8006bf4 <vPortEnterCritical+0x58>)
 8006bbe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bc0:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <vPortEnterCritical+0x58>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d10f      	bne.n	8006be8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bc8:	4b0b      	ldr	r3, [pc, #44]	; (8006bf8 <vPortEnterCritical+0x5c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <vPortEnterCritical+0x4c>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	603b      	str	r3, [r7, #0]
}
 8006be4:	bf00      	nop
 8006be6:	e7fe      	b.n	8006be6 <vPortEnterCritical+0x4a>
	}
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bc80      	pop	{r7}
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	20000010 	.word	0x20000010
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c02:	4b11      	ldr	r3, [pc, #68]	; (8006c48 <vPortExitCritical+0x4c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10a      	bne.n	8006c20 <vPortExitCritical+0x24>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	607b      	str	r3, [r7, #4]
}
 8006c1c:	bf00      	nop
 8006c1e:	e7fe      	b.n	8006c1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c20:	4b09      	ldr	r3, [pc, #36]	; (8006c48 <vPortExitCritical+0x4c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	4a08      	ldr	r2, [pc, #32]	; (8006c48 <vPortExitCritical+0x4c>)
 8006c28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c2a:	4b07      	ldr	r3, [pc, #28]	; (8006c48 <vPortExitCritical+0x4c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d105      	bne.n	8006c3e <vPortExitCritical+0x42>
 8006c32:	2300      	movs	r3, #0
 8006c34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	f383 8811 	msr	BASEPRI, r3
}
 8006c3c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c3e:	bf00      	nop
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr
 8006c48:	20000010 	.word	0x20000010
 8006c4c:	00000000 	.word	0x00000000

08006c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c50:	f3ef 8009 	mrs	r0, PSP
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	4b0d      	ldr	r3, [pc, #52]	; (8006c90 <pxCurrentTCBConst>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c60:	6010      	str	r0, [r2, #0]
 8006c62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006c66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c6a:	f380 8811 	msr	BASEPRI, r0
 8006c6e:	f7ff fa19 	bl	80060a4 <vTaskSwitchContext>
 8006c72:	f04f 0000 	mov.w	r0, #0
 8006c76:	f380 8811 	msr	BASEPRI, r0
 8006c7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006c7e:	6819      	ldr	r1, [r3, #0]
 8006c80:	6808      	ldr	r0, [r1, #0]
 8006c82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c86:	f380 8809 	msr	PSP, r0
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	4770      	bx	lr

08006c90 <pxCurrentTCBConst>:
 8006c90:	20000358 	.word	0x20000358
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop

08006c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	607b      	str	r3, [r7, #4]
}
 8006cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cb2:	f7ff f939 	bl	8005f28 <xTaskIncrementTick>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cbc:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <SysTick_Handler+0x40>)
 8006cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	f383 8811 	msr	BASEPRI, r3
}
 8006cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	e000ed04 	.word	0xe000ed04

08006cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ce0:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <vPortSetupTimerInterrupt+0x30>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ce6:	4b0a      	ldr	r3, [pc, #40]	; (8006d10 <vPortSetupTimerInterrupt+0x34>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cec:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <vPortSetupTimerInterrupt+0x38>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a09      	ldr	r2, [pc, #36]	; (8006d18 <vPortSetupTimerInterrupt+0x3c>)
 8006cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf6:	099b      	lsrs	r3, r3, #6
 8006cf8:	4a08      	ldr	r2, [pc, #32]	; (8006d1c <vPortSetupTimerInterrupt+0x40>)
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cfe:	4b03      	ldr	r3, [pc, #12]	; (8006d0c <vPortSetupTimerInterrupt+0x30>)
 8006d00:	2207      	movs	r2, #7
 8006d02:	601a      	str	r2, [r3, #0]
}
 8006d04:	bf00      	nop
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bc80      	pop	{r7}
 8006d0a:	4770      	bx	lr
 8006d0c:	e000e010 	.word	0xe000e010
 8006d10:	e000e018 	.word	0xe000e018
 8006d14:	20000000 	.word	0x20000000
 8006d18:	10624dd3 	.word	0x10624dd3
 8006d1c:	e000e014 	.word	0xe000e014

08006d20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d26:	f3ef 8305 	mrs	r3, IPSR
 8006d2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b0f      	cmp	r3, #15
 8006d30:	d914      	bls.n	8006d5c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d32:	4a16      	ldr	r2, [pc, #88]	; (8006d8c <vPortValidateInterruptPriority+0x6c>)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4413      	add	r3, r2
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d3c:	4b14      	ldr	r3, [pc, #80]	; (8006d90 <vPortValidateInterruptPriority+0x70>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	7afa      	ldrb	r2, [r7, #11]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d20a      	bcs.n	8006d5c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	607b      	str	r3, [r7, #4]
}
 8006d58:	bf00      	nop
 8006d5a:	e7fe      	b.n	8006d5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d5c:	4b0d      	ldr	r3, [pc, #52]	; (8006d94 <vPortValidateInterruptPriority+0x74>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d64:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <vPortValidateInterruptPriority+0x78>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d90a      	bls.n	8006d82 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	603b      	str	r3, [r7, #0]
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <vPortValidateInterruptPriority+0x60>
	}
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr
 8006d8c:	e000e3f0 	.word	0xe000e3f0
 8006d90:	20000484 	.word	0x20000484
 8006d94:	e000ed0c 	.word	0xe000ed0c
 8006d98:	20000488 	.word	0x20000488

08006d9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08a      	sub	sp, #40	; 0x28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006da8:	f7ff f814 	bl	8005dd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006dac:	4b58      	ldr	r3, [pc, #352]	; (8006f10 <pvPortMalloc+0x174>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006db4:	f000 f910 	bl	8006fd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006db8:	4b56      	ldr	r3, [pc, #344]	; (8006f14 <pvPortMalloc+0x178>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f040 808e 	bne.w	8006ee2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01d      	beq.n	8006e08 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006dcc:	2208      	movs	r2, #8
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f003 0307 	and.w	r3, r3, #7
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d014      	beq.n	8006e08 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f023 0307 	bic.w	r3, r3, #7
 8006de4:	3308      	adds	r3, #8
 8006de6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <pvPortMalloc+0x6c>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	617b      	str	r3, [r7, #20]
}
 8006e04:	bf00      	nop
 8006e06:	e7fe      	b.n	8006e06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d069      	beq.n	8006ee2 <pvPortMalloc+0x146>
 8006e0e:	4b42      	ldr	r3, [pc, #264]	; (8006f18 <pvPortMalloc+0x17c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d864      	bhi.n	8006ee2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e18:	4b40      	ldr	r3, [pc, #256]	; (8006f1c <pvPortMalloc+0x180>)
 8006e1a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e1c:	4b3f      	ldr	r3, [pc, #252]	; (8006f1c <pvPortMalloc+0x180>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e22:	e004      	b.n	8006e2e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d903      	bls.n	8006e40 <pvPortMalloc+0xa4>
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1f1      	bne.n	8006e24 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e40:	4b33      	ldr	r3, [pc, #204]	; (8006f10 <pvPortMalloc+0x174>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d04b      	beq.n	8006ee2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2208      	movs	r2, #8
 8006e50:	4413      	add	r3, r2
 8006e52:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	1ad2      	subs	r2, r2, r3
 8006e64:	2308      	movs	r3, #8
 8006e66:	005b      	lsls	r3, r3, #1
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d91f      	bls.n	8006eac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4413      	add	r3, r2
 8006e72:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <pvPortMalloc+0xf8>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	613b      	str	r3, [r7, #16]
}
 8006e90:	bf00      	nop
 8006e92:	e7fe      	b.n	8006e92 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	1ad2      	subs	r2, r2, r3
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ea6:	69b8      	ldr	r0, [r7, #24]
 8006ea8:	f000 f8f8 	bl	800709c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006eac:	4b1a      	ldr	r3, [pc, #104]	; (8006f18 <pvPortMalloc+0x17c>)
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	4a18      	ldr	r2, [pc, #96]	; (8006f18 <pvPortMalloc+0x17c>)
 8006eb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006eba:	4b17      	ldr	r3, [pc, #92]	; (8006f18 <pvPortMalloc+0x17c>)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	4b18      	ldr	r3, [pc, #96]	; (8006f20 <pvPortMalloc+0x184>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d203      	bcs.n	8006ece <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ec6:	4b14      	ldr	r3, [pc, #80]	; (8006f18 <pvPortMalloc+0x17c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a15      	ldr	r2, [pc, #84]	; (8006f20 <pvPortMalloc+0x184>)
 8006ecc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	4b10      	ldr	r3, [pc, #64]	; (8006f14 <pvPortMalloc+0x178>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	2200      	movs	r2, #0
 8006ee0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ee2:	f7fe ff85 	bl	8005df0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	f003 0307 	and.w	r3, r3, #7
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00a      	beq.n	8006f06 <pvPortMalloc+0x16a>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	60fb      	str	r3, [r7, #12]
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <pvPortMalloc+0x168>
	return pvReturn;
 8006f06:	69fb      	ldr	r3, [r7, #28]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3728      	adds	r7, #40	; 0x28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	20002494 	.word	0x20002494
 8006f14:	200024a0 	.word	0x200024a0
 8006f18:	20002498 	.word	0x20002498
 8006f1c:	2000248c 	.word	0x2000248c
 8006f20:	2000249c 	.word	0x2000249c

08006f24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d048      	beq.n	8006fc8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f36:	2308      	movs	r3, #8
 8006f38:	425b      	negs	r3, r3
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	4b21      	ldr	r3, [pc, #132]	; (8006fd0 <vPortFree+0xac>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <vPortFree+0x44>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	60fb      	str	r3, [r7, #12]
}
 8006f64:	bf00      	nop
 8006f66:	e7fe      	b.n	8006f66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00a      	beq.n	8006f86 <vPortFree+0x62>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	60bb      	str	r3, [r7, #8]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	4b11      	ldr	r3, [pc, #68]	; (8006fd0 <vPortFree+0xac>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4013      	ands	r3, r2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d019      	beq.n	8006fc8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d115      	bne.n	8006fc8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	4b0b      	ldr	r3, [pc, #44]	; (8006fd0 <vPortFree+0xac>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	43db      	mvns	r3, r3
 8006fa6:	401a      	ands	r2, r3
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fac:	f7fe ff12 	bl	8005dd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <vPortFree+0xb0>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4413      	add	r3, r2
 8006fba:	4a06      	ldr	r2, [pc, #24]	; (8006fd4 <vPortFree+0xb0>)
 8006fbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fbe:	6938      	ldr	r0, [r7, #16]
 8006fc0:	f000 f86c 	bl	800709c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006fc4:	f7fe ff14 	bl	8005df0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006fc8:	bf00      	nop
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	200024a0 	.word	0x200024a0
 8006fd4:	20002498 	.word	0x20002498

08006fd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006fe2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006fe4:	4b27      	ldr	r3, [pc, #156]	; (8007084 <prvHeapInit+0xac>)
 8006fe6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00c      	beq.n	800700c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3307      	adds	r3, #7
 8006ff6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0307 	bic.w	r3, r3, #7
 8006ffe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	4a1f      	ldr	r2, [pc, #124]	; (8007084 <prvHeapInit+0xac>)
 8007008:	4413      	add	r3, r2
 800700a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007010:	4a1d      	ldr	r2, [pc, #116]	; (8007088 <prvHeapInit+0xb0>)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007016:	4b1c      	ldr	r3, [pc, #112]	; (8007088 <prvHeapInit+0xb0>)
 8007018:	2200      	movs	r2, #0
 800701a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	4413      	add	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007024:	2208      	movs	r2, #8
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	1a9b      	subs	r3, r3, r2
 800702a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0307 	bic.w	r3, r3, #7
 8007032:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4a15      	ldr	r2, [pc, #84]	; (800708c <prvHeapInit+0xb4>)
 8007038:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800703a:	4b14      	ldr	r3, [pc, #80]	; (800708c <prvHeapInit+0xb4>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2200      	movs	r2, #0
 8007040:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007042:	4b12      	ldr	r3, [pc, #72]	; (800708c <prvHeapInit+0xb4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2200      	movs	r2, #0
 8007048:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	1ad2      	subs	r2, r2, r3
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007058:	4b0c      	ldr	r3, [pc, #48]	; (800708c <prvHeapInit+0xb4>)
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	4a0a      	ldr	r2, [pc, #40]	; (8007090 <prvHeapInit+0xb8>)
 8007066:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	4a09      	ldr	r2, [pc, #36]	; (8007094 <prvHeapInit+0xbc>)
 800706e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007070:	4b09      	ldr	r3, [pc, #36]	; (8007098 <prvHeapInit+0xc0>)
 8007072:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007076:	601a      	str	r2, [r3, #0]
}
 8007078:	bf00      	nop
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	bc80      	pop	{r7}
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	2000048c 	.word	0x2000048c
 8007088:	2000248c 	.word	0x2000248c
 800708c:	20002494 	.word	0x20002494
 8007090:	2000249c 	.word	0x2000249c
 8007094:	20002498 	.word	0x20002498
 8007098:	200024a0 	.word	0x200024a0

0800709c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070a4:	4b27      	ldr	r3, [pc, #156]	; (8007144 <prvInsertBlockIntoFreeList+0xa8>)
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	e002      	b.n	80070b0 <prvInsertBlockIntoFreeList+0x14>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d8f7      	bhi.n	80070aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	4413      	add	r3, r2
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d108      	bne.n	80070de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	441a      	add	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	441a      	add	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d118      	bne.n	8007124 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	4b14      	ldr	r3, [pc, #80]	; (8007148 <prvInsertBlockIntoFreeList+0xac>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d00d      	beq.n	800711a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	441a      	add	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	e008      	b.n	800712c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800711a:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <prvInsertBlockIntoFreeList+0xac>)
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	e003      	b.n	800712c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d002      	beq.n	800713a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800713a:	bf00      	nop
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	bc80      	pop	{r7}
 8007142:	4770      	bx	lr
 8007144:	2000248c 	.word	0x2000248c
 8007148:	20002494 	.word	0x20002494

0800714c <__errno>:
 800714c:	4b01      	ldr	r3, [pc, #4]	; (8007154 <__errno+0x8>)
 800714e:	6818      	ldr	r0, [r3, #0]
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	20000014 	.word	0x20000014

08007158 <std>:
 8007158:	2300      	movs	r3, #0
 800715a:	b510      	push	{r4, lr}
 800715c:	4604      	mov	r4, r0
 800715e:	e9c0 3300 	strd	r3, r3, [r0]
 8007162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007166:	6083      	str	r3, [r0, #8]
 8007168:	8181      	strh	r1, [r0, #12]
 800716a:	6643      	str	r3, [r0, #100]	; 0x64
 800716c:	81c2      	strh	r2, [r0, #14]
 800716e:	6183      	str	r3, [r0, #24]
 8007170:	4619      	mov	r1, r3
 8007172:	2208      	movs	r2, #8
 8007174:	305c      	adds	r0, #92	; 0x5c
 8007176:	f000 f91a 	bl	80073ae <memset>
 800717a:	4b05      	ldr	r3, [pc, #20]	; (8007190 <std+0x38>)
 800717c:	6224      	str	r4, [r4, #32]
 800717e:	6263      	str	r3, [r4, #36]	; 0x24
 8007180:	4b04      	ldr	r3, [pc, #16]	; (8007194 <std+0x3c>)
 8007182:	62a3      	str	r3, [r4, #40]	; 0x28
 8007184:	4b04      	ldr	r3, [pc, #16]	; (8007198 <std+0x40>)
 8007186:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007188:	4b04      	ldr	r3, [pc, #16]	; (800719c <std+0x44>)
 800718a:	6323      	str	r3, [r4, #48]	; 0x30
 800718c:	bd10      	pop	{r4, pc}
 800718e:	bf00      	nop
 8007190:	080076ad 	.word	0x080076ad
 8007194:	080076cf 	.word	0x080076cf
 8007198:	08007707 	.word	0x08007707
 800719c:	0800772b 	.word	0x0800772b

080071a0 <_cleanup_r>:
 80071a0:	4901      	ldr	r1, [pc, #4]	; (80071a8 <_cleanup_r+0x8>)
 80071a2:	f000 b8af 	b.w	8007304 <_fwalk_reent>
 80071a6:	bf00      	nop
 80071a8:	08007c55 	.word	0x08007c55

080071ac <__sfmoreglue>:
 80071ac:	b570      	push	{r4, r5, r6, lr}
 80071ae:	2568      	movs	r5, #104	; 0x68
 80071b0:	1e4a      	subs	r2, r1, #1
 80071b2:	4355      	muls	r5, r2
 80071b4:	460e      	mov	r6, r1
 80071b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071ba:	f000 f901 	bl	80073c0 <_malloc_r>
 80071be:	4604      	mov	r4, r0
 80071c0:	b140      	cbz	r0, 80071d4 <__sfmoreglue+0x28>
 80071c2:	2100      	movs	r1, #0
 80071c4:	e9c0 1600 	strd	r1, r6, [r0]
 80071c8:	300c      	adds	r0, #12
 80071ca:	60a0      	str	r0, [r4, #8]
 80071cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071d0:	f000 f8ed 	bl	80073ae <memset>
 80071d4:	4620      	mov	r0, r4
 80071d6:	bd70      	pop	{r4, r5, r6, pc}

080071d8 <__sfp_lock_acquire>:
 80071d8:	4801      	ldr	r0, [pc, #4]	; (80071e0 <__sfp_lock_acquire+0x8>)
 80071da:	f000 b8d8 	b.w	800738e <__retarget_lock_acquire_recursive>
 80071de:	bf00      	nop
 80071e0:	200025dc 	.word	0x200025dc

080071e4 <__sfp_lock_release>:
 80071e4:	4801      	ldr	r0, [pc, #4]	; (80071ec <__sfp_lock_release+0x8>)
 80071e6:	f000 b8d3 	b.w	8007390 <__retarget_lock_release_recursive>
 80071ea:	bf00      	nop
 80071ec:	200025dc 	.word	0x200025dc

080071f0 <__sinit_lock_acquire>:
 80071f0:	4801      	ldr	r0, [pc, #4]	; (80071f8 <__sinit_lock_acquire+0x8>)
 80071f2:	f000 b8cc 	b.w	800738e <__retarget_lock_acquire_recursive>
 80071f6:	bf00      	nop
 80071f8:	200025d7 	.word	0x200025d7

080071fc <__sinit_lock_release>:
 80071fc:	4801      	ldr	r0, [pc, #4]	; (8007204 <__sinit_lock_release+0x8>)
 80071fe:	f000 b8c7 	b.w	8007390 <__retarget_lock_release_recursive>
 8007202:	bf00      	nop
 8007204:	200025d7 	.word	0x200025d7

08007208 <__sinit>:
 8007208:	b510      	push	{r4, lr}
 800720a:	4604      	mov	r4, r0
 800720c:	f7ff fff0 	bl	80071f0 <__sinit_lock_acquire>
 8007210:	69a3      	ldr	r3, [r4, #24]
 8007212:	b11b      	cbz	r3, 800721c <__sinit+0x14>
 8007214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007218:	f7ff bff0 	b.w	80071fc <__sinit_lock_release>
 800721c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007220:	6523      	str	r3, [r4, #80]	; 0x50
 8007222:	4b13      	ldr	r3, [pc, #76]	; (8007270 <__sinit+0x68>)
 8007224:	4a13      	ldr	r2, [pc, #76]	; (8007274 <__sinit+0x6c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	62a2      	str	r2, [r4, #40]	; 0x28
 800722a:	42a3      	cmp	r3, r4
 800722c:	bf08      	it	eq
 800722e:	2301      	moveq	r3, #1
 8007230:	4620      	mov	r0, r4
 8007232:	bf08      	it	eq
 8007234:	61a3      	streq	r3, [r4, #24]
 8007236:	f000 f81f 	bl	8007278 <__sfp>
 800723a:	6060      	str	r0, [r4, #4]
 800723c:	4620      	mov	r0, r4
 800723e:	f000 f81b 	bl	8007278 <__sfp>
 8007242:	60a0      	str	r0, [r4, #8]
 8007244:	4620      	mov	r0, r4
 8007246:	f000 f817 	bl	8007278 <__sfp>
 800724a:	2200      	movs	r2, #0
 800724c:	2104      	movs	r1, #4
 800724e:	60e0      	str	r0, [r4, #12]
 8007250:	6860      	ldr	r0, [r4, #4]
 8007252:	f7ff ff81 	bl	8007158 <std>
 8007256:	2201      	movs	r2, #1
 8007258:	2109      	movs	r1, #9
 800725a:	68a0      	ldr	r0, [r4, #8]
 800725c:	f7ff ff7c 	bl	8007158 <std>
 8007260:	2202      	movs	r2, #2
 8007262:	2112      	movs	r1, #18
 8007264:	68e0      	ldr	r0, [r4, #12]
 8007266:	f7ff ff77 	bl	8007158 <std>
 800726a:	2301      	movs	r3, #1
 800726c:	61a3      	str	r3, [r4, #24]
 800726e:	e7d1      	b.n	8007214 <__sinit+0xc>
 8007270:	08007f50 	.word	0x08007f50
 8007274:	080071a1 	.word	0x080071a1

08007278 <__sfp>:
 8007278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727a:	4607      	mov	r7, r0
 800727c:	f7ff ffac 	bl	80071d8 <__sfp_lock_acquire>
 8007280:	4b1e      	ldr	r3, [pc, #120]	; (80072fc <__sfp+0x84>)
 8007282:	681e      	ldr	r6, [r3, #0]
 8007284:	69b3      	ldr	r3, [r6, #24]
 8007286:	b913      	cbnz	r3, 800728e <__sfp+0x16>
 8007288:	4630      	mov	r0, r6
 800728a:	f7ff ffbd 	bl	8007208 <__sinit>
 800728e:	3648      	adds	r6, #72	; 0x48
 8007290:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007294:	3b01      	subs	r3, #1
 8007296:	d503      	bpl.n	80072a0 <__sfp+0x28>
 8007298:	6833      	ldr	r3, [r6, #0]
 800729a:	b30b      	cbz	r3, 80072e0 <__sfp+0x68>
 800729c:	6836      	ldr	r6, [r6, #0]
 800729e:	e7f7      	b.n	8007290 <__sfp+0x18>
 80072a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072a4:	b9d5      	cbnz	r5, 80072dc <__sfp+0x64>
 80072a6:	4b16      	ldr	r3, [pc, #88]	; (8007300 <__sfp+0x88>)
 80072a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072ac:	60e3      	str	r3, [r4, #12]
 80072ae:	6665      	str	r5, [r4, #100]	; 0x64
 80072b0:	f000 f86c 	bl	800738c <__retarget_lock_init_recursive>
 80072b4:	f7ff ff96 	bl	80071e4 <__sfp_lock_release>
 80072b8:	2208      	movs	r2, #8
 80072ba:	4629      	mov	r1, r5
 80072bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80072c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80072c4:	6025      	str	r5, [r4, #0]
 80072c6:	61a5      	str	r5, [r4, #24]
 80072c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072cc:	f000 f86f 	bl	80073ae <memset>
 80072d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072d8:	4620      	mov	r0, r4
 80072da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072dc:	3468      	adds	r4, #104	; 0x68
 80072de:	e7d9      	b.n	8007294 <__sfp+0x1c>
 80072e0:	2104      	movs	r1, #4
 80072e2:	4638      	mov	r0, r7
 80072e4:	f7ff ff62 	bl	80071ac <__sfmoreglue>
 80072e8:	4604      	mov	r4, r0
 80072ea:	6030      	str	r0, [r6, #0]
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d1d5      	bne.n	800729c <__sfp+0x24>
 80072f0:	f7ff ff78 	bl	80071e4 <__sfp_lock_release>
 80072f4:	230c      	movs	r3, #12
 80072f6:	603b      	str	r3, [r7, #0]
 80072f8:	e7ee      	b.n	80072d8 <__sfp+0x60>
 80072fa:	bf00      	nop
 80072fc:	08007f50 	.word	0x08007f50
 8007300:	ffff0001 	.word	0xffff0001

08007304 <_fwalk_reent>:
 8007304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007308:	4606      	mov	r6, r0
 800730a:	4688      	mov	r8, r1
 800730c:	2700      	movs	r7, #0
 800730e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007312:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007316:	f1b9 0901 	subs.w	r9, r9, #1
 800731a:	d505      	bpl.n	8007328 <_fwalk_reent+0x24>
 800731c:	6824      	ldr	r4, [r4, #0]
 800731e:	2c00      	cmp	r4, #0
 8007320:	d1f7      	bne.n	8007312 <_fwalk_reent+0xe>
 8007322:	4638      	mov	r0, r7
 8007324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007328:	89ab      	ldrh	r3, [r5, #12]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d907      	bls.n	800733e <_fwalk_reent+0x3a>
 800732e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007332:	3301      	adds	r3, #1
 8007334:	d003      	beq.n	800733e <_fwalk_reent+0x3a>
 8007336:	4629      	mov	r1, r5
 8007338:	4630      	mov	r0, r6
 800733a:	47c0      	blx	r8
 800733c:	4307      	orrs	r7, r0
 800733e:	3568      	adds	r5, #104	; 0x68
 8007340:	e7e9      	b.n	8007316 <_fwalk_reent+0x12>
	...

08007344 <__libc_init_array>:
 8007344:	b570      	push	{r4, r5, r6, lr}
 8007346:	2600      	movs	r6, #0
 8007348:	4d0c      	ldr	r5, [pc, #48]	; (800737c <__libc_init_array+0x38>)
 800734a:	4c0d      	ldr	r4, [pc, #52]	; (8007380 <__libc_init_array+0x3c>)
 800734c:	1b64      	subs	r4, r4, r5
 800734e:	10a4      	asrs	r4, r4, #2
 8007350:	42a6      	cmp	r6, r4
 8007352:	d109      	bne.n	8007368 <__libc_init_array+0x24>
 8007354:	f000 fd74 	bl	8007e40 <_init>
 8007358:	2600      	movs	r6, #0
 800735a:	4d0a      	ldr	r5, [pc, #40]	; (8007384 <__libc_init_array+0x40>)
 800735c:	4c0a      	ldr	r4, [pc, #40]	; (8007388 <__libc_init_array+0x44>)
 800735e:	1b64      	subs	r4, r4, r5
 8007360:	10a4      	asrs	r4, r4, #2
 8007362:	42a6      	cmp	r6, r4
 8007364:	d105      	bne.n	8007372 <__libc_init_array+0x2e>
 8007366:	bd70      	pop	{r4, r5, r6, pc}
 8007368:	f855 3b04 	ldr.w	r3, [r5], #4
 800736c:	4798      	blx	r3
 800736e:	3601      	adds	r6, #1
 8007370:	e7ee      	b.n	8007350 <__libc_init_array+0xc>
 8007372:	f855 3b04 	ldr.w	r3, [r5], #4
 8007376:	4798      	blx	r3
 8007378:	3601      	adds	r6, #1
 800737a:	e7f2      	b.n	8007362 <__libc_init_array+0x1e>
 800737c:	080085f0 	.word	0x080085f0
 8007380:	080085f0 	.word	0x080085f0
 8007384:	080085f0 	.word	0x080085f0
 8007388:	080085f4 	.word	0x080085f4

0800738c <__retarget_lock_init_recursive>:
 800738c:	4770      	bx	lr

0800738e <__retarget_lock_acquire_recursive>:
 800738e:	4770      	bx	lr

08007390 <__retarget_lock_release_recursive>:
 8007390:	4770      	bx	lr

08007392 <memcpy>:
 8007392:	440a      	add	r2, r1
 8007394:	4291      	cmp	r1, r2
 8007396:	f100 33ff 	add.w	r3, r0, #4294967295
 800739a:	d100      	bne.n	800739e <memcpy+0xc>
 800739c:	4770      	bx	lr
 800739e:	b510      	push	{r4, lr}
 80073a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073a4:	4291      	cmp	r1, r2
 80073a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073aa:	d1f9      	bne.n	80073a0 <memcpy+0xe>
 80073ac:	bd10      	pop	{r4, pc}

080073ae <memset>:
 80073ae:	4603      	mov	r3, r0
 80073b0:	4402      	add	r2, r0
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d100      	bne.n	80073b8 <memset+0xa>
 80073b6:	4770      	bx	lr
 80073b8:	f803 1b01 	strb.w	r1, [r3], #1
 80073bc:	e7f9      	b.n	80073b2 <memset+0x4>
	...

080073c0 <_malloc_r>:
 80073c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c2:	1ccd      	adds	r5, r1, #3
 80073c4:	f025 0503 	bic.w	r5, r5, #3
 80073c8:	3508      	adds	r5, #8
 80073ca:	2d0c      	cmp	r5, #12
 80073cc:	bf38      	it	cc
 80073ce:	250c      	movcc	r5, #12
 80073d0:	2d00      	cmp	r5, #0
 80073d2:	4606      	mov	r6, r0
 80073d4:	db01      	blt.n	80073da <_malloc_r+0x1a>
 80073d6:	42a9      	cmp	r1, r5
 80073d8:	d903      	bls.n	80073e2 <_malloc_r+0x22>
 80073da:	230c      	movs	r3, #12
 80073dc:	6033      	str	r3, [r6, #0]
 80073de:	2000      	movs	r0, #0
 80073e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073e2:	f000 fcc3 	bl	8007d6c <__malloc_lock>
 80073e6:	4921      	ldr	r1, [pc, #132]	; (800746c <_malloc_r+0xac>)
 80073e8:	680a      	ldr	r2, [r1, #0]
 80073ea:	4614      	mov	r4, r2
 80073ec:	b99c      	cbnz	r4, 8007416 <_malloc_r+0x56>
 80073ee:	4f20      	ldr	r7, [pc, #128]	; (8007470 <_malloc_r+0xb0>)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	b923      	cbnz	r3, 80073fe <_malloc_r+0x3e>
 80073f4:	4621      	mov	r1, r4
 80073f6:	4630      	mov	r0, r6
 80073f8:	f000 f948 	bl	800768c <_sbrk_r>
 80073fc:	6038      	str	r0, [r7, #0]
 80073fe:	4629      	mov	r1, r5
 8007400:	4630      	mov	r0, r6
 8007402:	f000 f943 	bl	800768c <_sbrk_r>
 8007406:	1c43      	adds	r3, r0, #1
 8007408:	d123      	bne.n	8007452 <_malloc_r+0x92>
 800740a:	230c      	movs	r3, #12
 800740c:	4630      	mov	r0, r6
 800740e:	6033      	str	r3, [r6, #0]
 8007410:	f000 fcb2 	bl	8007d78 <__malloc_unlock>
 8007414:	e7e3      	b.n	80073de <_malloc_r+0x1e>
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	1b5b      	subs	r3, r3, r5
 800741a:	d417      	bmi.n	800744c <_malloc_r+0x8c>
 800741c:	2b0b      	cmp	r3, #11
 800741e:	d903      	bls.n	8007428 <_malloc_r+0x68>
 8007420:	6023      	str	r3, [r4, #0]
 8007422:	441c      	add	r4, r3
 8007424:	6025      	str	r5, [r4, #0]
 8007426:	e004      	b.n	8007432 <_malloc_r+0x72>
 8007428:	6863      	ldr	r3, [r4, #4]
 800742a:	42a2      	cmp	r2, r4
 800742c:	bf0c      	ite	eq
 800742e:	600b      	streq	r3, [r1, #0]
 8007430:	6053      	strne	r3, [r2, #4]
 8007432:	4630      	mov	r0, r6
 8007434:	f000 fca0 	bl	8007d78 <__malloc_unlock>
 8007438:	f104 000b 	add.w	r0, r4, #11
 800743c:	1d23      	adds	r3, r4, #4
 800743e:	f020 0007 	bic.w	r0, r0, #7
 8007442:	1ac2      	subs	r2, r0, r3
 8007444:	d0cc      	beq.n	80073e0 <_malloc_r+0x20>
 8007446:	1a1b      	subs	r3, r3, r0
 8007448:	50a3      	str	r3, [r4, r2]
 800744a:	e7c9      	b.n	80073e0 <_malloc_r+0x20>
 800744c:	4622      	mov	r2, r4
 800744e:	6864      	ldr	r4, [r4, #4]
 8007450:	e7cc      	b.n	80073ec <_malloc_r+0x2c>
 8007452:	1cc4      	adds	r4, r0, #3
 8007454:	f024 0403 	bic.w	r4, r4, #3
 8007458:	42a0      	cmp	r0, r4
 800745a:	d0e3      	beq.n	8007424 <_malloc_r+0x64>
 800745c:	1a21      	subs	r1, r4, r0
 800745e:	4630      	mov	r0, r6
 8007460:	f000 f914 	bl	800768c <_sbrk_r>
 8007464:	3001      	adds	r0, #1
 8007466:	d1dd      	bne.n	8007424 <_malloc_r+0x64>
 8007468:	e7cf      	b.n	800740a <_malloc_r+0x4a>
 800746a:	bf00      	nop
 800746c:	200024a4 	.word	0x200024a4
 8007470:	200024a8 	.word	0x200024a8

08007474 <_perror_r>:
 8007474:	6983      	ldr	r3, [r0, #24]
 8007476:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007478:	4605      	mov	r5, r0
 800747a:	460e      	mov	r6, r1
 800747c:	68c4      	ldr	r4, [r0, #12]
 800747e:	b90b      	cbnz	r3, 8007484 <_perror_r+0x10>
 8007480:	f7ff fec2 	bl	8007208 <__sinit>
 8007484:	4b43      	ldr	r3, [pc, #268]	; (8007594 <_perror_r+0x120>)
 8007486:	429c      	cmp	r4, r3
 8007488:	d132      	bne.n	80074f0 <_perror_r+0x7c>
 800748a:	686c      	ldr	r4, [r5, #4]
 800748c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800748e:	07d8      	lsls	r0, r3, #31
 8007490:	d405      	bmi.n	800749e <_perror_r+0x2a>
 8007492:	89a3      	ldrh	r3, [r4, #12]
 8007494:	0599      	lsls	r1, r3, #22
 8007496:	d402      	bmi.n	800749e <_perror_r+0x2a>
 8007498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800749a:	f7ff ff78 	bl	800738e <__retarget_lock_acquire_recursive>
 800749e:	4621      	mov	r1, r4
 80074a0:	4628      	mov	r0, r5
 80074a2:	f000 fbd7 	bl	8007c54 <_fflush_r>
 80074a6:	bb6e      	cbnz	r6, 8007504 <_perror_r+0x90>
 80074a8:	2201      	movs	r2, #1
 80074aa:	4628      	mov	r0, r5
 80074ac:	6829      	ldr	r1, [r5, #0]
 80074ae:	ab01      	add	r3, sp, #4
 80074b0:	f000 f940 	bl	8007734 <_strerror_r>
 80074b4:	4607      	mov	r7, r0
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d14f      	bne.n	800755a <_perror_r+0xe6>
 80074ba:	4837      	ldr	r0, [pc, #220]	; (8007598 <_perror_r+0x124>)
 80074bc:	f7f8 fe48 	bl	8000150 <strlen>
 80074c0:	4606      	mov	r6, r0
 80074c2:	4f35      	ldr	r7, [pc, #212]	; (8007598 <_perror_r+0x124>)
 80074c4:	b156      	cbz	r6, 80074dc <_perror_r+0x68>
 80074c6:	4620      	mov	r0, r4
 80074c8:	f000 fc00 	bl	8007ccc <fileno>
 80074cc:	4633      	mov	r3, r6
 80074ce:	4601      	mov	r1, r0
 80074d0:	463a      	mov	r2, r7
 80074d2:	4628      	mov	r0, r5
 80074d4:	f000 fb16 	bl	8007b04 <_write_r>
 80074d8:	2800      	cmp	r0, #0
 80074da:	da51      	bge.n	8007580 <_perror_r+0x10c>
 80074dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074e0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074e6:	07d2      	lsls	r2, r2, #31
 80074e8:	81a3      	strh	r3, [r4, #12]
 80074ea:	d54c      	bpl.n	8007586 <_perror_r+0x112>
 80074ec:	b003      	add	sp, #12
 80074ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074f0:	4b2a      	ldr	r3, [pc, #168]	; (800759c <_perror_r+0x128>)
 80074f2:	429c      	cmp	r4, r3
 80074f4:	d101      	bne.n	80074fa <_perror_r+0x86>
 80074f6:	68ac      	ldr	r4, [r5, #8]
 80074f8:	e7c8      	b.n	800748c <_perror_r+0x18>
 80074fa:	4b29      	ldr	r3, [pc, #164]	; (80075a0 <_perror_r+0x12c>)
 80074fc:	429c      	cmp	r4, r3
 80074fe:	bf08      	it	eq
 8007500:	68ec      	ldreq	r4, [r5, #12]
 8007502:	e7c3      	b.n	800748c <_perror_r+0x18>
 8007504:	7833      	ldrb	r3, [r6, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0ce      	beq.n	80074a8 <_perror_r+0x34>
 800750a:	4630      	mov	r0, r6
 800750c:	f7f8 fe20 	bl	8000150 <strlen>
 8007510:	4607      	mov	r7, r0
 8007512:	b157      	cbz	r7, 800752a <_perror_r+0xb6>
 8007514:	4620      	mov	r0, r4
 8007516:	f000 fbd9 	bl	8007ccc <fileno>
 800751a:	463b      	mov	r3, r7
 800751c:	4601      	mov	r1, r0
 800751e:	4632      	mov	r2, r6
 8007520:	4628      	mov	r0, r5
 8007522:	f000 faef 	bl	8007b04 <_write_r>
 8007526:	2800      	cmp	r0, #0
 8007528:	da14      	bge.n	8007554 <_perror_r+0xe0>
 800752a:	481e      	ldr	r0, [pc, #120]	; (80075a4 <_perror_r+0x130>)
 800752c:	f7f8 fe10 	bl	8000150 <strlen>
 8007530:	4606      	mov	r6, r0
 8007532:	4f1c      	ldr	r7, [pc, #112]	; (80075a4 <_perror_r+0x130>)
 8007534:	2e00      	cmp	r6, #0
 8007536:	d0b7      	beq.n	80074a8 <_perror_r+0x34>
 8007538:	4620      	mov	r0, r4
 800753a:	f000 fbc7 	bl	8007ccc <fileno>
 800753e:	4633      	mov	r3, r6
 8007540:	4601      	mov	r1, r0
 8007542:	463a      	mov	r2, r7
 8007544:	4628      	mov	r0, r5
 8007546:	f000 fadd 	bl	8007b04 <_write_r>
 800754a:	2800      	cmp	r0, #0
 800754c:	dbac      	blt.n	80074a8 <_perror_r+0x34>
 800754e:	1a36      	subs	r6, r6, r0
 8007550:	4407      	add	r7, r0
 8007552:	e7ef      	b.n	8007534 <_perror_r+0xc0>
 8007554:	1a3f      	subs	r7, r7, r0
 8007556:	4406      	add	r6, r0
 8007558:	e7db      	b.n	8007512 <_perror_r+0x9e>
 800755a:	f7f8 fdf9 	bl	8000150 <strlen>
 800755e:	4606      	mov	r6, r0
 8007560:	2e00      	cmp	r6, #0
 8007562:	d0aa      	beq.n	80074ba <_perror_r+0x46>
 8007564:	4620      	mov	r0, r4
 8007566:	f000 fbb1 	bl	8007ccc <fileno>
 800756a:	4633      	mov	r3, r6
 800756c:	4601      	mov	r1, r0
 800756e:	463a      	mov	r2, r7
 8007570:	4628      	mov	r0, r5
 8007572:	f000 fac7 	bl	8007b04 <_write_r>
 8007576:	2800      	cmp	r0, #0
 8007578:	db9f      	blt.n	80074ba <_perror_r+0x46>
 800757a:	1a36      	subs	r6, r6, r0
 800757c:	4407      	add	r7, r0
 800757e:	e7ef      	b.n	8007560 <_perror_r+0xec>
 8007580:	1a36      	subs	r6, r6, r0
 8007582:	4407      	add	r7, r0
 8007584:	e79e      	b.n	80074c4 <_perror_r+0x50>
 8007586:	059b      	lsls	r3, r3, #22
 8007588:	d4b0      	bmi.n	80074ec <_perror_r+0x78>
 800758a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800758c:	f7ff ff00 	bl	8007390 <__retarget_lock_release_recursive>
 8007590:	e7ac      	b.n	80074ec <_perror_r+0x78>
 8007592:	bf00      	nop
 8007594:	08007f10 	.word	0x08007f10
 8007598:	08007f57 	.word	0x08007f57
 800759c:	08007f30 	.word	0x08007f30
 80075a0:	08007ef0 	.word	0x08007ef0
 80075a4:	08007f54 	.word	0x08007f54

080075a8 <perror>:
 80075a8:	4b02      	ldr	r3, [pc, #8]	; (80075b4 <perror+0xc>)
 80075aa:	4601      	mov	r1, r0
 80075ac:	6818      	ldr	r0, [r3, #0]
 80075ae:	f7ff bf61 	b.w	8007474 <_perror_r>
 80075b2:	bf00      	nop
 80075b4:	20000014 	.word	0x20000014

080075b8 <cleanup_glue>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	460c      	mov	r4, r1
 80075bc:	6809      	ldr	r1, [r1, #0]
 80075be:	4605      	mov	r5, r0
 80075c0:	b109      	cbz	r1, 80075c6 <cleanup_glue+0xe>
 80075c2:	f7ff fff9 	bl	80075b8 <cleanup_glue>
 80075c6:	4621      	mov	r1, r4
 80075c8:	4628      	mov	r0, r5
 80075ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075ce:	f000 bbd9 	b.w	8007d84 <_free_r>
	...

080075d4 <_reclaim_reent>:
 80075d4:	4b2c      	ldr	r3, [pc, #176]	; (8007688 <_reclaim_reent+0xb4>)
 80075d6:	b570      	push	{r4, r5, r6, lr}
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4604      	mov	r4, r0
 80075dc:	4283      	cmp	r3, r0
 80075de:	d051      	beq.n	8007684 <_reclaim_reent+0xb0>
 80075e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80075e2:	b143      	cbz	r3, 80075f6 <_reclaim_reent+0x22>
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d14a      	bne.n	8007680 <_reclaim_reent+0xac>
 80075ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075ec:	6819      	ldr	r1, [r3, #0]
 80075ee:	b111      	cbz	r1, 80075f6 <_reclaim_reent+0x22>
 80075f0:	4620      	mov	r0, r4
 80075f2:	f000 fbc7 	bl	8007d84 <_free_r>
 80075f6:	6961      	ldr	r1, [r4, #20]
 80075f8:	b111      	cbz	r1, 8007600 <_reclaim_reent+0x2c>
 80075fa:	4620      	mov	r0, r4
 80075fc:	f000 fbc2 	bl	8007d84 <_free_r>
 8007600:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007602:	b111      	cbz	r1, 800760a <_reclaim_reent+0x36>
 8007604:	4620      	mov	r0, r4
 8007606:	f000 fbbd 	bl	8007d84 <_free_r>
 800760a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800760c:	b111      	cbz	r1, 8007614 <_reclaim_reent+0x40>
 800760e:	4620      	mov	r0, r4
 8007610:	f000 fbb8 	bl	8007d84 <_free_r>
 8007614:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007616:	b111      	cbz	r1, 800761e <_reclaim_reent+0x4a>
 8007618:	4620      	mov	r0, r4
 800761a:	f000 fbb3 	bl	8007d84 <_free_r>
 800761e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007620:	b111      	cbz	r1, 8007628 <_reclaim_reent+0x54>
 8007622:	4620      	mov	r0, r4
 8007624:	f000 fbae 	bl	8007d84 <_free_r>
 8007628:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800762a:	b111      	cbz	r1, 8007632 <_reclaim_reent+0x5e>
 800762c:	4620      	mov	r0, r4
 800762e:	f000 fba9 	bl	8007d84 <_free_r>
 8007632:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007634:	b111      	cbz	r1, 800763c <_reclaim_reent+0x68>
 8007636:	4620      	mov	r0, r4
 8007638:	f000 fba4 	bl	8007d84 <_free_r>
 800763c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800763e:	b111      	cbz	r1, 8007646 <_reclaim_reent+0x72>
 8007640:	4620      	mov	r0, r4
 8007642:	f000 fb9f 	bl	8007d84 <_free_r>
 8007646:	69a3      	ldr	r3, [r4, #24]
 8007648:	b1e3      	cbz	r3, 8007684 <_reclaim_reent+0xb0>
 800764a:	4620      	mov	r0, r4
 800764c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800764e:	4798      	blx	r3
 8007650:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007652:	b1b9      	cbz	r1, 8007684 <_reclaim_reent+0xb0>
 8007654:	4620      	mov	r0, r4
 8007656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800765a:	f7ff bfad 	b.w	80075b8 <cleanup_glue>
 800765e:	5949      	ldr	r1, [r1, r5]
 8007660:	b941      	cbnz	r1, 8007674 <_reclaim_reent+0xa0>
 8007662:	3504      	adds	r5, #4
 8007664:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007666:	2d80      	cmp	r5, #128	; 0x80
 8007668:	68d9      	ldr	r1, [r3, #12]
 800766a:	d1f8      	bne.n	800765e <_reclaim_reent+0x8a>
 800766c:	4620      	mov	r0, r4
 800766e:	f000 fb89 	bl	8007d84 <_free_r>
 8007672:	e7ba      	b.n	80075ea <_reclaim_reent+0x16>
 8007674:	680e      	ldr	r6, [r1, #0]
 8007676:	4620      	mov	r0, r4
 8007678:	f000 fb84 	bl	8007d84 <_free_r>
 800767c:	4631      	mov	r1, r6
 800767e:	e7ef      	b.n	8007660 <_reclaim_reent+0x8c>
 8007680:	2500      	movs	r5, #0
 8007682:	e7ef      	b.n	8007664 <_reclaim_reent+0x90>
 8007684:	bd70      	pop	{r4, r5, r6, pc}
 8007686:	bf00      	nop
 8007688:	20000014 	.word	0x20000014

0800768c <_sbrk_r>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	2300      	movs	r3, #0
 8007690:	4d05      	ldr	r5, [pc, #20]	; (80076a8 <_sbrk_r+0x1c>)
 8007692:	4604      	mov	r4, r0
 8007694:	4608      	mov	r0, r1
 8007696:	602b      	str	r3, [r5, #0]
 8007698:	f7f9 fe48 	bl	800132c <_sbrk>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d102      	bne.n	80076a6 <_sbrk_r+0x1a>
 80076a0:	682b      	ldr	r3, [r5, #0]
 80076a2:	b103      	cbz	r3, 80076a6 <_sbrk_r+0x1a>
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	200025e0 	.word	0x200025e0

080076ac <__sread>:
 80076ac:	b510      	push	{r4, lr}
 80076ae:	460c      	mov	r4, r1
 80076b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b4:	f000 fbb2 	bl	8007e1c <_read_r>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	bfab      	itete	ge
 80076bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076be:	89a3      	ldrhlt	r3, [r4, #12]
 80076c0:	181b      	addge	r3, r3, r0
 80076c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076c6:	bfac      	ite	ge
 80076c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80076ca:	81a3      	strhlt	r3, [r4, #12]
 80076cc:	bd10      	pop	{r4, pc}

080076ce <__swrite>:
 80076ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d2:	461f      	mov	r7, r3
 80076d4:	898b      	ldrh	r3, [r1, #12]
 80076d6:	4605      	mov	r5, r0
 80076d8:	05db      	lsls	r3, r3, #23
 80076da:	460c      	mov	r4, r1
 80076dc:	4616      	mov	r6, r2
 80076de:	d505      	bpl.n	80076ec <__swrite+0x1e>
 80076e0:	2302      	movs	r3, #2
 80076e2:	2200      	movs	r2, #0
 80076e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e8:	f000 fb2e 	bl	8007d48 <_lseek_r>
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	4632      	mov	r2, r6
 80076f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076f4:	81a3      	strh	r3, [r4, #12]
 80076f6:	4628      	mov	r0, r5
 80076f8:	463b      	mov	r3, r7
 80076fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007702:	f000 b9ff 	b.w	8007b04 <_write_r>

08007706 <__sseek>:
 8007706:	b510      	push	{r4, lr}
 8007708:	460c      	mov	r4, r1
 800770a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800770e:	f000 fb1b 	bl	8007d48 <_lseek_r>
 8007712:	1c43      	adds	r3, r0, #1
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	bf15      	itete	ne
 8007718:	6560      	strne	r0, [r4, #84]	; 0x54
 800771a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800771e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007722:	81a3      	strheq	r3, [r4, #12]
 8007724:	bf18      	it	ne
 8007726:	81a3      	strhne	r3, [r4, #12]
 8007728:	bd10      	pop	{r4, pc}

0800772a <__sclose>:
 800772a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800772e:	f000 b9fb 	b.w	8007b28 <_close_r>
	...

08007734 <_strerror_r>:
 8007734:	b510      	push	{r4, lr}
 8007736:	4604      	mov	r4, r0
 8007738:	4608      	mov	r0, r1
 800773a:	4611      	mov	r1, r2
 800773c:	288e      	cmp	r0, #142	; 0x8e
 800773e:	f200 812f 	bhi.w	80079a0 <_strerror_r+0x26c>
 8007742:	e8df f010 	tbh	[pc, r0, lsl #1]
 8007746:	0138      	.short	0x0138
 8007748:	0091008f 	.word	0x0091008f
 800774c:	00950093 	.word	0x00950093
 8007750:	00990097 	.word	0x00990097
 8007754:	009d009b 	.word	0x009d009b
 8007758:	00a300a1 	.word	0x00a300a1
 800775c:	00a900a7 	.word	0x00a900a7
 8007760:	00ad00ab 	.word	0x00ad00ab
 8007764:	00af012d 	.word	0x00af012d
 8007768:	00b300b1 	.word	0x00b300b1
 800776c:	00b700b5 	.word	0x00b700b5
 8007770:	00bf00bd 	.word	0x00bf00bd
 8007774:	00c700c5 	.word	0x00c700c5
 8007778:	00cb00c9 	.word	0x00cb00c9
 800777c:	00d100cd 	.word	0x00d100cd
 8007780:	00d700d5 	.word	0x00d700d5
 8007784:	00db00d9 	.word	0x00db00d9
 8007788:	00df00dd 	.word	0x00df00dd
 800778c:	00e300e1 	.word	0x00e300e1
 8007790:	012d012d 	.word	0x012d012d
 8007794:	012d012d 	.word	0x012d012d
 8007798:	012d012d 	.word	0x012d012d
 800779c:	012d012d 	.word	0x012d012d
 80077a0:	00eb00e7 	.word	0x00eb00e7
 80077a4:	012d012d 	.word	0x012d012d
 80077a8:	012d012d 	.word	0x012d012d
 80077ac:	012d012d 	.word	0x012d012d
 80077b0:	012d012d 	.word	0x012d012d
 80077b4:	012d012d 	.word	0x012d012d
 80077b8:	012d012d 	.word	0x012d012d
 80077bc:	00ed012d 	.word	0x00ed012d
 80077c0:	00ef0107 	.word	0x00ef0107
 80077c4:	012d00f1 	.word	0x012d00f1
 80077c8:	012d012d 	.word	0x012d012d
 80077cc:	012d00f3 	.word	0x012d00f3
 80077d0:	012d012d 	.word	0x012d012d
 80077d4:	012d00f5 	.word	0x012d00f5
 80077d8:	00f9012d 	.word	0x00f9012d
 80077dc:	012d012d 	.word	0x012d012d
 80077e0:	012d00fb 	.word	0x012d00fb
 80077e4:	012d012d 	.word	0x012d012d
 80077e8:	012d012d 	.word	0x012d012d
 80077ec:	012d012d 	.word	0x012d012d
 80077f0:	012d012d 	.word	0x012d012d
 80077f4:	00fd012d 	.word	0x00fd012d
 80077f8:	00ff012d 	.word	0x00ff012d
 80077fc:	01030101 	.word	0x01030101
 8007800:	012d012d 	.word	0x012d012d
 8007804:	012d0125 	.word	0x012d0125
 8007808:	012d012d 	.word	0x012d012d
 800780c:	012d012d 	.word	0x012d012d
 8007810:	012d012d 	.word	0x012d012d
 8007814:	0113012d 	.word	0x0113012d
 8007818:	01090105 	.word	0x01090105
 800781c:	010d010b 	.word	0x010d010b
 8007820:	012d010f 	.word	0x012d010f
 8007824:	01150111 	.word	0x01150111
 8007828:	00e90119 	.word	0x00e90119
 800782c:	012b00c1 	.word	0x012b00c1
 8007830:	00cf00b9 	.word	0x00cf00b9
 8007834:	009f00bb 	.word	0x009f00bb
 8007838:	012900a5 	.word	0x012900a5
 800783c:	012d00f7 	.word	0x012d00f7
 8007840:	00c30117 	.word	0x00c30117
 8007844:	011b011d 	.word	0x011b011d
 8007848:	012d012d 	.word	0x012d012d
 800784c:	012d012d 	.word	0x012d012d
 8007850:	00d3012d 	.word	0x00d3012d
 8007854:	012d012d 	.word	0x012d012d
 8007858:	00e5012d 	.word	0x00e5012d
 800785c:	011f0127 	.word	0x011f0127
 8007860:	01230121 	.word	0x01230121
 8007864:	4855      	ldr	r0, [pc, #340]	; (80079bc <_strerror_r+0x288>)
 8007866:	bd10      	pop	{r4, pc}
 8007868:	4855      	ldr	r0, [pc, #340]	; (80079c0 <_strerror_r+0x28c>)
 800786a:	e7fc      	b.n	8007866 <_strerror_r+0x132>
 800786c:	4855      	ldr	r0, [pc, #340]	; (80079c4 <_strerror_r+0x290>)
 800786e:	e7fa      	b.n	8007866 <_strerror_r+0x132>
 8007870:	4855      	ldr	r0, [pc, #340]	; (80079c8 <_strerror_r+0x294>)
 8007872:	e7f8      	b.n	8007866 <_strerror_r+0x132>
 8007874:	4855      	ldr	r0, [pc, #340]	; (80079cc <_strerror_r+0x298>)
 8007876:	e7f6      	b.n	8007866 <_strerror_r+0x132>
 8007878:	4855      	ldr	r0, [pc, #340]	; (80079d0 <_strerror_r+0x29c>)
 800787a:	e7f4      	b.n	8007866 <_strerror_r+0x132>
 800787c:	4855      	ldr	r0, [pc, #340]	; (80079d4 <_strerror_r+0x2a0>)
 800787e:	e7f2      	b.n	8007866 <_strerror_r+0x132>
 8007880:	4855      	ldr	r0, [pc, #340]	; (80079d8 <_strerror_r+0x2a4>)
 8007882:	e7f0      	b.n	8007866 <_strerror_r+0x132>
 8007884:	4855      	ldr	r0, [pc, #340]	; (80079dc <_strerror_r+0x2a8>)
 8007886:	e7ee      	b.n	8007866 <_strerror_r+0x132>
 8007888:	4855      	ldr	r0, [pc, #340]	; (80079e0 <_strerror_r+0x2ac>)
 800788a:	e7ec      	b.n	8007866 <_strerror_r+0x132>
 800788c:	4855      	ldr	r0, [pc, #340]	; (80079e4 <_strerror_r+0x2b0>)
 800788e:	e7ea      	b.n	8007866 <_strerror_r+0x132>
 8007890:	4855      	ldr	r0, [pc, #340]	; (80079e8 <_strerror_r+0x2b4>)
 8007892:	e7e8      	b.n	8007866 <_strerror_r+0x132>
 8007894:	4855      	ldr	r0, [pc, #340]	; (80079ec <_strerror_r+0x2b8>)
 8007896:	e7e6      	b.n	8007866 <_strerror_r+0x132>
 8007898:	4855      	ldr	r0, [pc, #340]	; (80079f0 <_strerror_r+0x2bc>)
 800789a:	e7e4      	b.n	8007866 <_strerror_r+0x132>
 800789c:	4855      	ldr	r0, [pc, #340]	; (80079f4 <_strerror_r+0x2c0>)
 800789e:	e7e2      	b.n	8007866 <_strerror_r+0x132>
 80078a0:	4855      	ldr	r0, [pc, #340]	; (80079f8 <_strerror_r+0x2c4>)
 80078a2:	e7e0      	b.n	8007866 <_strerror_r+0x132>
 80078a4:	4855      	ldr	r0, [pc, #340]	; (80079fc <_strerror_r+0x2c8>)
 80078a6:	e7de      	b.n	8007866 <_strerror_r+0x132>
 80078a8:	4855      	ldr	r0, [pc, #340]	; (8007a00 <_strerror_r+0x2cc>)
 80078aa:	e7dc      	b.n	8007866 <_strerror_r+0x132>
 80078ac:	4855      	ldr	r0, [pc, #340]	; (8007a04 <_strerror_r+0x2d0>)
 80078ae:	e7da      	b.n	8007866 <_strerror_r+0x132>
 80078b0:	4855      	ldr	r0, [pc, #340]	; (8007a08 <_strerror_r+0x2d4>)
 80078b2:	e7d8      	b.n	8007866 <_strerror_r+0x132>
 80078b4:	4855      	ldr	r0, [pc, #340]	; (8007a0c <_strerror_r+0x2d8>)
 80078b6:	e7d6      	b.n	8007866 <_strerror_r+0x132>
 80078b8:	4855      	ldr	r0, [pc, #340]	; (8007a10 <_strerror_r+0x2dc>)
 80078ba:	e7d4      	b.n	8007866 <_strerror_r+0x132>
 80078bc:	4855      	ldr	r0, [pc, #340]	; (8007a14 <_strerror_r+0x2e0>)
 80078be:	e7d2      	b.n	8007866 <_strerror_r+0x132>
 80078c0:	4855      	ldr	r0, [pc, #340]	; (8007a18 <_strerror_r+0x2e4>)
 80078c2:	e7d0      	b.n	8007866 <_strerror_r+0x132>
 80078c4:	4855      	ldr	r0, [pc, #340]	; (8007a1c <_strerror_r+0x2e8>)
 80078c6:	e7ce      	b.n	8007866 <_strerror_r+0x132>
 80078c8:	4855      	ldr	r0, [pc, #340]	; (8007a20 <_strerror_r+0x2ec>)
 80078ca:	e7cc      	b.n	8007866 <_strerror_r+0x132>
 80078cc:	4855      	ldr	r0, [pc, #340]	; (8007a24 <_strerror_r+0x2f0>)
 80078ce:	e7ca      	b.n	8007866 <_strerror_r+0x132>
 80078d0:	4855      	ldr	r0, [pc, #340]	; (8007a28 <_strerror_r+0x2f4>)
 80078d2:	e7c8      	b.n	8007866 <_strerror_r+0x132>
 80078d4:	4855      	ldr	r0, [pc, #340]	; (8007a2c <_strerror_r+0x2f8>)
 80078d6:	e7c6      	b.n	8007866 <_strerror_r+0x132>
 80078d8:	4855      	ldr	r0, [pc, #340]	; (8007a30 <_strerror_r+0x2fc>)
 80078da:	e7c4      	b.n	8007866 <_strerror_r+0x132>
 80078dc:	4855      	ldr	r0, [pc, #340]	; (8007a34 <_strerror_r+0x300>)
 80078de:	e7c2      	b.n	8007866 <_strerror_r+0x132>
 80078e0:	4855      	ldr	r0, [pc, #340]	; (8007a38 <_strerror_r+0x304>)
 80078e2:	e7c0      	b.n	8007866 <_strerror_r+0x132>
 80078e4:	4855      	ldr	r0, [pc, #340]	; (8007a3c <_strerror_r+0x308>)
 80078e6:	e7be      	b.n	8007866 <_strerror_r+0x132>
 80078e8:	4855      	ldr	r0, [pc, #340]	; (8007a40 <_strerror_r+0x30c>)
 80078ea:	e7bc      	b.n	8007866 <_strerror_r+0x132>
 80078ec:	4855      	ldr	r0, [pc, #340]	; (8007a44 <_strerror_r+0x310>)
 80078ee:	e7ba      	b.n	8007866 <_strerror_r+0x132>
 80078f0:	4855      	ldr	r0, [pc, #340]	; (8007a48 <_strerror_r+0x314>)
 80078f2:	e7b8      	b.n	8007866 <_strerror_r+0x132>
 80078f4:	4855      	ldr	r0, [pc, #340]	; (8007a4c <_strerror_r+0x318>)
 80078f6:	e7b6      	b.n	8007866 <_strerror_r+0x132>
 80078f8:	4855      	ldr	r0, [pc, #340]	; (8007a50 <_strerror_r+0x31c>)
 80078fa:	e7b4      	b.n	8007866 <_strerror_r+0x132>
 80078fc:	4855      	ldr	r0, [pc, #340]	; (8007a54 <_strerror_r+0x320>)
 80078fe:	e7b2      	b.n	8007866 <_strerror_r+0x132>
 8007900:	4855      	ldr	r0, [pc, #340]	; (8007a58 <_strerror_r+0x324>)
 8007902:	e7b0      	b.n	8007866 <_strerror_r+0x132>
 8007904:	4855      	ldr	r0, [pc, #340]	; (8007a5c <_strerror_r+0x328>)
 8007906:	e7ae      	b.n	8007866 <_strerror_r+0x132>
 8007908:	4855      	ldr	r0, [pc, #340]	; (8007a60 <_strerror_r+0x32c>)
 800790a:	e7ac      	b.n	8007866 <_strerror_r+0x132>
 800790c:	4855      	ldr	r0, [pc, #340]	; (8007a64 <_strerror_r+0x330>)
 800790e:	e7aa      	b.n	8007866 <_strerror_r+0x132>
 8007910:	4855      	ldr	r0, [pc, #340]	; (8007a68 <_strerror_r+0x334>)
 8007912:	e7a8      	b.n	8007866 <_strerror_r+0x132>
 8007914:	4855      	ldr	r0, [pc, #340]	; (8007a6c <_strerror_r+0x338>)
 8007916:	e7a6      	b.n	8007866 <_strerror_r+0x132>
 8007918:	4855      	ldr	r0, [pc, #340]	; (8007a70 <_strerror_r+0x33c>)
 800791a:	e7a4      	b.n	8007866 <_strerror_r+0x132>
 800791c:	4855      	ldr	r0, [pc, #340]	; (8007a74 <_strerror_r+0x340>)
 800791e:	e7a2      	b.n	8007866 <_strerror_r+0x132>
 8007920:	4855      	ldr	r0, [pc, #340]	; (8007a78 <_strerror_r+0x344>)
 8007922:	e7a0      	b.n	8007866 <_strerror_r+0x132>
 8007924:	4855      	ldr	r0, [pc, #340]	; (8007a7c <_strerror_r+0x348>)
 8007926:	e79e      	b.n	8007866 <_strerror_r+0x132>
 8007928:	4855      	ldr	r0, [pc, #340]	; (8007a80 <_strerror_r+0x34c>)
 800792a:	e79c      	b.n	8007866 <_strerror_r+0x132>
 800792c:	4855      	ldr	r0, [pc, #340]	; (8007a84 <_strerror_r+0x350>)
 800792e:	e79a      	b.n	8007866 <_strerror_r+0x132>
 8007930:	4855      	ldr	r0, [pc, #340]	; (8007a88 <_strerror_r+0x354>)
 8007932:	e798      	b.n	8007866 <_strerror_r+0x132>
 8007934:	4855      	ldr	r0, [pc, #340]	; (8007a8c <_strerror_r+0x358>)
 8007936:	e796      	b.n	8007866 <_strerror_r+0x132>
 8007938:	4855      	ldr	r0, [pc, #340]	; (8007a90 <_strerror_r+0x35c>)
 800793a:	e794      	b.n	8007866 <_strerror_r+0x132>
 800793c:	4855      	ldr	r0, [pc, #340]	; (8007a94 <_strerror_r+0x360>)
 800793e:	e792      	b.n	8007866 <_strerror_r+0x132>
 8007940:	4855      	ldr	r0, [pc, #340]	; (8007a98 <_strerror_r+0x364>)
 8007942:	e790      	b.n	8007866 <_strerror_r+0x132>
 8007944:	4855      	ldr	r0, [pc, #340]	; (8007a9c <_strerror_r+0x368>)
 8007946:	e78e      	b.n	8007866 <_strerror_r+0x132>
 8007948:	4855      	ldr	r0, [pc, #340]	; (8007aa0 <_strerror_r+0x36c>)
 800794a:	e78c      	b.n	8007866 <_strerror_r+0x132>
 800794c:	4855      	ldr	r0, [pc, #340]	; (8007aa4 <_strerror_r+0x370>)
 800794e:	e78a      	b.n	8007866 <_strerror_r+0x132>
 8007950:	4855      	ldr	r0, [pc, #340]	; (8007aa8 <_strerror_r+0x374>)
 8007952:	e788      	b.n	8007866 <_strerror_r+0x132>
 8007954:	4855      	ldr	r0, [pc, #340]	; (8007aac <_strerror_r+0x378>)
 8007956:	e786      	b.n	8007866 <_strerror_r+0x132>
 8007958:	4855      	ldr	r0, [pc, #340]	; (8007ab0 <_strerror_r+0x37c>)
 800795a:	e784      	b.n	8007866 <_strerror_r+0x132>
 800795c:	4855      	ldr	r0, [pc, #340]	; (8007ab4 <_strerror_r+0x380>)
 800795e:	e782      	b.n	8007866 <_strerror_r+0x132>
 8007960:	4855      	ldr	r0, [pc, #340]	; (8007ab8 <_strerror_r+0x384>)
 8007962:	e780      	b.n	8007866 <_strerror_r+0x132>
 8007964:	4855      	ldr	r0, [pc, #340]	; (8007abc <_strerror_r+0x388>)
 8007966:	e77e      	b.n	8007866 <_strerror_r+0x132>
 8007968:	4855      	ldr	r0, [pc, #340]	; (8007ac0 <_strerror_r+0x38c>)
 800796a:	e77c      	b.n	8007866 <_strerror_r+0x132>
 800796c:	4855      	ldr	r0, [pc, #340]	; (8007ac4 <_strerror_r+0x390>)
 800796e:	e77a      	b.n	8007866 <_strerror_r+0x132>
 8007970:	4855      	ldr	r0, [pc, #340]	; (8007ac8 <_strerror_r+0x394>)
 8007972:	e778      	b.n	8007866 <_strerror_r+0x132>
 8007974:	4855      	ldr	r0, [pc, #340]	; (8007acc <_strerror_r+0x398>)
 8007976:	e776      	b.n	8007866 <_strerror_r+0x132>
 8007978:	4855      	ldr	r0, [pc, #340]	; (8007ad0 <_strerror_r+0x39c>)
 800797a:	e774      	b.n	8007866 <_strerror_r+0x132>
 800797c:	4855      	ldr	r0, [pc, #340]	; (8007ad4 <_strerror_r+0x3a0>)
 800797e:	e772      	b.n	8007866 <_strerror_r+0x132>
 8007980:	4855      	ldr	r0, [pc, #340]	; (8007ad8 <_strerror_r+0x3a4>)
 8007982:	e770      	b.n	8007866 <_strerror_r+0x132>
 8007984:	4855      	ldr	r0, [pc, #340]	; (8007adc <_strerror_r+0x3a8>)
 8007986:	e76e      	b.n	8007866 <_strerror_r+0x132>
 8007988:	4855      	ldr	r0, [pc, #340]	; (8007ae0 <_strerror_r+0x3ac>)
 800798a:	e76c      	b.n	8007866 <_strerror_r+0x132>
 800798c:	4855      	ldr	r0, [pc, #340]	; (8007ae4 <_strerror_r+0x3b0>)
 800798e:	e76a      	b.n	8007866 <_strerror_r+0x132>
 8007990:	4855      	ldr	r0, [pc, #340]	; (8007ae8 <_strerror_r+0x3b4>)
 8007992:	e768      	b.n	8007866 <_strerror_r+0x132>
 8007994:	4855      	ldr	r0, [pc, #340]	; (8007aec <_strerror_r+0x3b8>)
 8007996:	e766      	b.n	8007866 <_strerror_r+0x132>
 8007998:	4855      	ldr	r0, [pc, #340]	; (8007af0 <_strerror_r+0x3bc>)
 800799a:	e764      	b.n	8007866 <_strerror_r+0x132>
 800799c:	4855      	ldr	r0, [pc, #340]	; (8007af4 <_strerror_r+0x3c0>)
 800799e:	e762      	b.n	8007866 <_strerror_r+0x132>
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	bf14      	ite	ne
 80079a4:	461a      	movne	r2, r3
 80079a6:	4622      	moveq	r2, r4
 80079a8:	f000 f8aa 	bl	8007b00 <_user_strerror>
 80079ac:	4b52      	ldr	r3, [pc, #328]	; (8007af8 <_strerror_r+0x3c4>)
 80079ae:	2800      	cmp	r0, #0
 80079b0:	bf08      	it	eq
 80079b2:	4618      	moveq	r0, r3
 80079b4:	e757      	b.n	8007866 <_strerror_r+0x132>
 80079b6:	4851      	ldr	r0, [pc, #324]	; (8007afc <_strerror_r+0x3c8>)
 80079b8:	e755      	b.n	8007866 <_strerror_r+0x132>
 80079ba:	bf00      	nop
 80079bc:	08007f59 	.word	0x08007f59
 80079c0:	08007f63 	.word	0x08007f63
 80079c4:	08007f7d 	.word	0x08007f7d
 80079c8:	08007f8d 	.word	0x08007f8d
 80079cc:	08007fa5 	.word	0x08007fa5
 80079d0:	08007faf 	.word	0x08007faf
 80079d4:	08007fc9 	.word	0x08007fc9
 80079d8:	08007fdb 	.word	0x08007fdb
 80079dc:	08007fed 	.word	0x08007fed
 80079e0:	08008006 	.word	0x08008006
 80079e4:	08008016 	.word	0x08008016
 80079e8:	08008022 	.word	0x08008022
 80079ec:	0800803f 	.word	0x0800803f
 80079f0:	08008051 	.word	0x08008051
 80079f4:	08008062 	.word	0x08008062
 80079f8:	08008074 	.word	0x08008074
 80079fc:	08008080 	.word	0x08008080
 8007a00:	08008098 	.word	0x08008098
 8007a04:	080080a4 	.word	0x080080a4
 8007a08:	080080b6 	.word	0x080080b6
 8007a0c:	080080c5 	.word	0x080080c5
 8007a10:	080080d5 	.word	0x080080d5
 8007a14:	080080e2 	.word	0x080080e2
 8007a18:	08008101 	.word	0x08008101
 8007a1c:	08008110 	.word	0x08008110
 8007a20:	08008121 	.word	0x08008121
 8007a24:	08008145 	.word	0x08008145
 8007a28:	08008163 	.word	0x08008163
 8007a2c:	08008181 	.word	0x08008181
 8007a30:	080081a1 	.word	0x080081a1
 8007a34:	080081b8 	.word	0x080081b8
 8007a38:	080081c7 	.word	0x080081c7
 8007a3c:	080081d6 	.word	0x080081d6
 8007a40:	080081ea 	.word	0x080081ea
 8007a44:	08008202 	.word	0x08008202
 8007a48:	08008210 	.word	0x08008210
 8007a4c:	0800821d 	.word	0x0800821d
 8007a50:	08008233 	.word	0x08008233
 8007a54:	08008242 	.word	0x08008242
 8007a58:	0800824e 	.word	0x0800824e
 8007a5c:	0800827d 	.word	0x0800827d
 8007a60:	0800828e 	.word	0x0800828e
 8007a64:	080082a9 	.word	0x080082a9
 8007a68:	080082bc 	.word	0x080082bc
 8007a6c:	080082d2 	.word	0x080082d2
 8007a70:	080082db 	.word	0x080082db
 8007a74:	080082f2 	.word	0x080082f2
 8007a78:	080082fa 	.word	0x080082fa
 8007a7c:	08008307 	.word	0x08008307
 8007a80:	0800831c 	.word	0x0800831c
 8007a84:	08008330 	.word	0x08008330
 8007a88:	08008348 	.word	0x08008348
 8007a8c:	08008357 	.word	0x08008357
 8007a90:	08008368 	.word	0x08008368
 8007a94:	0800837b 	.word	0x0800837b
 8007a98:	08008387 	.word	0x08008387
 8007a9c:	080083a0 	.word	0x080083a0
 8007aa0:	080083b4 	.word	0x080083b4
 8007aa4:	080083cf 	.word	0x080083cf
 8007aa8:	080083e7 	.word	0x080083e7
 8007aac:	08008401 	.word	0x08008401
 8007ab0:	08008409 	.word	0x08008409
 8007ab4:	08008439 	.word	0x08008439
 8007ab8:	08008458 	.word	0x08008458
 8007abc:	08008477 	.word	0x08008477
 8007ac0:	0800848e 	.word	0x0800848e
 8007ac4:	080084a1 	.word	0x080084a1
 8007ac8:	080084ba 	.word	0x080084ba
 8007acc:	080084d1 	.word	0x080084d1
 8007ad0:	080084e7 	.word	0x080084e7
 8007ad4:	08008508 	.word	0x08008508
 8007ad8:	08008520 	.word	0x08008520
 8007adc:	0800853c 	.word	0x0800853c
 8007ae0:	0800854f 	.word	0x0800854f
 8007ae4:	08008565 	.word	0x08008565
 8007ae8:	08008579 	.word	0x08008579
 8007aec:	0800859b 	.word	0x0800859b
 8007af0:	080085c1 	.word	0x080085c1
 8007af4:	080085d2 	.word	0x080085d2
 8007af8:	08007f58 	.word	0x08007f58
 8007afc:	080085e7 	.word	0x080085e7

08007b00 <_user_strerror>:
 8007b00:	2000      	movs	r0, #0
 8007b02:	4770      	bx	lr

08007b04 <_write_r>:
 8007b04:	b538      	push	{r3, r4, r5, lr}
 8007b06:	4604      	mov	r4, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	4d05      	ldr	r5, [pc, #20]	; (8007b24 <_write_r+0x20>)
 8007b10:	602a      	str	r2, [r5, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	f7f9 fbd7 	bl	80012c6 <_write>
 8007b18:	1c43      	adds	r3, r0, #1
 8007b1a:	d102      	bne.n	8007b22 <_write_r+0x1e>
 8007b1c:	682b      	ldr	r3, [r5, #0]
 8007b1e:	b103      	cbz	r3, 8007b22 <_write_r+0x1e>
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	bd38      	pop	{r3, r4, r5, pc}
 8007b24:	200025e0 	.word	0x200025e0

08007b28 <_close_r>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	4d05      	ldr	r5, [pc, #20]	; (8007b44 <_close_r+0x1c>)
 8007b2e:	4604      	mov	r4, r0
 8007b30:	4608      	mov	r0, r1
 8007b32:	602b      	str	r3, [r5, #0]
 8007b34:	f7f9 fbe3 	bl	80012fe <_close>
 8007b38:	1c43      	adds	r3, r0, #1
 8007b3a:	d102      	bne.n	8007b42 <_close_r+0x1a>
 8007b3c:	682b      	ldr	r3, [r5, #0]
 8007b3e:	b103      	cbz	r3, 8007b42 <_close_r+0x1a>
 8007b40:	6023      	str	r3, [r4, #0]
 8007b42:	bd38      	pop	{r3, r4, r5, pc}
 8007b44:	200025e0 	.word	0x200025e0

08007b48 <__sflush_r>:
 8007b48:	898a      	ldrh	r2, [r1, #12]
 8007b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b4e:	4605      	mov	r5, r0
 8007b50:	0710      	lsls	r0, r2, #28
 8007b52:	460c      	mov	r4, r1
 8007b54:	d458      	bmi.n	8007c08 <__sflush_r+0xc0>
 8007b56:	684b      	ldr	r3, [r1, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	dc05      	bgt.n	8007b68 <__sflush_r+0x20>
 8007b5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	dc02      	bgt.n	8007b68 <__sflush_r+0x20>
 8007b62:	2000      	movs	r0, #0
 8007b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b6a:	2e00      	cmp	r6, #0
 8007b6c:	d0f9      	beq.n	8007b62 <__sflush_r+0x1a>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b74:	682f      	ldr	r7, [r5, #0]
 8007b76:	602b      	str	r3, [r5, #0]
 8007b78:	d032      	beq.n	8007be0 <__sflush_r+0x98>
 8007b7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	075a      	lsls	r2, r3, #29
 8007b80:	d505      	bpl.n	8007b8e <__sflush_r+0x46>
 8007b82:	6863      	ldr	r3, [r4, #4]
 8007b84:	1ac0      	subs	r0, r0, r3
 8007b86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b88:	b10b      	cbz	r3, 8007b8e <__sflush_r+0x46>
 8007b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b8c:	1ac0      	subs	r0, r0, r3
 8007b8e:	2300      	movs	r3, #0
 8007b90:	4602      	mov	r2, r0
 8007b92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b94:	4628      	mov	r0, r5
 8007b96:	6a21      	ldr	r1, [r4, #32]
 8007b98:	47b0      	blx	r6
 8007b9a:	1c43      	adds	r3, r0, #1
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	d106      	bne.n	8007bae <__sflush_r+0x66>
 8007ba0:	6829      	ldr	r1, [r5, #0]
 8007ba2:	291d      	cmp	r1, #29
 8007ba4:	d82c      	bhi.n	8007c00 <__sflush_r+0xb8>
 8007ba6:	4a2a      	ldr	r2, [pc, #168]	; (8007c50 <__sflush_r+0x108>)
 8007ba8:	40ca      	lsrs	r2, r1
 8007baa:	07d6      	lsls	r6, r2, #31
 8007bac:	d528      	bpl.n	8007c00 <__sflush_r+0xb8>
 8007bae:	2200      	movs	r2, #0
 8007bb0:	6062      	str	r2, [r4, #4]
 8007bb2:	6922      	ldr	r2, [r4, #16]
 8007bb4:	04d9      	lsls	r1, r3, #19
 8007bb6:	6022      	str	r2, [r4, #0]
 8007bb8:	d504      	bpl.n	8007bc4 <__sflush_r+0x7c>
 8007bba:	1c42      	adds	r2, r0, #1
 8007bbc:	d101      	bne.n	8007bc2 <__sflush_r+0x7a>
 8007bbe:	682b      	ldr	r3, [r5, #0]
 8007bc0:	b903      	cbnz	r3, 8007bc4 <__sflush_r+0x7c>
 8007bc2:	6560      	str	r0, [r4, #84]	; 0x54
 8007bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bc6:	602f      	str	r7, [r5, #0]
 8007bc8:	2900      	cmp	r1, #0
 8007bca:	d0ca      	beq.n	8007b62 <__sflush_r+0x1a>
 8007bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bd0:	4299      	cmp	r1, r3
 8007bd2:	d002      	beq.n	8007bda <__sflush_r+0x92>
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f000 f8d5 	bl	8007d84 <_free_r>
 8007bda:	2000      	movs	r0, #0
 8007bdc:	6360      	str	r0, [r4, #52]	; 0x34
 8007bde:	e7c1      	b.n	8007b64 <__sflush_r+0x1c>
 8007be0:	6a21      	ldr	r1, [r4, #32]
 8007be2:	2301      	movs	r3, #1
 8007be4:	4628      	mov	r0, r5
 8007be6:	47b0      	blx	r6
 8007be8:	1c41      	adds	r1, r0, #1
 8007bea:	d1c7      	bne.n	8007b7c <__sflush_r+0x34>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d0c4      	beq.n	8007b7c <__sflush_r+0x34>
 8007bf2:	2b1d      	cmp	r3, #29
 8007bf4:	d001      	beq.n	8007bfa <__sflush_r+0xb2>
 8007bf6:	2b16      	cmp	r3, #22
 8007bf8:	d101      	bne.n	8007bfe <__sflush_r+0xb6>
 8007bfa:	602f      	str	r7, [r5, #0]
 8007bfc:	e7b1      	b.n	8007b62 <__sflush_r+0x1a>
 8007bfe:	89a3      	ldrh	r3, [r4, #12]
 8007c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c04:	81a3      	strh	r3, [r4, #12]
 8007c06:	e7ad      	b.n	8007b64 <__sflush_r+0x1c>
 8007c08:	690f      	ldr	r7, [r1, #16]
 8007c0a:	2f00      	cmp	r7, #0
 8007c0c:	d0a9      	beq.n	8007b62 <__sflush_r+0x1a>
 8007c0e:	0793      	lsls	r3, r2, #30
 8007c10:	bf18      	it	ne
 8007c12:	2300      	movne	r3, #0
 8007c14:	680e      	ldr	r6, [r1, #0]
 8007c16:	bf08      	it	eq
 8007c18:	694b      	ldreq	r3, [r1, #20]
 8007c1a:	eba6 0807 	sub.w	r8, r6, r7
 8007c1e:	600f      	str	r7, [r1, #0]
 8007c20:	608b      	str	r3, [r1, #8]
 8007c22:	f1b8 0f00 	cmp.w	r8, #0
 8007c26:	dd9c      	ble.n	8007b62 <__sflush_r+0x1a>
 8007c28:	4643      	mov	r3, r8
 8007c2a:	463a      	mov	r2, r7
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	6a21      	ldr	r1, [r4, #32]
 8007c30:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c32:	47b0      	blx	r6
 8007c34:	2800      	cmp	r0, #0
 8007c36:	dc06      	bgt.n	8007c46 <__sflush_r+0xfe>
 8007c38:	89a3      	ldrh	r3, [r4, #12]
 8007c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c42:	81a3      	strh	r3, [r4, #12]
 8007c44:	e78e      	b.n	8007b64 <__sflush_r+0x1c>
 8007c46:	4407      	add	r7, r0
 8007c48:	eba8 0800 	sub.w	r8, r8, r0
 8007c4c:	e7e9      	b.n	8007c22 <__sflush_r+0xda>
 8007c4e:	bf00      	nop
 8007c50:	20400001 	.word	0x20400001

08007c54 <_fflush_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	690b      	ldr	r3, [r1, #16]
 8007c58:	4605      	mov	r5, r0
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	b913      	cbnz	r3, 8007c64 <_fflush_r+0x10>
 8007c5e:	2500      	movs	r5, #0
 8007c60:	4628      	mov	r0, r5
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	b118      	cbz	r0, 8007c6e <_fflush_r+0x1a>
 8007c66:	6983      	ldr	r3, [r0, #24]
 8007c68:	b90b      	cbnz	r3, 8007c6e <_fflush_r+0x1a>
 8007c6a:	f7ff facd 	bl	8007208 <__sinit>
 8007c6e:	4b14      	ldr	r3, [pc, #80]	; (8007cc0 <_fflush_r+0x6c>)
 8007c70:	429c      	cmp	r4, r3
 8007c72:	d11b      	bne.n	8007cac <_fflush_r+0x58>
 8007c74:	686c      	ldr	r4, [r5, #4]
 8007c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0ef      	beq.n	8007c5e <_fflush_r+0xa>
 8007c7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c80:	07d0      	lsls	r0, r2, #31
 8007c82:	d404      	bmi.n	8007c8e <_fflush_r+0x3a>
 8007c84:	0599      	lsls	r1, r3, #22
 8007c86:	d402      	bmi.n	8007c8e <_fflush_r+0x3a>
 8007c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c8a:	f7ff fb80 	bl	800738e <__retarget_lock_acquire_recursive>
 8007c8e:	4628      	mov	r0, r5
 8007c90:	4621      	mov	r1, r4
 8007c92:	f7ff ff59 	bl	8007b48 <__sflush_r>
 8007c96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c98:	4605      	mov	r5, r0
 8007c9a:	07da      	lsls	r2, r3, #31
 8007c9c:	d4e0      	bmi.n	8007c60 <_fflush_r+0xc>
 8007c9e:	89a3      	ldrh	r3, [r4, #12]
 8007ca0:	059b      	lsls	r3, r3, #22
 8007ca2:	d4dd      	bmi.n	8007c60 <_fflush_r+0xc>
 8007ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ca6:	f7ff fb73 	bl	8007390 <__retarget_lock_release_recursive>
 8007caa:	e7d9      	b.n	8007c60 <_fflush_r+0xc>
 8007cac:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <_fflush_r+0x70>)
 8007cae:	429c      	cmp	r4, r3
 8007cb0:	d101      	bne.n	8007cb6 <_fflush_r+0x62>
 8007cb2:	68ac      	ldr	r4, [r5, #8]
 8007cb4:	e7df      	b.n	8007c76 <_fflush_r+0x22>
 8007cb6:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <_fflush_r+0x74>)
 8007cb8:	429c      	cmp	r4, r3
 8007cba:	bf08      	it	eq
 8007cbc:	68ec      	ldreq	r4, [r5, #12]
 8007cbe:	e7da      	b.n	8007c76 <_fflush_r+0x22>
 8007cc0:	08007f10 	.word	0x08007f10
 8007cc4:	08007f30 	.word	0x08007f30
 8007cc8:	08007ef0 	.word	0x08007ef0

08007ccc <fileno>:
 8007ccc:	b570      	push	{r4, r5, r6, lr}
 8007cce:	4e1a      	ldr	r6, [pc, #104]	; (8007d38 <fileno+0x6c>)
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	6835      	ldr	r5, [r6, #0]
 8007cd4:	b125      	cbz	r5, 8007ce0 <fileno+0x14>
 8007cd6:	69ab      	ldr	r3, [r5, #24]
 8007cd8:	b913      	cbnz	r3, 8007ce0 <fileno+0x14>
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f7ff fa94 	bl	8007208 <__sinit>
 8007ce0:	4b16      	ldr	r3, [pc, #88]	; (8007d3c <fileno+0x70>)
 8007ce2:	429c      	cmp	r4, r3
 8007ce4:	d118      	bne.n	8007d18 <fileno+0x4c>
 8007ce6:	686c      	ldr	r4, [r5, #4]
 8007ce8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cea:	07d8      	lsls	r0, r3, #31
 8007cec:	d405      	bmi.n	8007cfa <fileno+0x2e>
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	0599      	lsls	r1, r3, #22
 8007cf2:	d402      	bmi.n	8007cfa <fileno+0x2e>
 8007cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cf6:	f7ff fb4a 	bl	800738e <__retarget_lock_acquire_recursive>
 8007cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cfe:	b1ab      	cbz	r3, 8007d2c <fileno+0x60>
 8007d00:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8007d04:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d06:	07d2      	lsls	r2, r2, #31
 8007d08:	d404      	bmi.n	8007d14 <fileno+0x48>
 8007d0a:	059b      	lsls	r3, r3, #22
 8007d0c:	d402      	bmi.n	8007d14 <fileno+0x48>
 8007d0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d10:	f7ff fb3e 	bl	8007390 <__retarget_lock_release_recursive>
 8007d14:	4628      	mov	r0, r5
 8007d16:	bd70      	pop	{r4, r5, r6, pc}
 8007d18:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <fileno+0x74>)
 8007d1a:	429c      	cmp	r4, r3
 8007d1c:	d101      	bne.n	8007d22 <fileno+0x56>
 8007d1e:	68ac      	ldr	r4, [r5, #8]
 8007d20:	e7e2      	b.n	8007ce8 <fileno+0x1c>
 8007d22:	4b08      	ldr	r3, [pc, #32]	; (8007d44 <fileno+0x78>)
 8007d24:	429c      	cmp	r4, r3
 8007d26:	bf08      	it	eq
 8007d28:	68ec      	ldreq	r4, [r5, #12]
 8007d2a:	e7dd      	b.n	8007ce8 <fileno+0x1c>
 8007d2c:	2109      	movs	r1, #9
 8007d2e:	6832      	ldr	r2, [r6, #0]
 8007d30:	f04f 35ff 	mov.w	r5, #4294967295
 8007d34:	6011      	str	r1, [r2, #0]
 8007d36:	e7e5      	b.n	8007d04 <fileno+0x38>
 8007d38:	20000014 	.word	0x20000014
 8007d3c:	08007f10 	.word	0x08007f10
 8007d40:	08007f30 	.word	0x08007f30
 8007d44:	08007ef0 	.word	0x08007ef0

08007d48 <_lseek_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	4608      	mov	r0, r1
 8007d4e:	4611      	mov	r1, r2
 8007d50:	2200      	movs	r2, #0
 8007d52:	4d05      	ldr	r5, [pc, #20]	; (8007d68 <_lseek_r+0x20>)
 8007d54:	602a      	str	r2, [r5, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	f7f9 fadc 	bl	8001314 <_lseek>
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	d102      	bne.n	8007d66 <_lseek_r+0x1e>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	b103      	cbz	r3, 8007d66 <_lseek_r+0x1e>
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	bd38      	pop	{r3, r4, r5, pc}
 8007d68:	200025e0 	.word	0x200025e0

08007d6c <__malloc_lock>:
 8007d6c:	4801      	ldr	r0, [pc, #4]	; (8007d74 <__malloc_lock+0x8>)
 8007d6e:	f7ff bb0e 	b.w	800738e <__retarget_lock_acquire_recursive>
 8007d72:	bf00      	nop
 8007d74:	200025d8 	.word	0x200025d8

08007d78 <__malloc_unlock>:
 8007d78:	4801      	ldr	r0, [pc, #4]	; (8007d80 <__malloc_unlock+0x8>)
 8007d7a:	f7ff bb09 	b.w	8007390 <__retarget_lock_release_recursive>
 8007d7e:	bf00      	nop
 8007d80:	200025d8 	.word	0x200025d8

08007d84 <_free_r>:
 8007d84:	b538      	push	{r3, r4, r5, lr}
 8007d86:	4605      	mov	r5, r0
 8007d88:	2900      	cmp	r1, #0
 8007d8a:	d043      	beq.n	8007e14 <_free_r+0x90>
 8007d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d90:	1f0c      	subs	r4, r1, #4
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	bfb8      	it	lt
 8007d96:	18e4      	addlt	r4, r4, r3
 8007d98:	f7ff ffe8 	bl	8007d6c <__malloc_lock>
 8007d9c:	4a1e      	ldr	r2, [pc, #120]	; (8007e18 <_free_r+0x94>)
 8007d9e:	6813      	ldr	r3, [r2, #0]
 8007da0:	4610      	mov	r0, r2
 8007da2:	b933      	cbnz	r3, 8007db2 <_free_r+0x2e>
 8007da4:	6063      	str	r3, [r4, #4]
 8007da6:	6014      	str	r4, [r2, #0]
 8007da8:	4628      	mov	r0, r5
 8007daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dae:	f7ff bfe3 	b.w	8007d78 <__malloc_unlock>
 8007db2:	42a3      	cmp	r3, r4
 8007db4:	d90a      	bls.n	8007dcc <_free_r+0x48>
 8007db6:	6821      	ldr	r1, [r4, #0]
 8007db8:	1862      	adds	r2, r4, r1
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	bf01      	itttt	eq
 8007dbe:	681a      	ldreq	r2, [r3, #0]
 8007dc0:	685b      	ldreq	r3, [r3, #4]
 8007dc2:	1852      	addeq	r2, r2, r1
 8007dc4:	6022      	streq	r2, [r4, #0]
 8007dc6:	6063      	str	r3, [r4, #4]
 8007dc8:	6004      	str	r4, [r0, #0]
 8007dca:	e7ed      	b.n	8007da8 <_free_r+0x24>
 8007dcc:	461a      	mov	r2, r3
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	b10b      	cbz	r3, 8007dd6 <_free_r+0x52>
 8007dd2:	42a3      	cmp	r3, r4
 8007dd4:	d9fa      	bls.n	8007dcc <_free_r+0x48>
 8007dd6:	6811      	ldr	r1, [r2, #0]
 8007dd8:	1850      	adds	r0, r2, r1
 8007dda:	42a0      	cmp	r0, r4
 8007ddc:	d10b      	bne.n	8007df6 <_free_r+0x72>
 8007dde:	6820      	ldr	r0, [r4, #0]
 8007de0:	4401      	add	r1, r0
 8007de2:	1850      	adds	r0, r2, r1
 8007de4:	4283      	cmp	r3, r0
 8007de6:	6011      	str	r1, [r2, #0]
 8007de8:	d1de      	bne.n	8007da8 <_free_r+0x24>
 8007dea:	6818      	ldr	r0, [r3, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	4401      	add	r1, r0
 8007df0:	6011      	str	r1, [r2, #0]
 8007df2:	6053      	str	r3, [r2, #4]
 8007df4:	e7d8      	b.n	8007da8 <_free_r+0x24>
 8007df6:	d902      	bls.n	8007dfe <_free_r+0x7a>
 8007df8:	230c      	movs	r3, #12
 8007dfa:	602b      	str	r3, [r5, #0]
 8007dfc:	e7d4      	b.n	8007da8 <_free_r+0x24>
 8007dfe:	6820      	ldr	r0, [r4, #0]
 8007e00:	1821      	adds	r1, r4, r0
 8007e02:	428b      	cmp	r3, r1
 8007e04:	bf01      	itttt	eq
 8007e06:	6819      	ldreq	r1, [r3, #0]
 8007e08:	685b      	ldreq	r3, [r3, #4]
 8007e0a:	1809      	addeq	r1, r1, r0
 8007e0c:	6021      	streq	r1, [r4, #0]
 8007e0e:	6063      	str	r3, [r4, #4]
 8007e10:	6054      	str	r4, [r2, #4]
 8007e12:	e7c9      	b.n	8007da8 <_free_r+0x24>
 8007e14:	bd38      	pop	{r3, r4, r5, pc}
 8007e16:	bf00      	nop
 8007e18:	200024a4 	.word	0x200024a4

08007e1c <_read_r>:
 8007e1c:	b538      	push	{r3, r4, r5, lr}
 8007e1e:	4604      	mov	r4, r0
 8007e20:	4608      	mov	r0, r1
 8007e22:	4611      	mov	r1, r2
 8007e24:	2200      	movs	r2, #0
 8007e26:	4d05      	ldr	r5, [pc, #20]	; (8007e3c <_read_r+0x20>)
 8007e28:	602a      	str	r2, [r5, #0]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	f7f9 fa2e 	bl	800128c <_read>
 8007e30:	1c43      	adds	r3, r0, #1
 8007e32:	d102      	bne.n	8007e3a <_read_r+0x1e>
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	b103      	cbz	r3, 8007e3a <_read_r+0x1e>
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	200025e0 	.word	0x200025e0

08007e40 <_init>:
 8007e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e42:	bf00      	nop
 8007e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e46:	bc08      	pop	{r3}
 8007e48:	469e      	mov	lr, r3
 8007e4a:	4770      	bx	lr

08007e4c <_fini>:
 8007e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4e:	bf00      	nop
 8007e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e52:	bc08      	pop	{r3}
 8007e54:	469e      	mov	lr, r3
 8007e56:	4770      	bx	lr
